// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaiachain/kaia/kaiax/gasless (interfaces: GaslessModule)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/kaiachain/kaia/blockchain/types"
	builder "github.com/kaiachain/kaia/kaiax/builder"
)

// MockGaslessModule is a mock of GaslessModule interface.
type MockGaslessModule struct {
	ctrl     *gomock.Controller
	recorder *MockGaslessModuleMockRecorder
}

// MockGaslessModuleMockRecorder is the mock recorder for MockGaslessModule.
type MockGaslessModuleMockRecorder struct {
	mock *MockGaslessModule
}

// NewMockGaslessModule creates a new mock instance.
func NewMockGaslessModule(ctrl *gomock.Controller) *MockGaslessModule {
	mock := &MockGaslessModule{ctrl: ctrl}
	mock.recorder = &MockGaslessModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGaslessModule) EXPECT() *MockGaslessModuleMockRecorder {
	return m.recorder
}

// ExtractTxBundles mocks base method.
func (m *MockGaslessModule) ExtractTxBundles(arg0 []*types.Transaction, arg1 []*builder.Bundle) []*builder.Bundle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractTxBundles", arg0, arg1)
	ret0, _ := ret[0].([]*builder.Bundle)
	return ret0
}

// ExtractTxBundles indicates an expected call of ExtractTxBundles.
func (mr *MockGaslessModuleMockRecorder) ExtractTxBundles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractTxBundles", reflect.TypeOf((*MockGaslessModule)(nil).ExtractTxBundles), arg0, arg1)
}

// GetLendTxGenerator mocks base method.
func (m *MockGaslessModule) GetLendTxGenerator(arg0, arg1 *types.Transaction) builder.TxGenerator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLendTxGenerator", arg0, arg1)
	ret0, _ := ret[0].(builder.TxGenerator)
	return ret0
}

// GetLendTxGenerator indicates an expected call of GetLendTxGenerator.
func (mr *MockGaslessModuleMockRecorder) GetLendTxGenerator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLendTxGenerator", reflect.TypeOf((*MockGaslessModule)(nil).GetLendTxGenerator), arg0, arg1)
}

// IsApproveTx mocks base method.
func (m *MockGaslessModule) IsApproveTx(arg0 *types.Transaction) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsApproveTx", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsApproveTx indicates an expected call of IsApproveTx.
func (mr *MockGaslessModuleMockRecorder) IsApproveTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsApproveTx", reflect.TypeOf((*MockGaslessModule)(nil).IsApproveTx), arg0)
}

// IsExecutable mocks base method.
func (m *MockGaslessModule) IsExecutable(arg0, arg1 *types.Transaction) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExecutable", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExecutable indicates an expected call of IsExecutable.
func (mr *MockGaslessModuleMockRecorder) IsExecutable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExecutable", reflect.TypeOf((*MockGaslessModule)(nil).IsExecutable), arg0, arg1)
}

// IsSwapTx mocks base method.
func (m *MockGaslessModule) IsSwapTx(arg0 *types.Transaction) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSwapTx", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSwapTx indicates an expected call of IsSwapTx.
func (mr *MockGaslessModuleMockRecorder) IsSwapTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSwapTx", reflect.TypeOf((*MockGaslessModule)(nil).IsSwapTx), arg0)
}

// Start mocks base method.
func (m *MockGaslessModule) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockGaslessModuleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockGaslessModule)(nil).Start))
}

// Stop mocks base method.
func (m *MockGaslessModule) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockGaslessModuleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockGaslessModule)(nil).Stop))
}
