// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaiachain/kaia/kaiax/gasless (interfaces: GaslessModule)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/kaiachain/kaia/blockchain/types"
	common "github.com/kaiachain/kaia/common"
	builder "github.com/kaiachain/kaia/work/builder"
)

// MockGaslessModule is a mock of GaslessModule interface.
type MockGaslessModule struct {
	ctrl     *gomock.Controller
	recorder *MockGaslessModuleMockRecorder
}

// MockGaslessModuleMockRecorder is the mock recorder for MockGaslessModule.
type MockGaslessModuleMockRecorder struct {
	mock *MockGaslessModule
}

// NewMockGaslessModule creates a new mock instance.
func NewMockGaslessModule(ctrl *gomock.Controller) *MockGaslessModule {
	mock := &MockGaslessModule{ctrl: ctrl}
	mock.recorder = &MockGaslessModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGaslessModule) EXPECT() *MockGaslessModuleMockRecorder {
	return m.recorder
}

// ExtractTxBundles mocks base method.
func (m *MockGaslessModule) ExtractTxBundles(arg0 []*types.Transaction, arg1 []*builder.Bundle) []*builder.Bundle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractTxBundles", arg0, arg1)
	ret0, _ := ret[0].([]*builder.Bundle)
	return ret0
}

// ExtractTxBundles indicates an expected call of ExtractTxBundles.
func (mr *MockGaslessModuleMockRecorder) ExtractTxBundles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractTxBundles", reflect.TypeOf((*MockGaslessModule)(nil).ExtractTxBundles), arg0, arg1)
}

// FilterTxs mocks base method.
func (m *MockGaslessModule) FilterTxs(arg0 map[common.Address]types.Transactions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FilterTxs", arg0)
}

// FilterTxs indicates an expected call of FilterTxs.
func (mr *MockGaslessModuleMockRecorder) FilterTxs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTxs", reflect.TypeOf((*MockGaslessModule)(nil).FilterTxs), arg0)
}

// GetCheckBalance mocks base method.
func (m *MockGaslessModule) GetCheckBalance() func(*types.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckBalance")
	ret0, _ := ret[0].(func(*types.Transaction) error)
	return ret0
}

// GetCheckBalance indicates an expected call of GetCheckBalance.
func (mr *MockGaslessModuleMockRecorder) GetCheckBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckBalance", reflect.TypeOf((*MockGaslessModule)(nil).GetCheckBalance))
}

// GetMaxBundleTxsInPending mocks base method.
func (m *MockGaslessModule) GetMaxBundleTxsInPending() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxBundleTxsInPending")
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetMaxBundleTxsInPending indicates an expected call of GetMaxBundleTxsInPending.
func (mr *MockGaslessModuleMockRecorder) GetMaxBundleTxsInPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxBundleTxsInPending", reflect.TypeOf((*MockGaslessModule)(nil).GetMaxBundleTxsInPending))
}

// GetMaxBundleTxsInQueue mocks base method.
func (m *MockGaslessModule) GetMaxBundleTxsInQueue() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxBundleTxsInQueue")
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetMaxBundleTxsInQueue indicates an expected call of GetMaxBundleTxsInQueue.
func (mr *MockGaslessModuleMockRecorder) GetMaxBundleTxsInQueue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxBundleTxsInQueue", reflect.TypeOf((*MockGaslessModule)(nil).GetMaxBundleTxsInQueue))
}

// IsBundleTx mocks base method.
func (m *MockGaslessModule) IsBundleTx(arg0 *types.Transaction) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBundleTx", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBundleTx indicates an expected call of IsBundleTx.
func (mr *MockGaslessModuleMockRecorder) IsBundleTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBundleTx", reflect.TypeOf((*MockGaslessModule)(nil).IsBundleTx), arg0)
}

// IsModuleTx mocks base method.
func (m *MockGaslessModule) IsModuleTx(arg0 *types.Transaction) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsModuleTx", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsModuleTx indicates an expected call of IsModuleTx.
func (mr *MockGaslessModuleMockRecorder) IsModuleTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsModuleTx", reflect.TypeOf((*MockGaslessModule)(nil).IsModuleTx), arg0)
}

// IsReady mocks base method.
func (m *MockGaslessModule) IsReady(arg0 map[uint64]*types.Transaction, arg1 uint64, arg2 types.Transactions) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockGaslessModuleMockRecorder) IsReady(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockGaslessModule)(nil).IsReady), arg0, arg1, arg2)
}

// PostInsertBlock mocks base method.
func (m *MockGaslessModule) PostInsertBlock(arg0 *types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostInsertBlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostInsertBlock indicates an expected call of PostInsertBlock.
func (mr *MockGaslessModuleMockRecorder) PostInsertBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostInsertBlock", reflect.TypeOf((*MockGaslessModule)(nil).PostInsertBlock), arg0)
}

// PostReset mocks base method.
func (m *MockGaslessModule) PostReset(arg0, arg1 *types.Header, arg2, arg3 map[common.Address]types.Transactions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostReset", arg0, arg1, arg2, arg3)
}

// PostReset indicates an expected call of PostReset.
func (mr *MockGaslessModuleMockRecorder) PostReset(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostReset", reflect.TypeOf((*MockGaslessModule)(nil).PostReset), arg0, arg1, arg2, arg3)
}

// PreAddTx mocks base method.
func (m *MockGaslessModule) PreAddTx(arg0 *types.Transaction, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreAddTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreAddTx indicates an expected call of PreAddTx.
func (mr *MockGaslessModuleMockRecorder) PreAddTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreAddTx", reflect.TypeOf((*MockGaslessModule)(nil).PreAddTx), arg0, arg1)
}

// PreReset mocks base method.
func (m *MockGaslessModule) PreReset(arg0, arg1 *types.Header) []common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreReset", arg0, arg1)
	ret0, _ := ret[0].([]common.Hash)
	return ret0
}

// PreReset indicates an expected call of PreReset.
func (mr *MockGaslessModuleMockRecorder) PreReset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreReset", reflect.TypeOf((*MockGaslessModule)(nil).PreReset), arg0, arg1)
}

// Start mocks base method.
func (m *MockGaslessModule) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockGaslessModuleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockGaslessModule)(nil).Start))
}

// Stop mocks base method.
func (m *MockGaslessModule) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockGaslessModuleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockGaslessModule)(nil).Stop))
}
