// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaiachain/kaia/kaiax/valset (interfaces: ValsetModule)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/kaiachain/kaia/blockchain/types"
	common "github.com/kaiachain/kaia/common"
	rpc "github.com/kaiachain/kaia/networks/rpc"
)

// MockValsetModule is a mock of ValsetModule interface.
type MockValsetModule struct {
	ctrl     *gomock.Controller
	recorder *MockValsetModuleMockRecorder
}

// MockValsetModuleMockRecorder is the mock recorder for MockValsetModule.
type MockValsetModuleMockRecorder struct {
	mock *MockValsetModule
}

// NewMockValsetModule creates a new mock instance.
func NewMockValsetModule(ctrl *gomock.Controller) *MockValsetModule {
	mock := &MockValsetModule{ctrl: ctrl}
	mock.recorder = &MockValsetModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValsetModule) EXPECT() *MockValsetModuleMockRecorder {
	return m.recorder
}

// APIs mocks base method.
func (m *MockValsetModule) APIs() []rpc.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIs")
	ret0, _ := ret[0].([]rpc.API)
	return ret0
}

// APIs indicates an expected call of APIs.
func (mr *MockValsetModuleMockRecorder) APIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIs", reflect.TypeOf((*MockValsetModule)(nil).APIs))
}

// GetCommittee mocks base method.
func (m *MockValsetModule) GetCommittee(arg0, arg1 uint64) ([]common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittee", arg0, arg1)
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommittee indicates an expected call of GetCommittee.
func (mr *MockValsetModuleMockRecorder) GetCommittee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittee", reflect.TypeOf((*MockValsetModule)(nil).GetCommittee), arg0, arg1)
}

// GetCouncil mocks base method.
func (m *MockValsetModule) GetCouncil(arg0 uint64) ([]common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCouncil", arg0)
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCouncil indicates an expected call of GetCouncil.
func (mr *MockValsetModuleMockRecorder) GetCouncil(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCouncil", reflect.TypeOf((*MockValsetModule)(nil).GetCouncil), arg0)
}

// GetDemotedValidators mocks base method.
func (m *MockValsetModule) GetDemotedValidators(arg0 uint64) ([]common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDemotedValidators", arg0)
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDemotedValidators indicates an expected call of GetDemotedValidators.
func (mr *MockValsetModuleMockRecorder) GetDemotedValidators(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDemotedValidators", reflect.TypeOf((*MockValsetModule)(nil).GetDemotedValidators), arg0)
}

// GetProposer mocks base method.
func (m *MockValsetModule) GetProposer(arg0, arg1 uint64) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposer", arg0, arg1)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposer indicates an expected call of GetProposer.
func (mr *MockValsetModuleMockRecorder) GetProposer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposer", reflect.TypeOf((*MockValsetModule)(nil).GetProposer), arg0, arg1)
}

// PostInsertBlock mocks base method.
func (m *MockValsetModule) PostInsertBlock(arg0 *types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostInsertBlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostInsertBlock indicates an expected call of PostInsertBlock.
func (mr *MockValsetModuleMockRecorder) PostInsertBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostInsertBlock", reflect.TypeOf((*MockValsetModule)(nil).PostInsertBlock), arg0)
}

// RewindDelete mocks base method.
func (m *MockValsetModule) RewindDelete(arg0 common.Hash, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RewindDelete", arg0, arg1)
}

// RewindDelete indicates an expected call of RewindDelete.
func (mr *MockValsetModuleMockRecorder) RewindDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewindDelete", reflect.TypeOf((*MockValsetModule)(nil).RewindDelete), arg0, arg1)
}

// RewindTo mocks base method.
func (m *MockValsetModule) RewindTo(arg0 *types.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RewindTo", arg0)
}

// RewindTo indicates an expected call of RewindTo.
func (mr *MockValsetModuleMockRecorder) RewindTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewindTo", reflect.TypeOf((*MockValsetModule)(nil).RewindTo), arg0)
}

// Start mocks base method.
func (m *MockValsetModule) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockValsetModuleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockValsetModule)(nil).Start))
}

// Stop mocks base method.
func (m *MockValsetModule) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockValsetModuleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockValsetModule)(nil).Stop))
}
