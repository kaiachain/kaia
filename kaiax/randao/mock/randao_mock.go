// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaiachain/kaia/kaiax/randao (interfaces: RandaoModule)

// Package mocks is a generated GoMock package.
package mocks

import (
	big "math/big"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/kaiachain/kaia/blockchain/types"
	common "github.com/kaiachain/kaia/common"
	types0 "github.com/kaiachain/kaia/crypto/bls/types"
	rpc "github.com/kaiachain/kaia/networks/rpc"
)

// MockRandaoModule is a mock of RandaoModule interface.
type MockRandaoModule struct {
	ctrl     *gomock.Controller
	recorder *MockRandaoModuleMockRecorder
}

// MockRandaoModuleMockRecorder is the mock recorder for MockRandaoModule.
type MockRandaoModuleMockRecorder struct {
	mock *MockRandaoModule
}

// NewMockRandaoModule creates a new mock instance.
func NewMockRandaoModule(ctrl *gomock.Controller) *MockRandaoModule {
	mock := &MockRandaoModule{ctrl: ctrl}
	mock.recorder = &MockRandaoModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandaoModule) EXPECT() *MockRandaoModuleMockRecorder {
	return m.recorder
}

// APIs mocks base method.
func (m *MockRandaoModule) APIs() []rpc.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIs")
	ret0, _ := ret[0].([]rpc.API)
	return ret0
}

// APIs indicates an expected call of APIs.
func (mr *MockRandaoModuleMockRecorder) APIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIs", reflect.TypeOf((*MockRandaoModule)(nil).APIs))
}

// GetBlsPubkey mocks base method.
func (m *MockRandaoModule) GetBlsPubkey(arg0 common.Address, arg1 *big.Int) (types0.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlsPubkey", arg0, arg1)
	ret0, _ := ret[0].(types0.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlsPubkey indicates an expected call of GetBlsPubkey.
func (mr *MockRandaoModuleMockRecorder) GetBlsPubkey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlsPubkey", reflect.TypeOf((*MockRandaoModule)(nil).GetBlsPubkey), arg0, arg1)
}

// PostInsertBlock mocks base method.
func (m *MockRandaoModule) PostInsertBlock(arg0 *types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostInsertBlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostInsertBlock indicates an expected call of PostInsertBlock.
func (mr *MockRandaoModuleMockRecorder) PostInsertBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostInsertBlock", reflect.TypeOf((*MockRandaoModule)(nil).PostInsertBlock), arg0)
}

// RewindDelete mocks base method.
func (m *MockRandaoModule) RewindDelete(arg0 common.Hash, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RewindDelete", arg0, arg1)
}

// RewindDelete indicates an expected call of RewindDelete.
func (mr *MockRandaoModuleMockRecorder) RewindDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewindDelete", reflect.TypeOf((*MockRandaoModule)(nil).RewindDelete), arg0, arg1)
}

// RewindTo mocks base method.
func (m *MockRandaoModule) RewindTo(arg0 *types.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RewindTo", arg0)
}

// RewindTo indicates an expected call of RewindTo.
func (mr *MockRandaoModuleMockRecorder) RewindTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewindTo", reflect.TypeOf((*MockRandaoModule)(nil).RewindTo), arg0)
}

// Start mocks base method.
func (m *MockRandaoModule) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRandaoModuleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRandaoModule)(nil).Start))
}

// Stop mocks base method.
func (m *MockRandaoModule) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockRandaoModuleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRandaoModule)(nil).Stop))
}
