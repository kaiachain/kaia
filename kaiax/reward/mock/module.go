// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaiachain/kaia/kaiax/reward (interfaces: RewardModule)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	state "github.com/kaiachain/kaia/blockchain/state"
	types "github.com/kaiachain/kaia/blockchain/types"
	vm "github.com/kaiachain/kaia/blockchain/vm"
	reward "github.com/kaiachain/kaia/kaiax/reward"
	rpc "github.com/kaiachain/kaia/networks/rpc"
)

// MockRewardModule is a mock of RewardModule interface.
type MockRewardModule struct {
	ctrl     *gomock.Controller
	recorder *MockRewardModuleMockRecorder
}

// MockRewardModuleMockRecorder is the mock recorder for MockRewardModule.
type MockRewardModuleMockRecorder struct {
	mock *MockRewardModule
}

// NewMockRewardModule creates a new mock instance.
func NewMockRewardModule(ctrl *gomock.Controller) *MockRewardModule {
	mock := &MockRewardModule{ctrl: ctrl}
	mock.recorder = &MockRewardModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRewardModule) EXPECT() *MockRewardModuleMockRecorder {
	return m.recorder
}

// APIs mocks base method.
func (m *MockRewardModule) APIs() []rpc.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIs")
	ret0, _ := ret[0].([]rpc.API)
	return ret0
}

// APIs indicates an expected call of APIs.
func (mr *MockRewardModuleMockRecorder) APIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIs", reflect.TypeOf((*MockRewardModule)(nil).APIs))
}

// FinalizeHeader mocks base method.
func (m *MockRewardModule) FinalizeHeader(arg0 *types.Header, arg1 *state.StateDB, arg2 []*types.Transaction, arg3 []*types.Receipt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeHeader", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeHeader indicates an expected call of FinalizeHeader.
func (mr *MockRewardModuleMockRecorder) FinalizeHeader(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeHeader", reflect.TypeOf((*MockRewardModule)(nil).FinalizeHeader), arg0, arg1, arg2, arg3)
}

// GetBlockReward mocks base method.
func (m *MockRewardModule) GetBlockReward(arg0 uint64) (*reward.RewardSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockReward", arg0)
	ret0, _ := ret[0].(*reward.RewardSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockReward indicates an expected call of GetBlockReward.
func (mr *MockRewardModuleMockRecorder) GetBlockReward(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockReward", reflect.TypeOf((*MockRewardModule)(nil).GetBlockReward), arg0)
}

// GetDeferredReward mocks base method.
func (m *MockRewardModule) GetDeferredReward(arg0 *types.Header, arg1 []*types.Transaction, arg2 []*types.Receipt) (*reward.RewardSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeferredReward", arg0, arg1, arg2)
	ret0, _ := ret[0].(*reward.RewardSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeferredReward indicates an expected call of GetDeferredReward.
func (mr *MockRewardModuleMockRecorder) GetDeferredReward(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeferredReward", reflect.TypeOf((*MockRewardModule)(nil).GetDeferredReward), arg0, arg1, arg2)
}

// GetRewardSummary mocks base method.
func (m *MockRewardModule) GetRewardSummary(arg0 uint64) (*reward.RewardSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardSummary", arg0)
	ret0, _ := ret[0].(*reward.RewardSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRewardSummary indicates an expected call of GetRewardSummary.
func (mr *MockRewardModuleMockRecorder) GetRewardSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardSummary", reflect.TypeOf((*MockRewardModule)(nil).GetRewardSummary), arg0)
}

// PostRunTx mocks base method.
func (m *MockRewardModule) PostRunTx(arg0 *vm.EVM, arg1 *types.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostRunTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostRunTx indicates an expected call of PostRunTx.
func (mr *MockRewardModuleMockRecorder) PostRunTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRunTx", reflect.TypeOf((*MockRewardModule)(nil).PostRunTx), arg0, arg1)
}

// PreRunTx mocks base method.
func (m *MockRewardModule) PreRunTx(arg0 *vm.EVM, arg1 *types.Transaction) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreRunTx", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreRunTx indicates an expected call of PreRunTx.
func (mr *MockRewardModuleMockRecorder) PreRunTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreRunTx", reflect.TypeOf((*MockRewardModule)(nil).PreRunTx), arg0, arg1)
}

// PrepareHeader mocks base method.
func (m *MockRewardModule) PrepareHeader(arg0 *types.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareHeader indicates an expected call of PrepareHeader.
func (mr *MockRewardModuleMockRecorder) PrepareHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareHeader", reflect.TypeOf((*MockRewardModule)(nil).PrepareHeader), arg0)
}

// Start mocks base method.
func (m *MockRewardModule) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRewardModuleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRewardModule)(nil).Start))
}

// Stop mocks base method.
func (m *MockRewardModule) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockRewardModuleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRewardModule)(nil).Stop))
}

// VerifyHeader mocks base method.
func (m *MockRewardModule) VerifyHeader(arg0 *types.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyHeader indicates an expected call of VerifyHeader.
func (mr *MockRewardModuleMockRecorder) VerifyHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyHeader", reflect.TypeOf((*MockRewardModule)(nil).VerifyHeader), arg0)
}
