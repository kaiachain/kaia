// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaiachain/kaia/v2/kaiax (interfaces: TxPoolForCaller)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	state "github.com/kaiachain/kaia/v2/blockchain/state"
	types "github.com/kaiachain/kaia/v2/blockchain/types"
	common "github.com/kaiachain/kaia/v2/common"
)

// MockTxPoolForCaller is a mock of TxPoolForCaller interface.
type MockTxPoolForCaller struct {
	ctrl     *gomock.Controller
	recorder *MockTxPoolForCallerMockRecorder
}

// MockTxPoolForCallerMockRecorder is the mock recorder for MockTxPoolForCaller.
type MockTxPoolForCallerMockRecorder struct {
	mock *MockTxPoolForCaller
}

// NewMockTxPoolForCaller creates a new mock instance.
func NewMockTxPoolForCaller(ctrl *gomock.Controller) *MockTxPoolForCaller {
	mock := &MockTxPoolForCaller{ctrl: ctrl}
	mock.recorder = &MockTxPoolForCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxPoolForCaller) EXPECT() *MockTxPoolForCallerMockRecorder {
	return m.recorder
}

// GetCurrentState mocks base method.
func (m *MockTxPoolForCaller) GetCurrentState() *state.StateDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentState")
	ret0, _ := ret[0].(*state.StateDB)
	return ret0
}

// GetCurrentState indicates an expected call of GetCurrentState.
func (mr *MockTxPoolForCallerMockRecorder) GetCurrentState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentState", reflect.TypeOf((*MockTxPoolForCaller)(nil).GetCurrentState))
}

// PendingUnlocked mocks base method.
func (m *MockTxPoolForCaller) PendingUnlocked() (map[common.Address]types.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingUnlocked")
	ret0, _ := ret[0].(map[common.Address]types.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingUnlocked indicates an expected call of PendingUnlocked.
func (mr *MockTxPoolForCallerMockRecorder) PendingUnlocked() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingUnlocked", reflect.TypeOf((*MockTxPoolForCaller)(nil).PendingUnlocked))
}
