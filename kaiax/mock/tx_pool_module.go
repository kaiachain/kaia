// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaiachain/kaia/v2/kaiax (interfaces: TxPoolModule)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/kaiachain/kaia/v2/blockchain/types"
)

// MockTxPoolModule is a mock of TxPoolModule interface.
type MockTxPoolModule struct {
	ctrl     *gomock.Controller
	recorder *MockTxPoolModuleMockRecorder
}

// MockTxPoolModuleMockRecorder is the mock recorder for MockTxPoolModule.
type MockTxPoolModuleMockRecorder struct {
	mock *MockTxPoolModule
}

// NewMockTxPoolModule creates a new mock instance.
func NewMockTxPoolModule(ctrl *gomock.Controller) *MockTxPoolModule {
	mock := &MockTxPoolModule{ctrl: ctrl}
	mock.recorder = &MockTxPoolModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxPoolModule) EXPECT() *MockTxPoolModuleMockRecorder {
	return m.recorder
}

// GetCheckBalance mocks base method.
func (m *MockTxPoolModule) GetCheckBalance() func(*types.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckBalance")
	ret0, _ := ret[0].(func(*types.Transaction) error)
	return ret0
}

// GetCheckBalance indicates an expected call of GetCheckBalance.
func (mr *MockTxPoolModuleMockRecorder) GetCheckBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckBalance", reflect.TypeOf((*MockTxPoolModule)(nil).GetCheckBalance))
}

// IsModuleTx mocks base method.
func (m *MockTxPoolModule) IsModuleTx(arg0 *types.Transaction) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsModuleTx", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsModuleTx indicates an expected call of IsModuleTx.
func (mr *MockTxPoolModuleMockRecorder) IsModuleTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsModuleTx", reflect.TypeOf((*MockTxPoolModule)(nil).IsModuleTx), arg0)
}

// IsReady mocks base method.
func (m *MockTxPoolModule) IsReady(arg0 map[uint64]*types.Transaction, arg1 uint64, arg2 types.Transactions) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockTxPoolModuleMockRecorder) IsReady(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockTxPoolModule)(nil).IsReady), arg0, arg1, arg2)
}

// PostReset mocks base method.
func (m *MockTxPoolModule) PostReset(arg0, arg1 *types.Header) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostReset", arg0, arg1)
}

// PostReset indicates an expected call of PostReset.
func (mr *MockTxPoolModuleMockRecorder) PostReset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostReset", reflect.TypeOf((*MockTxPoolModule)(nil).PostReset), arg0, arg1)
}

// PreAddTx mocks base method.
func (m *MockTxPoolModule) PreAddTx(arg0 *types.Transaction, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreAddTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreAddTx indicates an expected call of PreAddTx.
func (mr *MockTxPoolModuleMockRecorder) PreAddTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreAddTx", reflect.TypeOf((*MockTxPoolModule)(nil).PreAddTx), arg0, arg1)
}

// PreReset mocks base method.
func (m *MockTxPoolModule) PreReset(arg0, arg1 *types.Header) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PreReset", arg0, arg1)
}

// PreReset indicates an expected call of PreReset.
func (mr *MockTxPoolModuleMockRecorder) PreReset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreReset", reflect.TypeOf((*MockTxPoolModule)(nil).PreReset), arg0, arg1)
}
