// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaiachain/kaia/kaiax (interfaces: TxBundlingModule)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/kaiachain/kaia/blockchain/types"
	builder "github.com/kaiachain/kaia/work/builder"
)

// MockTxBundlingModule is a mock of TxBundlingModule interface.
type MockTxBundlingModule struct {
	ctrl     *gomock.Controller
	recorder *MockTxBundlingModuleMockRecorder
}

// MockTxBundlingModuleMockRecorder is the mock recorder for MockTxBundlingModule.
type MockTxBundlingModuleMockRecorder struct {
	mock *MockTxBundlingModule
}

// NewMockTxBundlingModule creates a new mock instance.
func NewMockTxBundlingModule(ctrl *gomock.Controller) *MockTxBundlingModule {
	mock := &MockTxBundlingModule{ctrl: ctrl}
	mock.recorder = &MockTxBundlingModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxBundlingModule) EXPECT() *MockTxBundlingModuleMockRecorder {
	return m.recorder
}

// ExtractTxBundles mocks base method.
func (m *MockTxBundlingModule) ExtractTxBundles(arg0 []*types.Transaction, arg1 []*builder.Bundle) []*builder.Bundle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractTxBundles", arg0, arg1)
	ret0, _ := ret[0].([]*builder.Bundle)
	return ret0
}

// ExtractTxBundles indicates an expected call of ExtractTxBundles.
func (mr *MockTxBundlingModuleMockRecorder) ExtractTxBundles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractTxBundles", reflect.TypeOf((*MockTxBundlingModule)(nil).ExtractTxBundles), arg0, arg1)
}

// GetMaxBundleTxsInPending mocks base method.
func (m *MockTxBundlingModule) GetMaxBundleTxsInPending() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxBundleTxsInPending")
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetMaxBundleTxsInPending indicates an expected call of GetMaxBundleTxsInPending.
func (mr *MockTxBundlingModuleMockRecorder) GetMaxBundleTxsInPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxBundleTxsInPending", reflect.TypeOf((*MockTxBundlingModule)(nil).GetMaxBundleTxsInPending))
}

// GetMaxBundleTxsInQueue mocks base method.
func (m *MockTxBundlingModule) GetMaxBundleTxsInQueue() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxBundleTxsInQueue")
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetMaxBundleTxsInQueue indicates an expected call of GetMaxBundleTxsInQueue.
func (mr *MockTxBundlingModuleMockRecorder) GetMaxBundleTxsInQueue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxBundleTxsInQueue", reflect.TypeOf((*MockTxBundlingModule)(nil).GetMaxBundleTxsInQueue))
}

// IsBundleTx mocks base method.
func (m *MockTxBundlingModule) IsBundleTx(arg0 *types.Transaction) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBundleTx", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBundleTx indicates an expected call of IsBundleTx.
func (mr *MockTxBundlingModuleMockRecorder) IsBundleTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBundleTx", reflect.TypeOf((*MockTxBundlingModule)(nil).IsBundleTx), arg0)
}
