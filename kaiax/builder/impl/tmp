diff --git a/kaiax/builder/impl/init.go b/kaiax/builder/impl/init.go
index e3a2fbd96..fd2390a2c 100644
--- a/kaiax/builder/impl/init.go
+++ b/kaiax/builder/impl/init.go
@@ -17,11 +17,7 @@
 package impl
 
 import (
-	"time"
-
 	"github.com/kaiachain/kaia/api"
-	"github.com/kaiachain/kaia/blockchain/types"
-	"github.com/kaiachain/kaia/common"
 	"github.com/kaiachain/kaia/kaiax/builder"
 	"github.com/kaiachain/kaia/log"
 )
@@ -35,117 +31,6 @@ type InitOpts struct {
 	Backend api.Backend
 }
 
-type knownTxs map[common.Hash]*knownTx
-
-func (k knownTxs) add(tx *types.Transaction, status int) {
-	if tx == nil {
-		return
-	}
-
-	if ktx, ok := k.get(tx.Hash()); ok {
-		ktx.status = status
-	} else {
-		k[tx.Hash()] = &knownTx{
-			tx:     tx,
-			time:   time.Now(),
-			status: status,
-		}
-	}
-	updateMetrics(&k)
-}
-
-func (k knownTxs) addKnownTx(knownTx *knownTx) {
-	if ktx, ok := k.get(knownTx.tx.Hash()); ok {
-		ktx.status = knownTx.status
-	} else {
-		k[knownTx.tx.Hash()] = knownTx
-	}
-	updateMetrics(&k)
-}
-
-func (k knownTxs) get(hash common.Hash) (*knownTx, bool) {
-	tx, ok := k[hash]
-	return tx, ok
-}
-
-func (k knownTxs) has(hash common.Hash) bool {
-	_, ok := k[hash]
-	return ok
-}
-
-func (k knownTxs) delete(hash common.Hash) {
-	delete(k, hash)
-	updateMetrics(&k)
-}
-
-func (k knownTxs) numPending() int {
-	num := 0
-	for _, knownTx := range k {
-		if knownTx.status == TxStatusPending {
-			num++
-		}
-	}
-	return num
-}
-
-func (k knownTxs) numExecutable() int {
-	num := 0
-	for _, knownTx := range k {
-		if knownTx.status == TxStatusPending && !knownTx.tx.IsMarkedUnexecutable() {
-			num++
-		}
-	}
-	return num
-}
-
-func (k knownTxs) numQueue() int {
-	num := 0
-	for _, knownTx := range k {
-		if knownTx.status == TxStatusQueue {
-			num++
-		}
-	}
-	return num
-}
-
-func (k knownTxs) getTimeOfOldestKnownTx() int64 {
-	var oldestTime float64 = 0
-	for _, knownTx := range k {
-		if oldestTime < knownTx.elapsedTime().Seconds() {
-			oldestTime = knownTx.elapsedTime().Seconds()
-		}
-	}
-	return int64(oldestTime)
-}
-
-func (k knownTxs) Copy() *knownTxs {
-	newMap := &knownTxs{}
-	for _, knownTx := range k {
-		newMap.addKnownTx(knownTx)
-	}
-	return newMap
-}
-
-const (
-	TxStatusQueue   = iota // exists in txpool.queue
-	TxStatusPending        // exists in txpool.pending
-	TxStatusDemoted        // not exist in txpool.pending and txpool.queue
-)
-
-// A metadata of a known bundle tx that has been submitted to txpool during the last window (KnownTxTimeout).
-type knownTx struct {
-	tx   *types.Transaction
-	time time.Time
-
-	// The location in txpool, of this knownTx.
-	// Refreshed at pool.reset()-PostReset(), pool.addTx()-PreAddTx(), pool.promoteExecutables()-IsReady()
-	status int
-}
-
-func (t *knownTx) elapsedTime() time.Duration {
-	return time.Since(t.time)
-}
-
 type BuilderModule struct {
 	InitOpts
 }
diff --git a/kaiax/builder/impl/tx_pool_wrapping.go b/kaiax/builder/impl/tx_pool_wrapping.go
index 98a4b1ed5..cb97df843 100644
--- a/kaiax/builder/impl/tx_pool_wrapping.go
+++ b/kaiax/builder/impl/tx_pool_wrapping.go
@@ -60,7 +60,7 @@ func (b *BuilderWrappingModule) PreAddTx(tx *types.Transaction, local bool) erro
 	b.mu.RLock()
 	defer b.mu.RUnlock()
 
-	if knownTx, ok := b.knownTxs.get(tx.Hash()); ok && knownTx.elapsedTime() < KnownTxTimeout {
+	if knownTx, ok := b.knownTxs.get(tx.Hash()); ok && knownTx.elapsedFirstAddedTime() < KnownTxTimeout {
 		return ErrUnableToAddKnownBundleTx
 	}
 
@@ -157,15 +157,15 @@ func (b *BuilderWrappingModule) PreReset(oldHead, newHead *types.Header) []commo
 
 	for hash, knownTx := range *b.knownTxs {
 		// remove pending timed out tx from tx pool
-		if knownTx.status == TxStatusPending && knownTx.elapsedTime() >= PendingTimeout {
+		if knownTx.status == TxStatusPending && knownTx.elapsedFirstPendingTime() >= PendingTimeout {
 			drops = append(drops, hash)
 		}
 		// remove queue timed out tx from tx pool
-		if knownTx.status == TxStatusQueue && knownTx.elapsedTime() >= QueueTimeout {
+		if knownTx.status == TxStatusQueue && knownTx.elapsedFirstAddedTime() >= QueueTimeout {
 			drops = append(drops, hash)
 		}
 		// remove known timed out tx from knownTxs
-		if knownTx.elapsedTime() >= KnownTxTimeout {
+		if knownTx.elapsedFirstAddedTime() >= KnownTxTimeout {
 			b.knownTxs.delete(hash)
 		}
 	}
