// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaiachain/kaia/kaiax/compress (interfaces: CompressModule)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/kaiachain/kaia/blockchain/types"
	common "github.com/kaiachain/kaia/common"
)

// MockCompressModule is a mock of CompressModule interface.
type MockCompressModule struct {
	ctrl     *gomock.Controller
	recorder *MockCompressModuleMockRecorder
}

// MockCompressModuleMockRecorder is the mock recorder for MockCompressModule.
type MockCompressModuleMockRecorder struct {
	mock *MockCompressModule
}

// NewMockCompressModule creates a new mock instance.
func NewMockCompressModule(ctrl *gomock.Controller) *MockCompressModule {
	mock := &MockCompressModule{ctrl: ctrl}
	mock.recorder = &MockCompressModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompressModule) EXPECT() *MockCompressModuleMockRecorder {
	return m.recorder
}

// FindFromCompressedBody mocks base method.
func (m *MockCompressModule) FindFromCompressedBody(arg0 uint64, arg1 common.Hash) ([]byte, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFromCompressedBody", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindFromCompressedBody indicates an expected call of FindFromCompressedBody.
func (mr *MockCompressModuleMockRecorder) FindFromCompressedBody(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFromCompressedBody", reflect.TypeOf((*MockCompressModule)(nil).FindFromCompressedBody), arg0, arg1)
}

// FindFromCompressedHeader mocks base method.
func (m *MockCompressModule) FindFromCompressedHeader(arg0 uint64, arg1 common.Hash) ([]byte, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFromCompressedHeader", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindFromCompressedHeader indicates an expected call of FindFromCompressedHeader.
func (mr *MockCompressModuleMockRecorder) FindFromCompressedHeader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFromCompressedHeader", reflect.TypeOf((*MockCompressModule)(nil).FindFromCompressedHeader), arg0, arg1)
}

// FindFromCompressedReceipts mocks base method.
func (m *MockCompressModule) FindFromCompressedReceipts(arg0 uint64, arg1 common.Hash) ([]byte, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFromCompressedReceipts", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindFromCompressedReceipts indicates an expected call of FindFromCompressedReceipts.
func (mr *MockCompressModuleMockRecorder) FindFromCompressedReceipts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFromCompressedReceipts", reflect.TypeOf((*MockCompressModule)(nil).FindFromCompressedReceipts), arg0, arg1)
}

// RewindDelete mocks base method.
func (m *MockCompressModule) RewindDelete(arg0 common.Hash, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RewindDelete", arg0, arg1)
}

// RewindDelete indicates an expected call of RewindDelete.
func (mr *MockCompressModuleMockRecorder) RewindDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewindDelete", reflect.TypeOf((*MockCompressModule)(nil).RewindDelete), arg0, arg1)
}

// RewindTo mocks base method.
func (m *MockCompressModule) RewindTo(arg0 *types.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RewindTo", arg0)
}

// RewindTo indicates an expected call of RewindTo.
func (mr *MockCompressModuleMockRecorder) RewindTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewindTo", reflect.TypeOf((*MockCompressModule)(nil).RewindTo), arg0)
}

// Start mocks base method.
func (m *MockCompressModule) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockCompressModuleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCompressModule)(nil).Start))
}

// Stop mocks base method.
func (m *MockCompressModule) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockCompressModuleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCompressModule)(nil).Stop))
}
