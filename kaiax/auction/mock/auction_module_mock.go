// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaiachain/kaia/kaiax/auction (interfaces: AuctionModule)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/kaiachain/kaia/blockchain/types"
	common "github.com/kaiachain/kaia/common"
	event "github.com/kaiachain/kaia/event"
	auction "github.com/kaiachain/kaia/kaiax/auction"
	rpc "github.com/kaiachain/kaia/networks/rpc"
	builder "github.com/kaiachain/kaia/work/builder"
)

// MockAuctionModule is a mock of AuctionModule interface.
type MockAuctionModule struct {
	ctrl     *gomock.Controller
	recorder *MockAuctionModuleMockRecorder
}

// MockAuctionModuleMockRecorder is the mock recorder for MockAuctionModule.
type MockAuctionModuleMockRecorder struct {
	mock *MockAuctionModule
}

// NewMockAuctionModule creates a new mock instance.
func NewMockAuctionModule(ctrl *gomock.Controller) *MockAuctionModule {
	mock := &MockAuctionModule{ctrl: ctrl}
	mock.recorder = &MockAuctionModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuctionModule) EXPECT() *MockAuctionModuleMockRecorder {
	return m.recorder
}

// APIs mocks base method.
func (m *MockAuctionModule) APIs() []rpc.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIs")
	ret0, _ := ret[0].([]rpc.API)
	return ret0
}

// APIs indicates an expected call of APIs.
func (mr *MockAuctionModuleMockRecorder) APIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIs", reflect.TypeOf((*MockAuctionModule)(nil).APIs))
}

// ExtractTxBundles mocks base method.
func (m *MockAuctionModule) ExtractTxBundles(arg0 []*types.Transaction, arg1 []*builder.Bundle) []*builder.Bundle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractTxBundles", arg0, arg1)
	ret0, _ := ret[0].([]*builder.Bundle)
	return ret0
}

// ExtractTxBundles indicates an expected call of ExtractTxBundles.
func (mr *MockAuctionModuleMockRecorder) ExtractTxBundles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractTxBundles", reflect.TypeOf((*MockAuctionModule)(nil).ExtractTxBundles), arg0, arg1)
}

// FilterTxs mocks base method.
func (m *MockAuctionModule) FilterTxs(arg0 map[common.Address]types.Transactions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FilterTxs", arg0)
}

// FilterTxs indicates an expected call of FilterTxs.
func (mr *MockAuctionModuleMockRecorder) FilterTxs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTxs", reflect.TypeOf((*MockAuctionModule)(nil).FilterTxs), arg0)
}

// GetMaxBundleTxsInPending mocks base method.
func (m *MockAuctionModule) GetMaxBundleTxsInPending() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxBundleTxsInPending")
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetMaxBundleTxsInPending indicates an expected call of GetMaxBundleTxsInPending.
func (mr *MockAuctionModuleMockRecorder) GetMaxBundleTxsInPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxBundleTxsInPending", reflect.TypeOf((*MockAuctionModule)(nil).GetMaxBundleTxsInPending))
}

// GetMaxBundleTxsInQueue mocks base method.
func (m *MockAuctionModule) GetMaxBundleTxsInQueue() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxBundleTxsInQueue")
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetMaxBundleTxsInQueue indicates an expected call of GetMaxBundleTxsInQueue.
func (mr *MockAuctionModuleMockRecorder) GetMaxBundleTxsInQueue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxBundleTxsInQueue", reflect.TypeOf((*MockAuctionModule)(nil).GetMaxBundleTxsInQueue))
}

// HandleBid mocks base method.
func (m *MockAuctionModule) HandleBid(arg0 *auction.Bid) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleBid", arg0)
}

// HandleBid indicates an expected call of HandleBid.
func (mr *MockAuctionModuleMockRecorder) HandleBid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleBid", reflect.TypeOf((*MockAuctionModule)(nil).HandleBid), arg0)
}

// IsBundleTx mocks base method.
func (m *MockAuctionModule) IsBundleTx(arg0 *types.Transaction) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBundleTx", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBundleTx indicates an expected call of IsBundleTx.
func (mr *MockAuctionModuleMockRecorder) IsBundleTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBundleTx", reflect.TypeOf((*MockAuctionModule)(nil).IsBundleTx), arg0)
}

// PostInsertBlock mocks base method.
func (m *MockAuctionModule) PostInsertBlock(arg0 *types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostInsertBlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostInsertBlock indicates an expected call of PostInsertBlock.
func (mr *MockAuctionModuleMockRecorder) PostInsertBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostInsertBlock", reflect.TypeOf((*MockAuctionModule)(nil).PostInsertBlock), arg0)
}

// RewindDelete mocks base method.
func (m *MockAuctionModule) RewindDelete(arg0 common.Hash, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RewindDelete", arg0, arg1)
}

// RewindDelete indicates an expected call of RewindDelete.
func (mr *MockAuctionModuleMockRecorder) RewindDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewindDelete", reflect.TypeOf((*MockAuctionModule)(nil).RewindDelete), arg0, arg1)
}

// RewindTo mocks base method.
func (m *MockAuctionModule) RewindTo(arg0 *types.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RewindTo", arg0)
}

// RewindTo indicates an expected call of RewindTo.
func (mr *MockAuctionModuleMockRecorder) RewindTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewindTo", reflect.TypeOf((*MockAuctionModule)(nil).RewindTo), arg0)
}

// Start mocks base method.
func (m *MockAuctionModule) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockAuctionModuleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAuctionModule)(nil).Start))
}

// Stop mocks base method.
func (m *MockAuctionModule) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockAuctionModuleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockAuctionModule)(nil).Stop))
}

// SubscribeNewBid mocks base method.
func (m *MockAuctionModule) SubscribeNewBid(arg0 chan<- *auction.Bid) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeNewBid", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeNewBid indicates an expected call of SubscribeNewBid.
func (mr *MockAuctionModuleMockRecorder) SubscribeNewBid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeNewBid", reflect.TypeOf((*MockAuctionModule)(nil).SubscribeNewBid), arg0)
}
