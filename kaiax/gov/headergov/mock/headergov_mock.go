// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaiachain/kaia/kaiax/gov/headergov (interfaces: HeaderGovModule)

// Package mock_headergov is a generated GoMock package.
package mock_headergov

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	state "github.com/kaiachain/kaia/blockchain/state"
	types "github.com/kaiachain/kaia/blockchain/types"
	common "github.com/kaiachain/kaia/common"
	gov "github.com/kaiachain/kaia/kaiax/gov"
	rpc "github.com/kaiachain/kaia/networks/rpc"
)

// MockHeaderGovModule is a mock of HeaderGovModule interface.
type MockHeaderGovModule struct {
	ctrl     *gomock.Controller
	recorder *MockHeaderGovModuleMockRecorder
}

// MockHeaderGovModuleMockRecorder is the mock recorder for MockHeaderGovModule.
type MockHeaderGovModuleMockRecorder struct {
	mock *MockHeaderGovModule
}

// NewMockHeaderGovModule creates a new mock instance.
func NewMockHeaderGovModule(ctrl *gomock.Controller) *MockHeaderGovModule {
	mock := &MockHeaderGovModule{ctrl: ctrl}
	mock.recorder = &MockHeaderGovModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeaderGovModule) EXPECT() *MockHeaderGovModuleMockRecorder {
	return m.recorder
}

// APIs mocks base method.
func (m *MockHeaderGovModule) APIs() []rpc.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIs")
	ret0, _ := ret[0].([]rpc.API)
	return ret0
}

// APIs indicates an expected call of APIs.
func (mr *MockHeaderGovModuleMockRecorder) APIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIs", reflect.TypeOf((*MockHeaderGovModule)(nil).APIs))
}

// EffectiveParamSet mocks base method.
func (m *MockHeaderGovModule) EffectiveParamSet(arg0 uint64) gov.ParamSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EffectiveParamSet", arg0)
	ret0, _ := ret[0].(gov.ParamSet)
	return ret0
}

// EffectiveParamSet indicates an expected call of EffectiveParamSet.
func (mr *MockHeaderGovModuleMockRecorder) EffectiveParamSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EffectiveParamSet", reflect.TypeOf((*MockHeaderGovModule)(nil).EffectiveParamSet), arg0)
}

// EffectiveParamsPartial mocks base method.
func (m *MockHeaderGovModule) EffectiveParamsPartial(arg0 uint64) gov.PartialParamSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EffectiveParamsPartial", arg0)
	ret0, _ := ret[0].(gov.PartialParamSet)
	return ret0
}

// EffectiveParamsPartial indicates an expected call of EffectiveParamsPartial.
func (mr *MockHeaderGovModuleMockRecorder) EffectiveParamsPartial(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EffectiveParamsPartial", reflect.TypeOf((*MockHeaderGovModule)(nil).EffectiveParamsPartial), arg0)
}

// FinalizeHeader mocks base method.
func (m *MockHeaderGovModule) FinalizeHeader(arg0 *types.Header, arg1 *state.StateDB, arg2 []*types.Transaction, arg3 []*types.Receipt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeHeader", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeHeader indicates an expected call of FinalizeHeader.
func (mr *MockHeaderGovModuleMockRecorder) FinalizeHeader(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeHeader", reflect.TypeOf((*MockHeaderGovModule)(nil).FinalizeHeader), arg0, arg1, arg2, arg3)
}

// NodeAddress mocks base method.
func (m *MockHeaderGovModule) NodeAddress() common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeAddress")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// NodeAddress indicates an expected call of NodeAddress.
func (mr *MockHeaderGovModuleMockRecorder) NodeAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeAddress", reflect.TypeOf((*MockHeaderGovModule)(nil).NodeAddress))
}

// PostInsertBlock mocks base method.
func (m *MockHeaderGovModule) PostInsertBlock(arg0 *types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostInsertBlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostInsertBlock indicates an expected call of PostInsertBlock.
func (mr *MockHeaderGovModuleMockRecorder) PostInsertBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostInsertBlock", reflect.TypeOf((*MockHeaderGovModule)(nil).PostInsertBlock), arg0)
}

// PrepareHeader mocks base method.
func (m *MockHeaderGovModule) PrepareHeader(arg0 *types.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareHeader indicates an expected call of PrepareHeader.
func (mr *MockHeaderGovModuleMockRecorder) PrepareHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareHeader", reflect.TypeOf((*MockHeaderGovModule)(nil).PrepareHeader), arg0)
}

// RewindDelete mocks base method.
func (m *MockHeaderGovModule) RewindDelete(arg0 common.Hash, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RewindDelete", arg0, arg1)
}

// RewindDelete indicates an expected call of RewindDelete.
func (mr *MockHeaderGovModuleMockRecorder) RewindDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewindDelete", reflect.TypeOf((*MockHeaderGovModule)(nil).RewindDelete), arg0, arg1)
}

// RewindTo mocks base method.
func (m *MockHeaderGovModule) RewindTo(arg0 *types.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RewindTo", arg0)
}

// RewindTo indicates an expected call of RewindTo.
func (mr *MockHeaderGovModuleMockRecorder) RewindTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewindTo", reflect.TypeOf((*MockHeaderGovModule)(nil).RewindTo), arg0)
}

// Start mocks base method.
func (m *MockHeaderGovModule) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockHeaderGovModuleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockHeaderGovModule)(nil).Start))
}

// Stop mocks base method.
func (m *MockHeaderGovModule) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockHeaderGovModuleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockHeaderGovModule)(nil).Stop))
}

// VerifyHeader mocks base method.
func (m *MockHeaderGovModule) VerifyHeader(arg0 *types.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyHeader indicates an expected call of VerifyHeader.
func (mr *MockHeaderGovModuleMockRecorder) VerifyHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyHeader", reflect.TypeOf((*MockHeaderGovModule)(nil).VerifyHeader), arg0)
}
