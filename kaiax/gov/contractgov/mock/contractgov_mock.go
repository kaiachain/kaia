// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaiachain/kaia/kaiax/gov/contractgov (interfaces: ContractGovModule)

// Package mock_contractgov is a generated GoMock package.
package mock_contractgov

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gov "github.com/kaiachain/kaia/kaiax/gov"
	rpc "github.com/kaiachain/kaia/networks/rpc"
)

// MockContractGovModule is a mock of ContractGovModule interface.
type MockContractGovModule struct {
	ctrl     *gomock.Controller
	recorder *MockContractGovModuleMockRecorder
}

// MockContractGovModuleMockRecorder is the mock recorder for MockContractGovModule.
type MockContractGovModuleMockRecorder struct {
	mock *MockContractGovModule
}

// NewMockContractGovModule creates a new mock instance.
func NewMockContractGovModule(ctrl *gomock.Controller) *MockContractGovModule {
	mock := &MockContractGovModule{ctrl: ctrl}
	mock.recorder = &MockContractGovModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractGovModule) EXPECT() *MockContractGovModuleMockRecorder {
	return m.recorder
}

// APIs mocks base method.
func (m *MockContractGovModule) APIs() []rpc.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIs")
	ret0, _ := ret[0].([]rpc.API)
	return ret0
}

// APIs indicates an expected call of APIs.
func (mr *MockContractGovModuleMockRecorder) APIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIs", reflect.TypeOf((*MockContractGovModule)(nil).APIs))
}

// GetParamSet mocks base method.
func (m *MockContractGovModule) GetParamSet(arg0 uint64) gov.ParamSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParamSet", arg0)
	ret0, _ := ret[0].(gov.ParamSet)
	return ret0
}

// GetParamSet indicates an expected call of GetParamSet.
func (mr *MockContractGovModuleMockRecorder) GetParamSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParamSet", reflect.TypeOf((*MockContractGovModule)(nil).GetParamSet), arg0)
}

// GetPartialParamSet mocks base method.
func (m *MockContractGovModule) GetPartialParamSet(arg0 uint64) gov.PartialParamSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartialParamSet", arg0)
	ret0, _ := ret[0].(gov.PartialParamSet)
	return ret0
}

// GetPartialParamSet indicates an expected call of GetPartialParamSet.
func (mr *MockContractGovModuleMockRecorder) GetPartialParamSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartialParamSet", reflect.TypeOf((*MockContractGovModule)(nil).GetPartialParamSet), arg0)
}

// Start mocks base method.
func (m *MockContractGovModule) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockContractGovModuleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockContractGovModule)(nil).Start))
}

// Stop mocks base method.
func (m *MockContractGovModule) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockContractGovModuleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockContractGovModule)(nil).Stop))
}
