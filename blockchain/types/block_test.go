// Modifications Copyright 2024 The Kaia Authors
// Modifications Copyright 2018 The klaytn Authors
// Copyright 2014 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.
//
// This file is derived from core/types/block_test.go (2018/06/04).
// Modified and improved for the klaytn development.
// Modified and improved for the Kaia development.

package types

import (
	"encoding/json"
	"math/big"
	"os"
	"reflect"
	"testing"

	"github.com/kaiachain/kaia/v2/common"
	"github.com/kaiachain/kaia/v2/common/hexutil"
	"github.com/kaiachain/kaia/v2/rlp"
	"github.com/stretchr/testify/assert"
)

type testBlockEncodingTC struct {
	encoded    string      // RLP encoded block; debug.getBlockRlp(num)
	hash       common.Hash // block hash; kaia.getBlock(num).hash
	header     *Header     // expected header fields
	encodedTxs [][]byte    // expected transactions, RLP encoded; kaia.getRawTransaction(txhash)
}

var blockEncodingTCs map[string]testBlockEncodingTC

func init() {
	blockEncodingTCs = map[string]testBlockEncodingTC{
		"pre-magma": { // Kairos 83863326
			encoded: "0xf903faf90368a0c2adf89ac1218bca784fb6b456a4d6d992efd726208edac9a268f72e8daa52a794b2bd3178affccd9f9f5189457f1cad7d17a01c9da0ce26cd14bfe586c11f9ebae0186a3e4744dfb6233e603d477cdebc69d9dc7953a05b8713ac41d655e85124c14d558b67dbb5d0417da4096c2ea00c93d78a12daa7a0e38e5532717f12f769b07ea016014bd39b74fb72def4de8442114cc2728609f2bffa71e8252088462134f3a80b90187d883010703846b6c617988676f312e31352e37856c696e757800000000000000f90164f85494571e53df607be97431a5bbefca1dffe5aef56f4d945cb1a7dccbd0dc446e3640898ede8820368554c89499fb17d324fa0e07f23b49d09028ac0919414db694b74ff9dea397fe9e231df545eb53fe2adf776cb2b841acb7fcc5152506250d1ea49745e7d0d5930157724b410e6e62e0885e7978c81863647d90700dcf3e5d0727cb886f2cc2c63f8f6f3910b4341b302a0aa06eae4500f8c9b841d79c07fbee8861585a71af08a867546320ba804c49c7a3c8641b4d235fd50d5a29bf72d20f3ff1ddfb945ff193d7938967be694f3e602a1cffdea686acf2b0ea01b841dfcf5b5608ca86bc92e7fa3d88a8b25840a629234614ecb312621234ed665ae562ee64ea09fcc88080aaab1ee095acf705d7cc495732682ffee23023ed41feb200b841fefc3b618b2384ea5c7c519ddecc666c19e8a600a6e30c5d9831941c0d5af78d28250bab36ce29202e667c9c1681fd9930aab002988c7228b64caab003bd99810080b1f09499fb17d324fa0e07f23b49d09028ac0919414db694676f7665726e616e63652e756e6974707269636585ae9f7bcc00f88d08f88a830258128505d21dba0083419ce094ce123cb96a04c5a21728830bbc1d589ba30887db884563918244f4000094f90675a56a03f836204d66c0f923e00500ddc90af847f8458207f6a0fefbca6cf2db5bc7fd495d8baa5332d564a466c74a1264b10330a8b2aea7a5c9a07a45e8a2ddf1bbb740f7301169c56cbccc441597827cb483bf3d0300c92c314c",
			hash:    common.HexToHash("0x87fe52e244702e4c4c540cdab29f52f03ced4a961e3f0ebd33217867b7da3a56"),
			header: &Header{
				ParentHash:  common.HexToHash("0xc2adf89ac1218bca784fb6b456a4d6d992efd726208edac9a268f72e8daa52a7"),
				Rewardbase:  common.HexToAddress("0xb2bd3178affccd9f9f5189457f1cad7d17a01c9d"),
				Root:        common.HexToHash("0xce26cd14bfe586c11f9ebae0186a3e4744dfb6233e603d477cdebc69d9dc7953"),
				TxHash:      common.HexToHash("0x5b8713ac41d655e85124c14d558b67dbb5d0417da4096c2ea00c93d78a12daa7"),
				ReceiptHash: common.HexToHash("0xe38e5532717f12f769b07ea016014bd39b74fb72def4de8442114cc2728609f2"),
				Bloom:       BytesToBloom(hexutil.MustDecode("0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")),
				BlockScore:  common.Big1,
				Number:      big.NewInt(83863326),
				GasUsed:     21000,
				Time:        big.NewInt(1645432634),
				TimeFoS:     0,
				Extra:       hexutil.MustDecode("0xd883010703846b6c617988676f312e31352e37856c696e757800000000000000f90164f85494571e53df607be97431a5bbefca1dffe5aef56f4d945cb1a7dccbd0dc446e3640898ede8820368554c89499fb17d324fa0e07f23b49d09028ac0919414db694b74ff9dea397fe9e231df545eb53fe2adf776cb2b841acb7fcc5152506250d1ea49745e7d0d5930157724b410e6e62e0885e7978c81863647d90700dcf3e5d0727cb886f2cc2c63f8f6f3910b4341b302a0aa06eae4500f8c9b841d79c07fbee8861585a71af08a867546320ba804c49c7a3c8641b4d235fd50d5a29bf72d20f3ff1ddfb945ff193d7938967be694f3e602a1cffdea686acf2b0ea01b841dfcf5b5608ca86bc92e7fa3d88a8b25840a629234614ecb312621234ed665ae562ee64ea09fcc88080aaab1ee095acf705d7cc495732682ffee23023ed41feb200b841fefc3b618b2384ea5c7c519ddecc666c19e8a600a6e30c5d9831941c0d5af78d28250bab36ce29202e667c9c1681fd9930aab002988c7228b64caab003bd998100"),
				Governance:  hexutil.MustDecode("0x"),
				Vote:        hexutil.MustDecode("0xf09499fb17d324fa0e07f23b49d09028ac0919414db694676f7665726e616e63652e756e6974707269636585ae9f7bcc00"),
			},
			encodedTxs: [][]byte{
				hexutil.MustDecode("0x08f88a830258128505d21dba0083419ce094ce123cb96a04c5a21728830bbc1d589ba30887db884563918244f4000094f90675a56a03f836204d66c0f923e00500ddc90af847f8458207f6a0fefbca6cf2db5bc7fd495d8baa5332d564a466c74a1264b10330a8b2aea7a5c9a07a45e8a2ddf1bbb740f7301169c56cbccc441597827cb483bf3d0300c92c314c"),
			},
		},
		"post-magma": { // Kairos 118540800
			encoded: "0xf905b8f9035aa095100a280334e152160d4da2eb00c0fdd56678680508948b413233f2c1f295379482829a60c6eac4e3e9d6ed00891c69e88537fd4da057b5f7dc6e57eec3c21185f294bebcd473ed5748849207df8a483ed9ea74f8b2a0fe1b805505566cb2956aa8eca255f507a3a7448ed5bb8f76c2f48080cb22e2c5a017b373884b82084fa234d7692744c5df9b7ecc91d12458be6bb484f71cf45107b901000002000000000000000000000000000000000000000000000000000000800000000000000000000000000010000000000100000000020000000008000000000010000000000000000000000000280000000000000100000000000000000000000000000002000000000000000000080040001000040000000000000010000000000004010040000080000000000008020000049018000000000000000000000000000000100000000000000000000200000000000000000000000008100000000000000000000000000000000000000800000000008000000001080000002000000000000000000000100010000000000000000000000000004000000000000001840710ca0083051e7c846424904006b90187d683010a02846b6c617986676f312e3138856c696e7578000000000000000000f90164f85494571e53df607be97431a5bbefca1dffe5aef56f4d945cb1a7dccbd0dc446e3640898ede8820368554c89499fb17d324fa0e07f23b49d09028ac0919414db694b74ff9dea397fe9e231df545eb53fe2adf776cb2b8417ed05287d26e919e4afe6f51b87f33b0259b3609acd81730647c4e9dbc0b37ab1c110cdd3bb1567f0627bfcc5cdb141f15b903e95ee660b2a76c8b90986d64fc01f8c9b84175bbc18140902be2e0edc9a8f37357ade36f8585780bbdb0cb950b5b8d8e9ab52321369843024b69202a6971f446dabc86af1d8c83d3e06cb0815003f733645501b841df7cddf99ede3be0c0c35b59d9bb73317435f03c6909924018658b386b63641a2c6bba6813b41416f2a89ddb3340ab4faedc08c9b91a242721e0bdcba114a3c900b84127b87c563bdc2966cba9ed16b8db5ee67ab8a15e18ac53fa2944146c7552b87627137c80ab2b3780d4cedb6f18bc4c343cbf3407c39fa6dcc189b63bbab1c0ae009c9b7b227265776172642e726174696f223a2235302f32302f3330227d808505d21dba00f9025831f8e380850ba43b74008405f5e10094fdeedbb2fe5b48d5b49e435ba00e0358740d0cf58094243a439bd4a1cc6edf6ed13e7589cdd0af42425884552984b3f847f8458207f6a0f79acd8519590419fb8efdbbda09f083beac54f03d6a8f8800538ad977ccb762a03034e435ca7011c6020674bdaa4043c3b7b743e18d6828b775dd681308fed9e39449f16029074d13890ac9fe589cc913ffd58d39a8f847f8458207f6a040793721d9f1ac9e77b6245b1b2ed1e20637d3022fb37cd64094f50c39c0a270a058e445a6ad2dc020bece69ccd1b2d28673502f9524b40114a6cc810acb5b775b7802f8b58203e9824c4f8459682f00850bfda3a300830493e094640ed61e261c545d7439bdbb27e1674a6f589e9680b844202ee0ed0000000000000000000000000000000000000000000000000000000000004c5000000000000000000000000000000000000000000000000000000294cace8233c080a06283a5276fd248f4186a5ccb8187e92b42afe00d938b83391148e7ff3e1a358ca0319c3345643f4415f3a3632338a9430c694cf3bb8de3c4d6621b0563c02a69ad7802f8b58203e982467d8459682f00850bfda3a300830493e09450365c346bad261a29add3be7ba18b6c49e4f4cf80b844202ee0ed000000000000000000000000000000000000000000000000000000000000467b000000000000000000000000000000000000000000000000000000000062230bc001a088a760b2c930b0826f8cf14667bf9d62d68ce5d4ecf7aca4f9d872113c229e82a02f52cb66b7154411e4d36f5d126bb5e2e21a3d0f7885a0d097cf05ac2518af08",
			hash:    common.HexToHash("0x43c42ebbd5f57dfeefe01c67974c8d79ac569d8fa5b2f74f12cdc5734c88d58a"),
			header: &Header{
				ParentHash:  common.HexToHash("0x95100a280334e152160d4da2eb00c0fdd56678680508948b413233f2c1f29537"),
				Rewardbase:  common.HexToAddress("0x82829a60c6eac4e3e9d6ed00891c69e88537fd4d"),
				Root:        common.HexToHash("0x57b5f7dc6e57eec3c21185f294bebcd473ed5748849207df8a483ed9ea74f8b2"),
				TxHash:      common.HexToHash("0xfe1b805505566cb2956aa8eca255f507a3a7448ed5bb8f76c2f48080cb22e2c5"),
				ReceiptHash: common.HexToHash("0x17b373884b82084fa234d7692744c5df9b7ecc91d12458be6bb484f71cf45107"),
				Bloom:       BytesToBloom(hexutil.MustDecode("0x
				BlockScore:  common.Big1,
				Number:      big.NewInt(118540800),
				GasUsed:     335484,
				Time:        big.NewInt(1680117824),
				TimeFoS:     6,
				Extra:       hexutil.MustDecode("0xd683010a02846b6c617986676f312e3138856c696e7578000000000000000000f90164f85494571e53df607be97431a5bbefca1dffe5aef56f4d945cb1a7dccbd0dc446e3640898ede8820368554c89499fb17d324fa0e07f23b49d09028ac0919414db694b74ff9dea397fe9e231df545eb53fe2adf776cb2b8417ed05287d26e919e4afe6f51b87f33b0259b3609acd81730647c4e9dbc0b37ab1c110cdd3bb1567f0627bfcc5cdb141f15b903e95ee660b2a76c8b90986d64fc01f8c9b84175bbc18140902be2e0edc9a8f37357ade36f8585780bbdb0cb950b5b8d8e9ab52321369843024b69202a6971f446dabc86af1d8c83d3e06cb0815003f733645501b841df7cddf99ede3be0c0c35b59d9bb73317435f03c6909924018658b386b63641a2c6bba6813b41416f2a89ddb3340ab4faedc08c9b91a242721e0bdcba114a3c900b84127b87c563bdc2966cba9ed16b8db5ee67ab8a15e18ac53fa2944146c7552b87627137c80ab2b3780d4cedb6f18bc4c343cbf3407c39fa6dcc189b63bbab1c0ae00"),
				Governance:  hexutil.MustDecode("0x9b7b227265776172642e726174696f223a2235302f32302f3330227d"),
				Vote:        hexutil.MustDecode("0x"),
				BaseFee:     big.NewInt(0x5d21dba00),
			},
			encodedTxs: [][]byte{
				hexutil.MustDecode("0x31f8e380850ba43b74008405f5e10094fdeedbb2fe5b48d5b49e435ba00e0358740d0cf58094243a439bd4a1cc6edf6ed13e7589cdd0af42425884552984b3f847f8458207f6a0f79acd8519590419fb8efdbbda09f083beac54f03d6a8f8800538ad977ccb762a03034e435ca7011c6020674bdaa4043c3b7b743e18d6828b775dd681308fed9e39449f16029074d13890ac9fe589cc913ffd58d39a8f847f8458207f6a040793721d9f1ac9e77b6245b1b2ed1e20637d3022fb37cd64094f50c39c0a270a058e445a6ad2dc020bece69ccd1b2d28673502f9524b40114a6cc810acb5b775b"),
				hexutil.MustDecode("0x7802f8b58203e9824c4f8459682f00850bfda3a300830493e094640ed61e261c545d7439bdbb27e1674a6f589e9680b844202ee0ed0000000000000000000000000000000000000000000000000000000000004c5000000000000000000000000000000000000000000000000000000294cace8233c080a06283a5276fd248f4186a5ccb8187e92b42afe00d938b83391148e7ff3e1a358ca0319c3345643f4415f3a3632338a9430c694cf3bb8de3c4d6621b0563c02a69ad"),
				hexutil.MustDecode("0x7802f8b58203e982467d8459682f00850bfda3a300830493e09450365c346bad261a29add3be7ba18b6c49e4f4cf80b844202ee0ed000000000000000000000000000000000000000000000000000000000000467b000000000000000000000000000000000000000000000000000000000062230bc001a088a760b2c930b0826f8cf14667bf9d62d68ce5d4ecf7aca4f9d872113c229e82a02f52cb66b7154411e4d36f5d126bb5e2e21a3d0f7885a0d097cf05ac2518af08"),
			},
		},
		"post-randao": { // manually crafted. TODO: use real block after Kairos hardfork
			encoded: "0xf90661f904bba06e3826cd2407f01ceaad3cebc1235102001c0bb9a0f8c915ab2958303bc0972c945a0043070275d9f6054307ee7348bd660849d90fa0f412a15cb6477bd1b0e48e8fc2d101292a5c1bb9c0b78f7a1129fea4f865fb97a0f412a15cb6477bd1b0e48e8fc2d101292a5c1bb9c0b78f7a1129fea4f865fb99a0f412a15cb6477bd1b0e48e8fc2d101292a5c1bb9c0b78f7a1129fea4f865fba9ba0964845c5d1e9314b90187d7820404846b6c617988676f312e31302e33856c696e75780000000000000000f90164f854942525dbdbb7ed59b8e02a6c4d3fb2a75b8b07e25094718aabda0f016e6127db6575cf0a803da7d4087b94c9ead9f875f4adc261a4b5dc264ee58039f281a794d8408db804ab30691e984e8623e2edb4cba853dfb8419da17c0fe3fdecbc32f3a2fbedf8300693067d0f944014cf575076df888709b2057869f36edc299542be1372d2b582bd8dc8e2c220059270fa37b2a2fe287ffb00f8c9b841e8765ffc1bfda438115f9bfa912f39bcc2a286fdb67c71229c9fe4084db5dd942d2076e244a4faf915aeb51a5ea097706e5421e2a7985425d0f9d6fa446c378d00b8411511d9bbd78f6a8b2151406c3c5071bcbe7a452a2ad4eebe1f9a15494ef8ff3b63b41e033de9a02c48e640d51944d7d20a462f7785525c6b26c401177521808101b841c7abdfa3ef691e8a306c8fedc32ee6af44b2fc82b921358466db9948ffce42f221a6870e01eda5ab4f54b6ee68798631e2d46a090c76c8a5d507453acaec48c401b8deb8dc7b22676f7665726e696e676e6f6465223a22307865373333636234643237396461363936663330643437306638633034646563623534666362306432222c22676f7665726e616e63656d6f6465223a2273696e676c65222c22726577617264223a7b226d696e74696e67616d6f756e74223a393630303030303030303030303030303030302c22726174696f223a2233342f33332f3333227d2c22626674223a7b2265706f6368223a33303030302c22706f6c696379223a302c22737562223a32317d2c22756e69745072696365223a32353030303030303030307da2e194e733cb4d279da696f30d470f8c04decb54fcb0d28565706f63688533303030308505d21dba00b86094516a8bc695b5bf43aa077cd682d9475a3a6bed39a633395b78ed8f276e7c5bb00bb26a77825013c6718579f1b3ee2275b158801705ea77989e3acc849ee9c524bd1822bde3cba7be2aae04347f0d91508b7b7ce2f11ec36cbf763173421ae7a0df117d1245dceaae0a47f05371b23cd0d0db963ff9d5c8ba768dc989f4c31883f901a0f85f800a82c35094095e7baea6a6c7c4c2dfeb977efac326af552d870a8025a09bea4c4daac7c7c52e093e6a4c35dbbcf8856f1af7b059ba20253e70848d094fa08a8fae537ce25ed8cb5af9adac3f141af69bd515bd2ba031522df09b97dd72b17801f89b01800a8301e24194095e7baea6a6c7c4c2dfeb977efac326af552d878080f838f7940000000000000000000000000000000000000001e1a0000000000000000000000000000000000000000000000000000000000000000001a03dbacc8d0259f2508625e97fdfc57cd85fdd16e5821bc2c10bdd1a52649e8335a0476e10695b183a87b0aa292a7f4b78ef0c3fbe62aa2c42c84e1d9c3da159ef147802f89c01800a0a8301e24194095e7baea6a6c7c4c2dfeb977efac326af552d878080f838f7940000000000000000000000000000000000000002e1a0000000000000000000000000000000000000000000000000000000000000000001a03dbacc8d0259f2508625e97fdfc57cd85fdd16e5821bc2c10bdd1a52649e8335a0476e10695b183a87b0aa292a7f4b78ef0c3fbe62aa2c42c84e1d9c3da159ef14",
			hash:    common.HexToHash("0x1abe87cd2771471f63e6f9daa4254e5a260e9991ad44a3f3951a9bcf4d590f58"),
			header: &Header{
				ParentHash:   common.HexToHash("0x6e3826cd2407f01ceaad3cebc1235102001c0bb9a0f8c915ab2958303bc0972c"),
				Rewardbase:   common.HexToAddress("0x5a0043070275d9f6054307ee7348bd660849d90f"),
				Root:         common.HexToHash("0xf412a15cb6477bd1b0e48e8fc2d101292a5c1bb9c0b78f7a1129fea4f865fb97"),
				TxHash:       common.HexToHash("0xf412a15cb6477bd1b0e48e8fc2d101292a5c1bb9c0b78f7a1129fea4f865fb99"),
				ReceiptHash:  common.HexToHash("0xf412a15cb6477bd1b0e48e8fc2d101292a5c1bb9c0b78f7a1129fea4f865fba9"),
				Bloom:        BytesToBloom(hexutil.MustDecode("0x
				BlockScore:   big.NewInt(10),
				Number:       big.NewInt(9),
				GasUsed:      100,
				Time:         big.NewInt(0x5c5d1e93),
				TimeFoS:      20,
				Extra:        hexutil.MustDecode("0xd7820404846b6c617988676f312e31302e33856c696e75780000000000000000f90164f854942525dbdbb7ed59b8e02a6c4d3fb2a75b8b07e25094718aabda0f016e6127db6575cf0a803da7d4087b94c9ead9f875f4adc261a4b5dc264ee58039f281a794d8408db804ab30691e984e8623e2edb4cba853dfb8419da17c0fe3fdecbc32f3a2fbedf8300693067d0f944014cf575076df888709b2057869f36edc299542be1372d2b582bd8dc8e2c220059270fa37b2a2fe287ffb00f8c9b841e8765ffc1bfda438115f9bfa912f39bcc2a286fdb67c71229c9fe4084db5dd942d2076e244a4faf915aeb51a5ea097706e5421e2a7985425d0f9d6fa446c378d00b8411511d9bbd78f6a8b2151406c3c5071bcbe7a452a2ad4eebe1f9a15494ef8ff3b63b41e033de9a02c48e640d51944d7d20a462f7785525c6b26c401177521808101b841c7abdfa3ef691e8a306c8fedc32ee6af44b2fc82b921358466db9948ffce42f221a6870e01eda5ab4f54b6ee68798631e2d46a090c76c8a5d507453acaec48c401"),
				Governance:   hexutil.MustDecode("0xb8dc7b22676f7665726e696e676e6f6465223a22307865373333636234643237396461363936663330643437306638633034646563623534666362306432222c22676f7665726e616e63656d6f6465223a2273696e676c65222c22726577617264223a7b226d696e74696e67616d6f756e74223a393630303030303030303030303030303030302c22726174696f223a2233342f33332f3333227d2c22626674223a7b2265706f6368223a33303030302c22706f6c696379223a302c22737562223a32317d2c22756e69745072696365223a32353030303030303030307d"),
				Vote:         hexutil.MustDecode("0xe194e733cb4d279da696f30d470f8c04decb54fcb0d28565706f6368853330303030"),
				BaseFee:      big.NewInt(0x5d21dba00),
				RandomReveal: hexutil.MustDecode("0x94516a8bc695b5bf43aa077cd682d9475a3a6bed39a633395b78ed8f276e7c5bb00bb26a77825013c6718579f1b3ee2275b158801705ea77989e3acc849ee9c524bd1822bde3cba7be2aae04347f0d91508b7b7ce2f11ec36cbf763173421ae7"),
				MixHash:      hexutil.MustDecode("0xdf117d1245dceaae0a47f05371b23cd0d0db963ff9d5c8ba768dc989f4c31883"),
			},
			encodedTxs: [][]byte{
				hexutil.MustDecode("0xf85f800a82c35094095e7baea6a6c7c4c2dfeb977efac326af552d870a8025a09bea4c4daac7c7c52e093e6a4c35dbbcf8856f1af7b059ba20253e70848d094fa08a8fae537ce25ed8cb5af9adac3f141af69bd515bd2ba031522df09b97dd72b1"),
				hexutil.MustDecode("0x7801f89b01800a8301e24194095e7baea6a6c7c4c2dfeb977efac326af552d878080f838f7940000000000000000000000000000000000000001e1a0000000000000000000000000000000000000000000000000000000000000000001a03dbacc8d0259f2508625e97fdfc57cd85fdd16e5821bc2c10bdd1a52649e8335a0476e10695b183a87b0aa292a7f4b78ef0c3fbe62aa2c42c84e1d9c3da159ef14"),
				hexutil.MustDecode("0x7802f89c01800a0a8301e24194095e7baea6a6c7c4c2dfeb977efac326af552d878080f838f7940000000000000000000000000000000000000002e1a0000000000000000000000000000000000000000000000000000000000000000001a03dbacc8d0259f2508625e97fdfc57cd85fdd16e5821bc2c10bdd1a52649e8335a0476e10695b183a87b0aa292a7f4b78ef0c3fbe62aa2c42c84e1d9c3da159ef14"),
			},
		},
	}
}

func TestBlockEncoding(t *testing.T) {
	for name, tc := range blockEncodingTCs {
		// RLP -> Block
		block := &Block{}
		err := rlp.DecodeBytes(common.FromHex(tc.encoded), block)
		assert.Nil(t, err, name)
		assert.Equal(t, tc.header, block.Header(), name)
		assert.Equal(t, len(tc.encodedTxs), len(block.Transactions()), name)
		for i, encodedTx := range tc.encodedTxs {
			assert.Equal(t, encodedTx, block.Transactions().GetRlp(i), name)
		}

		// Calculated block hash
		assert.Equal(t, tc.hash, block.Hash(), name)

		// Block -> RLP
		encoded, err := rlp.EncodeToBytes(block)
		assert.Nil(t, err, name)
		assert.Equal(t, tc.encoded, hexutil.Encode(encoded), name)

		// Copy header
		header := CopyHeader(block.Header())
		assert.Equal(t, tc.header, header, name)
	}
}

func genHeader() *Header {
	return CopyHeader(blockEncodingTCs["pre-magma"].header)
}

func genBlock() *Block {
	return &Block{
		header:       genHeader(),
		transactions: Transactions{},
	}
}

func TestHeaderSizeCalc(t *testing.T) {
	// constantSize
	// = required fields (520)
	// + BaseFee pointer (8)
	// + RandomReveal slice (24)
	// + MixHash slice (24)
	constantSize := int(reflect.TypeOf(Header{}).Size())
	assert.Equal(t, 520+8+24+24, constantSize)

	// Test header.Size() while adding fields one by one
	// Start from a header without any variable length fields.
	h := genHeader()
	h.Extra = nil
	h.Governance = nil
	h.Vote = nil
	h.BaseFee = nil

	// bigIntSize = (
	//     BlockScore bits (1)
	//   + Number bits (~26)
	//   + Time bits (~31)
	// ) / 8 = 7
	expectSize := constantSize + 7
	assert.Equal(t, expectSize, int(h.Size()))

	// Byte lengths are added as-is
	h.Extra = hexutil.MustDecode("0xd883010703846b6c617988676f312e31352e37856c696e757800000000000000f90164f85494571e53df607be97431a5bbefca1dffe5aef56f4d945cb1a7dccbd0dc446e3640898ede8820368554c89499fb17d324fa0e07f23b49d09028ac0919414db694b74ff9dea397fe9e231df545eb53fe2adf776cb2b841acb7fcc5152506250d1ea49745e7d0d5930157724b410e6e62e0885e7978c81863647d90700dcf3e5d0727cb886f2cc2c63f8f6f3910b4341b302a0aa06eae4500f8c9b841d79c07fbee8861585a71af08a867546320ba804c49c7a3c8641b4d235fd50d5a29bf72d20f3ff1ddfb945ff193d7938967be694f3e602a1cffdea686acf2b0ea01b841dfcf5b5608ca86bc92e7fa3d88a8b25840a629234614ecb312621234ed665ae562ee64ea09fcc88080aaab1ee095acf705d7cc495732682ffee23023ed41feb200b841fefc3b618b2384ea5c7c519ddecc666c19e8a600a6e30c5d9831941c0d5af78d28250bab36ce29202e667c9c1681fd9930aab002988c7228b64caab003bd998100")
	expectSize += len(h.Extra)
	assert.Equal(t, expectSize, int(h.Size()))

	h.Governance = hexutil.MustDecode("0x9b7b227265776172642e726174696f223a2235302f32302f3330227d")
	expectSize += len(h.Governance)
	assert.Equal(t, expectSize, int(h.Size()))

	h.Vote = hexutil.MustDecode("0xf09499fb17d324fa0e07f23b49d09028ac0919414db694676f7665726e616e63652e756e6974707269636585ae9f7bcc00")
	expectSize += len(h.Vote)
	assert.Equal(t, expectSize, int(h.Size()))

	h.RandomReveal = hexutil.MustDecode("0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
	expectSize += len(h.RandomReveal)
	assert.Equal(t, expectSize, int(h.Size()))

	h.MixHash = hexutil.MustDecode("0x0000000000000000000000000000000000000000000000000000000000000000")
	expectSize += len(h.MixHash)
	assert.Equal(t, expectSize, int(h.Size()))

	// BaseFee added for its bits
	h.BaseFee = big.NewInt(0x5d21dba00) // 35 bits ~= 4 bytes
	expectSize += 4
	assert.Equal(t, expectSize, int(h.Size()))
}

func TestHeaderJSON(t *testing.T) {
	h := blockEncodingTCs["post-magma"].header
	j, _ := json.Marshal(h)
	assert.Contains(t, string(j), "baseFeePerGas")

	h = blockEncodingTCs["post-randao"].header
	j, _ = json.Marshal(h)
	assert.Contains(t, string(j), "randomReveal")
	assert.Contains(t, string(j), "mixHash")
}

func BenchmarkBlockEncodingHashWithInterface(b *testing.B) {
	data, err := os.ReadFile("../../tests/b1.rlp")
	if err != nil {
		b.Fatal("Failed to read a block file: ", err)
	}

	blockEnc := common.FromHex(string(data))
	var block Block
	if err := rlp.DecodeBytes(blockEnc, &block); err != nil {
		b.Fatal("decode error: ", err)
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		block.header.HashNoNonce()
	}
}

func BenchmarkBlockEncodingRlpHash(b *testing.B) {
	data, err := os.ReadFile("../../tests/b1.rlp")
	if err != nil {
		b.Fatal("Failed to read a block file: ", err)
	}

	blockEnc := common.FromHex(string(data))
	var block Block
	if err := rlp.DecodeBytes(blockEnc, &block); err != nil {
		b.Fatal("decode error: ", err)
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		rlpHash(block.header)
	}
}

func BenchmarkBlockEncodingCopiedBlockHeader(b *testing.B) {
	data, err := os.ReadFile("../../tests/b1.rlp")
	if err != nil {
		b.Fatal("Failed to read a block file: ", err)
	}

	blockEnc := common.FromHex(string(data))
	var block Block
	if err := rlp.DecodeBytes(blockEnc, &block); err != nil {
		b.Fatal("decode error: ", err)
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		rlpHash(block.header)
	}
}
