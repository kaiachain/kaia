// Modifications Copyright 2024 The Kaia Authors
// Copyright 2019 The klaytn Authors
// This file is part of the klaytn library.
//
// The klaytn library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The klaytn library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the klaytn library. If not, see <http://www.gnu.org/licenses/>.
// Modified and improved for the Kaia development.

package types

import (
	"crypto/ecdsa"
	"encoding/json"
	"math/big"

	"github.com/kaiachain/kaia/v2/common"
	"github.com/kaiachain/kaia/v2/common/hexutil"
	"github.com/kaiachain/kaia/v2/crypto"
)

// TxSignature contains a signature of tx (V, R, S).
type TxSignature struct {
	V *big.Int
	R *big.Int
	S *big.Int
}

// TxSignature contains a signature of tx (V, R, S) as types of hexutil.Big.
type TxSignatureJSON struct {
	V *hexutil.Big
	R *hexutil.Big
	S *hexutil.Big
}

func NewTxSignature() *TxSignature {
	return &TxSignature{
		big.NewInt(0),
		big.NewInt(0),
		big.NewInt(0),
	}
}

func NewTxSignatureWithValues(signer Signer, tx *Transaction, txhash common.Hash, prv *ecdsa.PrivateKey) (*TxSignature, error) {
	sig, err := crypto.Sign(txhash[:], prv)
	if err != nil {
		return nil, err
	}

	txsig := &TxSignature{}

	txsig.R, txsig.S, txsig.V, err = signer.SignatureValues(tx, sig)
	if err != nil {
		return nil, err
	}

	return txsig, nil
}

func (t *TxSignature) ChainId() *big.Int {
	return deriveChainId(t.V)
}

func (t *TxSignature) RawSignatureValues() *TxSignature {
	return t
}

func (t *TxSignature) ValidateSignature() bool {
	return validateSignature(t.V, t.R, t.S)
}

// RecoverAddress returns an address with given parameters.
// txhash: a hash generated by tx.Hash().
// homestead: true if Homestead or later.
// vfunc: V in the signature is treated differently by Signer. This function is for the treatment.
func (t *TxSignature) RecoverAddress(txhash common.Hash, homestead bool, vfunc func(*big.Int) *big.Int) (common.Address, error) {
	V := vfunc(t.V)
	return recoverPlain(txhash, t.R, t.S, V, homestead)
}

// RecoverPubKey returns a list of public keys with given parameters.
// txhash: a hash generated by tx.Hash().
// homestead: true if Homestead or later.
// vfunc: V in the signature is treated differently by Signer. This function is for the treatment.
func (t *TxSignature) RecoverPubkey(txhash common.Hash, homestead bool, vfunc func(*big.Int) *big.Int) (*ecdsa.PublicKey, error) {
	v := vfunc(t.V)
	return recoverPlainPubkey(txhash, t.R, t.S, v, homestead)
}

func (t *TxSignature) equal(tb *TxSignature) bool {
	return t.V.Cmp(tb.V) == 0 &&
		t.R.Cmp(tb.R) == 0 &&
		t.S.Cmp(tb.S) == 0
}

func (t *TxSignature) string() string {
	b, _ := json.Marshal(t)

	return string(b)
}
