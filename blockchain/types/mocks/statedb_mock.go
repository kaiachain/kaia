// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaiachain/kaia/blockchain/types (interfaces: StateDB)
//
// Generated by this command:
//
//	mockgen -destination=./blockchain/types/mocks/statedb_mock.go github.com/kaiachain/kaia/blockchain/types StateDB
//

// Package mock_types is a generated GoMock package.
package mock_types

import (
	reflect "reflect"

	account "github.com/kaiachain/kaia/blockchain/types/account"
	accountkey "github.com/kaiachain/kaia/blockchain/types/accountkey"
	common "github.com/kaiachain/kaia/common"
	params "github.com/kaiachain/kaia/params"
	gomock "go.uber.org/mock/gomock"
)

// MockStateDB is a mock of StateDB interface.
type MockStateDB struct {
	ctrl     *gomock.Controller
	recorder *MockStateDBMockRecorder
	isgomock struct{}
}

// MockStateDBMockRecorder is the mock recorder for MockStateDB.
type MockStateDBMockRecorder struct {
	mock *MockStateDB
}

// NewMockStateDB creates a new mock instance.
func NewMockStateDB(ctrl *gomock.Controller) *MockStateDB {
	mock := &MockStateDB{ctrl: ctrl}
	mock.recorder = &MockStateDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateDB) EXPECT() *MockStateDBMockRecorder {
	return m.recorder
}

// CreateEOA mocks base method.
func (m *MockStateDB) CreateEOA(addr common.Address, humanReadable bool, key accountkey.AccountKey) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateEOA", addr, humanReadable, key)
}

// CreateEOA indicates an expected call of CreateEOA.
func (mr *MockStateDBMockRecorder) CreateEOA(addr, humanReadable, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEOA", reflect.TypeOf((*MockStateDB)(nil).CreateEOA), addr, humanReadable, key)
}

// CreateSmartContractAccount mocks base method.
func (m *MockStateDB) CreateSmartContractAccount(addr common.Address, format params.CodeFormat, r params.Rules) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateSmartContractAccount", addr, format, r)
}

// CreateSmartContractAccount indicates an expected call of CreateSmartContractAccount.
func (mr *MockStateDBMockRecorder) CreateSmartContractAccount(addr, format, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSmartContractAccount", reflect.TypeOf((*MockStateDB)(nil).CreateSmartContractAccount), addr, format, r)
}

// CreateSmartContractAccountWithKey mocks base method.
func (m *MockStateDB) CreateSmartContractAccountWithKey(addr common.Address, humanReadable bool, key accountkey.AccountKey, format params.CodeFormat, r params.Rules) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateSmartContractAccountWithKey", addr, humanReadable, key, format, r)
}

// CreateSmartContractAccountWithKey indicates an expected call of CreateSmartContractAccountWithKey.
func (mr *MockStateDBMockRecorder) CreateSmartContractAccountWithKey(addr, humanReadable, key, format, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSmartContractAccountWithKey", reflect.TypeOf((*MockStateDB)(nil).CreateSmartContractAccountWithKey), addr, humanReadable, key, format, r)
}

// Exist mocks base method.
func (m *MockStateDB) Exist(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist.
func (mr *MockStateDBMockRecorder) Exist(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockStateDB)(nil).Exist), arg0)
}

// GetAccount mocks base method.
func (m *MockStateDB) GetAccount(addr common.Address) account.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", addr)
	ret0, _ := ret[0].(account.Account)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockStateDBMockRecorder) GetAccount(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockStateDB)(nil).GetAccount), addr)
}

// GetKey mocks base method.
func (m *MockStateDB) GetKey(addr common.Address) accountkey.AccountKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", addr)
	ret0, _ := ret[0].(accountkey.AccountKey)
	return ret0
}

// GetKey indicates an expected call of GetKey.
func (mr *MockStateDBMockRecorder) GetKey(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockStateDB)(nil).GetKey), addr)
}

// IncNonce mocks base method.
func (m *MockStateDB) IncNonce(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncNonce", arg0)
}

// IncNonce indicates an expected call of IncNonce.
func (mr *MockStateDBMockRecorder) IncNonce(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncNonce", reflect.TypeOf((*MockStateDB)(nil).IncNonce), arg0)
}

// IsContractAvailable mocks base method.
func (m *MockStateDB) IsContractAvailable(addr common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsContractAvailable", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsContractAvailable indicates an expected call of IsContractAvailable.
func (mr *MockStateDBMockRecorder) IsContractAvailable(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsContractAvailable", reflect.TypeOf((*MockStateDB)(nil).IsContractAvailable), addr)
}

// IsProgramAccount mocks base method.
func (m *MockStateDB) IsProgramAccount(addr common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProgramAccount", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsProgramAccount indicates an expected call of IsProgramAccount.
func (mr *MockStateDBMockRecorder) IsProgramAccount(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProgramAccount", reflect.TypeOf((*MockStateDB)(nil).IsProgramAccount), addr)
}

// IsValidCodeFormat mocks base method.
func (m *MockStateDB) IsValidCodeFormat(addr common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidCodeFormat", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidCodeFormat indicates an expected call of IsValidCodeFormat.
func (mr *MockStateDBMockRecorder) IsValidCodeFormat(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidCodeFormat", reflect.TypeOf((*MockStateDB)(nil).IsValidCodeFormat), addr)
}

// UpdateKey mocks base method.
func (m *MockStateDB) UpdateKey(addr common.Address, key accountkey.AccountKey, currentBlockNumber uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKey", addr, key, currentBlockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKey indicates an expected call of UpdateKey.
func (mr *MockStateDBMockRecorder) UpdateKey(addr, key, currentBlockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKey", reflect.TypeOf((*MockStateDB)(nil).UpdateKey), addr, key, currentBlockNumber)
}
