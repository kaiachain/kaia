// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaiachain/kaia/blockchain/vm (interfaces: StateDB)

// Package mock_vm is a generated GoMock package.
package mock_vm

import (
	big "math/big"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/kaiachain/kaia/blockchain/types"
	account "github.com/kaiachain/kaia/blockchain/types/account"
	accountkey "github.com/kaiachain/kaia/blockchain/types/accountkey"
	common "github.com/kaiachain/kaia/common"
	params "github.com/kaiachain/kaia/params"
)

// MockStateDB is a mock of StateDB interface.
type MockStateDB struct {
	ctrl     *gomock.Controller
	recorder *MockStateDBMockRecorder
}

// MockStateDBMockRecorder is the mock recorder for MockStateDB.
type MockStateDBMockRecorder struct {
	mock *MockStateDB
}

// NewMockStateDB creates a new mock instance.
func NewMockStateDB(ctrl *gomock.Controller) *MockStateDB {
	mock := &MockStateDB{ctrl: ctrl}
	mock.recorder = &MockStateDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateDB) EXPECT() *MockStateDBMockRecorder {
	return m.recorder
}

// AddAddressToAccessList mocks base method.
func (m *MockStateDB) AddAddressToAccessList(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAddressToAccessList", arg0)
}

// AddAddressToAccessList indicates an expected call of AddAddressToAccessList.
func (mr *MockStateDBMockRecorder) AddAddressToAccessList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddressToAccessList", reflect.TypeOf((*MockStateDB)(nil).AddAddressToAccessList), arg0)
}

// AddBalance mocks base method.
func (m *MockStateDB) AddBalance(arg0 common.Address, arg1 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBalance", arg0, arg1)
}

// AddBalance indicates an expected call of AddBalance.
func (mr *MockStateDBMockRecorder) AddBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBalance", reflect.TypeOf((*MockStateDB)(nil).AddBalance), arg0, arg1)
}

// AddLog mocks base method.
func (m *MockStateDB) AddLog(arg0 *types.Log) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLog", arg0)
}

// AddLog indicates an expected call of AddLog.
func (mr *MockStateDBMockRecorder) AddLog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLog", reflect.TypeOf((*MockStateDB)(nil).AddLog), arg0)
}

// AddPreimage mocks base method.
func (m *MockStateDB) AddPreimage(arg0 common.Hash, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPreimage", arg0, arg1)
}

// AddPreimage indicates an expected call of AddPreimage.
func (mr *MockStateDBMockRecorder) AddPreimage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPreimage", reflect.TypeOf((*MockStateDB)(nil).AddPreimage), arg0, arg1)
}

// AddRefund mocks base method.
func (m *MockStateDB) AddRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRefund", arg0)
}

// AddRefund indicates an expected call of AddRefund.
func (mr *MockStateDBMockRecorder) AddRefund(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRefund", reflect.TypeOf((*MockStateDB)(nil).AddRefund), arg0)
}

// AddSlotToAccessList mocks base method.
func (m *MockStateDB) AddSlotToAccessList(arg0 common.Address, arg1 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSlotToAccessList", arg0, arg1)
}

// AddSlotToAccessList indicates an expected call of AddSlotToAccessList.
func (mr *MockStateDBMockRecorder) AddSlotToAccessList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSlotToAccessList", reflect.TypeOf((*MockStateDB)(nil).AddSlotToAccessList), arg0, arg1)
}

// AddressInAccessList mocks base method.
func (m *MockStateDB) AddressInAccessList(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressInAccessList", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddressInAccessList indicates an expected call of AddressInAccessList.
func (mr *MockStateDBMockRecorder) AddressInAccessList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressInAccessList", reflect.TypeOf((*MockStateDB)(nil).AddressInAccessList), arg0)
}

// CreateAccount mocks base method.
func (m *MockStateDB) CreateAccount(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateAccount", arg0)
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockStateDBMockRecorder) CreateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStateDB)(nil).CreateAccount), arg0)
}

// CreateEOA mocks base method.
func (m *MockStateDB) CreateEOA(arg0 common.Address, arg1 bool, arg2 accountkey.AccountKey) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateEOA", arg0, arg1, arg2)
}

// CreateEOA indicates an expected call of CreateEOA.
func (mr *MockStateDBMockRecorder) CreateEOA(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEOA", reflect.TypeOf((*MockStateDB)(nil).CreateEOA), arg0, arg1, arg2)
}

// CreateSmartContractAccount mocks base method.
func (m *MockStateDB) CreateSmartContractAccount(arg0 common.Address, arg1 params.CodeFormat, arg2 params.Rules) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateSmartContractAccount", arg0, arg1, arg2)
}

// CreateSmartContractAccount indicates an expected call of CreateSmartContractAccount.
func (mr *MockStateDBMockRecorder) CreateSmartContractAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSmartContractAccount", reflect.TypeOf((*MockStateDB)(nil).CreateSmartContractAccount), arg0, arg1, arg2)
}

// CreateSmartContractAccountWithKey mocks base method.
func (m *MockStateDB) CreateSmartContractAccountWithKey(arg0 common.Address, arg1 bool, arg2 accountkey.AccountKey, arg3 params.CodeFormat, arg4 params.Rules) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateSmartContractAccountWithKey", arg0, arg1, arg2, arg3, arg4)
}

// CreateSmartContractAccountWithKey indicates an expected call of CreateSmartContractAccountWithKey.
func (mr *MockStateDBMockRecorder) CreateSmartContractAccountWithKey(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSmartContractAccountWithKey", reflect.TypeOf((*MockStateDB)(nil).CreateSmartContractAccountWithKey), arg0, arg1, arg2, arg3, arg4)
}

// Empty mocks base method.
func (m *MockStateDB) Empty(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Empty", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Empty indicates an expected call of Empty.
func (mr *MockStateDBMockRecorder) Empty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockStateDB)(nil).Empty), arg0)
}

// Exist mocks base method.
func (m *MockStateDB) Exist(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist.
func (mr *MockStateDBMockRecorder) Exist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockStateDB)(nil).Exist), arg0)
}

// Finalise mocks base method.
func (m *MockStateDB) Finalise(arg0, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finalise", arg0, arg1)
}

// Finalise indicates an expected call of Finalise.
func (mr *MockStateDBMockRecorder) Finalise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalise", reflect.TypeOf((*MockStateDB)(nil).Finalise), arg0, arg1)
}

// ForEachStorage mocks base method.
func (m *MockStateDB) ForEachStorage(arg0 common.Address, arg1 func(common.Hash, common.Hash) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForEachStorage", arg0, arg1)
}

// ForEachStorage indicates an expected call of ForEachStorage.
func (mr *MockStateDBMockRecorder) ForEachStorage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEachStorage", reflect.TypeOf((*MockStateDB)(nil).ForEachStorage), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockStateDB) GetAccount(arg0 common.Address) account.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0)
	ret0, _ := ret[0].(account.Account)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockStateDBMockRecorder) GetAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockStateDB)(nil).GetAccount), arg0)
}

// GetBalance mocks base method.
func (m *MockStateDB) GetBalance(arg0 common.Address) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStateDBMockRecorder) GetBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStateDB)(nil).GetBalance), arg0)
}

// GetCode mocks base method.
func (m *MockStateDB) GetCode(arg0 common.Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockStateDBMockRecorder) GetCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockStateDB)(nil).GetCode), arg0)
}

// GetCodeHash mocks base method.
func (m *MockStateDB) GetCodeHash(arg0 common.Address) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", arg0)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockStateDBMockRecorder) GetCodeHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockStateDB)(nil).GetCodeHash), arg0)
}

// GetCodeSize mocks base method.
func (m *MockStateDB) GetCodeSize(arg0 common.Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockStateDBMockRecorder) GetCodeSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockStateDB)(nil).GetCodeSize), arg0)
}

// GetCommittedState mocks base method.
func (m *MockStateDB) GetCommittedState(arg0 common.Address, arg1 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittedState", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetCommittedState indicates an expected call of GetCommittedState.
func (mr *MockStateDBMockRecorder) GetCommittedState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittedState", reflect.TypeOf((*MockStateDB)(nil).GetCommittedState), arg0, arg1)
}

// GetKey mocks base method.
func (m *MockStateDB) GetKey(arg0 common.Address) accountkey.AccountKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", arg0)
	ret0, _ := ret[0].(accountkey.AccountKey)
	return ret0
}

// GetKey indicates an expected call of GetKey.
func (mr *MockStateDBMockRecorder) GetKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockStateDB)(nil).GetKey), arg0)
}

// GetNonce mocks base method.
func (m *MockStateDB) GetNonce(arg0 common.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockStateDBMockRecorder) GetNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockStateDB)(nil).GetNonce), arg0)
}

// GetRefund mocks base method.
func (m *MockStateDB) GetRefund() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefund")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetRefund indicates an expected call of GetRefund.
func (mr *MockStateDBMockRecorder) GetRefund() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefund", reflect.TypeOf((*MockStateDB)(nil).GetRefund))
}

// GetState mocks base method.
func (m *MockStateDB) GetState(arg0 common.Address, arg1 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockStateDBMockRecorder) GetState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockStateDB)(nil).GetState), arg0, arg1)
}

// GetStorageRoot mocks base method.
func (m *MockStateDB) GetStorageRoot(arg0 common.Address) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageRoot", arg0)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetStorageRoot indicates an expected call of GetStorageRoot.
func (mr *MockStateDBMockRecorder) GetStorageRoot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageRoot", reflect.TypeOf((*MockStateDB)(nil).GetStorageRoot), arg0)
}

// GetTransientState mocks base method.
func (m *MockStateDB) GetTransientState(arg0 common.Address, arg1 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransientState", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetTransientState indicates an expected call of GetTransientState.
func (mr *MockStateDBMockRecorder) GetTransientState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransientState", reflect.TypeOf((*MockStateDB)(nil).GetTransientState), arg0, arg1)
}

// GetTxHash mocks base method.
func (m *MockStateDB) GetTxHash() common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetTxHash indicates an expected call of GetTxHash.
func (mr *MockStateDBMockRecorder) GetTxHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxHash", reflect.TypeOf((*MockStateDB)(nil).GetTxHash))
}

// GetVmVersion mocks base method.
func (m *MockStateDB) GetVmVersion(arg0 common.Address) (params.VmVersion, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVmVersion", arg0)
	ret0, _ := ret[0].(params.VmVersion)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetVmVersion indicates an expected call of GetVmVersion.
func (mr *MockStateDBMockRecorder) GetVmVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVmVersion", reflect.TypeOf((*MockStateDB)(nil).GetVmVersion), arg0)
}

// HasSelfDestructed mocks base method.
func (m *MockStateDB) HasSelfDestructed(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSelfDestructed", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSelfDestructed indicates an expected call of HasSelfDestructed.
func (mr *MockStateDBMockRecorder) HasSelfDestructed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSelfDestructed", reflect.TypeOf((*MockStateDB)(nil).HasSelfDestructed), arg0)
}

// IncNonce mocks base method.
func (m *MockStateDB) IncNonce(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncNonce", arg0)
}

// IncNonce indicates an expected call of IncNonce.
func (mr *MockStateDBMockRecorder) IncNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncNonce", reflect.TypeOf((*MockStateDB)(nil).IncNonce), arg0)
}

// IsContractAvailable mocks base method.
func (m *MockStateDB) IsContractAvailable(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsContractAvailable", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsContractAvailable indicates an expected call of IsContractAvailable.
func (mr *MockStateDBMockRecorder) IsContractAvailable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsContractAvailable", reflect.TypeOf((*MockStateDB)(nil).IsContractAvailable), arg0)
}

// IsProgramAccount mocks base method.
func (m *MockStateDB) IsProgramAccount(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProgramAccount", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsProgramAccount indicates an expected call of IsProgramAccount.
func (mr *MockStateDBMockRecorder) IsProgramAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProgramAccount", reflect.TypeOf((*MockStateDB)(nil).IsProgramAccount), arg0)
}

// IsValidCodeFormat mocks base method.
func (m *MockStateDB) IsValidCodeFormat(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidCodeFormat", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidCodeFormat indicates an expected call of IsValidCodeFormat.
func (mr *MockStateDBMockRecorder) IsValidCodeFormat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidCodeFormat", reflect.TypeOf((*MockStateDB)(nil).IsValidCodeFormat), arg0)
}

// Prepare mocks base method.
func (m *MockStateDB) Prepare(arg0 params.Rules, arg1, arg2, arg3 common.Address, arg4 *common.Address, arg5 []common.Address, arg6 types.AccessList) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Prepare", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// Prepare indicates an expected call of Prepare.
func (mr *MockStateDBMockRecorder) Prepare(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockStateDB)(nil).Prepare), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// RevertToSnapshot mocks base method.
func (m *MockStateDB) RevertToSnapshot(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RevertToSnapshot", arg0)
}

// RevertToSnapshot indicates an expected call of RevertToSnapshot.
func (mr *MockStateDBMockRecorder) RevertToSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertToSnapshot", reflect.TypeOf((*MockStateDB)(nil).RevertToSnapshot), arg0)
}

// SelfDestruct mocks base method.
func (m *MockStateDB) SelfDestruct(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SelfDestruct", arg0)
}

// SelfDestruct indicates an expected call of SelfDestruct.
func (mr *MockStateDBMockRecorder) SelfDestruct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfDestruct", reflect.TypeOf((*MockStateDB)(nil).SelfDestruct), arg0)
}

// SelfDestruct6780 mocks base method.
func (m *MockStateDB) SelfDestruct6780(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SelfDestruct6780", arg0)
}

// SelfDestruct6780 indicates an expected call of SelfDestruct6780.
func (mr *MockStateDBMockRecorder) SelfDestruct6780(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfDestruct6780", reflect.TypeOf((*MockStateDB)(nil).SelfDestruct6780), arg0)
}

// SetCode mocks base method.
func (m *MockStateDB) SetCode(arg0 common.Address, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCode indicates an expected call of SetCode.
func (mr *MockStateDBMockRecorder) SetCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockStateDB)(nil).SetCode), arg0, arg1)
}

// SetCodeToEOA mocks base method.
func (m *MockStateDB) SetCodeToEOA(arg0 common.Address, arg1 []byte, arg2 params.Rules) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCodeToEOA", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCodeToEOA indicates an expected call of SetCodeToEOA.
func (mr *MockStateDBMockRecorder) SetCodeToEOA(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCodeToEOA", reflect.TypeOf((*MockStateDB)(nil).SetCodeToEOA), arg0, arg1, arg2)
}

// SetNonce mocks base method.
func (m *MockStateDB) SetNonce(arg0 common.Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0, arg1)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockStateDBMockRecorder) SetNonce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockStateDB)(nil).SetNonce), arg0, arg1)
}

// SetState mocks base method.
func (m *MockStateDB) SetState(arg0 common.Address, arg1, arg2 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", arg0, arg1, arg2)
}

// SetState indicates an expected call of SetState.
func (mr *MockStateDBMockRecorder) SetState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockStateDB)(nil).SetState), arg0, arg1, arg2)
}

// SetTransientState mocks base method.
func (m *MockStateDB) SetTransientState(arg0 common.Address, arg1, arg2 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransientState", arg0, arg1, arg2)
}

// SetTransientState indicates an expected call of SetTransientState.
func (mr *MockStateDBMockRecorder) SetTransientState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransientState", reflect.TypeOf((*MockStateDB)(nil).SetTransientState), arg0, arg1, arg2)
}

// SlotInAccessList mocks base method.
func (m *MockStateDB) SlotInAccessList(arg0 common.Address, arg1 common.Hash) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlotInAccessList", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SlotInAccessList indicates an expected call of SlotInAccessList.
func (mr *MockStateDBMockRecorder) SlotInAccessList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlotInAccessList", reflect.TypeOf((*MockStateDB)(nil).SlotInAccessList), arg0, arg1)
}

// Snapshot mocks base method.
func (m *MockStateDB) Snapshot() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(int)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockStateDBMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockStateDB)(nil).Snapshot))
}

// SubBalance mocks base method.
func (m *MockStateDB) SubBalance(arg0 common.Address, arg1 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubBalance", arg0, arg1)
}

// SubBalance indicates an expected call of SubBalance.
func (mr *MockStateDBMockRecorder) SubBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubBalance", reflect.TypeOf((*MockStateDB)(nil).SubBalance), arg0, arg1)
}

// SubRefund mocks base method.
func (m *MockStateDB) SubRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubRefund", arg0)
}

// SubRefund indicates an expected call of SubRefund.
func (mr *MockStateDBMockRecorder) SubRefund(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubRefund", reflect.TypeOf((*MockStateDB)(nil).SubRefund), arg0)
}

// UpdateKey mocks base method.
func (m *MockStateDB) UpdateKey(arg0 common.Address, arg1 accountkey.AccountKey, arg2 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKey indicates an expected call of UpdateKey.
func (mr *MockStateDBMockRecorder) UpdateKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKey", reflect.TypeOf((*MockStateDB)(nil).UpdateKey), arg0, arg1, arg2)
}
