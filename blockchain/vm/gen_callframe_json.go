// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package vm

import (
	"encoding/json"
	"math/big"

	"github.com/klaytn/klaytn/common"
	"github.com/klaytn/klaytn/common/hexutil"
)

var _ = (*callFrameMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (c CallFrame) MarshalJSON() ([]byte, error) {
	type CallFrame0 struct {
		Type         OpCode          `json:"-"`
		From         common.Address  `json:"from"`
		Gas          hexutil.Uint64  `json:"gas"`
		GasUsed      hexutil.Uint64  `json:"gasUsed"`
		To           *common.Address `json:"to,omitempty"`
		Input        hexutil.Bytes   `json:"input"`
		Output       hexutil.Bytes   `json:"output,omitempty"`
		Error        string          `json:"error,omitempty"`
		RevertReason string          `json:"revertReason,omitempty"`
		Reverted     *RevertedInfo   `json:"reverted,omitempty"`
		Calls        []CallFrame     `json:"calls,omitempty"`
		Value        *hexutil.Big    `json:"value,omitempty"`
		TypeString   string          `json:"type"`
	}
	var enc CallFrame0
	enc.Type = c.Type
	enc.From = c.From
	enc.Gas = hexutil.Uint64(c.Gas)
	enc.GasUsed = hexutil.Uint64(c.GasUsed)
	enc.To = c.To
	enc.Input = c.Input
	enc.Output = c.Output
	enc.Error = c.Error
	enc.RevertReason = c.RevertReason
	enc.Reverted = c.Reverted
	enc.Calls = c.Calls
	enc.Value = (*hexutil.Big)(c.Value)
	enc.TypeString = c.TypeString()
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (c *CallFrame) UnmarshalJSON(input []byte) error {
	type CallFrame0 struct {
		Type         *OpCode         `json:"-"`
		From         *common.Address `json:"from"`
		Gas          *hexutil.Uint64 `json:"gas"`
		GasUsed      *hexutil.Uint64 `json:"gasUsed"`
		To           *common.Address `json:"to,omitempty"`
		Input        *hexutil.Bytes  `json:"input"`
		Output       *hexutil.Bytes  `json:"output,omitempty"`
		Error        *string         `json:"error,omitempty"`
		RevertReason *string         `json:"revertReason,omitempty"`
		Reverted     *RevertedInfo   `json:"reverted,omitempty"`
		Calls        []CallFrame     `json:"calls,omitempty"`
		Value        *hexutil.Big    `json:"value,omitempty"`
	}
	var dec CallFrame0
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Type != nil {
		c.Type = *dec.Type
	}
	if dec.From != nil {
		c.From = *dec.From
	}
	if dec.Gas != nil {
		c.Gas = uint64(*dec.Gas)
	}
	if dec.GasUsed != nil {
		c.GasUsed = uint64(*dec.GasUsed)
	}
	if dec.To != nil {
		c.To = dec.To
	}
	if dec.Input != nil {
		c.Input = *dec.Input
	}
	if dec.Output != nil {
		c.Output = *dec.Output
	}
	if dec.Error != nil {
		c.Error = *dec.Error
	}
	if dec.RevertReason != nil {
		c.RevertReason = *dec.RevertReason
	}
	if dec.Reverted != nil {
		c.Reverted = dec.Reverted
	}
	if dec.Calls != nil {
		c.Calls = dec.Calls
	}
	if dec.Value != nil {
		c.Value = (*big.Int)(dec.Value)
	}
	return nil
}
