// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package consensus

import (
	"errors"
	"math/big"
	"strings"

	"github.com/kaiachain/kaia"
	"github.com/kaiachain/kaia/accounts/abi"
	"github.com/kaiachain/kaia/accounts/abi/bind"
	"github.com/kaiachain/kaia/blockchain/types"
	"github.com/kaiachain/kaia/common"
	"github.com/kaiachain/kaia/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = kaia.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AddressBookMetaData contains all meta data concerning the AddressBook contract.
var AddressBookMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[{\"name\":\"_cnNodeId\",\"type\":\"address\"}],\"name\":\"getCnInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAddressInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pocContractAddress\",\"type\":\"address\"},{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"submitUpdatePocContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"deleteAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cnNodeId\",\"type\":\"address\"},{\"name\":\"_cnStakingContractAddress\",\"type\":\"address\"},{\"name\":\"_cnRewardAddress\",\"type\":\"address\"}],\"name\":\"registerCnStakingContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CN_REWARD_ADDRESS_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spareContractAddress\",\"type\":\"address\"}],\"name\":\"submitUpdateSpareContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_functionId\",\"type\":\"uint8\"},{\"name\":\"_firstArg\",\"type\":\"bytes32\"},{\"name\":\"_secondArg\",\"type\":\"bytes32\"},{\"name\":\"_thirdArg\",\"type\":\"bytes32\"}],\"name\":\"revokeRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_functionId\",\"type\":\"uint8\"},{\"name\":\"_firstArg\",\"type\":\"bytes32\"},{\"name\":\"_secondArg\",\"type\":\"bytes32\"},{\"name\":\"_thirdArg\",\"type\":\"bytes32\"}],\"name\":\"getRequestInfoByArgs\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KIR_CONTRACT_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActivated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kirContractAddress\",\"type\":\"address\"},{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"updateKirContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isConstructed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cnNodeId\",\"type\":\"address\"}],\"name\":\"unregisterCnStakingContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spareContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CN_NODE_ID_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PENDING_REQUEST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminList\",\"type\":\"address[]\"},{\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"constructContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"submitDeleteAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getRequestInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"reviseRewardAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"submitAddAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"submitClearRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_WEEK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kirContractAddress\",\"type\":\"address\"},{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"submitUpdateKirContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TWO_WEEKS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spareContractAddress\",\"type\":\"address\"}],\"name\":\"updateSpareContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POC_CONTRACT_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cnNodeId\",\"type\":\"address\"}],\"name\":\"submitUnregisterCnStakingContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kirContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"updateRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pocContractAddress\",\"type\":\"address\"},{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"updatePocContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cnNodeId\",\"type\":\"address\"},{\"name\":\"_cnStakingContractAddress\",\"type\":\"address\"},{\"name\":\"_cnRewardAddress\",\"type\":\"address\"}],\"name\":\"submitRegisterCnStakingContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateAddressBook\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pocContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingRequestList\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CN_STAKING_ADDRESS_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"submitUpdateRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"submitActivateAddressBook\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"adminList\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"requirement\",\"type\":\"uint256\"}],\"name\":\"DeployContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"DeleteAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requirement\",\"type\":\"uint256\"}],\"name\":\"UpdateRequirement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ClearRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"thirdArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"confirmers\",\"type\":\"address[]\"}],\"name\":\"SubmitRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"thirdArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"confirmers\",\"type\":\"address[]\"}],\"name\":\"ExpiredRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"thirdArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"confirmers\",\"type\":\"address[]\"}],\"name\":\"RevokeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"thirdArg\",\"type\":\"bytes32\"}],\"name\":\"CancelRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"thirdArg\",\"type\":\"bytes32\"}],\"name\":\"ExecuteRequestSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"thirdArg\",\"type\":\"bytes32\"}],\"name\":\"ExecuteRequestFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ActivateAddressBook\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"prevPocContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prevVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"curPocContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"curVersion\",\"type\":\"uint256\"}],\"name\":\"UpdatePocContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"prevKirContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prevVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"curKirContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"curVersion\",\"type\":\"uint256\"}],\"name\":\"UpdateKirContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spareContractAddress\",\"type\":\"address\"}],\"name\":\"UpdateSpareContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cnNodeId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cnStakingContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cnRewardAddress\",\"type\":\"address\"}],\"name\":\"RegisterCnStakingContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cnNodeId\",\"type\":\"address\"}],\"name\":\"UnregisterCnStakingContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cnNodeId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prevRewardAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"curRewardAddress\",\"type\":\"address\"}],\"name\":\"ReviseRewardAddress\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"76674c54": "CN_NODE_ID_TYPE()",
		"32b91e85": "CN_REWARD_ADDRESS_TYPE()",
		"de5bbfbc": "CN_STAKING_ADDRESS_TYPE()",
		"4b6a94cc": "CONTRACT_TYPE()",
		"41b6945c": "KIR_CONTRACT_TYPE()",
		"58d65880": "MAX_ADMIN()",
		"778f39cb": "MAX_PENDING_REQUEST()",
		"8e6f6b77": "ONE_WEEK()",
		"b50060e4": "POC_CONTRACT_TYPE()",
		"934d1fa4": "TWO_WEEKS()",
		"ffa1ad74": "VERSION()",
		"cec92466": "activateAddressBook()",
		"70480275": "addAdmin(address)",
		"4f97638f": "clearRequest()",
		"7894c366": "constructContract(address[],uint256)",
		"27e1f7df": "deleteAdmin(address)",
		"715b208b": "getAllAddress()",
		"160370b8": "getAllAddressInfo()",
		"15575d5a": "getCnInfo(address)",
		"da34a0bd": "getPendingRequestList()",
		"82d67e5a": "getRequestInfo(bytes32)",
		"407091eb": "getRequestInfoByArgs(uint8,bytes32,bytes32,bytes32)",
		"1865c57d": "getState()",
		"4a8c1fb4": "isActivated()",
		"50a5bb69": "isConstructed()",
		"b858dd95": "kirContractAddress()",
		"d267eda5": "pocContractAddress()",
		"298b3c61": "registerCnStakingContract(address,address,address)",
		"b7563930": "requirement()",
		"832a2aad": "reviseRewardAddress(address)",
		"3f0628b1": "revokeRequest(uint8,bytes32,bytes32,bytes32)",
		"6abd623d": "spareContractAddress()",
		"feb15ca1": "submitActivateAddressBook()",
		"863f5c0a": "submitAddAdmin(address)",
		"87cd9feb": "submitClearRequest()",
		"791b5123": "submitDeleteAdmin(address)",
		"cc11efc0": "submitRegisterCnStakingContract(address,address,address)",
		"b5067706": "submitUnregisterCnStakingContract(address)",
		"9258d768": "submitUpdateKirContract(address,uint256)",
		"21ac4ad4": "submitUpdatePocContract(address,uint256)",
		"e748357b": "submitUpdateRequirement(uint256)",
		"394a144a": "submitUpdateSpareContract(address)",
		"579740db": "unregisterCnStakingContract(address)",
		"4c5d435c": "updateKirContract(address,uint256)",
		"c7e9de75": "updatePocContract(address,uint256)",
		"c47afb3a": "updateRequirement(uint256)",
		"afaaf330": "updateSpareContract(address)",
	},
	Bin: "0x608060405234801561001057600080fd5b50615c4580620000216000396000f3006080604052600436106102215763ffffffff60e060020a60003504166315575d5a8114610226578063160370b8146102725780631865c57d1461037c57806321ac4ad4146103ec57806327e1f7df14610412578063298b3c611461043357806332b91e8514610460578063394a144a1461048b5780633f0628b1146104ac578063407091eb146104d057806341b6945c1461056c5780634a8c1fb4146105815780634b6a94cc146105aa5780634c5d435c146106345780634f97638f1461065857806350a5bb691461066d578063579740db1461068257806358d65880146106a35780636abd623d146106ca57806370480275146106fb578063715b208b1461071c57806376674c54146107ca578063778f39cb146107df5780637894c366146107f4578063791b51231461081857806382d67e5a14610839578063832a2aad146108d5578063863f5c0a146108f657806387cd9feb146109175780638e6f6b771461092c5780639258d76814610941578063934d1fa414610965578063afaaf3301461097a578063b50060e41461099b578063b5067706146109b0578063b7563930146109d1578063b858dd95146109e6578063c47afb3a146109fb578063c7e9de7514610a13578063cc11efc014610a37578063cec9246614610a64578063d267eda514610a79578063da34a0bd14610a8e578063de5bbfbc14610af3578063e748357b14610b08578063feb15ca114610b20578063ffa1ad7414610b35575b600080fd5b34801561023257600080fd5b50610247600160a060020a0360043516610b4a565b60408051600160a060020a039485168152928416602084015292168183015290519081900360600190f35b34801561027e57600080fd5b50610287610ca0565b60408051600160a060020a0380851660608301528316608082015260a080825287519082015286519091829160208084019284019160c08501918b8101910280838360005b838110156102e45781810151838201526020016102cc565b50505050905001848103835288818151815260200191508051906020019060200280838360005b8381101561032357818101518382015260200161030b565b50505050905001848103825287818151815260200191508051906020019060200280838360005b8381101561036257818101518382015260200161034a565b505050509050019850505050505050505060405180910390f35b34801561038857600080fd5b50610391610deb565b6040518080602001838152602001828103825284818151815260200191508051906020019060200280838360005b838110156103d75781810151838201526020016103bf565b50505050905001935050505060405180910390f35b3480156103f857600080fd5b50610410600160a060020a0360043516602435610e57565b005b34801561041e57600080fd5b50610410600160a060020a0360043516611038565b34801561043f57600080fd5b50610410600160a060020a03600435811690602435811690604435166112c9565b34801561046c57600080fd5b50610475611720565b6040805160ff9092168252519081900360200190f35b34801561049757600080fd5b50610410600160a060020a0360043516611725565b3480156104b857600080fd5b5061041060ff600435166024356044356064356117f6565b3480156104dc57600080fd5b506104f460ff60043516602435604435606435611e88565b60408051858152908101839052602081016060820183600481111561051557fe5b60ff168152602001828103825285818151815260200191508051906020019060200280838360005b8381101561055557818101518382015260200161053d565b505050509050019550505050505060405180910390f35b34801561057857600080fd5b50610475611f35565b34801561058d57600080fd5b50610596611f3a565b604080519115158252519081900360200190f35b3480156105b657600080fd5b506105bf611f43565b6040805160208082528351818301528351919283929083019185019080838360005b838110156105f95781810151838201526020016105e1565b50505050905090810190601f1680156106265780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561064057600080fd5b50610410600160a060020a0360043516602435611f7a565b34801561066457600080fd5b5061041061216f565b34801561067957600080fd5b50610596612274565b34801561068e57600080fd5b50610410600160a060020a0360043516612282565b3480156106af57600080fd5b506106b8612658565b60408051918252519081900360200190f35b3480156106d657600080fd5b506106df61265d565b60408051600160a060020a039092168252519081900360200190f35b34801561070757600080fd5b50610410600160a060020a036004351661266c565b34801561072857600080fd5b5061073161284b565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561077557818101518382015260200161075d565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156107b457818101518382015260200161079c565b5050505090500194505050505060405180910390f35b3480156107d657600080fd5b50610475612b3a565b3480156107eb57600080fd5b506106b8612b3f565b34801561080057600080fd5b50610410602460048035828101929101359035612b44565b34801561082457600080fd5b50610410600160a060020a0360043516612ef1565b34801561084557600080fd5b506108516004356130f6565b6040518088600a81111561086157fe5b60ff16815260208101889052604081018790526060810186905260a08101849052608081019060c00183600481111561089657fe5b60ff168152602001828103825285818151815260200191508051906020019060200280838360008381101561036257818101518382015260200161034a565b3480156108e157600080fd5b50610410600160a060020a03600435166131b4565b34801561090257600080fd5b50610410600160a060020a03600435166133bd565b34801561092357600080fd5b5061041061358b565b34801561093857600080fd5b506106b8613649565b34801561094d57600080fd5b50610410600160a060020a0360043516602435613650565b34801561097157600080fd5b506106b86137e8565b34801561098657600080fd5b50610410600160a060020a03600435166137ef565b3480156109a757600080fd5b5061047561388e565b3480156109bc57600080fd5b50610410600160a060020a0360043516613893565b3480156109dd57600080fd5b506106b8613a49565b3480156109f257600080fd5b506106df613a4f565b348015610a0757600080fd5b50610410600435613a5e565b348015610a1f57600080fd5b50610410600160a060020a0360043516602435613bb1565b348015610a4357600080fd5b50610410600160a060020a0360043581169060243581169060443516613da6565b348015610a7057600080fd5b50610410614265565b348015610a8557600080fd5b506106df6145b5565b348015610a9a57600080fd5b50610aa36145c4565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610adf578181015183820152602001610ac7565b505050509050019250505060405180910390f35b348015610aff57600080fd5b5061047561461e565b348015610b1457600080fd5b50610410600435614623565b348015610b2c57600080fd5b506104106147a6565b348015610b4157600080fd5b506106b861461e565b600080808084600160a060020a0381161515610b9e576040805160e560020a62461bcd0281526020600482015260106024820152600080516020615bba833981519152604482015290519081900360640190fd5b600160a060020a038616600081815260086020526040902054600980549194509084908110610bc957fe5b600091825260209091200154600160a060020a031614610c21576040805160e560020a62461bcd0281526020600482015260136024820152600080516020615b9a833981519152604482015290519081900360640190fd5b6009805483908110610c2f57fe5b600091825260209091200154600a8054600160a060020a039092169184908110610c5557fe5b600091825260209091200154600b8054600160a060020a039092169185908110610c7b57fe5b6000918252602090912001549196509450600160a060020a0316925050509193909250565b60055460065460098054604080516020808402820181019092528281526060958695869560009586959194600a94600b94600160a060020a03918216949116928791830182828015610d1b57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610cfd575b5050505050945083805480602002602001604051908101604052809291908181526020018280548015610d7757602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610d59575b5050505050935082805480602002602001604051908101604052809291908181526020018280548015610dd357602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610db5575b50505050509250945094509450945094509091929394565b606060008060015481805480602002602001604051908101604052809291908181526020018280548015610e4857602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610e2a575b50505050509150915091509091565b600082600160a060020a0381161515610ea8576040805160e560020a62461bcd0281526020600482015260106024820152600080516020615bba833981519152604482015290519081900360640190fd5b3360008181526002602052604090205460ff161515610eff576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b8385600160a060020a0316630f6100726040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610f3e57600080fd5b505af1158015610f52573d6000803e3d6000fd5b505050506040513d6020811015610f6857600080fd5b505114610fbf576040805160e560020a62461bcd02815260206004820152601460248201527f496e76616c696420506f432076657273696f6e2e000000000000000000000000604482015290519081900360640190fd5b610fd66006600160a060020a038716866000614af1565b9250610fef6006600160a060020a038716866000614bc4565b610ff8836151f5565b80156110235750600160008481526003602052604090206006015460ff16600481111561102157fe5b145b156110315761103183615210565b5050505050565b600080333014611080576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020615bda833981519152604482015290519081900360640190fd5b600160a060020a038316600090815260026020526040902054839060ff1615156110e2576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b6000546110f690600163ffffffff61591416565b6001546032821115801561110a5750818111155b801561111557508015155b801561112057508115155b1515611164576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615bfa833981519152604482015290519081900360640190fd5b60008054600160a060020a0388168252600260205260408220805460ff19169055955093505b6001850384101561123d5785600160a060020a03166000858154811015156111ae57fe5b600091825260209091200154600160a060020a03161415611232576000805460001987019081106111db57fe5b60009182526020822001548154600160a060020a039091169190869081106111ff57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555061123d565b60019093019261118a565b60008054600019870190811061124f57fe5b600091825260208220018054600160a060020a03191690555461127990600163ffffffff61591416565b611284600082615a01565b5061128d61216f565b604051600160a060020a038716907f1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc256522090600090a2505050505050565b6000333014611310576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020615bda833981519152604482015290519081900360640190fd5b600954600010156113ae57600160a060020a03841660008181526008602052604090205460098054909190811061134357fe5b600091825260209091200154600160a060020a031614156113ae576040805160e560020a62461bcd02815260206004820152601960248201527f434e206e6f646520494420616c72656164792065786973742e00000000000000604482015290519081900360640190fd5b83600160a060020a031683600160a060020a031663139d7fed6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156113f657600080fd5b505af115801561140a573d6000803e3d6000fd5b505050506040513d602081101561142057600080fd5b5051600160a060020a03161461146e576040805160e560020a62461bcd0281526020600482015260136024820152600080516020615b9a833981519152604482015290519081900360640190fd5b81600160a060020a031683600160a060020a0316638cf57cb96040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156114b657600080fd5b505af11580156114ca573d6000803e3d6000fd5b505050506040513d60208110156114e057600080fd5b5051600160a060020a031614611540576040805160e560020a62461bcd02815260206004820152601a60248201527f496e76616c696420434e2072657761726420616464726573732e000000000000604482015290519081900360640190fd5b82600160a060020a031663392e53cd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561157e57600080fd5b505af1158015611592573d6000803e3d6000fd5b505050506040513d60208110156115a857600080fd5b50511515600114611603576040805160e560020a62461bcd02815260206004820152601f60248201527f434e20636f6e7472616374206973206e6f7420696e697469616c697a65642e00604482015290519081900360640190fd5b5060098054600160a060020a03808616600081815260086020908152604080832086905560018087019097557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af86018054600160a060020a03199081168617909155600a8054808a019091557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180548b88169083168117909155600b8054998a0181559094527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db99097018054958916959097168517909655855192835282015280840191909152915190917fe01726557c1ea9f7286dca4bba890e96fea9041689db298806306cafa74c9e91919081900360600190a150505050565b600281565b3360008181526002602052604081205490919060ff16151561177f576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b611796600a600160a060020a038516600080614af1565b91506117af600a600160a060020a038516600080614bc4565b6117b8826151f5565b80156117e35750600160008381526003602052604090206006015460ff1660048111156117e157fe5b145b156117f1576117f182615210565b505050565b33600081815260026020526040812054909182918291829160ff161515611855576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b61186189898989614af1565b60008181526003602052604090206005015490955015156118cc576040805160e560020a62461bcd02815260206004820152601060248201527f496e76616c696420726571756573742e00000000000000000000000000000000604482015290519081900360640190fd5b600160008681526003602052604090206006015460ff1660048111156118ee57fe5b14611943576040805160e560020a62461bcd02815260206004820152601f60248201527f4d757374206265206174206e6f742d636f6e6669726d65642073746174652e00604482015290519081900360640190fd5b60008581526003602052604081206004015490945092508391505b82821015611e2657600085815260036020526040902060040180548390811061198357fe5b600091825260209091200154600160a060020a0316331415611e1b57600085815260036020526040902060050154600194504262093a809091011015611b2f5760008581526003602052604090206005015442621275009091011015611a3e576119ec8561592b565b60008581526003602081905260408220805460ff19168155600181018390556002810183905590810182905590611a266004830182615a25565b5060006005820155600601805460ff19169055611a5b565b6000858152600360205260409020600601805460ff191660041790555b600085815260036020526040908190209051339187917f9f3ca7a04988021200a04e0775f46648683bffe7203608269a66c371befe5685918d918d918d918d91600401908086600a811115611aac57fe5b60ff16815260208101869052604081018590526060810184905260a082820381016080830190815284549183018290529160c0019084908015611b1857602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611afa575b5050965050505050505060405180910390a3611e16565b60001983018214611bc057600085815260036020526040902060040180546000198501908110611b5b57fe5b6000918252602080832090910154878352600390915260409091206004018054600160a060020a039092169184908110611b9157fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b600085815260036020526040902060040180546000198501908110611be157fe5b600091825260208083209091018054600160a060020a0319169055868252600390526040902060040154611c1c90600163ffffffff61591416565b6000868152600360205260409020611c379060040182615a01565b5060008581526003602081905260409182902080546001820154600283015493830154945133958b957f9c174b2536ba49e3478ca649dac74d9e9f71f70adf70f193e780eabbfcdc367c9560ff9095169490926004909101908086600a811115611c9d57fe5b60ff16815260208101869052604081018590526060810184905260a082820381016080830190815284549183018290529160c0019084908015611d0957602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611ceb575b5050965050505050505060405180910390a36000858152600360205260409020600401541515611e1657611d3c8561592b565b60008581526003602081905260408220805460ff19168155600181018390556002810183905590810182905590611d766004830182615a25565b506000600582018190556006909101805460ff19169055858152600360208190526040918290208054600182015460028301549290930154935133948a947fbfda049a0206fd9c90ed4a3170f5bfaad83c323a16835dd68fea92faa247c2cd9460ff9094169390929091908085600a811115611dee57fe5b60ff168152602081019490945250604080840192909252606083015251908190036080019150a35b611e26565b60019091019061195e565b831515611e7d576040805160e560020a62461bcd02815260206004820152601d60248201527f4d73672e73656e64657220686173206e6f74207265717565737465642e000000604482015290519081900360640190fd5b505050505050505050565b600060606000806000611e9d89898989614af1565b600081815260036020908152604091829020600581015460068201546004909201805485518186028101860190965280865295965086959094919360ff90931692859190830182828015611f1a57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611efc575b50505050509250945094509450945050945094509450949050565b600481565b600c5460ff1681565b60408051808201909152600b81527f41646472657373426f6f6b000000000000000000000000000000000000000000602082015281565b600080333014611fc2576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020615bda833981519152604482015290519081900360640190fd5b8284600160a060020a031663444263466040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561200157600080fd5b505af1158015612015573d6000803e3d6000fd5b505050506040513d602081101561202b57600080fd5b505114612082576040805160e560020a62461bcd02815260206004820152601460248201527f496e76616c6964204b49522076657273696f6e2e000000000000000000000000604482015290519081900360640190fd5b505060068054600160a060020a03848116600160a060020a031983161790925516600081156121185781600160a060020a031663444263466040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156120e957600080fd5b505af11580156120fd573d6000803e3d6000fd5b505050506040513d602081101561211357600080fd5b505190505b60408051600160a060020a038085168252602082018490528616818301526060810185905290517ffdccdf242038c2d09605009fbb95e03f75cdbd106d0a9e52a1670be9553c88489181900360800190a150505050565b6000803330146121b7576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020615bda833981519152604482015290519081900360640190fd5b505060045460005b8181101561223b57600360006004838154811015156121da57fe5b600091825260208083209091015483528201929092526040018120805460ff19168155600181018290556002810182905560038101829055906122206004830182615a25565b5060006005820155600601805460ff191690556001016121bf565b61224760046000615a25565b6040517f907527d30089abd16e30f06ddbbbc18480505176262f19bc16c1fbf9262f9c6b90600090a15050565b600c54610100900460ff1681565b60003330146122c9576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020615bda833981519152604482015290519081900360640190fd5b50600160a060020a03811660008181526008602052604090205460098054919291839081106122f457fe5b600091825260209091200154600160a060020a03161461234c576040805160e560020a62461bcd0281526020600482015260136024820152600080516020615b9a833981519152604482015290519081900360640190fd5b6009546001106123a6576040805160e560020a62461bcd02815260206004820152601b60248201527f434e2073686f756c64206265206d6f7265207468616e206f6e652e0000000000604482015290519081900360640190fd5b6009546000190181101561251e576009805460001981019081106123c657fe5b60009182526020909120015460098054600160a060020a0390921691839081106123ec57fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600954600a805490916000190190811061242b57fe5b600091825260209091200154600a8054600160a060020a03909216918390811061245157fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600954600b805490916000190190811061249057fe5b600091825260209091200154600b8054600160a060020a0390921691839081106124b657fe5b600091825260208220018054600160a060020a031916600160a060020a039390931692909217909155600980548392600892909160001981019081106124f857fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020555b600160a060020a03821660009081526008602052604081205560098054600019810190811061254957fe5b60009182526020909120018054600160a060020a031916905560095461257690600163ffffffff61591416565b612581600982615a01565b50600a8054600019810190811061259457fe5b60009182526020909120018054600160a060020a0319169055600a546125c190600163ffffffff61591416565b6125cc600a82615a01565b50600b805460001981019081106125df57fe5b60009182526020909120018054600160a060020a0319169055600b5461260c90600163ffffffff61591416565b612617600b82615a01565b5060408051600160a060020a038416815290517fa30079721e55931e89e7cdb421712ad0fcc817e7cac8fe954aa7ed0d46b9c42d9181900360200190a15050565b603281565b600754600160a060020a031681565b3330146126b1576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020615bda833981519152604482015290519081900360640190fd5b600160a060020a038116600090815260026020526040902054819060ff1615612724576040805160e560020a62461bcd02815260206004820152601460248201527f41646d696e20616c72656164792065786974732e000000000000000000000000604482015290519081900360640190fd5b60005461273890600163ffffffff6159e816565b6001546032821115801561274c5750818111155b801561275757508015155b801561276257508115155b15156127a6576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615bfa833981519152604482015290519081900360640190fd5b600160a060020a0384166000818152600260205260408120805460ff19166001908117909155815490810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563018054600160a060020a031916909117905561281161216f565b604051600160a060020a038516907fad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba90600090a250505050565b600c54606090819081908190600090819060ff161515612884576040805160008082526020820190815281830190925294509250612b2f565b6009805490506003026002016040519080825280602002602001820160405280156128b9578160200160208202803883390190505b5093506009805490506003026002016040519080825280602002602001820160405280156128f1578160200160208202803883390190505b506009549093509150600090505b81811015612a71576000848260030281518110151561291a57fe5b60ff909216602092830290910190910152600980548290811061293957fe5b6000918252602090912001548351600160a060020a039091169084906003840290811061296257fe5b600160a060020a039092166020928302909101909101528351600190859060038402830190811061298f57fe5b60ff909216602092830290910190910152600a8054829081106129ae57fe5b6000918252602090912001548351600160a060020a03909116908490600384026001019081106129da57fe5b600160a060020a0390921660209283029091019091015283516002908590600384028301908110612a0757fe5b60ff909216602092830290910190910152600b805482908110612a2657fe5b6000918252602090912001548351600160a060020a0390911690849060026003850201908110612a5257fe5b600160a060020a039092166020928302909101909101526001016128ff565b60038483600302815181101515612a8457fe5b60ff9092166020928302909101909101526005548351600160a060020a0390911690849060038502908110612ab557fe5b600160a060020a039092166020928302909101909101528351600490859060016003860201908110612ae357fe5b60ff9092166020928302909101909101526006548351600160a060020a0390911690849060038502600101908110612b1757fe5b600160a060020a039092166020928302909101909101525b509194909350915050565b600081565b606481565b600080838360328211801590612b5a5750818111155b8015612b6557508015155b8015612b7057508115155b1515612bb4576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615bfa833981519152604482015290519081900360640190fd5b7388bb3838aa0a140acb73eeb3d4b25a8d3afd58d43314612c1f576040805160e560020a62461bcd02815260206004820152600f60248201527f496e76616c69642073656e6465722e0000000000000000000000000000000000604482015290519081900360640190fd5b600c54610100900460ff1615612c7f576040805160e560020a62461bcd02815260206004820152601460248201527f416c726561647920636f6e73747275637465642e000000000000000000000000604482015290519081900360640190fd5b600c805460ff19169055859350600092505b83831015612da65760026000888886818110612ca957fe5b60209081029290920135600160a060020a03168352508101919091526040016000205460ff16158015612d015750868684818110612ce357fe5b90506020020135600160a060020a0316600160a060020a0316600014155b1515612d57576040805160e560020a62461bcd02815260206004820152601e60248201527f41646472657373206973206e756c6c206f72206e6f7420756e697175652e0000604482015290519081900360640190fd5b600160026000898987818110612d6957fe5b60209081029290920135600160a060020a0316835250810191909152604001600020805460ff191691151591909117905560019290920191612c91565b612db260008888615a46565b506001859055600c805461ff001916610100179055604080518082018252600b81527f41646472657373426f6f6b00000000000000000000000000000000000000000060208083019182528351938401899052606080855283519085015282517fc5caa942b8f8ea45a2e094d941dbba0ef9c0307f34c81ce78e71bfb128d6b25a946000938b939192839283019160808401918083838a5b83811015612e62578181015183820152602001612e4a565b50505050905090810190601f168015612e8f5780820380516001836020036101000a031916815260200191505b508381038252858181548152602001915080548015612ed757602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612eb9575b50509550505050505060405180910390a150505050505050565b600160a060020a038116600090815260026020526040812054829060ff161515612f53576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b3360008181526002602052604090205460ff161515612faa576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b83600160a060020a0381161515612ff9576040805160e560020a62461bcd0281526020600482015260106024820152600080516020615bba833981519152604482015290519081900360640190fd5b60005461300d90600163ffffffff61591416565b600154603282111580156130215750818111155b801561302c57508015155b801561303757508115155b151561307b576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615bfa833981519152604482015290519081900360640190fd5b6130926002600160a060020a038916600080614af1565b95506130ab6002600160a060020a038916600080614bc4565b6130b4866151f5565b80156130df5750600160008781526003602052604090206006015460ff1660048111156130dd57fe5b145b156130ed576130ed86615210565b50505050505050565b60008181526003602081815260408084208054600182015460028301549583015460058401546006850154600490950180548751818a0281018a019098528088528a998a998a996060998b998a9960ff91821699909895979096909594919092169291859183018282801561319457602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311613176575b505050505092509650965096509650965096509650919395979092949650565b60008080808085600160a060020a0381161515613209576040805160e560020a62461bcd0281526020600482015260106024820152600080516020615bba833981519152604482015290519081900360640190fd5b600a546000965086955093508492505b8383101561326457600a80543391908590811061323257fe5b600091825260209091200154600160a060020a031614156132595760019550829450613264565b600190920191613219565b8515156132bb576040805160e560020a62461bcd02815260206004820152601e60248201527f4d73672e73656e646572206973206e6f7420434e20636f6e74726163742e0000604482015290519081900360640190fd5b600b8054869081106132c957fe5b600091825260209091200154600b8054600160a060020a0390921693508891879081106132f257fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055507faa5c92ffd739bc0b8b117b671e7d713917ddb1440b436263a3ea106d70c6f05f60098681548110151561335057fe5b600091825260209091200154600b8054600160a060020a03909216918591908990811061337957fe5b6000918252602091829020015460408051600160a060020a03958616815293851692840192909252929092168183015290519081900360600190a150505050505050565b3360008181526002602052604081205490919060ff161515613417576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b600160a060020a038316600090815260026020526040902054839060ff161561348a576040805160e560020a62461bcd02815260206004820152601460248201527f41646d696e20616c72656164792065786974732e000000000000000000000000604482015290519081900360640190fd5b83600160a060020a03811615156134d9576040805160e560020a62461bcd0281526020600482015260106024820152600080516020615bba833981519152604482015290519081900360640190fd5b6000546134ed90600163ffffffff6159e816565b600154603282111580156135015750818111155b801561350c57508015155b801561351757508115155b151561355b576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615bfa833981519152604482015290519081900360640190fd5b6135726001600160a060020a038916600080614af1565b95506130ab6001600160a060020a038916600080614bc4565b3360008181526002602052604081205490919060ff1615156135e5576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b6135f3600460008080614af1565b9150613603600460008080614bc4565b61360c826151f5565b80156136375750600160008381526003602052604090206006015460ff16600481111561363557fe5b145b156136455761364582615210565b5050565b62093a8081565b600082600160a060020a03811615156136a1576040805160e560020a62461bcd0281526020600482015260106024820152600080516020615bba833981519152604482015290519081900360640190fd5b3360008181526002602052604090205460ff1615156136f8576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b8385600160a060020a031663444263466040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561373757600080fd5b505af115801561374b573d6000803e3d6000fd5b505050506040513d602081101561376157600080fd5b5051146137b8576040805160e560020a62461bcd02815260206004820152601460248201527f496e76616c6964204b49522076657273696f6e2e000000000000000000000000604482015290519081900360640190fd5b6137cf6007600160a060020a038716866000614af1565b9250610fef6007600160a060020a038716866000614bc4565b6212750081565b333014613834576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020615bda833981519152604482015290519081900360640190fd5b60078054600160a060020a031916600160a060020a03838116919091179182905560408051929091168252517f508aacd44cfe23a34a8c2643ab08c3410cf5505632cfce58dcfa0efa2fd2ff37916020908290030190a150565b600381565b60008082600160a060020a03811615156138e5576040805160e560020a62461bcd0281526020600482015260106024820152600080516020615bba833981519152604482015290519081900360640190fd5b3360008181526002602052604090205460ff16151561393c576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b600160a060020a03851660008181526008602052604090205460098054919650908690811061396757fe5b600091825260209091200154600160a060020a0316146139bf576040805160e560020a62461bcd0281526020600482015260136024820152600080516020615b9a833981519152604482015290519081900360640190fd5b600954600110613a19576040805160e560020a62461bcd02815260206004820152601b60248201527f434e2073686f756c64206265206d6f7265207468616e206f6e652e0000000000604482015290519081900360640190fd5b613a306009600160a060020a038716600080614af1565b9250610fef6009600160a060020a038716600080614bc4565b60015481565b600654600160a060020a031681565b333014613aa3576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020615bda833981519152604482015290519081900360640190fd5b6000548160328211801590613ab85750818111155b8015613ac357508015155b8015613ace57508115155b1515613b12576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615bfa833981519152604482015290519081900360640190fd5b600154831415613b6c576040805160e560020a62461bcd02815260206004820152601160248201527f53616d6520726571756972656d656e742e000000000000000000000000000000604482015290519081900360640190fd5b6001839055613b7961216f565b6040805184815290517f8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f9181900360200190a1505050565b600080333014613bf9576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020615bda833981519152604482015290519081900360640190fd5b8284600160a060020a0316630f6100726040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613c3857600080fd5b505af1158015613c4c573d6000803e3d6000fd5b505050506040513d6020811015613c6257600080fd5b505114613cb9576040805160e560020a62461bcd02815260206004820152601460248201527f496e76616c696420506f432076657273696f6e2e000000000000000000000000604482015290519081900360640190fd5b505060058054600160a060020a03848116600160a060020a03198316179092551660008115613d4f5781600160a060020a0316630f6100726040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613d2057600080fd5b505af1158015613d34573d6000803e3d6000fd5b505050506040513d6020811015613d4a57600080fd5b505190505b60408051600160a060020a038085168252602082018490528616818301526060810185905290517fd531725ac89042f190fd73adfdeff435e07500f1a92b4b87743f1bcf91acb3a79181900360800190a150505050565b600083600160a060020a0381161515613df7576040805160e560020a62461bcd0281526020600482015260106024820152600080516020615bba833981519152604482015290519081900360640190fd5b83600160a060020a0381161515613e46576040805160e560020a62461bcd0281526020600482015260106024820152600080516020615bba833981519152604482015290519081900360640190fd5b83600160a060020a0381161515613e95576040805160e560020a62461bcd0281526020600482015260106024820152600080516020615bba833981519152604482015290519081900360640190fd5b3360008181526002602052604090205460ff161515613eec576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b60095460001015613f8a57600160a060020a038816600081815260086020526040902054600980549091908110613f1f57fe5b600091825260209091200154600160a060020a03161415613f8a576040805160e560020a62461bcd02815260206004820152601960248201527f434e206e6f646520494420616c72656164792065786973742e00000000000000604482015290519081900360640190fd5b87600160a060020a031687600160a060020a031663139d7fed6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613fd257600080fd5b505af1158015613fe6573d6000803e3d6000fd5b505050506040513d6020811015613ffc57600080fd5b5051600160a060020a03161461404a576040805160e560020a62461bcd0281526020600482015260136024820152600080516020615b9a833981519152604482015290519081900360640190fd5b85600160a060020a031687600160a060020a0316638cf57cb96040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561409257600080fd5b505af11580156140a6573d6000803e3d6000fd5b505050506040513d60208110156140bc57600080fd5b5051600160a060020a03161461411c576040805160e560020a62461bcd02815260206004820152601a60248201527f496e76616c696420434e2072657761726420616464726573732e000000000000604482015290519081900360640190fd5b86600160a060020a031663392e53cd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561415a57600080fd5b505af115801561416e573d6000803e3d6000fd5b505050506040513d602081101561418457600080fd5b505115156001146141df576040805160e560020a62461bcd02815260206004820152601f60248201527f434e20636f6e7472616374206973206e6f7420696e697469616c697a65642e00604482015290519081900360640190fd5b6141fb6008600160a060020a03808b16908a8116908a16614af1565b94506142196008600160a060020a03808b16908a8116908a16614bc4565b614222856151f5565b801561424d5750600160008681526003602052604090206006015460ff16600481111561424b57fe5b145b1561425b5761425b85615210565b5050505050505050565b3330146142aa576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020615bda833981519152604482015290519081900360640190fd5b600c5460ff1615614305576040805160e560020a62461bcd02815260206004820152601260248201527f416c7265616479206163746976617465642e0000000000000000000000000000604482015290519081900360640190fd5b600054151561435e576040805160e560020a62461bcd02815260206004820152601360248201527f4e6f2061646d696e206973206c69737465642e00000000000000000000000000604482015290519081900360640190fd5b600554600160a060020a031615156143c0576040805160e560020a62461bcd02815260206004820152601f60248201527f506f4320636f6e7472616374206973206e6f7420726567697374657265642e00604482015290519081900360640190fd5b600654600160a060020a03161515614422576040805160e560020a62461bcd02815260206004820152601f60248201527f4b495220636f6e7472616374206973206e6f7420726567697374657265642e00604482015290519081900360640190fd5b600954151561447b576040805160e560020a62461bcd02815260206004820152601560248201527f4e6f206e6f6465204944206973206c69737465642e0000000000000000000000604482015290519081900360640190fd5b600a54600954146144fc576040805160e560020a62461bcd02815260206004820152603660248201527f496e76616c6964206c656e677468206265747765656e206e6f6465204944732060448201527f616e64207374616b696e6720636f6e7472616374732e00000000000000000000606482015290519081900360840190fd5b600b54600a541461457d576040805160e560020a62461bcd02815260206004820152603e60248201527f496e76616c6964206c656e677468206265747765656e207374616b696e67206360448201527f6f6e74726163747320616e6420726577617264206164647265737365732e0000606482015290519081900360840190fd5b600c805460ff191660011790556040517f29d89931226d613bf878a0be8c635eaf2049121c8c68d5ad80a78f0ac9005d4b90600090a1565b600554600160a060020a031681565b6060600480548060200260200160405190810160405280929190818152602001828054801561461357602002820191906000526020600020905b815481526001909101906020018083116145fe575b505050505090505b90565b600181565b3360008181526002602052604081205490919060ff16151561467d576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b60005483603282118015906146925750818111155b801561469d57508015155b80156146a857508115155b15156146ec576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615bfa833981519152604482015290519081900360640190fd5b600154851415614746576040805160e560020a62461bcd02815260206004820152601160248201527f53616d6520726571756972656d656e742e000000000000000000000000000000604482015290519081900360640190fd5b614754600386600080614af1565b9350614764600386600080614bc4565b61476d846151f5565b80156147985750600160008581526003602052604090206006015460ff16600481111561479657fe5b145b156110315761103184615210565b3360008181526002602052604081205490919060ff161515614800576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b600c5460ff161561485b576040805160e560020a62461bcd02815260206004820152601260248201527f416c7265616479206163746976617465642e0000000000000000000000000000604482015290519081900360640190fd5b60005415156148b4576040805160e560020a62461bcd02815260206004820152601360248201527f4e6f2061646d696e206973206c69737465642e00000000000000000000000000604482015290519081900360640190fd5b600554600160a060020a03161515614916576040805160e560020a62461bcd02815260206004820152601f60248201527f506f4320636f6e7472616374206973206e6f7420726567697374657265642e00604482015290519081900360640190fd5b600654600160a060020a03161515614978576040805160e560020a62461bcd02815260206004820152601f60248201527f4b495220636f6e7472616374206973206e6f7420726567697374657265642e00604482015290519081900360640190fd5b60095415156149d1576040805160e560020a62461bcd02815260206004820152601560248201527f4e6f206e6f6465204944206973206c69737465642e0000000000000000000000604482015290519081900360640190fd5b600a5460095414614a52576040805160e560020a62461bcd02815260206004820152603660248201527f496e76616c6964206c656e677468206265747765656e206e6f6465204944732060448201527f616e64207374616b696e6720636f6e7472616374732e00000000000000000000606482015290519081900360840190fd5b600b54600a5414614ad3576040805160e560020a62461bcd02815260206004820152603e60248201527f496e76616c6964206c656e677468206265747765656e207374616b696e67206360448201527f6f6e74726163747320616e6420726577617264206164647265737365732e0000606482015290519081900360840190fd5b614ae1600560008080614af1565b9150613603600560008080614bc4565b6000848484846040516020018085600a811115614b0a57fe5b60ff167f010000000000000000000000000000000000000000000000000000000000000002815260018101949094525060218301919091526041808301919091526040805180840390920182526061909201918290528051909250819060208401908083835b60208310614b8f5780518252601f199092019160209182019101614b70565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912098975050505050505050565b6000806000614bd587878787614af1565b60008181526003602052604090206005015490935015614f5e5760008381526003602052604090206005015442621275009091011015614c6a57614c188361592b565b60008381526003602081905260408220805460ff19168155600181018390556002810183905590810182905590614c526004830182615a25565b5060006005820155600601805460ff19169055614f5e565b6000838152600360205260409020600501544262093a809091011015614da257600460008481526003602052604090206006015460ff166004811115614cac57fe5b14614cce576000838152600360205260409020600601805460ff191660041790555b600083815260036020526040908190209051339185917f9f3ca7a04988021200a04e0775f46648683bffe7203608269a66c371befe5685918b918b918b918b91600401908086600a811115614d1f57fe5b60ff16815260208101869052604081018590526060810184905260a082820381016080830190815284549183018290529160c0019084908015614d8b57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311614d6d575b5050965050505050505060405180910390a3614f5e565b6000838152600360205260409020600501544210614f5e575050600081815260036020526040812060040154905b81811015614e69576000838152600360205260409020600401805482908110614df557fe5b600091825260209091200154600160a060020a0316331415614e61576040805160e560020a62461bcd02815260206004820152601d60248201527f4d73672e73656e64657220616c7265616479207265717565737465642e000000604482015290519081900360640190fd5b600101614dd0565b600083815260036020908152604080832060040180546001810182558185529284209092018054600160a060020a03191633908117909155928690525185917fb7b03afe355fcf2b1d00e020db2b1a902b9ee1b1c1d995626c1e18c957340ea8918b918b918b918b918086600a811115614edf57fe5b60ff16815260208101869052604081018590526060810184905260a082820381016080830190815284549183018290529160c0019084908015614f4b57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311614f2d575b5050965050505050505060405180910390a35b60008381526003602052604090206005015415156130ed57600454606411614fe357600487600a811115614f8e57fe5b14614fe3576040805160e560020a62461bcd02815260206004820152601560248201527f52657175657374206c6973742069732066756c6c2e0000000000000000000000604482015290519081900360640190fd5b60e06040519081016040528088600a811115614ffb57fe5b81526020808201899052604080830189905260608301889052805160008082529281019091526080909201919050815242602082015260400160019052600084815260036020526040902081518154829060ff1916600183600a81111561505e57fe5b021790555060208281015160018301556040830151600283015560608301516003830155608083015180516150999260048501920190615aa9565b5060a0820151600582015560c082015160068201805460ff191660018360048111156150c157fe5b0217905550505060008381526003602090815260408083206004908101805460018181018355828752948620018054600160a060020a0319163390811790915582549485019092557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b909301879055928690525185917fb7b03afe355fcf2b1d00e020db2b1a902b9ee1b1c1d995626c1e18c957340ea8918b918b918b918b918086600a81111561516e57fe5b60ff16815260208101869052604081018590526060810184905260a082820381016080830190815284549183018290529160c00190849080156151da57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116151bc575b5050965050505050505060405180910390a350505050505050565b60015460009182526003602052604090912060040154101590565b600061521a615afe565b600083815260036020526040808220815160e0810190925280549294509091829060ff16600a81111561524957fe5b600a81111561525457fe5b8152600182015460208083019190915260028301546040808401919091526003840154606084015260048401805482518185028101850190935280835260809094019391929091908301828280156152d557602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116152b7575b505050918352505060058201546020820152600682015460409091019060ff16600481111561530057fe5b600481111561530b57fe5b905250905060018151600a81111561531f57fe5b1415615389576020810151604080517f70480275000000000000000000000000000000000000000000000000000000008152600160a060020a0390921660048301525130916370480275916024808301926000929190829003018183875af192505050915061579a565b60028151600a81111561539857fe5b1415615402576020810151604080517f27e1f7df000000000000000000000000000000000000000000000000000000008152600160a060020a0390921660048301525130916327e1f7df916024808301926000929190829003018183875af192505050915061579a565b60038151600a81111561541157fe5b1415615473576020810151604080517fc47afb3a000000000000000000000000000000000000000000000000000000008152600481019290925251309163c47afb3a916024808301926000929190829003018183875af192505050915061579a565b60048151600a81111561548257fe5b14156154c55730600160a060020a0316634f97638f6040518163ffffffff1660e060020a0281526004016000604051808303816000875af192505050915061579a565b60058151600a8111156154d457fe5b14156155175730600160a060020a031663cec924666040518163ffffffff1660e060020a0281526004016000604051808303816000875af192505050915061579a565b60068151600a81111561552657fe5b141561559957602081015160408083015181517fc7e9de75000000000000000000000000000000000000000000000000000000008152600160a060020a039093166004840152602483015251309163c7e9de75916044808301926000929190829003018183875af192505050915061579a565b60078151600a8111156155a857fe5b141561561b57602081015160408083015181517f4c5d435c000000000000000000000000000000000000000000000000000000008152600160a060020a0390931660048401526024830152513091634c5d435c916044808301926000929190829003018183875af192505050915061579a565b60088151600a81111561562a57fe5b14156156ad576020810151604080830151606084015182517f298b3c61000000000000000000000000000000000000000000000000000000008152600160a060020a0394851660048201529184166024830152909216604483015251309163298b3c61916064808301926000929190829003018183875af192505050915061579a565b60098151600a8111156156bc57fe5b1415615726576020810151604080517f579740db000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015251309163579740db916024808301926000929190829003018183875af192505050915061579a565b600a8151600a81111561573557fe5b141561579a576020810151604080517fafaaf330000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015251309163afaaf330916024808301926000929190829003018183875af194505050505b6157a38361592b565b811561585d57600083815260036020526040902060050154156157dd576000838152600360205260409020600601805460ff191660021790555b33600160a060020a031683600019167fc55c9229184beabeee72b6970a96691b4200919e47579cc4b9be50a1bec7ef1183600001518460200151856040015186606001516040518085600a81111561583157fe5b60ff168152602081019490945250604080840192909252606083015251908190036080019150a36117f1565b60008381526003602052604090206005015415615894576000838152600360208190526040909120600601805460ff191690911790555b33600160a060020a031683600019167ff151a3ee41626c2511372320f09f7957af81c8c1cde8cdf3f05a5979626eaaf383600001518460200151856040015186606001516040518085600a8111156158e857fe5b60ff168152602081019490945250604080840192909252606083015251908190036080019150a3505050565b6000808383111561592457600080fd5b5050900390565b60045460005b818110156117f157600480548290811061594757fe5b6000918252602090912001548314156159e0576000198201811461599e5760048054600019840190811061597757fe5b906000526020600020015460048281548110151561599157fe5b6000918252602090912001555b6004805460001984019081106159b057fe5b60009182526020822001556004546159cf90600163ffffffff61591416565b6159da600482615a01565b506117f1565b600101615931565b6000828201838110156159fa57600080fd5b9392505050565b8154818355818111156117f1576000838152602090206117f1918101908301615b3b565b5080546000825590600052602060002090810190615a439190615b3b565b50565b828054828255906000526020600020908101928215615a99579160200282015b82811115615a99578154600160a060020a031916600160a060020a03843516178255602090920191600190910190615a66565b50615aa5929150615b55565b5090565b828054828255906000526020600020908101928215615a99579160200282015b82811115615a995782518254600160a060020a031916600160a060020a03909116178255602090920191600190910190615ac9565b6040805160e081019091528060008152600060208201819052604082018190526060808301829052608083015260a0820181905260c09091015290565b61461b91905b80821115615aa55760008155600101615b41565b61461b91905b80821115615aa5578054600160a060020a0319168155600101615b5b560041646472657373206973206e6f742061646d696e2e0000000000000000000000496e76616c696420434e206e6f64652049442e0000000000000000000000000041646472657373206973206e756c6c2e000000000000000000000000000000004e6f742061206d756c74697369672d7472616e73616374696f6e2e0000000000496e76616c696420726571756972656d656e742e000000000000000000000000a165627a7a7230582061471db561d514c210c743029fcab86b940059a4d6e7164566a6a36eaf9fcb040029",
}

// AddressBookABI is the input ABI used to generate the binding from.
// Deprecated: Use AddressBookMetaData.ABI instead.
var AddressBookABI = AddressBookMetaData.ABI

// AddressBookBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const AddressBookBinRuntime = `6080604052600436106102215763ffffffff60e060020a60003504166315575d5a8114610226578063160370b8146102725780631865c57d1461037c57806321ac4ad4146103ec57806327e1f7df14610412578063298b3c611461043357806332b91e8514610460578063394a144a1461048b5780633f0628b1146104ac578063407091eb146104d057806341b6945c1461056c5780634a8c1fb4146105815780634b6a94cc146105aa5780634c5d435c146106345780634f97638f1461065857806350a5bb691461066d578063579740db1461068257806358d65880146106a35780636abd623d146106ca57806370480275146106fb578063715b208b1461071c57806376674c54146107ca578063778f39cb146107df5780637894c366146107f4578063791b51231461081857806382d67e5a14610839578063832a2aad146108d5578063863f5c0a146108f657806387cd9feb146109175780638e6f6b771461092c5780639258d76814610941578063934d1fa414610965578063afaaf3301461097a578063b50060e41461099b578063b5067706146109b0578063b7563930146109d1578063b858dd95146109e6578063c47afb3a146109fb578063c7e9de7514610a13578063cc11efc014610a37578063cec9246614610a64578063d267eda514610a79578063da34a0bd14610a8e578063de5bbfbc14610af3578063e748357b14610b08578063feb15ca114610b20578063ffa1ad7414610b35575b600080fd5b34801561023257600080fd5b50610247600160a060020a0360043516610b4a565b60408051600160a060020a039485168152928416602084015292168183015290519081900360600190f35b34801561027e57600080fd5b50610287610ca0565b60408051600160a060020a0380851660608301528316608082015260a080825287519082015286519091829160208084019284019160c08501918b8101910280838360005b838110156102e45781810151838201526020016102cc565b50505050905001848103835288818151815260200191508051906020019060200280838360005b8381101561032357818101518382015260200161030b565b50505050905001848103825287818151815260200191508051906020019060200280838360005b8381101561036257818101518382015260200161034a565b505050509050019850505050505050505060405180910390f35b34801561038857600080fd5b50610391610deb565b6040518080602001838152602001828103825284818151815260200191508051906020019060200280838360005b838110156103d75781810151838201526020016103bf565b50505050905001935050505060405180910390f35b3480156103f857600080fd5b50610410600160a060020a0360043516602435610e57565b005b34801561041e57600080fd5b50610410600160a060020a0360043516611038565b34801561043f57600080fd5b50610410600160a060020a03600435811690602435811690604435166112c9565b34801561046c57600080fd5b50610475611720565b6040805160ff9092168252519081900360200190f35b34801561049757600080fd5b50610410600160a060020a0360043516611725565b3480156104b857600080fd5b5061041060ff600435166024356044356064356117f6565b3480156104dc57600080fd5b506104f460ff60043516602435604435606435611e88565b60408051858152908101839052602081016060820183600481111561051557fe5b60ff168152602001828103825285818151815260200191508051906020019060200280838360005b8381101561055557818101518382015260200161053d565b505050509050019550505050505060405180910390f35b34801561057857600080fd5b50610475611f35565b34801561058d57600080fd5b50610596611f3a565b604080519115158252519081900360200190f35b3480156105b657600080fd5b506105bf611f43565b6040805160208082528351818301528351919283929083019185019080838360005b838110156105f95781810151838201526020016105e1565b50505050905090810190601f1680156106265780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561064057600080fd5b50610410600160a060020a0360043516602435611f7a565b34801561066457600080fd5b5061041061216f565b34801561067957600080fd5b50610596612274565b34801561068e57600080fd5b50610410600160a060020a0360043516612282565b3480156106af57600080fd5b506106b8612658565b60408051918252519081900360200190f35b3480156106d657600080fd5b506106df61265d565b60408051600160a060020a039092168252519081900360200190f35b34801561070757600080fd5b50610410600160a060020a036004351661266c565b34801561072857600080fd5b5061073161284b565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561077557818101518382015260200161075d565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156107b457818101518382015260200161079c565b5050505090500194505050505060405180910390f35b3480156107d657600080fd5b50610475612b3a565b3480156107eb57600080fd5b506106b8612b3f565b34801561080057600080fd5b50610410602460048035828101929101359035612b44565b34801561082457600080fd5b50610410600160a060020a0360043516612ef1565b34801561084557600080fd5b506108516004356130f6565b6040518088600a81111561086157fe5b60ff16815260208101889052604081018790526060810186905260a08101849052608081019060c00183600481111561089657fe5b60ff168152602001828103825285818151815260200191508051906020019060200280838360008381101561036257818101518382015260200161034a565b3480156108e157600080fd5b50610410600160a060020a03600435166131b4565b34801561090257600080fd5b50610410600160a060020a03600435166133bd565b34801561092357600080fd5b5061041061358b565b34801561093857600080fd5b506106b8613649565b34801561094d57600080fd5b50610410600160a060020a0360043516602435613650565b34801561097157600080fd5b506106b86137e8565b34801561098657600080fd5b50610410600160a060020a03600435166137ef565b3480156109a757600080fd5b5061047561388e565b3480156109bc57600080fd5b50610410600160a060020a0360043516613893565b3480156109dd57600080fd5b506106b8613a49565b3480156109f257600080fd5b506106df613a4f565b348015610a0757600080fd5b50610410600435613a5e565b348015610a1f57600080fd5b50610410600160a060020a0360043516602435613bb1565b348015610a4357600080fd5b50610410600160a060020a0360043581169060243581169060443516613da6565b348015610a7057600080fd5b50610410614265565b348015610a8557600080fd5b506106df6145b5565b348015610a9a57600080fd5b50610aa36145c4565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610adf578181015183820152602001610ac7565b505050509050019250505060405180910390f35b348015610aff57600080fd5b5061047561461e565b348015610b1457600080fd5b50610410600435614623565b348015610b2c57600080fd5b506104106147a6565b348015610b4157600080fd5b506106b861461e565b600080808084600160a060020a0381161515610b9e576040805160e560020a62461bcd0281526020600482015260106024820152600080516020615bba833981519152604482015290519081900360640190fd5b600160a060020a038616600081815260086020526040902054600980549194509084908110610bc957fe5b600091825260209091200154600160a060020a031614610c21576040805160e560020a62461bcd0281526020600482015260136024820152600080516020615b9a833981519152604482015290519081900360640190fd5b6009805483908110610c2f57fe5b600091825260209091200154600a8054600160a060020a039092169184908110610c5557fe5b600091825260209091200154600b8054600160a060020a039092169185908110610c7b57fe5b6000918252602090912001549196509450600160a060020a0316925050509193909250565b60055460065460098054604080516020808402820181019092528281526060958695869560009586959194600a94600b94600160a060020a03918216949116928791830182828015610d1b57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610cfd575b5050505050945083805480602002602001604051908101604052809291908181526020018280548015610d7757602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610d59575b5050505050935082805480602002602001604051908101604052809291908181526020018280548015610dd357602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610db5575b50505050509250945094509450945094509091929394565b606060008060015481805480602002602001604051908101604052809291908181526020018280548015610e4857602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610e2a575b50505050509150915091509091565b600082600160a060020a0381161515610ea8576040805160e560020a62461bcd0281526020600482015260106024820152600080516020615bba833981519152604482015290519081900360640190fd5b3360008181526002602052604090205460ff161515610eff576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b8385600160a060020a0316630f6100726040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610f3e57600080fd5b505af1158015610f52573d6000803e3d6000fd5b505050506040513d6020811015610f6857600080fd5b505114610fbf576040805160e560020a62461bcd02815260206004820152601460248201527f496e76616c696420506f432076657273696f6e2e000000000000000000000000604482015290519081900360640190fd5b610fd66006600160a060020a038716866000614af1565b9250610fef6006600160a060020a038716866000614bc4565b610ff8836151f5565b80156110235750600160008481526003602052604090206006015460ff16600481111561102157fe5b145b156110315761103183615210565b5050505050565b600080333014611080576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020615bda833981519152604482015290519081900360640190fd5b600160a060020a038316600090815260026020526040902054839060ff1615156110e2576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b6000546110f690600163ffffffff61591416565b6001546032821115801561110a5750818111155b801561111557508015155b801561112057508115155b1515611164576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615bfa833981519152604482015290519081900360640190fd5b60008054600160a060020a0388168252600260205260408220805460ff19169055955093505b6001850384101561123d5785600160a060020a03166000858154811015156111ae57fe5b600091825260209091200154600160a060020a03161415611232576000805460001987019081106111db57fe5b60009182526020822001548154600160a060020a039091169190869081106111ff57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555061123d565b60019093019261118a565b60008054600019870190811061124f57fe5b600091825260208220018054600160a060020a03191690555461127990600163ffffffff61591416565b611284600082615a01565b5061128d61216f565b604051600160a060020a038716907f1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc256522090600090a2505050505050565b6000333014611310576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020615bda833981519152604482015290519081900360640190fd5b600954600010156113ae57600160a060020a03841660008181526008602052604090205460098054909190811061134357fe5b600091825260209091200154600160a060020a031614156113ae576040805160e560020a62461bcd02815260206004820152601960248201527f434e206e6f646520494420616c72656164792065786973742e00000000000000604482015290519081900360640190fd5b83600160a060020a031683600160a060020a031663139d7fed6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156113f657600080fd5b505af115801561140a573d6000803e3d6000fd5b505050506040513d602081101561142057600080fd5b5051600160a060020a03161461146e576040805160e560020a62461bcd0281526020600482015260136024820152600080516020615b9a833981519152604482015290519081900360640190fd5b81600160a060020a031683600160a060020a0316638cf57cb96040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156114b657600080fd5b505af11580156114ca573d6000803e3d6000fd5b505050506040513d60208110156114e057600080fd5b5051600160a060020a031614611540576040805160e560020a62461bcd02815260206004820152601a60248201527f496e76616c696420434e2072657761726420616464726573732e000000000000604482015290519081900360640190fd5b82600160a060020a031663392e53cd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561157e57600080fd5b505af1158015611592573d6000803e3d6000fd5b505050506040513d60208110156115a857600080fd5b50511515600114611603576040805160e560020a62461bcd02815260206004820152601f60248201527f434e20636f6e7472616374206973206e6f7420696e697469616c697a65642e00604482015290519081900360640190fd5b5060098054600160a060020a03808616600081815260086020908152604080832086905560018087019097557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af86018054600160a060020a03199081168617909155600a8054808a019091557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180548b88169083168117909155600b8054998a0181559094527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db99097018054958916959097168517909655855192835282015280840191909152915190917fe01726557c1ea9f7286dca4bba890e96fea9041689db298806306cafa74c9e91919081900360600190a150505050565b600281565b3360008181526002602052604081205490919060ff16151561177f576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b611796600a600160a060020a038516600080614af1565b91506117af600a600160a060020a038516600080614bc4565b6117b8826151f5565b80156117e35750600160008381526003602052604090206006015460ff1660048111156117e157fe5b145b156117f1576117f182615210565b505050565b33600081815260026020526040812054909182918291829160ff161515611855576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b61186189898989614af1565b60008181526003602052604090206005015490955015156118cc576040805160e560020a62461bcd02815260206004820152601060248201527f496e76616c696420726571756573742e00000000000000000000000000000000604482015290519081900360640190fd5b600160008681526003602052604090206006015460ff1660048111156118ee57fe5b14611943576040805160e560020a62461bcd02815260206004820152601f60248201527f4d757374206265206174206e6f742d636f6e6669726d65642073746174652e00604482015290519081900360640190fd5b60008581526003602052604081206004015490945092508391505b82821015611e2657600085815260036020526040902060040180548390811061198357fe5b600091825260209091200154600160a060020a0316331415611e1b57600085815260036020526040902060050154600194504262093a809091011015611b2f5760008581526003602052604090206005015442621275009091011015611a3e576119ec8561592b565b60008581526003602081905260408220805460ff19168155600181018390556002810183905590810182905590611a266004830182615a25565b5060006005820155600601805460ff19169055611a5b565b6000858152600360205260409020600601805460ff191660041790555b600085815260036020526040908190209051339187917f9f3ca7a04988021200a04e0775f46648683bffe7203608269a66c371befe5685918d918d918d918d91600401908086600a811115611aac57fe5b60ff16815260208101869052604081018590526060810184905260a082820381016080830190815284549183018290529160c0019084908015611b1857602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611afa575b5050965050505050505060405180910390a3611e16565b60001983018214611bc057600085815260036020526040902060040180546000198501908110611b5b57fe5b6000918252602080832090910154878352600390915260409091206004018054600160a060020a039092169184908110611b9157fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b600085815260036020526040902060040180546000198501908110611be157fe5b600091825260208083209091018054600160a060020a0319169055868252600390526040902060040154611c1c90600163ffffffff61591416565b6000868152600360205260409020611c379060040182615a01565b5060008581526003602081905260409182902080546001820154600283015493830154945133958b957f9c174b2536ba49e3478ca649dac74d9e9f71f70adf70f193e780eabbfcdc367c9560ff9095169490926004909101908086600a811115611c9d57fe5b60ff16815260208101869052604081018590526060810184905260a082820381016080830190815284549183018290529160c0019084908015611d0957602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611ceb575b5050965050505050505060405180910390a36000858152600360205260409020600401541515611e1657611d3c8561592b565b60008581526003602081905260408220805460ff19168155600181018390556002810183905590810182905590611d766004830182615a25565b506000600582018190556006909101805460ff19169055858152600360208190526040918290208054600182015460028301549290930154935133948a947fbfda049a0206fd9c90ed4a3170f5bfaad83c323a16835dd68fea92faa247c2cd9460ff9094169390929091908085600a811115611dee57fe5b60ff168152602081019490945250604080840192909252606083015251908190036080019150a35b611e26565b60019091019061195e565b831515611e7d576040805160e560020a62461bcd02815260206004820152601d60248201527f4d73672e73656e64657220686173206e6f74207265717565737465642e000000604482015290519081900360640190fd5b505050505050505050565b600060606000806000611e9d89898989614af1565b600081815260036020908152604091829020600581015460068201546004909201805485518186028101860190965280865295965086959094919360ff90931692859190830182828015611f1a57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611efc575b50505050509250945094509450945050945094509450949050565b600481565b600c5460ff1681565b60408051808201909152600b81527f41646472657373426f6f6b000000000000000000000000000000000000000000602082015281565b600080333014611fc2576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020615bda833981519152604482015290519081900360640190fd5b8284600160a060020a031663444263466040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561200157600080fd5b505af1158015612015573d6000803e3d6000fd5b505050506040513d602081101561202b57600080fd5b505114612082576040805160e560020a62461bcd02815260206004820152601460248201527f496e76616c6964204b49522076657273696f6e2e000000000000000000000000604482015290519081900360640190fd5b505060068054600160a060020a03848116600160a060020a031983161790925516600081156121185781600160a060020a031663444263466040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156120e957600080fd5b505af11580156120fd573d6000803e3d6000fd5b505050506040513d602081101561211357600080fd5b505190505b60408051600160a060020a038085168252602082018490528616818301526060810185905290517ffdccdf242038c2d09605009fbb95e03f75cdbd106d0a9e52a1670be9553c88489181900360800190a150505050565b6000803330146121b7576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020615bda833981519152604482015290519081900360640190fd5b505060045460005b8181101561223b57600360006004838154811015156121da57fe5b600091825260208083209091015483528201929092526040018120805460ff19168155600181018290556002810182905560038101829055906122206004830182615a25565b5060006005820155600601805460ff191690556001016121bf565b61224760046000615a25565b6040517f907527d30089abd16e30f06ddbbbc18480505176262f19bc16c1fbf9262f9c6b90600090a15050565b600c54610100900460ff1681565b60003330146122c9576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020615bda833981519152604482015290519081900360640190fd5b50600160a060020a03811660008181526008602052604090205460098054919291839081106122f457fe5b600091825260209091200154600160a060020a03161461234c576040805160e560020a62461bcd0281526020600482015260136024820152600080516020615b9a833981519152604482015290519081900360640190fd5b6009546001106123a6576040805160e560020a62461bcd02815260206004820152601b60248201527f434e2073686f756c64206265206d6f7265207468616e206f6e652e0000000000604482015290519081900360640190fd5b6009546000190181101561251e576009805460001981019081106123c657fe5b60009182526020909120015460098054600160a060020a0390921691839081106123ec57fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600954600a805490916000190190811061242b57fe5b600091825260209091200154600a8054600160a060020a03909216918390811061245157fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600954600b805490916000190190811061249057fe5b600091825260209091200154600b8054600160a060020a0390921691839081106124b657fe5b600091825260208220018054600160a060020a031916600160a060020a039390931692909217909155600980548392600892909160001981019081106124f857fe5b6000918252602080832090910154600160a060020a031683528201929092526040019020555b600160a060020a03821660009081526008602052604081205560098054600019810190811061254957fe5b60009182526020909120018054600160a060020a031916905560095461257690600163ffffffff61591416565b612581600982615a01565b50600a8054600019810190811061259457fe5b60009182526020909120018054600160a060020a0319169055600a546125c190600163ffffffff61591416565b6125cc600a82615a01565b50600b805460001981019081106125df57fe5b60009182526020909120018054600160a060020a0319169055600b5461260c90600163ffffffff61591416565b612617600b82615a01565b5060408051600160a060020a038416815290517fa30079721e55931e89e7cdb421712ad0fcc817e7cac8fe954aa7ed0d46b9c42d9181900360200190a15050565b603281565b600754600160a060020a031681565b3330146126b1576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020615bda833981519152604482015290519081900360640190fd5b600160a060020a038116600090815260026020526040902054819060ff1615612724576040805160e560020a62461bcd02815260206004820152601460248201527f41646d696e20616c72656164792065786974732e000000000000000000000000604482015290519081900360640190fd5b60005461273890600163ffffffff6159e816565b6001546032821115801561274c5750818111155b801561275757508015155b801561276257508115155b15156127a6576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615bfa833981519152604482015290519081900360640190fd5b600160a060020a0384166000818152600260205260408120805460ff19166001908117909155815490810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563018054600160a060020a031916909117905561281161216f565b604051600160a060020a038516907fad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba90600090a250505050565b600c54606090819081908190600090819060ff161515612884576040805160008082526020820190815281830190925294509250612b2f565b6009805490506003026002016040519080825280602002602001820160405280156128b9578160200160208202803883390190505b5093506009805490506003026002016040519080825280602002602001820160405280156128f1578160200160208202803883390190505b506009549093509150600090505b81811015612a71576000848260030281518110151561291a57fe5b60ff909216602092830290910190910152600980548290811061293957fe5b6000918252602090912001548351600160a060020a039091169084906003840290811061296257fe5b600160a060020a039092166020928302909101909101528351600190859060038402830190811061298f57fe5b60ff909216602092830290910190910152600a8054829081106129ae57fe5b6000918252602090912001548351600160a060020a03909116908490600384026001019081106129da57fe5b600160a060020a0390921660209283029091019091015283516002908590600384028301908110612a0757fe5b60ff909216602092830290910190910152600b805482908110612a2657fe5b6000918252602090912001548351600160a060020a0390911690849060026003850201908110612a5257fe5b600160a060020a039092166020928302909101909101526001016128ff565b60038483600302815181101515612a8457fe5b60ff9092166020928302909101909101526005548351600160a060020a0390911690849060038502908110612ab557fe5b600160a060020a039092166020928302909101909101528351600490859060016003860201908110612ae357fe5b60ff9092166020928302909101909101526006548351600160a060020a0390911690849060038502600101908110612b1757fe5b600160a060020a039092166020928302909101909101525b509194909350915050565b600081565b606481565b600080838360328211801590612b5a5750818111155b8015612b6557508015155b8015612b7057508115155b1515612bb4576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615bfa833981519152604482015290519081900360640190fd5b7388bb3838aa0a140acb73eeb3d4b25a8d3afd58d43314612c1f576040805160e560020a62461bcd02815260206004820152600f60248201527f496e76616c69642073656e6465722e0000000000000000000000000000000000604482015290519081900360640190fd5b600c54610100900460ff1615612c7f576040805160e560020a62461bcd02815260206004820152601460248201527f416c726561647920636f6e73747275637465642e000000000000000000000000604482015290519081900360640190fd5b600c805460ff19169055859350600092505b83831015612da65760026000888886818110612ca957fe5b60209081029290920135600160a060020a03168352508101919091526040016000205460ff16158015612d015750868684818110612ce357fe5b90506020020135600160a060020a0316600160a060020a0316600014155b1515612d57576040805160e560020a62461bcd02815260206004820152601e60248201527f41646472657373206973206e756c6c206f72206e6f7420756e697175652e0000604482015290519081900360640190fd5b600160026000898987818110612d6957fe5b60209081029290920135600160a060020a0316835250810191909152604001600020805460ff191691151591909117905560019290920191612c91565b612db260008888615a46565b506001859055600c805461ff001916610100179055604080518082018252600b81527f41646472657373426f6f6b00000000000000000000000000000000000000000060208083019182528351938401899052606080855283519085015282517fc5caa942b8f8ea45a2e094d941dbba0ef9c0307f34c81ce78e71bfb128d6b25a946000938b939192839283019160808401918083838a5b83811015612e62578181015183820152602001612e4a565b50505050905090810190601f168015612e8f5780820380516001836020036101000a031916815260200191505b508381038252858181548152602001915080548015612ed757602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612eb9575b50509550505050505060405180910390a150505050505050565b600160a060020a038116600090815260026020526040812054829060ff161515612f53576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b3360008181526002602052604090205460ff161515612faa576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b83600160a060020a0381161515612ff9576040805160e560020a62461bcd0281526020600482015260106024820152600080516020615bba833981519152604482015290519081900360640190fd5b60005461300d90600163ffffffff61591416565b600154603282111580156130215750818111155b801561302c57508015155b801561303757508115155b151561307b576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615bfa833981519152604482015290519081900360640190fd5b6130926002600160a060020a038916600080614af1565b95506130ab6002600160a060020a038916600080614bc4565b6130b4866151f5565b80156130df5750600160008781526003602052604090206006015460ff1660048111156130dd57fe5b145b156130ed576130ed86615210565b50505050505050565b60008181526003602081815260408084208054600182015460028301549583015460058401546006850154600490950180548751818a0281018a019098528088528a998a998a996060998b998a9960ff91821699909895979096909594919092169291859183018282801561319457602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311613176575b505050505092509650965096509650965096509650919395979092949650565b60008080808085600160a060020a0381161515613209576040805160e560020a62461bcd0281526020600482015260106024820152600080516020615bba833981519152604482015290519081900360640190fd5b600a546000965086955093508492505b8383101561326457600a80543391908590811061323257fe5b600091825260209091200154600160a060020a031614156132595760019550829450613264565b600190920191613219565b8515156132bb576040805160e560020a62461bcd02815260206004820152601e60248201527f4d73672e73656e646572206973206e6f7420434e20636f6e74726163742e0000604482015290519081900360640190fd5b600b8054869081106132c957fe5b600091825260209091200154600b8054600160a060020a0390921693508891879081106132f257fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055507faa5c92ffd739bc0b8b117b671e7d713917ddb1440b436263a3ea106d70c6f05f60098681548110151561335057fe5b600091825260209091200154600b8054600160a060020a03909216918591908990811061337957fe5b6000918252602091829020015460408051600160a060020a03958616815293851692840192909252929092168183015290519081900360600190a150505050505050565b3360008181526002602052604081205490919060ff161515613417576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b600160a060020a038316600090815260026020526040902054839060ff161561348a576040805160e560020a62461bcd02815260206004820152601460248201527f41646d696e20616c72656164792065786974732e000000000000000000000000604482015290519081900360640190fd5b83600160a060020a03811615156134d9576040805160e560020a62461bcd0281526020600482015260106024820152600080516020615bba833981519152604482015290519081900360640190fd5b6000546134ed90600163ffffffff6159e816565b600154603282111580156135015750818111155b801561350c57508015155b801561351757508115155b151561355b576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615bfa833981519152604482015290519081900360640190fd5b6135726001600160a060020a038916600080614af1565b95506130ab6001600160a060020a038916600080614bc4565b3360008181526002602052604081205490919060ff1615156135e5576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b6135f3600460008080614af1565b9150613603600460008080614bc4565b61360c826151f5565b80156136375750600160008381526003602052604090206006015460ff16600481111561363557fe5b145b156136455761364582615210565b5050565b62093a8081565b600082600160a060020a03811615156136a1576040805160e560020a62461bcd0281526020600482015260106024820152600080516020615bba833981519152604482015290519081900360640190fd5b3360008181526002602052604090205460ff1615156136f8576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b8385600160a060020a031663444263466040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561373757600080fd5b505af115801561374b573d6000803e3d6000fd5b505050506040513d602081101561376157600080fd5b5051146137b8576040805160e560020a62461bcd02815260206004820152601460248201527f496e76616c6964204b49522076657273696f6e2e000000000000000000000000604482015290519081900360640190fd5b6137cf6007600160a060020a038716866000614af1565b9250610fef6007600160a060020a038716866000614bc4565b6212750081565b333014613834576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020615bda833981519152604482015290519081900360640190fd5b60078054600160a060020a031916600160a060020a03838116919091179182905560408051929091168252517f508aacd44cfe23a34a8c2643ab08c3410cf5505632cfce58dcfa0efa2fd2ff37916020908290030190a150565b600381565b60008082600160a060020a03811615156138e5576040805160e560020a62461bcd0281526020600482015260106024820152600080516020615bba833981519152604482015290519081900360640190fd5b3360008181526002602052604090205460ff16151561393c576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b600160a060020a03851660008181526008602052604090205460098054919650908690811061396757fe5b600091825260209091200154600160a060020a0316146139bf576040805160e560020a62461bcd0281526020600482015260136024820152600080516020615b9a833981519152604482015290519081900360640190fd5b600954600110613a19576040805160e560020a62461bcd02815260206004820152601b60248201527f434e2073686f756c64206265206d6f7265207468616e206f6e652e0000000000604482015290519081900360640190fd5b613a306009600160a060020a038716600080614af1565b9250610fef6009600160a060020a038716600080614bc4565b60015481565b600654600160a060020a031681565b333014613aa3576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020615bda833981519152604482015290519081900360640190fd5b6000548160328211801590613ab85750818111155b8015613ac357508015155b8015613ace57508115155b1515613b12576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615bfa833981519152604482015290519081900360640190fd5b600154831415613b6c576040805160e560020a62461bcd02815260206004820152601160248201527f53616d6520726571756972656d656e742e000000000000000000000000000000604482015290519081900360640190fd5b6001839055613b7961216f565b6040805184815290517f8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f9181900360200190a1505050565b600080333014613bf9576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020615bda833981519152604482015290519081900360640190fd5b8284600160a060020a0316630f6100726040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613c3857600080fd5b505af1158015613c4c573d6000803e3d6000fd5b505050506040513d6020811015613c6257600080fd5b505114613cb9576040805160e560020a62461bcd02815260206004820152601460248201527f496e76616c696420506f432076657273696f6e2e000000000000000000000000604482015290519081900360640190fd5b505060058054600160a060020a03848116600160a060020a03198316179092551660008115613d4f5781600160a060020a0316630f6100726040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613d2057600080fd5b505af1158015613d34573d6000803e3d6000fd5b505050506040513d6020811015613d4a57600080fd5b505190505b60408051600160a060020a038085168252602082018490528616818301526060810185905290517fd531725ac89042f190fd73adfdeff435e07500f1a92b4b87743f1bcf91acb3a79181900360800190a150505050565b600083600160a060020a0381161515613df7576040805160e560020a62461bcd0281526020600482015260106024820152600080516020615bba833981519152604482015290519081900360640190fd5b83600160a060020a0381161515613e46576040805160e560020a62461bcd0281526020600482015260106024820152600080516020615bba833981519152604482015290519081900360640190fd5b83600160a060020a0381161515613e95576040805160e560020a62461bcd0281526020600482015260106024820152600080516020615bba833981519152604482015290519081900360640190fd5b3360008181526002602052604090205460ff161515613eec576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b60095460001015613f8a57600160a060020a038816600081815260086020526040902054600980549091908110613f1f57fe5b600091825260209091200154600160a060020a03161415613f8a576040805160e560020a62461bcd02815260206004820152601960248201527f434e206e6f646520494420616c72656164792065786973742e00000000000000604482015290519081900360640190fd5b87600160a060020a031687600160a060020a031663139d7fed6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015613fd257600080fd5b505af1158015613fe6573d6000803e3d6000fd5b505050506040513d6020811015613ffc57600080fd5b5051600160a060020a03161461404a576040805160e560020a62461bcd0281526020600482015260136024820152600080516020615b9a833981519152604482015290519081900360640190fd5b85600160a060020a031687600160a060020a0316638cf57cb96040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561409257600080fd5b505af11580156140a6573d6000803e3d6000fd5b505050506040513d60208110156140bc57600080fd5b5051600160a060020a03161461411c576040805160e560020a62461bcd02815260206004820152601a60248201527f496e76616c696420434e2072657761726420616464726573732e000000000000604482015290519081900360640190fd5b86600160a060020a031663392e53cd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561415a57600080fd5b505af115801561416e573d6000803e3d6000fd5b505050506040513d602081101561418457600080fd5b505115156001146141df576040805160e560020a62461bcd02815260206004820152601f60248201527f434e20636f6e7472616374206973206e6f7420696e697469616c697a65642e00604482015290519081900360640190fd5b6141fb6008600160a060020a03808b16908a8116908a16614af1565b94506142196008600160a060020a03808b16908a8116908a16614bc4565b614222856151f5565b801561424d5750600160008681526003602052604090206006015460ff16600481111561424b57fe5b145b1561425b5761425b85615210565b5050505050505050565b3330146142aa576040805160e560020a62461bcd02815260206004820152601b6024820152600080516020615bda833981519152604482015290519081900360640190fd5b600c5460ff1615614305576040805160e560020a62461bcd02815260206004820152601260248201527f416c7265616479206163746976617465642e0000000000000000000000000000604482015290519081900360640190fd5b600054151561435e576040805160e560020a62461bcd02815260206004820152601360248201527f4e6f2061646d696e206973206c69737465642e00000000000000000000000000604482015290519081900360640190fd5b600554600160a060020a031615156143c0576040805160e560020a62461bcd02815260206004820152601f60248201527f506f4320636f6e7472616374206973206e6f7420726567697374657265642e00604482015290519081900360640190fd5b600654600160a060020a03161515614422576040805160e560020a62461bcd02815260206004820152601f60248201527f4b495220636f6e7472616374206973206e6f7420726567697374657265642e00604482015290519081900360640190fd5b600954151561447b576040805160e560020a62461bcd02815260206004820152601560248201527f4e6f206e6f6465204944206973206c69737465642e0000000000000000000000604482015290519081900360640190fd5b600a54600954146144fc576040805160e560020a62461bcd02815260206004820152603660248201527f496e76616c6964206c656e677468206265747765656e206e6f6465204944732060448201527f616e64207374616b696e6720636f6e7472616374732e00000000000000000000606482015290519081900360840190fd5b600b54600a541461457d576040805160e560020a62461bcd02815260206004820152603e60248201527f496e76616c6964206c656e677468206265747765656e207374616b696e67206360448201527f6f6e74726163747320616e6420726577617264206164647265737365732e0000606482015290519081900360840190fd5b600c805460ff191660011790556040517f29d89931226d613bf878a0be8c635eaf2049121c8c68d5ad80a78f0ac9005d4b90600090a1565b600554600160a060020a031681565b6060600480548060200260200160405190810160405280929190818152602001828054801561461357602002820191906000526020600020905b815481526001909101906020018083116145fe575b505050505090505b90565b600181565b3360008181526002602052604081205490919060ff16151561467d576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b60005483603282118015906146925750818111155b801561469d57508015155b80156146a857508115155b15156146ec576040805160e560020a62461bcd0281526020600482015260146024820152600080516020615bfa833981519152604482015290519081900360640190fd5b600154851415614746576040805160e560020a62461bcd02815260206004820152601160248201527f53616d6520726571756972656d656e742e000000000000000000000000000000604482015290519081900360640190fd5b614754600386600080614af1565b9350614764600386600080614bc4565b61476d846151f5565b80156147985750600160008581526003602052604090206006015460ff16600481111561479657fe5b145b156110315761103184615210565b3360008181526002602052604081205490919060ff161515614800576040805160e560020a62461bcd0281526020600482015260156024820152600080516020615b7a833981519152604482015290519081900360640190fd5b600c5460ff161561485b576040805160e560020a62461bcd02815260206004820152601260248201527f416c7265616479206163746976617465642e0000000000000000000000000000604482015290519081900360640190fd5b60005415156148b4576040805160e560020a62461bcd02815260206004820152601360248201527f4e6f2061646d696e206973206c69737465642e00000000000000000000000000604482015290519081900360640190fd5b600554600160a060020a03161515614916576040805160e560020a62461bcd02815260206004820152601f60248201527f506f4320636f6e7472616374206973206e6f7420726567697374657265642e00604482015290519081900360640190fd5b600654600160a060020a03161515614978576040805160e560020a62461bcd02815260206004820152601f60248201527f4b495220636f6e7472616374206973206e6f7420726567697374657265642e00604482015290519081900360640190fd5b60095415156149d1576040805160e560020a62461bcd02815260206004820152601560248201527f4e6f206e6f6465204944206973206c69737465642e0000000000000000000000604482015290519081900360640190fd5b600a5460095414614a52576040805160e560020a62461bcd02815260206004820152603660248201527f496e76616c6964206c656e677468206265747765656e206e6f6465204944732060448201527f616e64207374616b696e6720636f6e7472616374732e00000000000000000000606482015290519081900360840190fd5b600b54600a5414614ad3576040805160e560020a62461bcd02815260206004820152603e60248201527f496e76616c6964206c656e677468206265747765656e207374616b696e67206360448201527f6f6e74726163747320616e6420726577617264206164647265737365732e0000606482015290519081900360840190fd5b614ae1600560008080614af1565b9150613603600560008080614bc4565b6000848484846040516020018085600a811115614b0a57fe5b60ff167f010000000000000000000000000000000000000000000000000000000000000002815260018101949094525060218301919091526041808301919091526040805180840390920182526061909201918290528051909250819060208401908083835b60208310614b8f5780518252601f199092019160209182019101614b70565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912098975050505050505050565b6000806000614bd587878787614af1565b60008181526003602052604090206005015490935015614f5e5760008381526003602052604090206005015442621275009091011015614c6a57614c188361592b565b60008381526003602081905260408220805460ff19168155600181018390556002810183905590810182905590614c526004830182615a25565b5060006005820155600601805460ff19169055614f5e565b6000838152600360205260409020600501544262093a809091011015614da257600460008481526003602052604090206006015460ff166004811115614cac57fe5b14614cce576000838152600360205260409020600601805460ff191660041790555b600083815260036020526040908190209051339185917f9f3ca7a04988021200a04e0775f46648683bffe7203608269a66c371befe5685918b918b918b918b91600401908086600a811115614d1f57fe5b60ff16815260208101869052604081018590526060810184905260a082820381016080830190815284549183018290529160c0019084908015614d8b57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311614d6d575b5050965050505050505060405180910390a3614f5e565b6000838152600360205260409020600501544210614f5e575050600081815260036020526040812060040154905b81811015614e69576000838152600360205260409020600401805482908110614df557fe5b600091825260209091200154600160a060020a0316331415614e61576040805160e560020a62461bcd02815260206004820152601d60248201527f4d73672e73656e64657220616c7265616479207265717565737465642e000000604482015290519081900360640190fd5b600101614dd0565b600083815260036020908152604080832060040180546001810182558185529284209092018054600160a060020a03191633908117909155928690525185917fb7b03afe355fcf2b1d00e020db2b1a902b9ee1b1c1d995626c1e18c957340ea8918b918b918b918b918086600a811115614edf57fe5b60ff16815260208101869052604081018590526060810184905260a082820381016080830190815284549183018290529160c0019084908015614f4b57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311614f2d575b5050965050505050505060405180910390a35b60008381526003602052604090206005015415156130ed57600454606411614fe357600487600a811115614f8e57fe5b14614fe3576040805160e560020a62461bcd02815260206004820152601560248201527f52657175657374206c6973742069732066756c6c2e0000000000000000000000604482015290519081900360640190fd5b60e06040519081016040528088600a811115614ffb57fe5b81526020808201899052604080830189905260608301889052805160008082529281019091526080909201919050815242602082015260400160019052600084815260036020526040902081518154829060ff1916600183600a81111561505e57fe5b021790555060208281015160018301556040830151600283015560608301516003830155608083015180516150999260048501920190615aa9565b5060a0820151600582015560c082015160068201805460ff191660018360048111156150c157fe5b0217905550505060008381526003602090815260408083206004908101805460018181018355828752948620018054600160a060020a0319163390811790915582549485019092557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b909301879055928690525185917fb7b03afe355fcf2b1d00e020db2b1a902b9ee1b1c1d995626c1e18c957340ea8918b918b918b918b918086600a81111561516e57fe5b60ff16815260208101869052604081018590526060810184905260a082820381016080830190815284549183018290529160c00190849080156151da57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116151bc575b5050965050505050505060405180910390a350505050505050565b60015460009182526003602052604090912060040154101590565b600061521a615afe565b600083815260036020526040808220815160e0810190925280549294509091829060ff16600a81111561524957fe5b600a81111561525457fe5b8152600182015460208083019190915260028301546040808401919091526003840154606084015260048401805482518185028101850190935280835260809094019391929091908301828280156152d557602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116152b7575b505050918352505060058201546020820152600682015460409091019060ff16600481111561530057fe5b600481111561530b57fe5b905250905060018151600a81111561531f57fe5b1415615389576020810151604080517f70480275000000000000000000000000000000000000000000000000000000008152600160a060020a0390921660048301525130916370480275916024808301926000929190829003018183875af192505050915061579a565b60028151600a81111561539857fe5b1415615402576020810151604080517f27e1f7df000000000000000000000000000000000000000000000000000000008152600160a060020a0390921660048301525130916327e1f7df916024808301926000929190829003018183875af192505050915061579a565b60038151600a81111561541157fe5b1415615473576020810151604080517fc47afb3a000000000000000000000000000000000000000000000000000000008152600481019290925251309163c47afb3a916024808301926000929190829003018183875af192505050915061579a565b60048151600a81111561548257fe5b14156154c55730600160a060020a0316634f97638f6040518163ffffffff1660e060020a0281526004016000604051808303816000875af192505050915061579a565b60058151600a8111156154d457fe5b14156155175730600160a060020a031663cec924666040518163ffffffff1660e060020a0281526004016000604051808303816000875af192505050915061579a565b60068151600a81111561552657fe5b141561559957602081015160408083015181517fc7e9de75000000000000000000000000000000000000000000000000000000008152600160a060020a039093166004840152602483015251309163c7e9de75916044808301926000929190829003018183875af192505050915061579a565b60078151600a8111156155a857fe5b141561561b57602081015160408083015181517f4c5d435c000000000000000000000000000000000000000000000000000000008152600160a060020a0390931660048401526024830152513091634c5d435c916044808301926000929190829003018183875af192505050915061579a565b60088151600a81111561562a57fe5b14156156ad576020810151604080830151606084015182517f298b3c61000000000000000000000000000000000000000000000000000000008152600160a060020a0394851660048201529184166024830152909216604483015251309163298b3c61916064808301926000929190829003018183875af192505050915061579a565b60098151600a8111156156bc57fe5b1415615726576020810151604080517f579740db000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015251309163579740db916024808301926000929190829003018183875af192505050915061579a565b600a8151600a81111561573557fe5b141561579a576020810151604080517fafaaf330000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015251309163afaaf330916024808301926000929190829003018183875af194505050505b6157a38361592b565b811561585d57600083815260036020526040902060050154156157dd576000838152600360205260409020600601805460ff191660021790555b33600160a060020a031683600019167fc55c9229184beabeee72b6970a96691b4200919e47579cc4b9be50a1bec7ef1183600001518460200151856040015186606001516040518085600a81111561583157fe5b60ff168152602081019490945250604080840192909252606083015251908190036080019150a36117f1565b60008381526003602052604090206005015415615894576000838152600360208190526040909120600601805460ff191690911790555b33600160a060020a031683600019167ff151a3ee41626c2511372320f09f7957af81c8c1cde8cdf3f05a5979626eaaf383600001518460200151856040015186606001516040518085600a8111156158e857fe5b60ff168152602081019490945250604080840192909252606083015251908190036080019150a3505050565b6000808383111561592457600080fd5b5050900390565b60045460005b818110156117f157600480548290811061594757fe5b6000918252602090912001548314156159e0576000198201811461599e5760048054600019840190811061597757fe5b906000526020600020015460048281548110151561599157fe5b6000918252602090912001555b6004805460001984019081106159b057fe5b60009182526020822001556004546159cf90600163ffffffff61591416565b6159da600482615a01565b506117f1565b600101615931565b6000828201838110156159fa57600080fd5b9392505050565b8154818355818111156117f1576000838152602090206117f1918101908301615b3b565b5080546000825590600052602060002090810190615a439190615b3b565b50565b828054828255906000526020600020908101928215615a99579160200282015b82811115615a99578154600160a060020a031916600160a060020a03843516178255602090920191600190910190615a66565b50615aa5929150615b55565b5090565b828054828255906000526020600020908101928215615a99579160200282015b82811115615a995782518254600160a060020a031916600160a060020a03909116178255602090920191600190910190615ac9565b6040805160e081019091528060008152600060208201819052604082018190526060808301829052608083015260a0820181905260c09091015290565b61461b91905b80821115615aa55760008155600101615b41565b61461b91905b80821115615aa5578054600160a060020a0319168155600101615b5b560041646472657373206973206e6f742061646d696e2e0000000000000000000000496e76616c696420434e206e6f64652049442e0000000000000000000000000041646472657373206973206e756c6c2e000000000000000000000000000000004e6f742061206d756c74697369672d7472616e73616374696f6e2e0000000000496e76616c696420726571756972656d656e742e000000000000000000000000a165627a7a7230582061471db561d514c210c743029fcab86b940059a4d6e7164566a6a36eaf9fcb040029`

// Deprecated: Use AddressBookMetaData.Sigs instead.
// AddressBookFuncSigs maps the 4-byte function signature to its string representation.
var AddressBookFuncSigs = AddressBookMetaData.Sigs

// AddressBookBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AddressBookMetaData.Bin instead.
var AddressBookBin = AddressBookMetaData.Bin

// DeployAddressBook deploys a new Kaia contract, binding an instance of AddressBook to it.
func DeployAddressBook(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AddressBook, error) {
	parsed, err := AddressBookMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AddressBookBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AddressBook{AddressBookCaller: AddressBookCaller{contract: contract}, AddressBookTransactor: AddressBookTransactor{contract: contract}, AddressBookFilterer: AddressBookFilterer{contract: contract}}, nil
}

// AddressBook is an auto generated Go binding around a Kaia contract.
type AddressBook struct {
	AddressBookCaller     // Read-only binding to the contract
	AddressBookTransactor // Write-only binding to the contract
	AddressBookFilterer   // Log filterer for contract events
}

// AddressBookCaller is an auto generated read-only Go binding around a Kaia contract.
type AddressBookCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressBookTransactor is an auto generated write-only Go binding around a Kaia contract.
type AddressBookTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressBookFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type AddressBookFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressBookSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type AddressBookSession struct {
	Contract     *AddressBook      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AddressBookCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type AddressBookCallerSession struct {
	Contract *AddressBookCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// AddressBookTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type AddressBookTransactorSession struct {
	Contract     *AddressBookTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// AddressBookRaw is an auto generated low-level Go binding around a Kaia contract.
type AddressBookRaw struct {
	Contract *AddressBook // Generic contract binding to access the raw methods on
}

// AddressBookCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type AddressBookCallerRaw struct {
	Contract *AddressBookCaller // Generic read-only contract binding to access the raw methods on
}

// AddressBookTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type AddressBookTransactorRaw struct {
	Contract *AddressBookTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAddressBook creates a new instance of AddressBook, bound to a specific deployed contract.
func NewAddressBook(address common.Address, backend bind.ContractBackend) (*AddressBook, error) {
	contract, err := bindAddressBook(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AddressBook{AddressBookCaller: AddressBookCaller{contract: contract}, AddressBookTransactor: AddressBookTransactor{contract: contract}, AddressBookFilterer: AddressBookFilterer{contract: contract}}, nil
}

// NewAddressBookCaller creates a new read-only instance of AddressBook, bound to a specific deployed contract.
func NewAddressBookCaller(address common.Address, caller bind.ContractCaller) (*AddressBookCaller, error) {
	contract, err := bindAddressBook(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AddressBookCaller{contract: contract}, nil
}

// NewAddressBookTransactor creates a new write-only instance of AddressBook, bound to a specific deployed contract.
func NewAddressBookTransactor(address common.Address, transactor bind.ContractTransactor) (*AddressBookTransactor, error) {
	contract, err := bindAddressBook(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AddressBookTransactor{contract: contract}, nil
}

// NewAddressBookFilterer creates a new log filterer instance of AddressBook, bound to a specific deployed contract.
func NewAddressBookFilterer(address common.Address, filterer bind.ContractFilterer) (*AddressBookFilterer, error) {
	contract, err := bindAddressBook(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AddressBookFilterer{contract: contract}, nil
}

// bindAddressBook binds a generic wrapper to an already deployed contract.
func bindAddressBook(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AddressBookMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AddressBook *AddressBookRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AddressBook.Contract.AddressBookCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AddressBook *AddressBookRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AddressBook.Contract.AddressBookTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AddressBook *AddressBookRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AddressBook.Contract.AddressBookTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AddressBook *AddressBookCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AddressBook.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AddressBook *AddressBookTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AddressBook.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AddressBook *AddressBookTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AddressBook.Contract.contract.Transact(opts, method, params...)
}

// CNNODEIDTYPE is a free data retrieval call binding the contract method 0x76674c54.
//
// Solidity: function CN_NODE_ID_TYPE() view returns(uint8)
func (_AddressBook *AddressBookCaller) CNNODEIDTYPE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "CN_NODE_ID_TYPE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CNNODEIDTYPE is a free data retrieval call binding the contract method 0x76674c54.
//
// Solidity: function CN_NODE_ID_TYPE() view returns(uint8)
func (_AddressBook *AddressBookSession) CNNODEIDTYPE() (uint8, error) {
	return _AddressBook.Contract.CNNODEIDTYPE(&_AddressBook.CallOpts)
}

// CNNODEIDTYPE is a free data retrieval call binding the contract method 0x76674c54.
//
// Solidity: function CN_NODE_ID_TYPE() view returns(uint8)
func (_AddressBook *AddressBookCallerSession) CNNODEIDTYPE() (uint8, error) {
	return _AddressBook.Contract.CNNODEIDTYPE(&_AddressBook.CallOpts)
}

// CNREWARDADDRESSTYPE is a free data retrieval call binding the contract method 0x32b91e85.
//
// Solidity: function CN_REWARD_ADDRESS_TYPE() view returns(uint8)
func (_AddressBook *AddressBookCaller) CNREWARDADDRESSTYPE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "CN_REWARD_ADDRESS_TYPE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CNREWARDADDRESSTYPE is a free data retrieval call binding the contract method 0x32b91e85.
//
// Solidity: function CN_REWARD_ADDRESS_TYPE() view returns(uint8)
func (_AddressBook *AddressBookSession) CNREWARDADDRESSTYPE() (uint8, error) {
	return _AddressBook.Contract.CNREWARDADDRESSTYPE(&_AddressBook.CallOpts)
}

// CNREWARDADDRESSTYPE is a free data retrieval call binding the contract method 0x32b91e85.
//
// Solidity: function CN_REWARD_ADDRESS_TYPE() view returns(uint8)
func (_AddressBook *AddressBookCallerSession) CNREWARDADDRESSTYPE() (uint8, error) {
	return _AddressBook.Contract.CNREWARDADDRESSTYPE(&_AddressBook.CallOpts)
}

// CNSTAKINGADDRESSTYPE is a free data retrieval call binding the contract method 0xde5bbfbc.
//
// Solidity: function CN_STAKING_ADDRESS_TYPE() view returns(uint8)
func (_AddressBook *AddressBookCaller) CNSTAKINGADDRESSTYPE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "CN_STAKING_ADDRESS_TYPE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CNSTAKINGADDRESSTYPE is a free data retrieval call binding the contract method 0xde5bbfbc.
//
// Solidity: function CN_STAKING_ADDRESS_TYPE() view returns(uint8)
func (_AddressBook *AddressBookSession) CNSTAKINGADDRESSTYPE() (uint8, error) {
	return _AddressBook.Contract.CNSTAKINGADDRESSTYPE(&_AddressBook.CallOpts)
}

// CNSTAKINGADDRESSTYPE is a free data retrieval call binding the contract method 0xde5bbfbc.
//
// Solidity: function CN_STAKING_ADDRESS_TYPE() view returns(uint8)
func (_AddressBook *AddressBookCallerSession) CNSTAKINGADDRESSTYPE() (uint8, error) {
	return _AddressBook.Contract.CNSTAKINGADDRESSTYPE(&_AddressBook.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_AddressBook *AddressBookCaller) CONTRACTTYPE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "CONTRACT_TYPE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_AddressBook *AddressBookSession) CONTRACTTYPE() (string, error) {
	return _AddressBook.Contract.CONTRACTTYPE(&_AddressBook.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_AddressBook *AddressBookCallerSession) CONTRACTTYPE() (string, error) {
	return _AddressBook.Contract.CONTRACTTYPE(&_AddressBook.CallOpts)
}

// KIRCONTRACTTYPE is a free data retrieval call binding the contract method 0x41b6945c.
//
// Solidity: function KIR_CONTRACT_TYPE() view returns(uint8)
func (_AddressBook *AddressBookCaller) KIRCONTRACTTYPE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "KIR_CONTRACT_TYPE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// KIRCONTRACTTYPE is a free data retrieval call binding the contract method 0x41b6945c.
//
// Solidity: function KIR_CONTRACT_TYPE() view returns(uint8)
func (_AddressBook *AddressBookSession) KIRCONTRACTTYPE() (uint8, error) {
	return _AddressBook.Contract.KIRCONTRACTTYPE(&_AddressBook.CallOpts)
}

// KIRCONTRACTTYPE is a free data retrieval call binding the contract method 0x41b6945c.
//
// Solidity: function KIR_CONTRACT_TYPE() view returns(uint8)
func (_AddressBook *AddressBookCallerSession) KIRCONTRACTTYPE() (uint8, error) {
	return _AddressBook.Contract.KIRCONTRACTTYPE(&_AddressBook.CallOpts)
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() view returns(uint256)
func (_AddressBook *AddressBookCaller) MAXADMIN(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "MAX_ADMIN")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() view returns(uint256)
func (_AddressBook *AddressBookSession) MAXADMIN() (*big.Int, error) {
	return _AddressBook.Contract.MAXADMIN(&_AddressBook.CallOpts)
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() view returns(uint256)
func (_AddressBook *AddressBookCallerSession) MAXADMIN() (*big.Int, error) {
	return _AddressBook.Contract.MAXADMIN(&_AddressBook.CallOpts)
}

// MAXPENDINGREQUEST is a free data retrieval call binding the contract method 0x778f39cb.
//
// Solidity: function MAX_PENDING_REQUEST() view returns(uint256)
func (_AddressBook *AddressBookCaller) MAXPENDINGREQUEST(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "MAX_PENDING_REQUEST")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXPENDINGREQUEST is a free data retrieval call binding the contract method 0x778f39cb.
//
// Solidity: function MAX_PENDING_REQUEST() view returns(uint256)
func (_AddressBook *AddressBookSession) MAXPENDINGREQUEST() (*big.Int, error) {
	return _AddressBook.Contract.MAXPENDINGREQUEST(&_AddressBook.CallOpts)
}

// MAXPENDINGREQUEST is a free data retrieval call binding the contract method 0x778f39cb.
//
// Solidity: function MAX_PENDING_REQUEST() view returns(uint256)
func (_AddressBook *AddressBookCallerSession) MAXPENDINGREQUEST() (*big.Int, error) {
	return _AddressBook.Contract.MAXPENDINGREQUEST(&_AddressBook.CallOpts)
}

// ONEWEEK is a free data retrieval call binding the contract method 0x8e6f6b77.
//
// Solidity: function ONE_WEEK() view returns(uint256)
func (_AddressBook *AddressBookCaller) ONEWEEK(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "ONE_WEEK")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ONEWEEK is a free data retrieval call binding the contract method 0x8e6f6b77.
//
// Solidity: function ONE_WEEK() view returns(uint256)
func (_AddressBook *AddressBookSession) ONEWEEK() (*big.Int, error) {
	return _AddressBook.Contract.ONEWEEK(&_AddressBook.CallOpts)
}

// ONEWEEK is a free data retrieval call binding the contract method 0x8e6f6b77.
//
// Solidity: function ONE_WEEK() view returns(uint256)
func (_AddressBook *AddressBookCallerSession) ONEWEEK() (*big.Int, error) {
	return _AddressBook.Contract.ONEWEEK(&_AddressBook.CallOpts)
}

// POCCONTRACTTYPE is a free data retrieval call binding the contract method 0xb50060e4.
//
// Solidity: function POC_CONTRACT_TYPE() view returns(uint8)
func (_AddressBook *AddressBookCaller) POCCONTRACTTYPE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "POC_CONTRACT_TYPE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// POCCONTRACTTYPE is a free data retrieval call binding the contract method 0xb50060e4.
//
// Solidity: function POC_CONTRACT_TYPE() view returns(uint8)
func (_AddressBook *AddressBookSession) POCCONTRACTTYPE() (uint8, error) {
	return _AddressBook.Contract.POCCONTRACTTYPE(&_AddressBook.CallOpts)
}

// POCCONTRACTTYPE is a free data retrieval call binding the contract method 0xb50060e4.
//
// Solidity: function POC_CONTRACT_TYPE() view returns(uint8)
func (_AddressBook *AddressBookCallerSession) POCCONTRACTTYPE() (uint8, error) {
	return _AddressBook.Contract.POCCONTRACTTYPE(&_AddressBook.CallOpts)
}

// TWOWEEKS is a free data retrieval call binding the contract method 0x934d1fa4.
//
// Solidity: function TWO_WEEKS() view returns(uint256)
func (_AddressBook *AddressBookCaller) TWOWEEKS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "TWO_WEEKS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TWOWEEKS is a free data retrieval call binding the contract method 0x934d1fa4.
//
// Solidity: function TWO_WEEKS() view returns(uint256)
func (_AddressBook *AddressBookSession) TWOWEEKS() (*big.Int, error) {
	return _AddressBook.Contract.TWOWEEKS(&_AddressBook.CallOpts)
}

// TWOWEEKS is a free data retrieval call binding the contract method 0x934d1fa4.
//
// Solidity: function TWO_WEEKS() view returns(uint256)
func (_AddressBook *AddressBookCallerSession) TWOWEEKS() (*big.Int, error) {
	return _AddressBook.Contract.TWOWEEKS(&_AddressBook.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_AddressBook *AddressBookCaller) VERSION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_AddressBook *AddressBookSession) VERSION() (*big.Int, error) {
	return _AddressBook.Contract.VERSION(&_AddressBook.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_AddressBook *AddressBookCallerSession) VERSION() (*big.Int, error) {
	return _AddressBook.Contract.VERSION(&_AddressBook.CallOpts)
}

// GetAllAddress is a free data retrieval call binding the contract method 0x715b208b.
//
// Solidity: function getAllAddress() view returns(uint8[], address[])
func (_AddressBook *AddressBookCaller) GetAllAddress(opts *bind.CallOpts) ([]uint8, []common.Address, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "getAllAddress")

	if err != nil {
		return *new([]uint8), *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint8)).(*[]uint8)
	out1 := *abi.ConvertType(out[1], new([]common.Address)).(*[]common.Address)

	return out0, out1, err

}

// GetAllAddress is a free data retrieval call binding the contract method 0x715b208b.
//
// Solidity: function getAllAddress() view returns(uint8[], address[])
func (_AddressBook *AddressBookSession) GetAllAddress() ([]uint8, []common.Address, error) {
	return _AddressBook.Contract.GetAllAddress(&_AddressBook.CallOpts)
}

// GetAllAddress is a free data retrieval call binding the contract method 0x715b208b.
//
// Solidity: function getAllAddress() view returns(uint8[], address[])
func (_AddressBook *AddressBookCallerSession) GetAllAddress() ([]uint8, []common.Address, error) {
	return _AddressBook.Contract.GetAllAddress(&_AddressBook.CallOpts)
}

// GetAllAddressInfo is a free data retrieval call binding the contract method 0x160370b8.
//
// Solidity: function getAllAddressInfo() view returns(address[], address[], address[], address, address)
func (_AddressBook *AddressBookCaller) GetAllAddressInfo(opts *bind.CallOpts) ([]common.Address, []common.Address, []common.Address, common.Address, common.Address, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "getAllAddressInfo")

	if err != nil {
		return *new([]common.Address), *new([]common.Address), *new([]common.Address), *new(common.Address), *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	out1 := *abi.ConvertType(out[1], new([]common.Address)).(*[]common.Address)
	out2 := *abi.ConvertType(out[2], new([]common.Address)).(*[]common.Address)
	out3 := *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	out4 := *abi.ConvertType(out[4], new(common.Address)).(*common.Address)

	return out0, out1, out2, out3, out4, err

}

// GetAllAddressInfo is a free data retrieval call binding the contract method 0x160370b8.
//
// Solidity: function getAllAddressInfo() view returns(address[], address[], address[], address, address)
func (_AddressBook *AddressBookSession) GetAllAddressInfo() ([]common.Address, []common.Address, []common.Address, common.Address, common.Address, error) {
	return _AddressBook.Contract.GetAllAddressInfo(&_AddressBook.CallOpts)
}

// GetAllAddressInfo is a free data retrieval call binding the contract method 0x160370b8.
//
// Solidity: function getAllAddressInfo() view returns(address[], address[], address[], address, address)
func (_AddressBook *AddressBookCallerSession) GetAllAddressInfo() ([]common.Address, []common.Address, []common.Address, common.Address, common.Address, error) {
	return _AddressBook.Contract.GetAllAddressInfo(&_AddressBook.CallOpts)
}

// GetCnInfo is a free data retrieval call binding the contract method 0x15575d5a.
//
// Solidity: function getCnInfo(address _cnNodeId) view returns(address, address, address)
func (_AddressBook *AddressBookCaller) GetCnInfo(opts *bind.CallOpts, _cnNodeId common.Address) (common.Address, common.Address, common.Address, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "getCnInfo", _cnNodeId)

	if err != nil {
		return *new(common.Address), *new(common.Address), *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	out2 := *abi.ConvertType(out[2], new(common.Address)).(*common.Address)

	return out0, out1, out2, err

}

// GetCnInfo is a free data retrieval call binding the contract method 0x15575d5a.
//
// Solidity: function getCnInfo(address _cnNodeId) view returns(address, address, address)
func (_AddressBook *AddressBookSession) GetCnInfo(_cnNodeId common.Address) (common.Address, common.Address, common.Address, error) {
	return _AddressBook.Contract.GetCnInfo(&_AddressBook.CallOpts, _cnNodeId)
}

// GetCnInfo is a free data retrieval call binding the contract method 0x15575d5a.
//
// Solidity: function getCnInfo(address _cnNodeId) view returns(address, address, address)
func (_AddressBook *AddressBookCallerSession) GetCnInfo(_cnNodeId common.Address) (common.Address, common.Address, common.Address, error) {
	return _AddressBook.Contract.GetCnInfo(&_AddressBook.CallOpts, _cnNodeId)
}

// GetPendingRequestList is a free data retrieval call binding the contract method 0xda34a0bd.
//
// Solidity: function getPendingRequestList() view returns(bytes32[])
func (_AddressBook *AddressBookCaller) GetPendingRequestList(opts *bind.CallOpts) ([][32]byte, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "getPendingRequestList")

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetPendingRequestList is a free data retrieval call binding the contract method 0xda34a0bd.
//
// Solidity: function getPendingRequestList() view returns(bytes32[])
func (_AddressBook *AddressBookSession) GetPendingRequestList() ([][32]byte, error) {
	return _AddressBook.Contract.GetPendingRequestList(&_AddressBook.CallOpts)
}

// GetPendingRequestList is a free data retrieval call binding the contract method 0xda34a0bd.
//
// Solidity: function getPendingRequestList() view returns(bytes32[])
func (_AddressBook *AddressBookCallerSession) GetPendingRequestList() ([][32]byte, error) {
	return _AddressBook.Contract.GetPendingRequestList(&_AddressBook.CallOpts)
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x82d67e5a.
//
// Solidity: function getRequestInfo(bytes32 _id) view returns(uint8, bytes32, bytes32, bytes32, address[], uint256, uint8)
func (_AddressBook *AddressBookCaller) GetRequestInfo(opts *bind.CallOpts, _id [32]byte) (uint8, [32]byte, [32]byte, [32]byte, []common.Address, *big.Int, uint8, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "getRequestInfo", _id)

	if err != nil {
		return *new(uint8), *new([32]byte), *new([32]byte), *new([32]byte), *new([]common.Address), *new(*big.Int), *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	out1 := *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	out2 := *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)
	out3 := *abi.ConvertType(out[3], new([32]byte)).(*[32]byte)
	out4 := *abi.ConvertType(out[4], new([]common.Address)).(*[]common.Address)
	out5 := *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	out6 := *abi.ConvertType(out[6], new(uint8)).(*uint8)

	return out0, out1, out2, out3, out4, out5, out6, err

}

// GetRequestInfo is a free data retrieval call binding the contract method 0x82d67e5a.
//
// Solidity: function getRequestInfo(bytes32 _id) view returns(uint8, bytes32, bytes32, bytes32, address[], uint256, uint8)
func (_AddressBook *AddressBookSession) GetRequestInfo(_id [32]byte) (uint8, [32]byte, [32]byte, [32]byte, []common.Address, *big.Int, uint8, error) {
	return _AddressBook.Contract.GetRequestInfo(&_AddressBook.CallOpts, _id)
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x82d67e5a.
//
// Solidity: function getRequestInfo(bytes32 _id) view returns(uint8, bytes32, bytes32, bytes32, address[], uint256, uint8)
func (_AddressBook *AddressBookCallerSession) GetRequestInfo(_id [32]byte) (uint8, [32]byte, [32]byte, [32]byte, []common.Address, *big.Int, uint8, error) {
	return _AddressBook.Contract.GetRequestInfo(&_AddressBook.CallOpts, _id)
}

// GetRequestInfoByArgs is a free data retrieval call binding the contract method 0x407091eb.
//
// Solidity: function getRequestInfoByArgs(uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) view returns(bytes32, address[], uint256, uint8)
func (_AddressBook *AddressBookCaller) GetRequestInfoByArgs(opts *bind.CallOpts, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) ([32]byte, []common.Address, *big.Int, uint8, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "getRequestInfoByArgs", _functionId, _firstArg, _secondArg, _thirdArg)

	if err != nil {
		return *new([32]byte), *new([]common.Address), *new(*big.Int), *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	out1 := *abi.ConvertType(out[1], new([]common.Address)).(*[]common.Address)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(uint8)).(*uint8)

	return out0, out1, out2, out3, err

}

// GetRequestInfoByArgs is a free data retrieval call binding the contract method 0x407091eb.
//
// Solidity: function getRequestInfoByArgs(uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) view returns(bytes32, address[], uint256, uint8)
func (_AddressBook *AddressBookSession) GetRequestInfoByArgs(_functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) ([32]byte, []common.Address, *big.Int, uint8, error) {
	return _AddressBook.Contract.GetRequestInfoByArgs(&_AddressBook.CallOpts, _functionId, _firstArg, _secondArg, _thirdArg)
}

// GetRequestInfoByArgs is a free data retrieval call binding the contract method 0x407091eb.
//
// Solidity: function getRequestInfoByArgs(uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) view returns(bytes32, address[], uint256, uint8)
func (_AddressBook *AddressBookCallerSession) GetRequestInfoByArgs(_functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) ([32]byte, []common.Address, *big.Int, uint8, error) {
	return _AddressBook.Contract.GetRequestInfoByArgs(&_AddressBook.CallOpts, _functionId, _firstArg, _secondArg, _thirdArg)
}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address[], uint256)
func (_AddressBook *AddressBookCaller) GetState(opts *bind.CallOpts) ([]common.Address, *big.Int, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "getState")

	if err != nil {
		return *new([]common.Address), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address[], uint256)
func (_AddressBook *AddressBookSession) GetState() ([]common.Address, *big.Int, error) {
	return _AddressBook.Contract.GetState(&_AddressBook.CallOpts)
}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address[], uint256)
func (_AddressBook *AddressBookCallerSession) GetState() ([]common.Address, *big.Int, error) {
	return _AddressBook.Contract.GetState(&_AddressBook.CallOpts)
}

// IsActivated is a free data retrieval call binding the contract method 0x4a8c1fb4.
//
// Solidity: function isActivated() view returns(bool)
func (_AddressBook *AddressBookCaller) IsActivated(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "isActivated")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsActivated is a free data retrieval call binding the contract method 0x4a8c1fb4.
//
// Solidity: function isActivated() view returns(bool)
func (_AddressBook *AddressBookSession) IsActivated() (bool, error) {
	return _AddressBook.Contract.IsActivated(&_AddressBook.CallOpts)
}

// IsActivated is a free data retrieval call binding the contract method 0x4a8c1fb4.
//
// Solidity: function isActivated() view returns(bool)
func (_AddressBook *AddressBookCallerSession) IsActivated() (bool, error) {
	return _AddressBook.Contract.IsActivated(&_AddressBook.CallOpts)
}

// IsConstructed is a free data retrieval call binding the contract method 0x50a5bb69.
//
// Solidity: function isConstructed() view returns(bool)
func (_AddressBook *AddressBookCaller) IsConstructed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "isConstructed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsConstructed is a free data retrieval call binding the contract method 0x50a5bb69.
//
// Solidity: function isConstructed() view returns(bool)
func (_AddressBook *AddressBookSession) IsConstructed() (bool, error) {
	return _AddressBook.Contract.IsConstructed(&_AddressBook.CallOpts)
}

// IsConstructed is a free data retrieval call binding the contract method 0x50a5bb69.
//
// Solidity: function isConstructed() view returns(bool)
func (_AddressBook *AddressBookCallerSession) IsConstructed() (bool, error) {
	return _AddressBook.Contract.IsConstructed(&_AddressBook.CallOpts)
}

// KirContractAddress is a free data retrieval call binding the contract method 0xb858dd95.
//
// Solidity: function kirContractAddress() view returns(address)
func (_AddressBook *AddressBookCaller) KirContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "kirContractAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// KirContractAddress is a free data retrieval call binding the contract method 0xb858dd95.
//
// Solidity: function kirContractAddress() view returns(address)
func (_AddressBook *AddressBookSession) KirContractAddress() (common.Address, error) {
	return _AddressBook.Contract.KirContractAddress(&_AddressBook.CallOpts)
}

// KirContractAddress is a free data retrieval call binding the contract method 0xb858dd95.
//
// Solidity: function kirContractAddress() view returns(address)
func (_AddressBook *AddressBookCallerSession) KirContractAddress() (common.Address, error) {
	return _AddressBook.Contract.KirContractAddress(&_AddressBook.CallOpts)
}

// PocContractAddress is a free data retrieval call binding the contract method 0xd267eda5.
//
// Solidity: function pocContractAddress() view returns(address)
func (_AddressBook *AddressBookCaller) PocContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "pocContractAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PocContractAddress is a free data retrieval call binding the contract method 0xd267eda5.
//
// Solidity: function pocContractAddress() view returns(address)
func (_AddressBook *AddressBookSession) PocContractAddress() (common.Address, error) {
	return _AddressBook.Contract.PocContractAddress(&_AddressBook.CallOpts)
}

// PocContractAddress is a free data retrieval call binding the contract method 0xd267eda5.
//
// Solidity: function pocContractAddress() view returns(address)
func (_AddressBook *AddressBookCallerSession) PocContractAddress() (common.Address, error) {
	return _AddressBook.Contract.PocContractAddress(&_AddressBook.CallOpts)
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() view returns(uint256)
func (_AddressBook *AddressBookCaller) Requirement(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "requirement")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() view returns(uint256)
func (_AddressBook *AddressBookSession) Requirement() (*big.Int, error) {
	return _AddressBook.Contract.Requirement(&_AddressBook.CallOpts)
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() view returns(uint256)
func (_AddressBook *AddressBookCallerSession) Requirement() (*big.Int, error) {
	return _AddressBook.Contract.Requirement(&_AddressBook.CallOpts)
}

// SpareContractAddress is a free data retrieval call binding the contract method 0x6abd623d.
//
// Solidity: function spareContractAddress() view returns(address)
func (_AddressBook *AddressBookCaller) SpareContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AddressBook.contract.Call(opts, &out, "spareContractAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SpareContractAddress is a free data retrieval call binding the contract method 0x6abd623d.
//
// Solidity: function spareContractAddress() view returns(address)
func (_AddressBook *AddressBookSession) SpareContractAddress() (common.Address, error) {
	return _AddressBook.Contract.SpareContractAddress(&_AddressBook.CallOpts)
}

// SpareContractAddress is a free data retrieval call binding the contract method 0x6abd623d.
//
// Solidity: function spareContractAddress() view returns(address)
func (_AddressBook *AddressBookCallerSession) SpareContractAddress() (common.Address, error) {
	return _AddressBook.Contract.SpareContractAddress(&_AddressBook.CallOpts)
}

// ActivateAddressBook is a paid mutator transaction binding the contract method 0xcec92466.
//
// Solidity: function activateAddressBook() returns()
func (_AddressBook *AddressBookTransactor) ActivateAddressBook(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "activateAddressBook")
}

// ActivateAddressBook is a paid mutator transaction binding the contract method 0xcec92466.
//
// Solidity: function activateAddressBook() returns()
func (_AddressBook *AddressBookSession) ActivateAddressBook() (*types.Transaction, error) {
	return _AddressBook.Contract.ActivateAddressBook(&_AddressBook.TransactOpts)
}

// ActivateAddressBook is a paid mutator transaction binding the contract method 0xcec92466.
//
// Solidity: function activateAddressBook() returns()
func (_AddressBook *AddressBookTransactorSession) ActivateAddressBook() (*types.Transaction, error) {
	return _AddressBook.Contract.ActivateAddressBook(&_AddressBook.TransactOpts)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address _admin) returns()
func (_AddressBook *AddressBookTransactor) AddAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "addAdmin", _admin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address _admin) returns()
func (_AddressBook *AddressBookSession) AddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.AddAdmin(&_AddressBook.TransactOpts, _admin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address _admin) returns()
func (_AddressBook *AddressBookTransactorSession) AddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.AddAdmin(&_AddressBook.TransactOpts, _admin)
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_AddressBook *AddressBookTransactor) ClearRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "clearRequest")
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_AddressBook *AddressBookSession) ClearRequest() (*types.Transaction, error) {
	return _AddressBook.Contract.ClearRequest(&_AddressBook.TransactOpts)
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_AddressBook *AddressBookTransactorSession) ClearRequest() (*types.Transaction, error) {
	return _AddressBook.Contract.ClearRequest(&_AddressBook.TransactOpts)
}

// ConstructContract is a paid mutator transaction binding the contract method 0x7894c366.
//
// Solidity: function constructContract(address[] _adminList, uint256 _requirement) returns()
func (_AddressBook *AddressBookTransactor) ConstructContract(opts *bind.TransactOpts, _adminList []common.Address, _requirement *big.Int) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "constructContract", _adminList, _requirement)
}

// ConstructContract is a paid mutator transaction binding the contract method 0x7894c366.
//
// Solidity: function constructContract(address[] _adminList, uint256 _requirement) returns()
func (_AddressBook *AddressBookSession) ConstructContract(_adminList []common.Address, _requirement *big.Int) (*types.Transaction, error) {
	return _AddressBook.Contract.ConstructContract(&_AddressBook.TransactOpts, _adminList, _requirement)
}

// ConstructContract is a paid mutator transaction binding the contract method 0x7894c366.
//
// Solidity: function constructContract(address[] _adminList, uint256 _requirement) returns()
func (_AddressBook *AddressBookTransactorSession) ConstructContract(_adminList []common.Address, _requirement *big.Int) (*types.Transaction, error) {
	return _AddressBook.Contract.ConstructContract(&_AddressBook.TransactOpts, _adminList, _requirement)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(address _admin) returns()
func (_AddressBook *AddressBookTransactor) DeleteAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "deleteAdmin", _admin)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(address _admin) returns()
func (_AddressBook *AddressBookSession) DeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.DeleteAdmin(&_AddressBook.TransactOpts, _admin)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(address _admin) returns()
func (_AddressBook *AddressBookTransactorSession) DeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.DeleteAdmin(&_AddressBook.TransactOpts, _admin)
}

// RegisterCnStakingContract is a paid mutator transaction binding the contract method 0x298b3c61.
//
// Solidity: function registerCnStakingContract(address _cnNodeId, address _cnStakingContractAddress, address _cnRewardAddress) returns()
func (_AddressBook *AddressBookTransactor) RegisterCnStakingContract(opts *bind.TransactOpts, _cnNodeId common.Address, _cnStakingContractAddress common.Address, _cnRewardAddress common.Address) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "registerCnStakingContract", _cnNodeId, _cnStakingContractAddress, _cnRewardAddress)
}

// RegisterCnStakingContract is a paid mutator transaction binding the contract method 0x298b3c61.
//
// Solidity: function registerCnStakingContract(address _cnNodeId, address _cnStakingContractAddress, address _cnRewardAddress) returns()
func (_AddressBook *AddressBookSession) RegisterCnStakingContract(_cnNodeId common.Address, _cnStakingContractAddress common.Address, _cnRewardAddress common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.RegisterCnStakingContract(&_AddressBook.TransactOpts, _cnNodeId, _cnStakingContractAddress, _cnRewardAddress)
}

// RegisterCnStakingContract is a paid mutator transaction binding the contract method 0x298b3c61.
//
// Solidity: function registerCnStakingContract(address _cnNodeId, address _cnStakingContractAddress, address _cnRewardAddress) returns()
func (_AddressBook *AddressBookTransactorSession) RegisterCnStakingContract(_cnNodeId common.Address, _cnStakingContractAddress common.Address, _cnRewardAddress common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.RegisterCnStakingContract(&_AddressBook.TransactOpts, _cnNodeId, _cnStakingContractAddress, _cnRewardAddress)
}

// ReviseRewardAddress is a paid mutator transaction binding the contract method 0x832a2aad.
//
// Solidity: function reviseRewardAddress(address _rewardAddress) returns()
func (_AddressBook *AddressBookTransactor) ReviseRewardAddress(opts *bind.TransactOpts, _rewardAddress common.Address) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "reviseRewardAddress", _rewardAddress)
}

// ReviseRewardAddress is a paid mutator transaction binding the contract method 0x832a2aad.
//
// Solidity: function reviseRewardAddress(address _rewardAddress) returns()
func (_AddressBook *AddressBookSession) ReviseRewardAddress(_rewardAddress common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.ReviseRewardAddress(&_AddressBook.TransactOpts, _rewardAddress)
}

// ReviseRewardAddress is a paid mutator transaction binding the contract method 0x832a2aad.
//
// Solidity: function reviseRewardAddress(address _rewardAddress) returns()
func (_AddressBook *AddressBookTransactorSession) ReviseRewardAddress(_rewardAddress common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.ReviseRewardAddress(&_AddressBook.TransactOpts, _rewardAddress)
}

// RevokeRequest is a paid mutator transaction binding the contract method 0x3f0628b1.
//
// Solidity: function revokeRequest(uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_AddressBook *AddressBookTransactor) RevokeRequest(opts *bind.TransactOpts, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "revokeRequest", _functionId, _firstArg, _secondArg, _thirdArg)
}

// RevokeRequest is a paid mutator transaction binding the contract method 0x3f0628b1.
//
// Solidity: function revokeRequest(uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_AddressBook *AddressBookSession) RevokeRequest(_functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _AddressBook.Contract.RevokeRequest(&_AddressBook.TransactOpts, _functionId, _firstArg, _secondArg, _thirdArg)
}

// RevokeRequest is a paid mutator transaction binding the contract method 0x3f0628b1.
//
// Solidity: function revokeRequest(uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_AddressBook *AddressBookTransactorSession) RevokeRequest(_functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _AddressBook.Contract.RevokeRequest(&_AddressBook.TransactOpts, _functionId, _firstArg, _secondArg, _thirdArg)
}

// SubmitActivateAddressBook is a paid mutator transaction binding the contract method 0xfeb15ca1.
//
// Solidity: function submitActivateAddressBook() returns()
func (_AddressBook *AddressBookTransactor) SubmitActivateAddressBook(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "submitActivateAddressBook")
}

// SubmitActivateAddressBook is a paid mutator transaction binding the contract method 0xfeb15ca1.
//
// Solidity: function submitActivateAddressBook() returns()
func (_AddressBook *AddressBookSession) SubmitActivateAddressBook() (*types.Transaction, error) {
	return _AddressBook.Contract.SubmitActivateAddressBook(&_AddressBook.TransactOpts)
}

// SubmitActivateAddressBook is a paid mutator transaction binding the contract method 0xfeb15ca1.
//
// Solidity: function submitActivateAddressBook() returns()
func (_AddressBook *AddressBookTransactorSession) SubmitActivateAddressBook() (*types.Transaction, error) {
	return _AddressBook.Contract.SubmitActivateAddressBook(&_AddressBook.TransactOpts)
}

// SubmitAddAdmin is a paid mutator transaction binding the contract method 0x863f5c0a.
//
// Solidity: function submitAddAdmin(address _admin) returns()
func (_AddressBook *AddressBookTransactor) SubmitAddAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "submitAddAdmin", _admin)
}

// SubmitAddAdmin is a paid mutator transaction binding the contract method 0x863f5c0a.
//
// Solidity: function submitAddAdmin(address _admin) returns()
func (_AddressBook *AddressBookSession) SubmitAddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.SubmitAddAdmin(&_AddressBook.TransactOpts, _admin)
}

// SubmitAddAdmin is a paid mutator transaction binding the contract method 0x863f5c0a.
//
// Solidity: function submitAddAdmin(address _admin) returns()
func (_AddressBook *AddressBookTransactorSession) SubmitAddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.SubmitAddAdmin(&_AddressBook.TransactOpts, _admin)
}

// SubmitClearRequest is a paid mutator transaction binding the contract method 0x87cd9feb.
//
// Solidity: function submitClearRequest() returns()
func (_AddressBook *AddressBookTransactor) SubmitClearRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "submitClearRequest")
}

// SubmitClearRequest is a paid mutator transaction binding the contract method 0x87cd9feb.
//
// Solidity: function submitClearRequest() returns()
func (_AddressBook *AddressBookSession) SubmitClearRequest() (*types.Transaction, error) {
	return _AddressBook.Contract.SubmitClearRequest(&_AddressBook.TransactOpts)
}

// SubmitClearRequest is a paid mutator transaction binding the contract method 0x87cd9feb.
//
// Solidity: function submitClearRequest() returns()
func (_AddressBook *AddressBookTransactorSession) SubmitClearRequest() (*types.Transaction, error) {
	return _AddressBook.Contract.SubmitClearRequest(&_AddressBook.TransactOpts)
}

// SubmitDeleteAdmin is a paid mutator transaction binding the contract method 0x791b5123.
//
// Solidity: function submitDeleteAdmin(address _admin) returns()
func (_AddressBook *AddressBookTransactor) SubmitDeleteAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "submitDeleteAdmin", _admin)
}

// SubmitDeleteAdmin is a paid mutator transaction binding the contract method 0x791b5123.
//
// Solidity: function submitDeleteAdmin(address _admin) returns()
func (_AddressBook *AddressBookSession) SubmitDeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.SubmitDeleteAdmin(&_AddressBook.TransactOpts, _admin)
}

// SubmitDeleteAdmin is a paid mutator transaction binding the contract method 0x791b5123.
//
// Solidity: function submitDeleteAdmin(address _admin) returns()
func (_AddressBook *AddressBookTransactorSession) SubmitDeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.SubmitDeleteAdmin(&_AddressBook.TransactOpts, _admin)
}

// SubmitRegisterCnStakingContract is a paid mutator transaction binding the contract method 0xcc11efc0.
//
// Solidity: function submitRegisterCnStakingContract(address _cnNodeId, address _cnStakingContractAddress, address _cnRewardAddress) returns()
func (_AddressBook *AddressBookTransactor) SubmitRegisterCnStakingContract(opts *bind.TransactOpts, _cnNodeId common.Address, _cnStakingContractAddress common.Address, _cnRewardAddress common.Address) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "submitRegisterCnStakingContract", _cnNodeId, _cnStakingContractAddress, _cnRewardAddress)
}

// SubmitRegisterCnStakingContract is a paid mutator transaction binding the contract method 0xcc11efc0.
//
// Solidity: function submitRegisterCnStakingContract(address _cnNodeId, address _cnStakingContractAddress, address _cnRewardAddress) returns()
func (_AddressBook *AddressBookSession) SubmitRegisterCnStakingContract(_cnNodeId common.Address, _cnStakingContractAddress common.Address, _cnRewardAddress common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.SubmitRegisterCnStakingContract(&_AddressBook.TransactOpts, _cnNodeId, _cnStakingContractAddress, _cnRewardAddress)
}

// SubmitRegisterCnStakingContract is a paid mutator transaction binding the contract method 0xcc11efc0.
//
// Solidity: function submitRegisterCnStakingContract(address _cnNodeId, address _cnStakingContractAddress, address _cnRewardAddress) returns()
func (_AddressBook *AddressBookTransactorSession) SubmitRegisterCnStakingContract(_cnNodeId common.Address, _cnStakingContractAddress common.Address, _cnRewardAddress common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.SubmitRegisterCnStakingContract(&_AddressBook.TransactOpts, _cnNodeId, _cnStakingContractAddress, _cnRewardAddress)
}

// SubmitUnregisterCnStakingContract is a paid mutator transaction binding the contract method 0xb5067706.
//
// Solidity: function submitUnregisterCnStakingContract(address _cnNodeId) returns()
func (_AddressBook *AddressBookTransactor) SubmitUnregisterCnStakingContract(opts *bind.TransactOpts, _cnNodeId common.Address) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "submitUnregisterCnStakingContract", _cnNodeId)
}

// SubmitUnregisterCnStakingContract is a paid mutator transaction binding the contract method 0xb5067706.
//
// Solidity: function submitUnregisterCnStakingContract(address _cnNodeId) returns()
func (_AddressBook *AddressBookSession) SubmitUnregisterCnStakingContract(_cnNodeId common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.SubmitUnregisterCnStakingContract(&_AddressBook.TransactOpts, _cnNodeId)
}

// SubmitUnregisterCnStakingContract is a paid mutator transaction binding the contract method 0xb5067706.
//
// Solidity: function submitUnregisterCnStakingContract(address _cnNodeId) returns()
func (_AddressBook *AddressBookTransactorSession) SubmitUnregisterCnStakingContract(_cnNodeId common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.SubmitUnregisterCnStakingContract(&_AddressBook.TransactOpts, _cnNodeId)
}

// SubmitUpdateKirContract is a paid mutator transaction binding the contract method 0x9258d768.
//
// Solidity: function submitUpdateKirContract(address _kirContractAddress, uint256 _version) returns()
func (_AddressBook *AddressBookTransactor) SubmitUpdateKirContract(opts *bind.TransactOpts, _kirContractAddress common.Address, _version *big.Int) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "submitUpdateKirContract", _kirContractAddress, _version)
}

// SubmitUpdateKirContract is a paid mutator transaction binding the contract method 0x9258d768.
//
// Solidity: function submitUpdateKirContract(address _kirContractAddress, uint256 _version) returns()
func (_AddressBook *AddressBookSession) SubmitUpdateKirContract(_kirContractAddress common.Address, _version *big.Int) (*types.Transaction, error) {
	return _AddressBook.Contract.SubmitUpdateKirContract(&_AddressBook.TransactOpts, _kirContractAddress, _version)
}

// SubmitUpdateKirContract is a paid mutator transaction binding the contract method 0x9258d768.
//
// Solidity: function submitUpdateKirContract(address _kirContractAddress, uint256 _version) returns()
func (_AddressBook *AddressBookTransactorSession) SubmitUpdateKirContract(_kirContractAddress common.Address, _version *big.Int) (*types.Transaction, error) {
	return _AddressBook.Contract.SubmitUpdateKirContract(&_AddressBook.TransactOpts, _kirContractAddress, _version)
}

// SubmitUpdatePocContract is a paid mutator transaction binding the contract method 0x21ac4ad4.
//
// Solidity: function submitUpdatePocContract(address _pocContractAddress, uint256 _version) returns()
func (_AddressBook *AddressBookTransactor) SubmitUpdatePocContract(opts *bind.TransactOpts, _pocContractAddress common.Address, _version *big.Int) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "submitUpdatePocContract", _pocContractAddress, _version)
}

// SubmitUpdatePocContract is a paid mutator transaction binding the contract method 0x21ac4ad4.
//
// Solidity: function submitUpdatePocContract(address _pocContractAddress, uint256 _version) returns()
func (_AddressBook *AddressBookSession) SubmitUpdatePocContract(_pocContractAddress common.Address, _version *big.Int) (*types.Transaction, error) {
	return _AddressBook.Contract.SubmitUpdatePocContract(&_AddressBook.TransactOpts, _pocContractAddress, _version)
}

// SubmitUpdatePocContract is a paid mutator transaction binding the contract method 0x21ac4ad4.
//
// Solidity: function submitUpdatePocContract(address _pocContractAddress, uint256 _version) returns()
func (_AddressBook *AddressBookTransactorSession) SubmitUpdatePocContract(_pocContractAddress common.Address, _version *big.Int) (*types.Transaction, error) {
	return _AddressBook.Contract.SubmitUpdatePocContract(&_AddressBook.TransactOpts, _pocContractAddress, _version)
}

// SubmitUpdateRequirement is a paid mutator transaction binding the contract method 0xe748357b.
//
// Solidity: function submitUpdateRequirement(uint256 _requirement) returns()
func (_AddressBook *AddressBookTransactor) SubmitUpdateRequirement(opts *bind.TransactOpts, _requirement *big.Int) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "submitUpdateRequirement", _requirement)
}

// SubmitUpdateRequirement is a paid mutator transaction binding the contract method 0xe748357b.
//
// Solidity: function submitUpdateRequirement(uint256 _requirement) returns()
func (_AddressBook *AddressBookSession) SubmitUpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _AddressBook.Contract.SubmitUpdateRequirement(&_AddressBook.TransactOpts, _requirement)
}

// SubmitUpdateRequirement is a paid mutator transaction binding the contract method 0xe748357b.
//
// Solidity: function submitUpdateRequirement(uint256 _requirement) returns()
func (_AddressBook *AddressBookTransactorSession) SubmitUpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _AddressBook.Contract.SubmitUpdateRequirement(&_AddressBook.TransactOpts, _requirement)
}

// SubmitUpdateSpareContract is a paid mutator transaction binding the contract method 0x394a144a.
//
// Solidity: function submitUpdateSpareContract(address _spareContractAddress) returns()
func (_AddressBook *AddressBookTransactor) SubmitUpdateSpareContract(opts *bind.TransactOpts, _spareContractAddress common.Address) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "submitUpdateSpareContract", _spareContractAddress)
}

// SubmitUpdateSpareContract is a paid mutator transaction binding the contract method 0x394a144a.
//
// Solidity: function submitUpdateSpareContract(address _spareContractAddress) returns()
func (_AddressBook *AddressBookSession) SubmitUpdateSpareContract(_spareContractAddress common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.SubmitUpdateSpareContract(&_AddressBook.TransactOpts, _spareContractAddress)
}

// SubmitUpdateSpareContract is a paid mutator transaction binding the contract method 0x394a144a.
//
// Solidity: function submitUpdateSpareContract(address _spareContractAddress) returns()
func (_AddressBook *AddressBookTransactorSession) SubmitUpdateSpareContract(_spareContractAddress common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.SubmitUpdateSpareContract(&_AddressBook.TransactOpts, _spareContractAddress)
}

// UnregisterCnStakingContract is a paid mutator transaction binding the contract method 0x579740db.
//
// Solidity: function unregisterCnStakingContract(address _cnNodeId) returns()
func (_AddressBook *AddressBookTransactor) UnregisterCnStakingContract(opts *bind.TransactOpts, _cnNodeId common.Address) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "unregisterCnStakingContract", _cnNodeId)
}

// UnregisterCnStakingContract is a paid mutator transaction binding the contract method 0x579740db.
//
// Solidity: function unregisterCnStakingContract(address _cnNodeId) returns()
func (_AddressBook *AddressBookSession) UnregisterCnStakingContract(_cnNodeId common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.UnregisterCnStakingContract(&_AddressBook.TransactOpts, _cnNodeId)
}

// UnregisterCnStakingContract is a paid mutator transaction binding the contract method 0x579740db.
//
// Solidity: function unregisterCnStakingContract(address _cnNodeId) returns()
func (_AddressBook *AddressBookTransactorSession) UnregisterCnStakingContract(_cnNodeId common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.UnregisterCnStakingContract(&_AddressBook.TransactOpts, _cnNodeId)
}

// UpdateKirContract is a paid mutator transaction binding the contract method 0x4c5d435c.
//
// Solidity: function updateKirContract(address _kirContractAddress, uint256 _version) returns()
func (_AddressBook *AddressBookTransactor) UpdateKirContract(opts *bind.TransactOpts, _kirContractAddress common.Address, _version *big.Int) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "updateKirContract", _kirContractAddress, _version)
}

// UpdateKirContract is a paid mutator transaction binding the contract method 0x4c5d435c.
//
// Solidity: function updateKirContract(address _kirContractAddress, uint256 _version) returns()
func (_AddressBook *AddressBookSession) UpdateKirContract(_kirContractAddress common.Address, _version *big.Int) (*types.Transaction, error) {
	return _AddressBook.Contract.UpdateKirContract(&_AddressBook.TransactOpts, _kirContractAddress, _version)
}

// UpdateKirContract is a paid mutator transaction binding the contract method 0x4c5d435c.
//
// Solidity: function updateKirContract(address _kirContractAddress, uint256 _version) returns()
func (_AddressBook *AddressBookTransactorSession) UpdateKirContract(_kirContractAddress common.Address, _version *big.Int) (*types.Transaction, error) {
	return _AddressBook.Contract.UpdateKirContract(&_AddressBook.TransactOpts, _kirContractAddress, _version)
}

// UpdatePocContract is a paid mutator transaction binding the contract method 0xc7e9de75.
//
// Solidity: function updatePocContract(address _pocContractAddress, uint256 _version) returns()
func (_AddressBook *AddressBookTransactor) UpdatePocContract(opts *bind.TransactOpts, _pocContractAddress common.Address, _version *big.Int) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "updatePocContract", _pocContractAddress, _version)
}

// UpdatePocContract is a paid mutator transaction binding the contract method 0xc7e9de75.
//
// Solidity: function updatePocContract(address _pocContractAddress, uint256 _version) returns()
func (_AddressBook *AddressBookSession) UpdatePocContract(_pocContractAddress common.Address, _version *big.Int) (*types.Transaction, error) {
	return _AddressBook.Contract.UpdatePocContract(&_AddressBook.TransactOpts, _pocContractAddress, _version)
}

// UpdatePocContract is a paid mutator transaction binding the contract method 0xc7e9de75.
//
// Solidity: function updatePocContract(address _pocContractAddress, uint256 _version) returns()
func (_AddressBook *AddressBookTransactorSession) UpdatePocContract(_pocContractAddress common.Address, _version *big.Int) (*types.Transaction, error) {
	return _AddressBook.Contract.UpdatePocContract(&_AddressBook.TransactOpts, _pocContractAddress, _version)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(uint256 _requirement) returns()
func (_AddressBook *AddressBookTransactor) UpdateRequirement(opts *bind.TransactOpts, _requirement *big.Int) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "updateRequirement", _requirement)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(uint256 _requirement) returns()
func (_AddressBook *AddressBookSession) UpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _AddressBook.Contract.UpdateRequirement(&_AddressBook.TransactOpts, _requirement)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(uint256 _requirement) returns()
func (_AddressBook *AddressBookTransactorSession) UpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _AddressBook.Contract.UpdateRequirement(&_AddressBook.TransactOpts, _requirement)
}

// UpdateSpareContract is a paid mutator transaction binding the contract method 0xafaaf330.
//
// Solidity: function updateSpareContract(address _spareContractAddress) returns()
func (_AddressBook *AddressBookTransactor) UpdateSpareContract(opts *bind.TransactOpts, _spareContractAddress common.Address) (*types.Transaction, error) {
	return _AddressBook.contract.Transact(opts, "updateSpareContract", _spareContractAddress)
}

// UpdateSpareContract is a paid mutator transaction binding the contract method 0xafaaf330.
//
// Solidity: function updateSpareContract(address _spareContractAddress) returns()
func (_AddressBook *AddressBookSession) UpdateSpareContract(_spareContractAddress common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.UpdateSpareContract(&_AddressBook.TransactOpts, _spareContractAddress)
}

// UpdateSpareContract is a paid mutator transaction binding the contract method 0xafaaf330.
//
// Solidity: function updateSpareContract(address _spareContractAddress) returns()
func (_AddressBook *AddressBookTransactorSession) UpdateSpareContract(_spareContractAddress common.Address) (*types.Transaction, error) {
	return _AddressBook.Contract.UpdateSpareContract(&_AddressBook.TransactOpts, _spareContractAddress)
}

// AddressBookActivateAddressBookIterator is returned from FilterActivateAddressBook and is used to iterate over the raw logs and unpacked data for ActivateAddressBook events raised by the AddressBook contract.
type AddressBookActivateAddressBookIterator struct {
	Event *AddressBookActivateAddressBook // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressBookActivateAddressBookIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressBookActivateAddressBook)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressBookActivateAddressBook)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressBookActivateAddressBookIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressBookActivateAddressBookIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressBookActivateAddressBook represents a ActivateAddressBook event raised by the AddressBook contract.
type AddressBookActivateAddressBook struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterActivateAddressBook is a free log retrieval operation binding the contract event 0x29d89931226d613bf878a0be8c635eaf2049121c8c68d5ad80a78f0ac9005d4b.
//
// Solidity: event ActivateAddressBook()
func (_AddressBook *AddressBookFilterer) FilterActivateAddressBook(opts *bind.FilterOpts) (*AddressBookActivateAddressBookIterator, error) {

	logs, sub, err := _AddressBook.contract.FilterLogs(opts, "ActivateAddressBook")
	if err != nil {
		return nil, err
	}
	return &AddressBookActivateAddressBookIterator{contract: _AddressBook.contract, event: "ActivateAddressBook", logs: logs, sub: sub}, nil
}

// WatchActivateAddressBook is a free log subscription operation binding the contract event 0x29d89931226d613bf878a0be8c635eaf2049121c8c68d5ad80a78f0ac9005d4b.
//
// Solidity: event ActivateAddressBook()
func (_AddressBook *AddressBookFilterer) WatchActivateAddressBook(opts *bind.WatchOpts, sink chan<- *AddressBookActivateAddressBook) (event.Subscription, error) {

	logs, sub, err := _AddressBook.contract.WatchLogs(opts, "ActivateAddressBook")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressBookActivateAddressBook)
				if err := _AddressBook.contract.UnpackLog(event, "ActivateAddressBook", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseActivateAddressBook is a log parse operation binding the contract event 0x29d89931226d613bf878a0be8c635eaf2049121c8c68d5ad80a78f0ac9005d4b.
//
// Solidity: event ActivateAddressBook()
func (_AddressBook *AddressBookFilterer) ParseActivateAddressBook(log types.Log) (*AddressBookActivateAddressBook, error) {
	event := new(AddressBookActivateAddressBook)
	if err := _AddressBook.contract.UnpackLog(event, "ActivateAddressBook", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressBookAddAdminIterator is returned from FilterAddAdmin and is used to iterate over the raw logs and unpacked data for AddAdmin events raised by the AddressBook contract.
type AddressBookAddAdminIterator struct {
	Event *AddressBookAddAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressBookAddAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressBookAddAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressBookAddAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressBookAddAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressBookAddAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressBookAddAdmin represents a AddAdmin event raised by the AddressBook contract.
type AddressBookAddAdmin struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAddAdmin is a free log retrieval operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: event AddAdmin(address indexed admin)
func (_AddressBook *AddressBookFilterer) FilterAddAdmin(opts *bind.FilterOpts, admin []common.Address) (*AddressBookAddAdminIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _AddressBook.contract.FilterLogs(opts, "AddAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return &AddressBookAddAdminIterator{contract: _AddressBook.contract, event: "AddAdmin", logs: logs, sub: sub}, nil
}

// WatchAddAdmin is a free log subscription operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: event AddAdmin(address indexed admin)
func (_AddressBook *AddressBookFilterer) WatchAddAdmin(opts *bind.WatchOpts, sink chan<- *AddressBookAddAdmin, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _AddressBook.contract.WatchLogs(opts, "AddAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressBookAddAdmin)
				if err := _AddressBook.contract.UnpackLog(event, "AddAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddAdmin is a log parse operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: event AddAdmin(address indexed admin)
func (_AddressBook *AddressBookFilterer) ParseAddAdmin(log types.Log) (*AddressBookAddAdmin, error) {
	event := new(AddressBookAddAdmin)
	if err := _AddressBook.contract.UnpackLog(event, "AddAdmin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressBookCancelRequestIterator is returned from FilterCancelRequest and is used to iterate over the raw logs and unpacked data for CancelRequest events raised by the AddressBook contract.
type AddressBookCancelRequestIterator struct {
	Event *AddressBookCancelRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressBookCancelRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressBookCancelRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressBookCancelRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressBookCancelRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressBookCancelRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressBookCancelRequest represents a CancelRequest event raised by the AddressBook contract.
type AddressBookCancelRequest struct {
	Id         [32]byte
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCancelRequest is a free log retrieval operation binding the contract event 0xbfda049a0206fd9c90ed4a3170f5bfaad83c323a16835dd68fea92faa247c2cd.
//
// Solidity: event CancelRequest(bytes32 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_AddressBook *AddressBookFilterer) FilterCancelRequest(opts *bind.FilterOpts, id [][32]byte, from []common.Address) (*AddressBookCancelRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _AddressBook.contract.FilterLogs(opts, "CancelRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &AddressBookCancelRequestIterator{contract: _AddressBook.contract, event: "CancelRequest", logs: logs, sub: sub}, nil
}

// WatchCancelRequest is a free log subscription operation binding the contract event 0xbfda049a0206fd9c90ed4a3170f5bfaad83c323a16835dd68fea92faa247c2cd.
//
// Solidity: event CancelRequest(bytes32 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_AddressBook *AddressBookFilterer) WatchCancelRequest(opts *bind.WatchOpts, sink chan<- *AddressBookCancelRequest, id [][32]byte, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _AddressBook.contract.WatchLogs(opts, "CancelRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressBookCancelRequest)
				if err := _AddressBook.contract.UnpackLog(event, "CancelRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancelRequest is a log parse operation binding the contract event 0xbfda049a0206fd9c90ed4a3170f5bfaad83c323a16835dd68fea92faa247c2cd.
//
// Solidity: event CancelRequest(bytes32 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_AddressBook *AddressBookFilterer) ParseCancelRequest(log types.Log) (*AddressBookCancelRequest, error) {
	event := new(AddressBookCancelRequest)
	if err := _AddressBook.contract.UnpackLog(event, "CancelRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressBookClearRequestIterator is returned from FilterClearRequest and is used to iterate over the raw logs and unpacked data for ClearRequest events raised by the AddressBook contract.
type AddressBookClearRequestIterator struct {
	Event *AddressBookClearRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressBookClearRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressBookClearRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressBookClearRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressBookClearRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressBookClearRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressBookClearRequest represents a ClearRequest event raised by the AddressBook contract.
type AddressBookClearRequest struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterClearRequest is a free log retrieval operation binding the contract event 0x907527d30089abd16e30f06ddbbbc18480505176262f19bc16c1fbf9262f9c6b.
//
// Solidity: event ClearRequest()
func (_AddressBook *AddressBookFilterer) FilterClearRequest(opts *bind.FilterOpts) (*AddressBookClearRequestIterator, error) {

	logs, sub, err := _AddressBook.contract.FilterLogs(opts, "ClearRequest")
	if err != nil {
		return nil, err
	}
	return &AddressBookClearRequestIterator{contract: _AddressBook.contract, event: "ClearRequest", logs: logs, sub: sub}, nil
}

// WatchClearRequest is a free log subscription operation binding the contract event 0x907527d30089abd16e30f06ddbbbc18480505176262f19bc16c1fbf9262f9c6b.
//
// Solidity: event ClearRequest()
func (_AddressBook *AddressBookFilterer) WatchClearRequest(opts *bind.WatchOpts, sink chan<- *AddressBookClearRequest) (event.Subscription, error) {

	logs, sub, err := _AddressBook.contract.WatchLogs(opts, "ClearRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressBookClearRequest)
				if err := _AddressBook.contract.UnpackLog(event, "ClearRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClearRequest is a log parse operation binding the contract event 0x907527d30089abd16e30f06ddbbbc18480505176262f19bc16c1fbf9262f9c6b.
//
// Solidity: event ClearRequest()
func (_AddressBook *AddressBookFilterer) ParseClearRequest(log types.Log) (*AddressBookClearRequest, error) {
	event := new(AddressBookClearRequest)
	if err := _AddressBook.contract.UnpackLog(event, "ClearRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressBookDeleteAdminIterator is returned from FilterDeleteAdmin and is used to iterate over the raw logs and unpacked data for DeleteAdmin events raised by the AddressBook contract.
type AddressBookDeleteAdminIterator struct {
	Event *AddressBookDeleteAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressBookDeleteAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressBookDeleteAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressBookDeleteAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressBookDeleteAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressBookDeleteAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressBookDeleteAdmin represents a DeleteAdmin event raised by the AddressBook contract.
type AddressBookDeleteAdmin struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDeleteAdmin is a free log retrieval operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: event DeleteAdmin(address indexed admin)
func (_AddressBook *AddressBookFilterer) FilterDeleteAdmin(opts *bind.FilterOpts, admin []common.Address) (*AddressBookDeleteAdminIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _AddressBook.contract.FilterLogs(opts, "DeleteAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return &AddressBookDeleteAdminIterator{contract: _AddressBook.contract, event: "DeleteAdmin", logs: logs, sub: sub}, nil
}

// WatchDeleteAdmin is a free log subscription operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: event DeleteAdmin(address indexed admin)
func (_AddressBook *AddressBookFilterer) WatchDeleteAdmin(opts *bind.WatchOpts, sink chan<- *AddressBookDeleteAdmin, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _AddressBook.contract.WatchLogs(opts, "DeleteAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressBookDeleteAdmin)
				if err := _AddressBook.contract.UnpackLog(event, "DeleteAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeleteAdmin is a log parse operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: event DeleteAdmin(address indexed admin)
func (_AddressBook *AddressBookFilterer) ParseDeleteAdmin(log types.Log) (*AddressBookDeleteAdmin, error) {
	event := new(AddressBookDeleteAdmin)
	if err := _AddressBook.contract.UnpackLog(event, "DeleteAdmin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressBookDeployContractIterator is returned from FilterDeployContract and is used to iterate over the raw logs and unpacked data for DeployContract events raised by the AddressBook contract.
type AddressBookDeployContractIterator struct {
	Event *AddressBookDeployContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressBookDeployContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressBookDeployContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressBookDeployContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressBookDeployContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressBookDeployContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressBookDeployContract represents a DeployContract event raised by the AddressBook contract.
type AddressBookDeployContract struct {
	ContractType string
	AdminList    []common.Address
	Requirement  *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDeployContract is a free log retrieval operation binding the contract event 0xc5caa942b8f8ea45a2e094d941dbba0ef9c0307f34c81ce78e71bfb128d6b25a.
//
// Solidity: event DeployContract(string contractType, address[] adminList, uint256 requirement)
func (_AddressBook *AddressBookFilterer) FilterDeployContract(opts *bind.FilterOpts) (*AddressBookDeployContractIterator, error) {

	logs, sub, err := _AddressBook.contract.FilterLogs(opts, "DeployContract")
	if err != nil {
		return nil, err
	}
	return &AddressBookDeployContractIterator{contract: _AddressBook.contract, event: "DeployContract", logs: logs, sub: sub}, nil
}

// WatchDeployContract is a free log subscription operation binding the contract event 0xc5caa942b8f8ea45a2e094d941dbba0ef9c0307f34c81ce78e71bfb128d6b25a.
//
// Solidity: event DeployContract(string contractType, address[] adminList, uint256 requirement)
func (_AddressBook *AddressBookFilterer) WatchDeployContract(opts *bind.WatchOpts, sink chan<- *AddressBookDeployContract) (event.Subscription, error) {

	logs, sub, err := _AddressBook.contract.WatchLogs(opts, "DeployContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressBookDeployContract)
				if err := _AddressBook.contract.UnpackLog(event, "DeployContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployContract is a log parse operation binding the contract event 0xc5caa942b8f8ea45a2e094d941dbba0ef9c0307f34c81ce78e71bfb128d6b25a.
//
// Solidity: event DeployContract(string contractType, address[] adminList, uint256 requirement)
func (_AddressBook *AddressBookFilterer) ParseDeployContract(log types.Log) (*AddressBookDeployContract, error) {
	event := new(AddressBookDeployContract)
	if err := _AddressBook.contract.UnpackLog(event, "DeployContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressBookExecuteRequestFailureIterator is returned from FilterExecuteRequestFailure and is used to iterate over the raw logs and unpacked data for ExecuteRequestFailure events raised by the AddressBook contract.
type AddressBookExecuteRequestFailureIterator struct {
	Event *AddressBookExecuteRequestFailure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressBookExecuteRequestFailureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressBookExecuteRequestFailure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressBookExecuteRequestFailure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressBookExecuteRequestFailureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressBookExecuteRequestFailureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressBookExecuteRequestFailure represents a ExecuteRequestFailure event raised by the AddressBook contract.
type AddressBookExecuteRequestFailure struct {
	Id         [32]byte
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterExecuteRequestFailure is a free log retrieval operation binding the contract event 0xf151a3ee41626c2511372320f09f7957af81c8c1cde8cdf3f05a5979626eaaf3.
//
// Solidity: event ExecuteRequestFailure(bytes32 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_AddressBook *AddressBookFilterer) FilterExecuteRequestFailure(opts *bind.FilterOpts, id [][32]byte, from []common.Address) (*AddressBookExecuteRequestFailureIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _AddressBook.contract.FilterLogs(opts, "ExecuteRequestFailure", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &AddressBookExecuteRequestFailureIterator{contract: _AddressBook.contract, event: "ExecuteRequestFailure", logs: logs, sub: sub}, nil
}

// WatchExecuteRequestFailure is a free log subscription operation binding the contract event 0xf151a3ee41626c2511372320f09f7957af81c8c1cde8cdf3f05a5979626eaaf3.
//
// Solidity: event ExecuteRequestFailure(bytes32 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_AddressBook *AddressBookFilterer) WatchExecuteRequestFailure(opts *bind.WatchOpts, sink chan<- *AddressBookExecuteRequestFailure, id [][32]byte, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _AddressBook.contract.WatchLogs(opts, "ExecuteRequestFailure", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressBookExecuteRequestFailure)
				if err := _AddressBook.contract.UnpackLog(event, "ExecuteRequestFailure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecuteRequestFailure is a log parse operation binding the contract event 0xf151a3ee41626c2511372320f09f7957af81c8c1cde8cdf3f05a5979626eaaf3.
//
// Solidity: event ExecuteRequestFailure(bytes32 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_AddressBook *AddressBookFilterer) ParseExecuteRequestFailure(log types.Log) (*AddressBookExecuteRequestFailure, error) {
	event := new(AddressBookExecuteRequestFailure)
	if err := _AddressBook.contract.UnpackLog(event, "ExecuteRequestFailure", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressBookExecuteRequestSuccessIterator is returned from FilterExecuteRequestSuccess and is used to iterate over the raw logs and unpacked data for ExecuteRequestSuccess events raised by the AddressBook contract.
type AddressBookExecuteRequestSuccessIterator struct {
	Event *AddressBookExecuteRequestSuccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressBookExecuteRequestSuccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressBookExecuteRequestSuccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressBookExecuteRequestSuccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressBookExecuteRequestSuccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressBookExecuteRequestSuccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressBookExecuteRequestSuccess represents a ExecuteRequestSuccess event raised by the AddressBook contract.
type AddressBookExecuteRequestSuccess struct {
	Id         [32]byte
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterExecuteRequestSuccess is a free log retrieval operation binding the contract event 0xc55c9229184beabeee72b6970a96691b4200919e47579cc4b9be50a1bec7ef11.
//
// Solidity: event ExecuteRequestSuccess(bytes32 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_AddressBook *AddressBookFilterer) FilterExecuteRequestSuccess(opts *bind.FilterOpts, id [][32]byte, from []common.Address) (*AddressBookExecuteRequestSuccessIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _AddressBook.contract.FilterLogs(opts, "ExecuteRequestSuccess", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &AddressBookExecuteRequestSuccessIterator{contract: _AddressBook.contract, event: "ExecuteRequestSuccess", logs: logs, sub: sub}, nil
}

// WatchExecuteRequestSuccess is a free log subscription operation binding the contract event 0xc55c9229184beabeee72b6970a96691b4200919e47579cc4b9be50a1bec7ef11.
//
// Solidity: event ExecuteRequestSuccess(bytes32 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_AddressBook *AddressBookFilterer) WatchExecuteRequestSuccess(opts *bind.WatchOpts, sink chan<- *AddressBookExecuteRequestSuccess, id [][32]byte, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _AddressBook.contract.WatchLogs(opts, "ExecuteRequestSuccess", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressBookExecuteRequestSuccess)
				if err := _AddressBook.contract.UnpackLog(event, "ExecuteRequestSuccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecuteRequestSuccess is a log parse operation binding the contract event 0xc55c9229184beabeee72b6970a96691b4200919e47579cc4b9be50a1bec7ef11.
//
// Solidity: event ExecuteRequestSuccess(bytes32 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_AddressBook *AddressBookFilterer) ParseExecuteRequestSuccess(log types.Log) (*AddressBookExecuteRequestSuccess, error) {
	event := new(AddressBookExecuteRequestSuccess)
	if err := _AddressBook.contract.UnpackLog(event, "ExecuteRequestSuccess", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressBookExpiredRequestIterator is returned from FilterExpiredRequest and is used to iterate over the raw logs and unpacked data for ExpiredRequest events raised by the AddressBook contract.
type AddressBookExpiredRequestIterator struct {
	Event *AddressBookExpiredRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressBookExpiredRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressBookExpiredRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressBookExpiredRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressBookExpiredRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressBookExpiredRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressBookExpiredRequest represents a ExpiredRequest event raised by the AddressBook contract.
type AddressBookExpiredRequest struct {
	Id         [32]byte
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Confirmers []common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterExpiredRequest is a free log retrieval operation binding the contract event 0x9f3ca7a04988021200a04e0775f46648683bffe7203608269a66c371befe5685.
//
// Solidity: event ExpiredRequest(bytes32 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_AddressBook *AddressBookFilterer) FilterExpiredRequest(opts *bind.FilterOpts, id [][32]byte, from []common.Address) (*AddressBookExpiredRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _AddressBook.contract.FilterLogs(opts, "ExpiredRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &AddressBookExpiredRequestIterator{contract: _AddressBook.contract, event: "ExpiredRequest", logs: logs, sub: sub}, nil
}

// WatchExpiredRequest is a free log subscription operation binding the contract event 0x9f3ca7a04988021200a04e0775f46648683bffe7203608269a66c371befe5685.
//
// Solidity: event ExpiredRequest(bytes32 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_AddressBook *AddressBookFilterer) WatchExpiredRequest(opts *bind.WatchOpts, sink chan<- *AddressBookExpiredRequest, id [][32]byte, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _AddressBook.contract.WatchLogs(opts, "ExpiredRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressBookExpiredRequest)
				if err := _AddressBook.contract.UnpackLog(event, "ExpiredRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExpiredRequest is a log parse operation binding the contract event 0x9f3ca7a04988021200a04e0775f46648683bffe7203608269a66c371befe5685.
//
// Solidity: event ExpiredRequest(bytes32 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_AddressBook *AddressBookFilterer) ParseExpiredRequest(log types.Log) (*AddressBookExpiredRequest, error) {
	event := new(AddressBookExpiredRequest)
	if err := _AddressBook.contract.UnpackLog(event, "ExpiredRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressBookRegisterCnStakingContractIterator is returned from FilterRegisterCnStakingContract and is used to iterate over the raw logs and unpacked data for RegisterCnStakingContract events raised by the AddressBook contract.
type AddressBookRegisterCnStakingContractIterator struct {
	Event *AddressBookRegisterCnStakingContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressBookRegisterCnStakingContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressBookRegisterCnStakingContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressBookRegisterCnStakingContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressBookRegisterCnStakingContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressBookRegisterCnStakingContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressBookRegisterCnStakingContract represents a RegisterCnStakingContract event raised by the AddressBook contract.
type AddressBookRegisterCnStakingContract struct {
	CnNodeId                 common.Address
	CnStakingContractAddress common.Address
	CnRewardAddress          common.Address
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterRegisterCnStakingContract is a free log retrieval operation binding the contract event 0xe01726557c1ea9f7286dca4bba890e96fea9041689db298806306cafa74c9e91.
//
// Solidity: event RegisterCnStakingContract(address cnNodeId, address cnStakingContractAddress, address cnRewardAddress)
func (_AddressBook *AddressBookFilterer) FilterRegisterCnStakingContract(opts *bind.FilterOpts) (*AddressBookRegisterCnStakingContractIterator, error) {

	logs, sub, err := _AddressBook.contract.FilterLogs(opts, "RegisterCnStakingContract")
	if err != nil {
		return nil, err
	}
	return &AddressBookRegisterCnStakingContractIterator{contract: _AddressBook.contract, event: "RegisterCnStakingContract", logs: logs, sub: sub}, nil
}

// WatchRegisterCnStakingContract is a free log subscription operation binding the contract event 0xe01726557c1ea9f7286dca4bba890e96fea9041689db298806306cafa74c9e91.
//
// Solidity: event RegisterCnStakingContract(address cnNodeId, address cnStakingContractAddress, address cnRewardAddress)
func (_AddressBook *AddressBookFilterer) WatchRegisterCnStakingContract(opts *bind.WatchOpts, sink chan<- *AddressBookRegisterCnStakingContract) (event.Subscription, error) {

	logs, sub, err := _AddressBook.contract.WatchLogs(opts, "RegisterCnStakingContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressBookRegisterCnStakingContract)
				if err := _AddressBook.contract.UnpackLog(event, "RegisterCnStakingContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegisterCnStakingContract is a log parse operation binding the contract event 0xe01726557c1ea9f7286dca4bba890e96fea9041689db298806306cafa74c9e91.
//
// Solidity: event RegisterCnStakingContract(address cnNodeId, address cnStakingContractAddress, address cnRewardAddress)
func (_AddressBook *AddressBookFilterer) ParseRegisterCnStakingContract(log types.Log) (*AddressBookRegisterCnStakingContract, error) {
	event := new(AddressBookRegisterCnStakingContract)
	if err := _AddressBook.contract.UnpackLog(event, "RegisterCnStakingContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressBookReviseRewardAddressIterator is returned from FilterReviseRewardAddress and is used to iterate over the raw logs and unpacked data for ReviseRewardAddress events raised by the AddressBook contract.
type AddressBookReviseRewardAddressIterator struct {
	Event *AddressBookReviseRewardAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressBookReviseRewardAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressBookReviseRewardAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressBookReviseRewardAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressBookReviseRewardAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressBookReviseRewardAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressBookReviseRewardAddress represents a ReviseRewardAddress event raised by the AddressBook contract.
type AddressBookReviseRewardAddress struct {
	CnNodeId          common.Address
	PrevRewardAddress common.Address
	CurRewardAddress  common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterReviseRewardAddress is a free log retrieval operation binding the contract event 0xaa5c92ffd739bc0b8b117b671e7d713917ddb1440b436263a3ea106d70c6f05f.
//
// Solidity: event ReviseRewardAddress(address cnNodeId, address prevRewardAddress, address curRewardAddress)
func (_AddressBook *AddressBookFilterer) FilterReviseRewardAddress(opts *bind.FilterOpts) (*AddressBookReviseRewardAddressIterator, error) {

	logs, sub, err := _AddressBook.contract.FilterLogs(opts, "ReviseRewardAddress")
	if err != nil {
		return nil, err
	}
	return &AddressBookReviseRewardAddressIterator{contract: _AddressBook.contract, event: "ReviseRewardAddress", logs: logs, sub: sub}, nil
}

// WatchReviseRewardAddress is a free log subscription operation binding the contract event 0xaa5c92ffd739bc0b8b117b671e7d713917ddb1440b436263a3ea106d70c6f05f.
//
// Solidity: event ReviseRewardAddress(address cnNodeId, address prevRewardAddress, address curRewardAddress)
func (_AddressBook *AddressBookFilterer) WatchReviseRewardAddress(opts *bind.WatchOpts, sink chan<- *AddressBookReviseRewardAddress) (event.Subscription, error) {

	logs, sub, err := _AddressBook.contract.WatchLogs(opts, "ReviseRewardAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressBookReviseRewardAddress)
				if err := _AddressBook.contract.UnpackLog(event, "ReviseRewardAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReviseRewardAddress is a log parse operation binding the contract event 0xaa5c92ffd739bc0b8b117b671e7d713917ddb1440b436263a3ea106d70c6f05f.
//
// Solidity: event ReviseRewardAddress(address cnNodeId, address prevRewardAddress, address curRewardAddress)
func (_AddressBook *AddressBookFilterer) ParseReviseRewardAddress(log types.Log) (*AddressBookReviseRewardAddress, error) {
	event := new(AddressBookReviseRewardAddress)
	if err := _AddressBook.contract.UnpackLog(event, "ReviseRewardAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressBookRevokeRequestIterator is returned from FilterRevokeRequest and is used to iterate over the raw logs and unpacked data for RevokeRequest events raised by the AddressBook contract.
type AddressBookRevokeRequestIterator struct {
	Event *AddressBookRevokeRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressBookRevokeRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressBookRevokeRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressBookRevokeRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressBookRevokeRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressBookRevokeRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressBookRevokeRequest represents a RevokeRequest event raised by the AddressBook contract.
type AddressBookRevokeRequest struct {
	Id         [32]byte
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Confirmers []common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRevokeRequest is a free log retrieval operation binding the contract event 0x9c174b2536ba49e3478ca649dac74d9e9f71f70adf70f193e780eabbfcdc367c.
//
// Solidity: event RevokeRequest(bytes32 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_AddressBook *AddressBookFilterer) FilterRevokeRequest(opts *bind.FilterOpts, id [][32]byte, from []common.Address) (*AddressBookRevokeRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _AddressBook.contract.FilterLogs(opts, "RevokeRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &AddressBookRevokeRequestIterator{contract: _AddressBook.contract, event: "RevokeRequest", logs: logs, sub: sub}, nil
}

// WatchRevokeRequest is a free log subscription operation binding the contract event 0x9c174b2536ba49e3478ca649dac74d9e9f71f70adf70f193e780eabbfcdc367c.
//
// Solidity: event RevokeRequest(bytes32 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_AddressBook *AddressBookFilterer) WatchRevokeRequest(opts *bind.WatchOpts, sink chan<- *AddressBookRevokeRequest, id [][32]byte, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _AddressBook.contract.WatchLogs(opts, "RevokeRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressBookRevokeRequest)
				if err := _AddressBook.contract.UnpackLog(event, "RevokeRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevokeRequest is a log parse operation binding the contract event 0x9c174b2536ba49e3478ca649dac74d9e9f71f70adf70f193e780eabbfcdc367c.
//
// Solidity: event RevokeRequest(bytes32 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_AddressBook *AddressBookFilterer) ParseRevokeRequest(log types.Log) (*AddressBookRevokeRequest, error) {
	event := new(AddressBookRevokeRequest)
	if err := _AddressBook.contract.UnpackLog(event, "RevokeRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressBookSubmitRequestIterator is returned from FilterSubmitRequest and is used to iterate over the raw logs and unpacked data for SubmitRequest events raised by the AddressBook contract.
type AddressBookSubmitRequestIterator struct {
	Event *AddressBookSubmitRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressBookSubmitRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressBookSubmitRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressBookSubmitRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressBookSubmitRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressBookSubmitRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressBookSubmitRequest represents a SubmitRequest event raised by the AddressBook contract.
type AddressBookSubmitRequest struct {
	Id         [32]byte
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Confirmers []common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSubmitRequest is a free log retrieval operation binding the contract event 0xb7b03afe355fcf2b1d00e020db2b1a902b9ee1b1c1d995626c1e18c957340ea8.
//
// Solidity: event SubmitRequest(bytes32 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_AddressBook *AddressBookFilterer) FilterSubmitRequest(opts *bind.FilterOpts, id [][32]byte, from []common.Address) (*AddressBookSubmitRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _AddressBook.contract.FilterLogs(opts, "SubmitRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &AddressBookSubmitRequestIterator{contract: _AddressBook.contract, event: "SubmitRequest", logs: logs, sub: sub}, nil
}

// WatchSubmitRequest is a free log subscription operation binding the contract event 0xb7b03afe355fcf2b1d00e020db2b1a902b9ee1b1c1d995626c1e18c957340ea8.
//
// Solidity: event SubmitRequest(bytes32 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_AddressBook *AddressBookFilterer) WatchSubmitRequest(opts *bind.WatchOpts, sink chan<- *AddressBookSubmitRequest, id [][32]byte, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _AddressBook.contract.WatchLogs(opts, "SubmitRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressBookSubmitRequest)
				if err := _AddressBook.contract.UnpackLog(event, "SubmitRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmitRequest is a log parse operation binding the contract event 0xb7b03afe355fcf2b1d00e020db2b1a902b9ee1b1c1d995626c1e18c957340ea8.
//
// Solidity: event SubmitRequest(bytes32 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_AddressBook *AddressBookFilterer) ParseSubmitRequest(log types.Log) (*AddressBookSubmitRequest, error) {
	event := new(AddressBookSubmitRequest)
	if err := _AddressBook.contract.UnpackLog(event, "SubmitRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressBookUnregisterCnStakingContractIterator is returned from FilterUnregisterCnStakingContract and is used to iterate over the raw logs and unpacked data for UnregisterCnStakingContract events raised by the AddressBook contract.
type AddressBookUnregisterCnStakingContractIterator struct {
	Event *AddressBookUnregisterCnStakingContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressBookUnregisterCnStakingContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressBookUnregisterCnStakingContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressBookUnregisterCnStakingContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressBookUnregisterCnStakingContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressBookUnregisterCnStakingContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressBookUnregisterCnStakingContract represents a UnregisterCnStakingContract event raised by the AddressBook contract.
type AddressBookUnregisterCnStakingContract struct {
	CnNodeId common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterUnregisterCnStakingContract is a free log retrieval operation binding the contract event 0xa30079721e55931e89e7cdb421712ad0fcc817e7cac8fe954aa7ed0d46b9c42d.
//
// Solidity: event UnregisterCnStakingContract(address cnNodeId)
func (_AddressBook *AddressBookFilterer) FilterUnregisterCnStakingContract(opts *bind.FilterOpts) (*AddressBookUnregisterCnStakingContractIterator, error) {

	logs, sub, err := _AddressBook.contract.FilterLogs(opts, "UnregisterCnStakingContract")
	if err != nil {
		return nil, err
	}
	return &AddressBookUnregisterCnStakingContractIterator{contract: _AddressBook.contract, event: "UnregisterCnStakingContract", logs: logs, sub: sub}, nil
}

// WatchUnregisterCnStakingContract is a free log subscription operation binding the contract event 0xa30079721e55931e89e7cdb421712ad0fcc817e7cac8fe954aa7ed0d46b9c42d.
//
// Solidity: event UnregisterCnStakingContract(address cnNodeId)
func (_AddressBook *AddressBookFilterer) WatchUnregisterCnStakingContract(opts *bind.WatchOpts, sink chan<- *AddressBookUnregisterCnStakingContract) (event.Subscription, error) {

	logs, sub, err := _AddressBook.contract.WatchLogs(opts, "UnregisterCnStakingContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressBookUnregisterCnStakingContract)
				if err := _AddressBook.contract.UnpackLog(event, "UnregisterCnStakingContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnregisterCnStakingContract is a log parse operation binding the contract event 0xa30079721e55931e89e7cdb421712ad0fcc817e7cac8fe954aa7ed0d46b9c42d.
//
// Solidity: event UnregisterCnStakingContract(address cnNodeId)
func (_AddressBook *AddressBookFilterer) ParseUnregisterCnStakingContract(log types.Log) (*AddressBookUnregisterCnStakingContract, error) {
	event := new(AddressBookUnregisterCnStakingContract)
	if err := _AddressBook.contract.UnpackLog(event, "UnregisterCnStakingContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressBookUpdateKirContractIterator is returned from FilterUpdateKirContract and is used to iterate over the raw logs and unpacked data for UpdateKirContract events raised by the AddressBook contract.
type AddressBookUpdateKirContractIterator struct {
	Event *AddressBookUpdateKirContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressBookUpdateKirContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressBookUpdateKirContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressBookUpdateKirContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressBookUpdateKirContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressBookUpdateKirContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressBookUpdateKirContract represents a UpdateKirContract event raised by the AddressBook contract.
type AddressBookUpdateKirContract struct {
	PrevKirContractAddress common.Address
	PrevVersion            *big.Int
	CurKirContractAddress  common.Address
	CurVersion             *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterUpdateKirContract is a free log retrieval operation binding the contract event 0xfdccdf242038c2d09605009fbb95e03f75cdbd106d0a9e52a1670be9553c8848.
//
// Solidity: event UpdateKirContract(address prevKirContractAddress, uint256 prevVersion, address curKirContractAddress, uint256 curVersion)
func (_AddressBook *AddressBookFilterer) FilterUpdateKirContract(opts *bind.FilterOpts) (*AddressBookUpdateKirContractIterator, error) {

	logs, sub, err := _AddressBook.contract.FilterLogs(opts, "UpdateKirContract")
	if err != nil {
		return nil, err
	}
	return &AddressBookUpdateKirContractIterator{contract: _AddressBook.contract, event: "UpdateKirContract", logs: logs, sub: sub}, nil
}

// WatchUpdateKirContract is a free log subscription operation binding the contract event 0xfdccdf242038c2d09605009fbb95e03f75cdbd106d0a9e52a1670be9553c8848.
//
// Solidity: event UpdateKirContract(address prevKirContractAddress, uint256 prevVersion, address curKirContractAddress, uint256 curVersion)
func (_AddressBook *AddressBookFilterer) WatchUpdateKirContract(opts *bind.WatchOpts, sink chan<- *AddressBookUpdateKirContract) (event.Subscription, error) {

	logs, sub, err := _AddressBook.contract.WatchLogs(opts, "UpdateKirContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressBookUpdateKirContract)
				if err := _AddressBook.contract.UnpackLog(event, "UpdateKirContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateKirContract is a log parse operation binding the contract event 0xfdccdf242038c2d09605009fbb95e03f75cdbd106d0a9e52a1670be9553c8848.
//
// Solidity: event UpdateKirContract(address prevKirContractAddress, uint256 prevVersion, address curKirContractAddress, uint256 curVersion)
func (_AddressBook *AddressBookFilterer) ParseUpdateKirContract(log types.Log) (*AddressBookUpdateKirContract, error) {
	event := new(AddressBookUpdateKirContract)
	if err := _AddressBook.contract.UnpackLog(event, "UpdateKirContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressBookUpdatePocContractIterator is returned from FilterUpdatePocContract and is used to iterate over the raw logs and unpacked data for UpdatePocContract events raised by the AddressBook contract.
type AddressBookUpdatePocContractIterator struct {
	Event *AddressBookUpdatePocContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressBookUpdatePocContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressBookUpdatePocContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressBookUpdatePocContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressBookUpdatePocContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressBookUpdatePocContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressBookUpdatePocContract represents a UpdatePocContract event raised by the AddressBook contract.
type AddressBookUpdatePocContract struct {
	PrevPocContractAddress common.Address
	PrevVersion            *big.Int
	CurPocContractAddress  common.Address
	CurVersion             *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterUpdatePocContract is a free log retrieval operation binding the contract event 0xd531725ac89042f190fd73adfdeff435e07500f1a92b4b87743f1bcf91acb3a7.
//
// Solidity: event UpdatePocContract(address prevPocContractAddress, uint256 prevVersion, address curPocContractAddress, uint256 curVersion)
func (_AddressBook *AddressBookFilterer) FilterUpdatePocContract(opts *bind.FilterOpts) (*AddressBookUpdatePocContractIterator, error) {

	logs, sub, err := _AddressBook.contract.FilterLogs(opts, "UpdatePocContract")
	if err != nil {
		return nil, err
	}
	return &AddressBookUpdatePocContractIterator{contract: _AddressBook.contract, event: "UpdatePocContract", logs: logs, sub: sub}, nil
}

// WatchUpdatePocContract is a free log subscription operation binding the contract event 0xd531725ac89042f190fd73adfdeff435e07500f1a92b4b87743f1bcf91acb3a7.
//
// Solidity: event UpdatePocContract(address prevPocContractAddress, uint256 prevVersion, address curPocContractAddress, uint256 curVersion)
func (_AddressBook *AddressBookFilterer) WatchUpdatePocContract(opts *bind.WatchOpts, sink chan<- *AddressBookUpdatePocContract) (event.Subscription, error) {

	logs, sub, err := _AddressBook.contract.WatchLogs(opts, "UpdatePocContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressBookUpdatePocContract)
				if err := _AddressBook.contract.UnpackLog(event, "UpdatePocContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdatePocContract is a log parse operation binding the contract event 0xd531725ac89042f190fd73adfdeff435e07500f1a92b4b87743f1bcf91acb3a7.
//
// Solidity: event UpdatePocContract(address prevPocContractAddress, uint256 prevVersion, address curPocContractAddress, uint256 curVersion)
func (_AddressBook *AddressBookFilterer) ParseUpdatePocContract(log types.Log) (*AddressBookUpdatePocContract, error) {
	event := new(AddressBookUpdatePocContract)
	if err := _AddressBook.contract.UnpackLog(event, "UpdatePocContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressBookUpdateRequirementIterator is returned from FilterUpdateRequirement and is used to iterate over the raw logs and unpacked data for UpdateRequirement events raised by the AddressBook contract.
type AddressBookUpdateRequirementIterator struct {
	Event *AddressBookUpdateRequirement // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressBookUpdateRequirementIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressBookUpdateRequirement)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressBookUpdateRequirement)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressBookUpdateRequirementIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressBookUpdateRequirementIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressBookUpdateRequirement represents a UpdateRequirement event raised by the AddressBook contract.
type AddressBookUpdateRequirement struct {
	Requirement *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequirement is a free log retrieval operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: event UpdateRequirement(uint256 requirement)
func (_AddressBook *AddressBookFilterer) FilterUpdateRequirement(opts *bind.FilterOpts) (*AddressBookUpdateRequirementIterator, error) {

	logs, sub, err := _AddressBook.contract.FilterLogs(opts, "UpdateRequirement")
	if err != nil {
		return nil, err
	}
	return &AddressBookUpdateRequirementIterator{contract: _AddressBook.contract, event: "UpdateRequirement", logs: logs, sub: sub}, nil
}

// WatchUpdateRequirement is a free log subscription operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: event UpdateRequirement(uint256 requirement)
func (_AddressBook *AddressBookFilterer) WatchUpdateRequirement(opts *bind.WatchOpts, sink chan<- *AddressBookUpdateRequirement) (event.Subscription, error) {

	logs, sub, err := _AddressBook.contract.WatchLogs(opts, "UpdateRequirement")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressBookUpdateRequirement)
				if err := _AddressBook.contract.UnpackLog(event, "UpdateRequirement", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequirement is a log parse operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: event UpdateRequirement(uint256 requirement)
func (_AddressBook *AddressBookFilterer) ParseUpdateRequirement(log types.Log) (*AddressBookUpdateRequirement, error) {
	event := new(AddressBookUpdateRequirement)
	if err := _AddressBook.contract.UnpackLog(event, "UpdateRequirement", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressBookUpdateSpareContractIterator is returned from FilterUpdateSpareContract and is used to iterate over the raw logs and unpacked data for UpdateSpareContract events raised by the AddressBook contract.
type AddressBookUpdateSpareContractIterator struct {
	Event *AddressBookUpdateSpareContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressBookUpdateSpareContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressBookUpdateSpareContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressBookUpdateSpareContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressBookUpdateSpareContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressBookUpdateSpareContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressBookUpdateSpareContract represents a UpdateSpareContract event raised by the AddressBook contract.
type AddressBookUpdateSpareContract struct {
	SpareContractAddress common.Address
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterUpdateSpareContract is a free log retrieval operation binding the contract event 0x508aacd44cfe23a34a8c2643ab08c3410cf5505632cfce58dcfa0efa2fd2ff37.
//
// Solidity: event UpdateSpareContract(address spareContractAddress)
func (_AddressBook *AddressBookFilterer) FilterUpdateSpareContract(opts *bind.FilterOpts) (*AddressBookUpdateSpareContractIterator, error) {

	logs, sub, err := _AddressBook.contract.FilterLogs(opts, "UpdateSpareContract")
	if err != nil {
		return nil, err
	}
	return &AddressBookUpdateSpareContractIterator{contract: _AddressBook.contract, event: "UpdateSpareContract", logs: logs, sub: sub}, nil
}

// WatchUpdateSpareContract is a free log subscription operation binding the contract event 0x508aacd44cfe23a34a8c2643ab08c3410cf5505632cfce58dcfa0efa2fd2ff37.
//
// Solidity: event UpdateSpareContract(address spareContractAddress)
func (_AddressBook *AddressBookFilterer) WatchUpdateSpareContract(opts *bind.WatchOpts, sink chan<- *AddressBookUpdateSpareContract) (event.Subscription, error) {

	logs, sub, err := _AddressBook.contract.WatchLogs(opts, "UpdateSpareContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressBookUpdateSpareContract)
				if err := _AddressBook.contract.UnpackLog(event, "UpdateSpareContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateSpareContract is a log parse operation binding the contract event 0x508aacd44cfe23a34a8c2643ab08c3410cf5505632cfce58dcfa0efa2fd2ff37.
//
// Solidity: event UpdateSpareContract(address spareContractAddress)
func (_AddressBook *AddressBookFilterer) ParseUpdateSpareContract(log types.Log) (*AddressBookUpdateSpareContract, error) {
	event := new(AddressBookUpdateSpareContract)
	if err := _AddressBook.contract.UnpackLog(event, "UpdateSpareContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressBookInterfaceMetaData contains all meta data concerning the AddressBookInterface contract.
var AddressBookInterfaceMetaData = &bind.MetaData{
	ABI: "[{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reviseRewardAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"832a2aad": "reviseRewardAddress(address)",
	},
}

// AddressBookInterfaceABI is the input ABI used to generate the binding from.
// Deprecated: Use AddressBookInterfaceMetaData.ABI instead.
var AddressBookInterfaceABI = AddressBookInterfaceMetaData.ABI

// AddressBookInterfaceBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const AddressBookInterfaceBinRuntime = ``

// Deprecated: Use AddressBookInterfaceMetaData.Sigs instead.
// AddressBookInterfaceFuncSigs maps the 4-byte function signature to its string representation.
var AddressBookInterfaceFuncSigs = AddressBookInterfaceMetaData.Sigs

// AddressBookInterface is an auto generated Go binding around a Kaia contract.
type AddressBookInterface struct {
	AddressBookInterfaceCaller     // Read-only binding to the contract
	AddressBookInterfaceTransactor // Write-only binding to the contract
	AddressBookInterfaceFilterer   // Log filterer for contract events
}

// AddressBookInterfaceCaller is an auto generated read-only Go binding around a Kaia contract.
type AddressBookInterfaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressBookInterfaceTransactor is an auto generated write-only Go binding around a Kaia contract.
type AddressBookInterfaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressBookInterfaceFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type AddressBookInterfaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressBookInterfaceSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type AddressBookInterfaceSession struct {
	Contract     *AddressBookInterface // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// AddressBookInterfaceCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type AddressBookInterfaceCallerSession struct {
	Contract *AddressBookInterfaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// AddressBookInterfaceTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type AddressBookInterfaceTransactorSession struct {
	Contract     *AddressBookInterfaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// AddressBookInterfaceRaw is an auto generated low-level Go binding around a Kaia contract.
type AddressBookInterfaceRaw struct {
	Contract *AddressBookInterface // Generic contract binding to access the raw methods on
}

// AddressBookInterfaceCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type AddressBookInterfaceCallerRaw struct {
	Contract *AddressBookInterfaceCaller // Generic read-only contract binding to access the raw methods on
}

// AddressBookInterfaceTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type AddressBookInterfaceTransactorRaw struct {
	Contract *AddressBookInterfaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAddressBookInterface creates a new instance of AddressBookInterface, bound to a specific deployed contract.
func NewAddressBookInterface(address common.Address, backend bind.ContractBackend) (*AddressBookInterface, error) {
	contract, err := bindAddressBookInterface(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AddressBookInterface{AddressBookInterfaceCaller: AddressBookInterfaceCaller{contract: contract}, AddressBookInterfaceTransactor: AddressBookInterfaceTransactor{contract: contract}, AddressBookInterfaceFilterer: AddressBookInterfaceFilterer{contract: contract}}, nil
}

// NewAddressBookInterfaceCaller creates a new read-only instance of AddressBookInterface, bound to a specific deployed contract.
func NewAddressBookInterfaceCaller(address common.Address, caller bind.ContractCaller) (*AddressBookInterfaceCaller, error) {
	contract, err := bindAddressBookInterface(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AddressBookInterfaceCaller{contract: contract}, nil
}

// NewAddressBookInterfaceTransactor creates a new write-only instance of AddressBookInterface, bound to a specific deployed contract.
func NewAddressBookInterfaceTransactor(address common.Address, transactor bind.ContractTransactor) (*AddressBookInterfaceTransactor, error) {
	contract, err := bindAddressBookInterface(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AddressBookInterfaceTransactor{contract: contract}, nil
}

// NewAddressBookInterfaceFilterer creates a new log filterer instance of AddressBookInterface, bound to a specific deployed contract.
func NewAddressBookInterfaceFilterer(address common.Address, filterer bind.ContractFilterer) (*AddressBookInterfaceFilterer, error) {
	contract, err := bindAddressBookInterface(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AddressBookInterfaceFilterer{contract: contract}, nil
}

// bindAddressBookInterface binds a generic wrapper to an already deployed contract.
func bindAddressBookInterface(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AddressBookInterfaceMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AddressBookInterface *AddressBookInterfaceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AddressBookInterface.Contract.AddressBookInterfaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AddressBookInterface *AddressBookInterfaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AddressBookInterface.Contract.AddressBookInterfaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AddressBookInterface *AddressBookInterfaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AddressBookInterface.Contract.AddressBookInterfaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AddressBookInterface *AddressBookInterfaceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AddressBookInterface.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AddressBookInterface *AddressBookInterfaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AddressBookInterface.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AddressBookInterface *AddressBookInterfaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AddressBookInterface.Contract.contract.Transact(opts, method, params...)
}

// ReviseRewardAddress is a paid mutator transaction binding the contract method 0x832a2aad.
//
// Solidity: function reviseRewardAddress(address ) returns()
func (_AddressBookInterface *AddressBookInterfaceTransactor) ReviseRewardAddress(opts *bind.TransactOpts, arg0 common.Address) (*types.Transaction, error) {
	return _AddressBookInterface.contract.Transact(opts, "reviseRewardAddress", arg0)
}

// ReviseRewardAddress is a paid mutator transaction binding the contract method 0x832a2aad.
//
// Solidity: function reviseRewardAddress(address ) returns()
func (_AddressBookInterface *AddressBookInterfaceSession) ReviseRewardAddress(arg0 common.Address) (*types.Transaction, error) {
	return _AddressBookInterface.Contract.ReviseRewardAddress(&_AddressBookInterface.TransactOpts, arg0)
}

// ReviseRewardAddress is a paid mutator transaction binding the contract method 0x832a2aad.
//
// Solidity: function reviseRewardAddress(address ) returns()
func (_AddressBookInterface *AddressBookInterfaceTransactorSession) ReviseRewardAddress(arg0 common.Address) (*types.Transaction, error) {
	return _AddressBookInterface.Contract.ReviseRewardAddress(&_AddressBookInterface.TransactOpts, arg0)
}

// CnStakingContractMetaData contains all meta data concerning the CnStakingContract contract.
var CnStakingContractMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"initialLockupStaking\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"submitUpdateRewardAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approvedWithdrawalId\",\"type\":\"uint256\"}],\"name\":\"submitCancelApprovedStakingWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getRequestInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"},{\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"getRequestIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nodeId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_functionId\",\"type\":\"uint8\"},{\"name\":\"_firstArg\",\"type\":\"bytes32\"},{\"name\":\"_secondArg\",\"type\":\"bytes32\"},{\"name\":\"_thirdArg\",\"type\":\"bytes32\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalRequestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockupConditions\",\"outputs\":[{\"name\":\"allReviewed\",\"type\":\"bool\"},{\"name\":\"reviewedCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"deleteAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_functionId\",\"type\":\"uint8\"},{\"name\":\"_firstArg\",\"type\":\"bytes32\"},{\"name\":\"_secondArg\",\"type\":\"bytes32\"},{\"name\":\"_thirdArg\",\"type\":\"bytes32\"}],\"name\":\"confirmRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"submitWithdrawLockupStaking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawLockupStaking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveStakingWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLockupStakingInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositLockupStakingAndInit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approvedWithdrawalId\",\"type\":\"uint256\"}],\"name\":\"withdrawApprovedStaking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reviewInitialConditions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getApprovedStakingWithdrawalInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReviewers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"submitApproveStakingWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"submitDeleteAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractValidator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingLockupStaking\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"submitAddAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"submitClearRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_WEEK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"updateRewardAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"updateRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stakeKlay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approvedWithdrawalId\",\"type\":\"uint256\"}],\"name\":\"cancelApprovedStakingWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"},{\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"getApprovedStakingWithdrawalIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"submitUpdateRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastClearedId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADDRESS_BOOK_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractValidator\",\"type\":\"address\"},{\"name\":\"_nodeId\",\"type\":\"address\"},{\"name\":\"_rewardAddress\",\"type\":\"address\"},{\"name\":\"_cnAdminlist\",\"type\":\"address[]\"},{\"name\":\"_requirement\",\"type\":\"uint256\"},{\"name\":\"_unlockTime\",\"type\":\"uint256[]\"},{\"name\":\"_unlockAmount\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"contractValidator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rewardAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cnAdminList\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"requirement\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockTime\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"unlockAmount\",\"type\":\"uint256[]\"}],\"name\":\"DeployContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"ReviewInitialConditions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CompleteReviewInitialConditions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DepositLockupStakingAndInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"thirdArg\",\"type\":\"bytes32\"}],\"name\":\"SubmitRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"thirdArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"confirmers\",\"type\":\"address[]\"}],\"name\":\"ConfirmRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"thirdArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"confirmers\",\"type\":\"address[]\"}],\"name\":\"RevokeConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"thirdArg\",\"type\":\"bytes32\"}],\"name\":\"CancelRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"thirdArg\",\"type\":\"bytes32\"}],\"name\":\"ExecuteRequestSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"thirdArg\",\"type\":\"bytes32\"}],\"name\":\"ExecuteRequestFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ClearRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"DeleteAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requirement\",\"type\":\"uint256\"}],\"name\":\"UpdateRequirement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawLockupStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"approvedWithdrawalId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"withdrawableFrom\",\"type\":\"uint256\"}],\"name\":\"ApproveStakingWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"approvedWithdrawalId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CancelApprovedStakingWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"UpdateRewardAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"StakeKlay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"approvedWithdrawalId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawApprovedStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cnNodeId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prevRewardAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"curRewardAddress\",\"type\":\"address\"}],\"name\":\"ReviseRewardAddress\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"f2f2f49b": "ADDRESS_BOOK_ADDRESS()",
		"4b6a94cc": "CONTRACT_TYPE()",
		"58d65880": "MAX_ADMIN()",
		"8e6f6b77": "ONE_WEEK()",
		"ffa1ad74": "VERSION()",
		"70480275": "addAdmin(address)",
		"5df8b09a": "approveStakingWithdrawal(address,uint256)",
		"c804b115": "cancelApprovedStakingWithdrawal(uint256)",
		"4f97638f": "clearRequest()",
		"3b2d2aca": "confirmRequest(uint256,uint8,bytes32,bytes32,bytes32)",
		"7a5db068": "contractValidator()",
		"27e1f7df": "deleteAdmin(address)",
		"6a27c206": "depositLockupStakingAndInit()",
		"d2569eb9": "getApprovedStakingWithdrawalIds(uint256,uint256,uint8)",
		"725c0503": "getApprovedStakingWithdrawalInfo(uint256)",
		"5ecd75f2": "getLockupStakingInfo()",
		"0fd440ec": "getRequestIds(uint256,uint256,uint8)",
		"0b816045": "getRequestInfo(uint256)",
		"75a87643": "getReviewers()",
		"1865c57d": "getState()",
		"06704222": "initialLockupStaking()",
		"392e53cd": "isInitialized()",
		"e7abb98d": "lastClearedId()",
		"2429f8a9": "lockupConditions()",
		"139d7fed": "nodeId()",
		"7b5e0481": "remainingLockupStaking()",
		"5badbe4c": "requestCount()",
		"b7563930": "requirement()",
		"702b9c9b": "reviewInitialConditions()",
		"164990f8": "revokeConfirmation(uint256,uint8,bytes32,bytes32,bytes32)",
		"8cf57cb9": "rewardAddress()",
		"c72507e9": "stakeKlay()",
		"4cf088d9": "staking()",
		"863f5c0a": "submitAddAdmin(address)",
		"7818097c": "submitApproveStakingWithdrawal(address,uint256)",
		"06b35d31": "submitCancelApprovedStakingWithdrawal(uint256)",
		"87cd9feb": "submitClearRequest()",
		"791b5123": "submitDeleteAdmin(address)",
		"e748357b": "submitUpdateRequirement(uint256)",
		"069135af": "submitUpdateRewardAddress(address)",
		"4b8bc6f8": "submitWithdrawLockupStaking(address,uint256)",
		"c47afb3a": "updateRequirement(uint256)",
		"944dd5a2": "updateRewardAddress(address)",
		"6e93df0d": "withdrawApprovedStaking(uint256)",
		"505ebed4": "withdrawLockupStaking(address,uint256)",
		"19e44e32": "withdrawalRequestCount()",
	},
	Bin: "0x60806040523480156200001157600080fd5b50604051620053a7380380620053a783398101604090815281516020830151918301516060840151608085015160a086015160c08701519287018051959794959094929391830192919091019060009081908560328211801590620000765750818111155b80156200008257508015155b80156200008e57508115155b1515620000fc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420726571756972656d656e742e000000000000000000000000604482015290519081900360640190fd5b89600160a060020a03811615156200017557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f41646472657373206973206e756c6c0000000000000000000000000000000000604482015290519081900360640190fd5b89600160a060020a0381161515620001ee57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f41646472657373206973206e756c6c0000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038d1615156200026657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f56616c696461746f72206973206e756c6c2e0000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038d166000908152600260205260408120805460ff1916600117905595505b8951861015620003c157600260008b88815181101515620002a957fe5b6020908102909101810151600160a060020a031682528101919091526040016000205460ff16158015620002ff57508986815181101515620002e757fe5b90602001906020020151600160a060020a0316600014155b15156200036d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f41646472657373206973206e756c6c206f72206e6f7420756e697175652e0000604482015290519081900360640190fd5b6001600260008c898151811015156200038257fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff1916911515919091179055600195909501946200028c565b875115801590620003d25750865115155b8015620003e0575086518851145b15156200044e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f496e76616c696420756e6c6f636b2074696d6520616e6420616d6f756e742e00604482015290519081900360640190fd5b429450600095505b8651861015620005bc5787868151811015156200046f57fe5b6020908102909101015185106200050d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f556e6c6f636b2074696d65206973206e6f7420696e20617363656e64696e672060448201527f6f726465722e0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600087878151811015156200051e57fe5b60209081029091010151116200059557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f416d6f756e74206973206e6f7420706f736974697665206e756d6265722e0000604482015290519081900360640190fd5b8786815181101515620005a457fe5b60209081029091010151600190960195945062000456565b8c600660006101000a815481600160a060020a030219169083600160a060020a031602179055508b600e60006101000a815481600160a060020a030219169083600160a060020a031602179055508a600f60006101000a815481600160a060020a030219169083600160a060020a03160217905550896000908051906020019062000649929190620008a4565b5060018990558751620006649060079060208b01906200090e565b5086516200067a9060089060208a01906200090e565b506000600660146101000a81548160ff0219169083151502179055507fb03718e2ed5bd9937371e2b685eccb81e680ebd61609db18f411eb1539ad3aaf6040805190810160405280601181526020017f436e5374616b696e67436f6e74726163740000000000000000000000000000008152508e8e8e8e8e8e8e604051808060200189600160a060020a0316600160a060020a0316815260200188600160a060020a0316600160a060020a0316815260200187600160a060020a0316600160a060020a0316815260200180602001868152602001806020018060200185810385528d818151815260200191508051906020019080838360005b838110156200078d57818101518382015260200162000773565b50505050905090810190601f168015620007bb5780820380516001836020036101000a031916815260200191505b508581038452895181528951602091820191808c01910280838360005b83811015620007f2578181015183820152602001620007d8565b50505050905001858103835287818151815260200191508051906020019060200280838360005b838110156200083357818101518382015260200162000819565b50505050905001858103825286818151815260200191508051906020019060200280838360005b83811015620008745781810151838201526020016200085a565b505050509050019c5050505050505050505050505060405180910390a150505050505050505050505050620009a1565b828054828255906000526020600020908101928215620008fc579160200282015b82811115620008fc5782518254600160a060020a031916600160a060020a03909116178255602090920191600190910190620008c5565b506200090a9291506200095a565b5090565b8280548282559060005260206000209081019282156200094c579160200282015b828111156200094c5782518255916020019190600101906200092f565b506200090a92915062000984565b6200098191905b808211156200090a578054600160a060020a031916815560010162000961565b90565b6200098191905b808211156200090a57600081556001016200098b565b6149f680620009b16000396000f30060806040526004361061022f5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306704222811461032d578063069135af1461035457806306b35d31146103775780630b8160451461038f5780630fd440ec1461044e578063139d7fed146104bf578063164990f8146104f05780631865c57d1461051757806319e44e32146106725780632429f8a91461068757806327e1f7df146106b7578063392e53cd146106d85780633b2d2aca146107015780634b6a94cc146107285780634b8bc6f8146107b25780634cf088d9146107d65780634f97638f146107eb578063505ebed41461080057806358d65880146108245780635badbe4c146108395780635df8b09a1461084e5780635ecd75f2146108725780636a27c206146109355780636e93df0d1461093d578063702b9c9b14610955578063704802751461096a578063725c05031461098b57806375a87643146109ee5780637818097c14610a03578063791b512314610a275780637a5db06814610a485780637b5e048114610a5d578063863f5c0a14610a7257806387cd9feb14610a935780638cf57cb914610aa85780638e6f6b7714610abd578063944dd5a214610ad2578063b756393014610af3578063c47afb3a14610b08578063c72507e914610b20578063c804b11514610b28578063d2569eb914610b40578063e748357b14610b61578063e7abb98d14610b79578063f2f2f49b14610b8e578063ffa1ad7414610ba3575b60065460a060020a900460ff161515600114610283576040805160e560020a62461bcd02815260206004820152601c602482015260008051602061496b833981519152604482015290519081900360640190fd5b600034116102db576040805160e560020a62461bcd02815260206004820152600f60248201527f496e76616c696420616d6f756e742e0000000000000000000000000000000000604482015290519081900360640190fd5b6010546102ee903463ffffffff610bb816565b6010556040805133815234602082015281517f016a7abf22d0d58c184d5eb406e8e9f6007698168251cf67add43fa4d13768f6929181900390910190a1005b34801561033957600080fd5b50610342610bd1565b60408051918252519081900360200190f35b34801561036057600080fd5b50610375600160a060020a0360043516610bd7565b005b34801561038357600080fd5b50610375600435610d27565b34801561039b57600080fd5b506103a7600435610f27565b604051808860088111156103b757fe5b60ff168152602081018890526040810187905260608101869052600160a060020a038516608082015260a081019060c0018360048111156103f457fe5b60ff168152602001828103825284818151815260200191508051906020019060200280838360005b8381101561043457818101518382015260200161041c565b505050509050019850505050505050505060405180910390f35b34801561045a57600080fd5b5061046f60043560243560ff60443516610ff0565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104ab578181015183820152602001610493565b505050509050019250505060405180910390f35b3480156104cb57600080fd5b506104d4611118565b60408051600160a060020a039092168252519081900360200190f35b3480156104fc57600080fd5b5061037560043560ff60243516604435606435608435611127565b34801561052357600080fd5b5061052c6113d1565b604051808a600160a060020a0316600160a060020a0316815260200189600160a060020a0316600160a060020a0316815260200188600160a060020a0316600160a060020a03168152602001806020018781526020018060200180602001861515151581526020018515151515815260200184810384528a818151815260200191508051906020019060200280838360005b838110156105d65781810151838201526020016105be565b50505050905001848103835288818151815260200191508051906020019060200280838360005b838110156106155781810151838201526020016105fd565b50505050905001848103825287818151815260200191508051906020019060200280838360005b8381101561065457818101518382015260200161063c565b505050509050019c5050505050505050505050505060405180910390f35b34801561067e57600080fd5b5061034261153a565b34801561069357600080fd5b5061069c611540565b60408051921515835260208301919091528051918290030190f35b3480156106c357600080fd5b50610375600160a060020a036004351661154f565b3480156106e457600080fd5b506106ed6117e1565b604080519115158252519081900360200190f35b34801561070d57600080fd5b5061037560043560ff602435166044356064356084356117f1565b34801561073457600080fd5b5061073d611bec565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561077757818101518382015260200161075f565b50505050905090810190601f1680156107a45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156107be57600080fd5b50610375600160a060020a0360043516602435611c23565b3480156107e257600080fd5b50610342611ded565b3480156107f757600080fd5b50610375611df3565b34801561080c57600080fd5b50610375600160a060020a0360043516602435611ec8565b34801561083057600080fd5b50610342612007565b34801561084557600080fd5b5061034261200c565b34801561085a57600080fd5b50610375600160a060020a0360043516602435612012565b34801561087e57600080fd5b506108876121ba565b604051808060200180602001868152602001858152602001848152602001838103835288818151815260200191508051906020019060200280838360005b838110156108dd5781810151838201526020016108c5565b50505050905001838103825287818151815260200191508051906020019060200280838360005b8381101561091c578181015183820152602001610904565b5050505090500197505050505050505060405180910390f35b61037561238e565b34801561094957600080fd5b50610375600435612586565b34801561096157600080fd5b5061037561293b565b34801561097657600080fd5b50610375600160a060020a0360043516612b04565b34801561099757600080fd5b506109a3600435612ce3565b6040518085600160a060020a0316600160a060020a031681526020018481526020018381526020018260028111156109d757fe5b60ff16815260200194505050505060405180910390f35b3480156109fa57600080fd5b5061046f612d18565b348015610a0f57600080fd5b50610375600160a060020a0360043516602435612ed3565b348015610a3357600080fd5b50610375600160a060020a036004351661308c565b348015610a5457600080fd5b506104d46132c3565b348015610a6957600080fd5b506103426132d2565b348015610a7e57600080fd5b50610375600160a060020a03600435166132d8565b348015610a9f57600080fd5b506103756134e7565b348015610ab457600080fd5b506104d46135da565b348015610ac957600080fd5b506103426135e9565b348015610ade57600080fd5b50610375600160a060020a03600435166135f0565b348015610aff57600080fd5b50610342613708565b348015610b1457600080fd5b5061037560043561370e565b610375613807565b348015610b3457600080fd5b50610375600435613905565b348015610b4c57600080fd5b5061046f60043560243560ff60443516613aca565b348015610b6d57600080fd5b50610375600435613c32565b348015610b8557600080fd5b50610342613ded565b348015610b9a57600080fd5b506104d4613df3565b348015610baf57600080fd5b50610342613df9565b600082820183811015610bca57600080fd5b9392505050565b600c5481565b60065460009060a060020a900460ff161515600114610c2e576040805160e560020a62461bcd02815260206004820152601c602482015260008051602061496b833981519152604482015290519081900360640190fd5b81600160a060020a0381161515610c7d576040805160e560020a62461bcd02815260206004820152600f60248201526000805160206149ab833981519152604482015290519081900360640190fd5b3360008181526002602052604090205460ff161515610cd4576040805160e560020a62461bcd028152602060048201526015602482015260008051602061492b833981519152604482015290519081900360640190fd5b6004549250610cf1836008600160a060020a038716600080613dfe565b6000838152600560205260409020805460018201546002830154600390930154610d2193879360ff1692916117f1565b50505050565b60065460009060a060020a900460ff161515600114610d7e576040805160e560020a62461bcd02815260206004820152601c602482015260008051602061496b833981519152604482015290519081900360640190fd5b3360008181526002602052604090205460ff161515610dd5576040805160e560020a62461bcd028152602060048201526015602482015260008051602061492b833981519152604482015290519081900360640190fd5b600083815260126020526040902054600160a060020a03161515610e69576040805160e560020a62461bcd02815260206004820152602260248201527f5769746864726177616c207265717565737420646f6573206e6f74206578697360448201527f742e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60008381526012602052604081206003015460ff166002811115610e8957fe5b14610ede576040805160e560020a62461bcd02815260206004820152600e60248201527f496e76616c69642073746174652e000000000000000000000000000000000000604482015290519081900360640190fd5b6004549150610ef282600785600080613dfe565b6000828152600560205260409020805460018201546002830154600390930154610f2293869360ff1692916117f1565b505050565b60008181526005602081815260408084208054600182015460028301546003840154600485015460068601549590980180548751818a0281018a019098528088528a998a998a998a996060998b9960ff91821699909890979096600160a060020a039096169590949190921692918491830182828015610fd057602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610fb2575b505050505091509650965096509650965096509650919395979092949650565b6060826000808383158061100657506004548710155b156110115760045493505b8784101561101e57600080fd5b600092508791505b838210156110725785600481111561103a57fe5b60008381526005602052604090206006015460ff16600481111561105a57fe5b1415611067576001830192505b600190910190611026565b8260405190808252806020026020018201604052801561109c578160200160208202803883390190505b509050600092508791505b8382101561110d578560048111156110bb57fe5b60008381526005602052604090206006015460ff1660048111156110db57fe5b1415611102578181848151811015156110f057fe5b60209081029091010152600192909201915b6001909101906110a7565b979650505050505050565b600e54600160a060020a031681565b6000808087600160008281526005602052604090206006015460ff16600481111561114e57fe5b146111a3576040805160e560020a62461bcd02815260206004820152601f60248201527f4d757374206265206174206e6f742d636f6e6669726d65642073746174652e00604482015290519081900360640190fd5b3360008181526002602052604090205460ff1615156111fa576040805160e560020a62461bcd028152602060048201526015602482015260008051602061492b833981519152604482015290519081900360640190fd5b60008a81526005602081905260408220015490955093508492505b8383101561126b5760008a81526005602081905260409091200180548490811061123b57fe5b600091825260209091200154600160a060020a0316331415611260576001945061126b565b600190920191611215565b8415156112c2576040805160e560020a62461bcd02815260206004820152601d60248201527f4d73672e73656e64657220686173206e6f7420636f6e6669726d65642e000000604482015290519081900360640190fd5b8860088111156112ce57fe5b60008b81526005602052604090205460ff1660088111156112eb57fe5b148015611308575060008a81526005602052604090206001015488145b8015611324575060008a81526005602052604090206002015487145b8015611340575060008a81526005602052604090206003015486145b15156113bc576040805160e560020a62461bcd02815260206004820152602760248201527f46756e6374696f6e20696420616e6420617267756d656e747320646f206e6f7460448201527f206d617463682e00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6113c58a613f85565b50505050505050505050565b600654600e54600f5460015460095460008054604080516020808402820181019092528281529297889788976060978997899788978a978897600160a060020a038082169881169716958995909460079460089460ff9384169460a060020a90049093169288919083018282801561147257602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611454575b50505050509550838054806020026020016040519081016040528092919081815260200182805480156114c457602002820191906000526020600020905b8154815260200190600101908083116114b0575b505050505093508280548060200260200160405190810160405280929190818152602001828054801561151657602002820191906000526020600020905b815481526020019060010190808311611502575b50505050509250985098509850985098509850985098509850909192939495969798565b60115481565b600954600a5460ff9091169082565b600080333014611597576040805160e560020a62461bcd02815260206004820152601b602482015260008051602061494b833981519152604482015290519081900360640190fd5b600160a060020a038316600090815260026020526040902054839060ff1615156115f9576040805160e560020a62461bcd028152602060048201526015602482015260008051602061492b833981519152604482015290519081900360640190fd5b60005461160d90600163ffffffff61412f16565b600154603282111580156116215750818111155b801561162c57508015155b801561163757508115155b151561167b576040805160e560020a62461bcd028152602060048201526014602482015260008051602061498b833981519152604482015290519081900360640190fd5b600160a060020a0386166000908152600260205260408120805460ff191690558054955093505b600185038410156117555785600160a060020a03166000858154811015156116c657fe5b600091825260209091200154600160a060020a0316141561174a576000805460001987019081106116f357fe5b60009182526020822001548154600160a060020a0390911691908690811061171757fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550611755565b6001909301926116a2565b60008054600019870190811061176757fe5b600091825260208220018054600160a060020a03191690555461179190600163ffffffff61412f16565b61179c600082614860565b506117a5611df3565b604051600160a060020a038716907f1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc256522090600090a2505050505050565b60065460a060020a900460ff1681565b60008080606088600160008281526005602052604090206006015460ff16600481111561181a57fe5b1461186f576040805160e560020a62461bcd02815260206004820152601f60248201527f4d757374206265206174206e6f742d636f6e6669726d65642073746174652e00604482015290519081900360640190fd5b3360008181526002602052604090205460ff1615156118c6576040805160e560020a62461bcd028152602060048201526015602482015260008051602061492b833981519152604482015290519081900360640190fd5b60008b81526005602081905260408220015490965094508593505b848410156119375760008b81526005602081905260409091200180548590811061190757fe5b600091825260209091200154600160a060020a031633141561192c5760019550611937565b6001909301926118e1565b851561198d576040805160e560020a62461bcd02815260206004820152601d60248201527f4d73672e73656e64657220616c726561647920636f6e6669726d65642e000000604482015290519081900360640190fd5b89600881111561199957fe5b60008c81526005602052604090205460ff1660088111156119b657fe5b1480156119d3575060008b81526005602052604090206001015489145b80156119ef575060008b81526005602052604090206002015488145b8015611a0b575060008b81526005602052604090206003015487145b1515611a87576040805160e560020a62461bcd02815260206004820152602760248201527f46756e6374696f6e20696420616e6420617267756d656e747320646f206e6f7460448201527f206d617463682e00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60008b81526005602081815260408084209092018054600181018255818552828520018054600160a060020a03191633179055928e9052825482518183028101830190935280835291929190830182828015611b0c57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611aee575b5050505050925033600160a060020a03168b7f658055f08cf63659025f616b2baf94baf8f4d2ee9c600c2ae722b4b7716cce468c8c8c8c8960405180866008811115611b5457fe5b60ff1681526020808201879052604082018690526060820185905260a08383038101608084019081528551918401919091528451909260c00191858101910280838360005b83811015611bb1578181015183820152602001611b99565b50505050905001965050505050505060405180910390a3611bd18b614146565b15611bdf57611bdf8b614163565b5050505050505050505050565b60408051808201909152601181527f436e5374616b696e67436f6e7472616374000000000000000000000000000000602082015281565b600654600090819060a060020a900460ff161515600114611c7c576040805160e560020a62461bcd02815260206004820152601c602482015260008051602061496b833981519152604482015290519081900360640190fd5b83600160a060020a0381161515611ccb576040805160e560020a62461bcd02815260206004820152600f60248201526000805160206149ab833981519152604482015290519081900360640190fd5b3360008181526002602052604090205460ff161515611d22576040805160e560020a62461bcd028152602060048201526015602482015260008051602061492b833981519152604482015290519081900360640190fd5b611d2a6121ba565b9750506000881192505081159050611d425750838511155b1515611d98576040805160e560020a62461bcd02815260206004820152600e60248201527f496e76616c69642076616c75652e000000000000000000000000000000000000604482015290519081900360640190fd5b6004549250611db5836005600160a060020a038916886000613dfe565b6000838152600560205260409020805460018201546002830154600390930154611de593879360ff1692916117f1565b505050505050565b60105481565b6000333014611e3a576040805160e560020a62461bcd02815260206004820152601b602482015260008051602061494b833981519152604482015290519081900360640190fd5b506003545b600454811015611e9657600160008281526005602052604090206006015460ff166004811115611e6b57fe5b1415611e8e576000818152600560205260409020600601805460ff191660041790555b600101611e3f565b6004546003556040517f907527d30089abd16e30f06ddbbbc18480505176262f19bc16c1fbf9262f9c6b90600090a150565b6000333014611f0f576040805160e560020a62461bcd02815260206004820152601b602482015260008051602061494b833981519152604482015290519081900360640190fd5b611f176121ba565b9450505050828210159050611f76576040805160e560020a62461bcd02815260206004820152601a60248201527f56616c7565206973206e6f7420776974686472617761626c652e000000000000604482015290519081900360640190fd5b600d54611f89908363ffffffff61412f16565b600d55604051600160a060020a0384169083156108fc029084906000818181858888f19350505050158015611fc2573d6000803e3d6000fd5b50604080518381529051600160a060020a038516917f2d9d65e4fcab96e158761a8d3cc0bd7fd76951ab5574667b07190da171777470919081900360200190a2505050565b603281565b60045481565b6000333014612059576040805160e560020a62461bcd02815260206004820152601b602482015260008051602061494b833981519152604482015290519081900360640190fd5b6010548211156120b3576040805160e560020a62461bcd02815260206004820152601a60248201527f56616c7565206973206e6f7420776974686472617761626c652e000000000000604482015290519081900360640190fd5b5060115460408051608081018252600160a060020a03858116825260208083018681524262093a800184860190815260006060860181815288825260129094529590952084518154600160a060020a03191694169390931783555160018084019190915593516002808401919091559051600383018054949593949193909260ff1990921691849081111561214457fe5b02179055505060115461215f9150600163ffffffff610bb816565b60115560408051828152600160a060020a03851660208201528082018490524262093a8001606082015290517fdd0988b8c11a867814c87be652f93a86d35c6a235b92977e99d5394bd8580ced9181900360800190a1505050565b6060806000806000806000806000806000600660149054906101000a900460ff16151560011515141515612226576040805160e560020a62461bcd02815260206004820152601c602482015260008051602061496b833981519152604482015290519081900360640190fd5b6007544296506000955093508492505b8383101561229957600780548490811061224c57fe5b906000526020600020015486111561228e576008805461228b91908590811061227157fe5b906000526020600020015486610bb890919063ffffffff16565b94505b600190920191612236565b600d54600c546122ae9163ffffffff61412f16565b91506122c0858363ffffffff61412f16565b905060076000016007600101600c54600d54848480548060200260200160405190810160405280929190818152602001828054801561231e57602002820191906000526020600020905b81548152602001906001019080831161230a575b505050505094508380548060200260200160405190810160405280929190818152602001828054801561237057602002820191906000526020600020905b81548152602001906001019080831161235c575b505050505093509a509a509a509a509a505050505050509091929394565b6006546000908190819060a060020a900460ff16156123f7576040805160e560020a62461bcd02815260206004820152601e60248201527f436f6e747261637420686173206265656e20696e697469616c697a65642e0000604482015290519081900360640190fd5b505060085460005b8181101561243e576008805461243491908390811061241a57fe5b906000526020600020015484610bb890919063ffffffff16565b92506001016123ff565b60095460ff16151560011461249d576040805160e560020a62461bcd02815260206004820152601a60248201527f526576696577696e67206973206e6f742066696e69736865642e000000000000604482015290519081900360640190fd5b3483146124f4576040805160e560020a62461bcd02815260206004820152601560248201527f56616c756520646f6573206e6f74206d617463682e0000000000000000000000604482015290519081900360640190fd5b60068054600160a060020a0316600090815260026020908152604091829020805460ff191690558254600c879055600d87905574ffffffffffffffffffffffffffffffffffffffffff191660a060020a179092558051338152349281019290925280517f2b3c5e8e58d7d1e42ccd071c6f749d53f9ee506020a81fad9ff98140ccccde699281900390910190a1505050565b3360008181526002602052604090205460ff1615156125dd576040805160e560020a62461bcd028152602060048201526015602482015260008051602061492b833981519152604482015290519081900360640190fd5b600082815260126020526040902054600160a060020a03161515612671576040805160e560020a62461bcd02815260206004820152602260248201527f5769746864726177616c207265717565737420646f6573206e6f74206578697360448201527f742e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60008281526012602052604081206003015460ff16600281111561269157fe5b146126e6576040805160e560020a62461bcd02815260206004820152600e60248201527f496e76616c69642073746174652e000000000000000000000000000000000000604482015290519081900360640190fd5b6010546000838152601260205260409020600101541115612751576040805160e560020a62461bcd02815260206004820152601a60248201527f56616c7565206973206e6f7420776974686472617761626c652e000000000000604482015290519081900360640190fd5b6000828152601260205260409020600201544210156127ba576040805160e560020a62461bcd02815260206004820152601560248201527f4e6f7420776974686472617761626c65207965742e0000000000000000000000604482015290519081900360640190fd5b60008281526012602052604090206002015462093a800142106128505760008281526012602090815260409182902060038101805460ff1916600217905580546001909101548351868152600160a060020a03909216928201929092528083019190915290517fcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df916060908290030190a1612937565b6000828152601260205260409020600101546010546128749163ffffffff61412f16565b60105560008281526012602052604080822060038101805460ff1916600190811790915581549101549151600160a060020a03909116926108fc831502929190818181858888f193505050501580156128d1573d6000803e3d6000fd5b5060008281526012602090815260409182902080546001909101548351868152600160a060020a03909216928201929092528083019190915290517f7a2d48d1df1249429730a253e5713a7d7a2024913de2fbccafdf36efdd32bf059181900360600190a15b5050565b3360008181526002602052604090205460ff161515612992576040805160e560020a62461bcd028152602060048201526015602482015260008051602061492b833981519152604482015290519081900360640190fd5b60065460a060020a900460ff16156129f4576040805160e560020a62461bcd02815260206004820152601e60248201527f436f6e747261637420686173206265656e20696e697469616c697a65642e0000604482015290519081900360640190fd5b336000908152600b602052604090205460ff1615612a5c576040805160e560020a62461bcd02815260206004820152601c60248201527f4d73672e73656e64657220616c72656164792072657669657765642e00000000604482015290519081900360640190fd5b336000908152600b60205260409020805460ff19166001908117909155600a54612a8b9163ffffffff610bb816565b600a5560405133907f65d287f4118b03f8cc979b433fd0b2246074200dd5da70c9daf204aaa0da1a2c90600090a2600054600a5460019091011415612b01576009805460ff191660011790556040517f244ff9a3d72b1dc5a4bce7f05fb615395f2a8c7ad6ea525d2bac9030f75d7a9b90600090a15b50565b333014612b49576040805160e560020a62461bcd02815260206004820152601b602482015260008051602061494b833981519152604482015290519081900360640190fd5b600160a060020a038116600090815260026020526040902054819060ff1615612bbc576040805160e560020a62461bcd02815260206004820152601560248201527f41646d696e20616c7265616479206578697374732e0000000000000000000000604482015290519081900360640190fd5b600054612bd090600163ffffffff610bb816565b60015460328211158015612be45750818111155b8015612bef57508015155b8015612bfa57508115155b1515612c3e576040805160e560020a62461bcd028152602060048201526014602482015260008051602061498b833981519152604482015290519081900360640190fd5b600160a060020a0384166000818152600260205260408120805460ff19166001908117909155815490810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563018054600160a060020a0319169091179055612ca9611df3565b604051600160a060020a038516907fad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba90600090a250505050565b6000908152601260205260409020805460018201546002830154600390930154600160a060020a039092169390929160ff1690565b6006546060908190600090819060a060020a900460ff1615612d84576040805160e560020a62461bcd02815260206004820152601e60248201527f436f6e747261637420686173206265656e20696e697469616c697a65642e0000604482015290519081900360640190fd5b600760030154604051908082528060200260200182016040528015612db3578160200160208202803883390190505b50600654600160a060020a03166000908152600b6020526040812054919450925060ff16151560011415612e1c576006548351600160a060020a0390911690849084908110612dfe57fe5b600160a060020a039092166020928302909101909101526001909101905b5060005b600054811015612ecb57600760040160008083815481101515612e3f57fe5b6000918252602080832090910154600160a060020a0316835282019290925260400190205460ff16151560011415612ec3576000805482908110612e7f57fe5b6000918252602090912001548351600160a060020a0390911690849084908110612ea557fe5b600160a060020a039092166020928302909101909101526001909101905b600101612e20565b509092915050565b60065460009060a060020a900460ff161515600114612f2a576040805160e560020a62461bcd02815260206004820152601c602482015260008051602061496b833981519152604482015290519081900360640190fd5b82600160a060020a0381161515612f79576040805160e560020a62461bcd02815260206004820152600f60248201526000805160206149ab833981519152604482015290519081900360640190fd5b3360008181526002602052604090205460ff161515612fd0576040805160e560020a62461bcd028152602060048201526015602482015260008051602061492b833981519152604482015290519081900360640190fd5b600084118015612fe257506010548411155b1515613038576040805160e560020a62461bcd02815260206004820152600e60248201527f496e76616c69642076616c75652e000000000000000000000000000000000000604482015290519081900360640190fd5b6004549250613055836006600160a060020a038816876000613dfe565b600083815260056020526040902080546001820154600283015460039093015461308593879360ff1692916117f1565b5050505050565b60065460009060a060020a900460ff1615156001146130e3576040805160e560020a62461bcd02815260206004820152601c602482015260008051602061496b833981519152604482015290519081900360640190fd5b600160a060020a038216600090815260026020526040902054829060ff161515613145576040805160e560020a62461bcd028152602060048201526015602482015260008051602061492b833981519152604482015290519081900360640190fd5b82600160a060020a0381161515613194576040805160e560020a62461bcd02815260206004820152600f60248201526000805160206149ab833981519152604482015290519081900360640190fd5b3360008181526002602052604090205460ff1615156131eb576040805160e560020a62461bcd028152602060048201526015602482015260008051602061492b833981519152604482015290519081900360640190fd5b6000546131ff90600163ffffffff61412f16565b600154603282111580156132135750818111155b801561321e57508015155b801561322957508115155b151561326d576040805160e560020a62461bcd028152602060048201526014602482015260008051602061498b833981519152604482015290519081900360640190fd5b600454955061328a866002600160a060020a038a16600080613dfe565b60008681526005602052604090208054600182015460028301546003909301546132ba938a9360ff1692916117f1565b50505050505050565b600654600160a060020a031681565b600d5481565b60065460009060a060020a900460ff16151560011461332f576040805160e560020a62461bcd02815260206004820152601c602482015260008051602061496b833981519152604482015290519081900360640190fd5b600160a060020a038216600090815260026020526040902054829060ff16156133a2576040805160e560020a62461bcd02815260206004820152601560248201527f41646d696e20616c7265616479206578697374732e0000000000000000000000604482015290519081900360640190fd5b82600160a060020a03811615156133f1576040805160e560020a62461bcd02815260206004820152600f60248201526000805160206149ab833981519152604482015290519081900360640190fd5b3360008181526002602052604090205460ff161515613448576040805160e560020a62461bcd028152602060048201526015602482015260008051602061492b833981519152604482015290519081900360640190fd5b60005461345c90600163ffffffff610bb816565b600154603282111580156134705750818111155b801561347b57508015155b801561348657508115155b15156134ca576040805160e560020a62461bcd028152602060048201526014602482015260008051602061498b833981519152604482015290519081900360640190fd5b600454955061328a866001600160a060020a038a16600080613dfe565b60065460009060a060020a900460ff16151560011461353e576040805160e560020a62461bcd02815260206004820152601c602482015260008051602061496b833981519152604482015290519081900360640190fd5b3360008181526002602052604090205460ff161515613595576040805160e560020a62461bcd028152602060048201526015602482015260008051602061492b833981519152604482015290519081900360640190fd5b6004805492506135aa90839060008080613dfe565b600082815260056020526040902080546001820154600283015460039093015461293793869360ff1692916117f1565b600f54600160a060020a031681565b62093a8081565b333014613635576040805160e560020a62461bcd02815260206004820152601b602482015260008051602061494b833981519152604482015290519081900360640190fd5b600f8054600160a060020a031916600160a060020a038316908117909155604080517f832a2aad0000000000000000000000000000000000000000000000000000000081526004810192909252516104009163832a2aad91602480830192600092919082900301818387803b1580156136ad57600080fd5b505af11580156136c1573d6000803e3d6000fd5b5050600f5460408051600160a060020a039092168252517fbe1849831e6775a2022006aeebcc00f70d10bc4202c8187e215ad9e9911f2b069350908190036020019150a150565b60015481565b333014613753576040805160e560020a62461bcd02815260206004820152601b602482015260008051602061494b833981519152604482015290519081900360640190fd5b60005481603282118015906137685750818111155b801561377357508015155b801561377e57508115155b15156137c2576040805160e560020a62461bcd028152602060048201526014602482015260008051602061498b833981519152604482015290519081900360640190fd5b60018390556137cf611df3565b6040805184815290517f8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f9181900360200190a1505050565b60065460a060020a900460ff16151560011461385b576040805160e560020a62461bcd02815260206004820152601c602482015260008051602061496b833981519152604482015290519081900360640190fd5b600034116138b3576040805160e560020a62461bcd02815260206004820152600f60248201527f496e76616c696420616d6f756e742e0000000000000000000000000000000000604482015290519081900360640190fd5b6010546138c6903463ffffffff610bb816565b6010556040805133815234602082015281517f016a7abf22d0d58c184d5eb406e8e9f6007698168251cf67add43fa4d13768f6929181900390910190a1565b33301461394a576040805160e560020a62461bcd02815260206004820152601b602482015260008051602061494b833981519152604482015290519081900360640190fd5b600081815260126020526040902054600160a060020a031615156139de576040805160e560020a62461bcd02815260206004820152602260248201527f5769746864726177616c207265717565737420646f6573206e6f74206578697360448201527f742e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60008181526012602052604081206003015460ff1660028111156139fe57fe5b14613a53576040805160e560020a62461bcd02815260206004820152600e60248201527f496e76616c69642073746174652e000000000000000000000000000000000000604482015290519081900360640190fd5b60008181526012602090815260409182902060038101805460ff1916600217905580546001909101548351858152600160a060020a03909216928201929092528083019190915290517fcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df916060908290030190a150565b60608260008083831580613ae057506011548710155b15613aeb5760115493505b87841015613b43576040805160e560020a62461bcd02815260206004820152600e60248201527f496e76616c696420696e6465782e000000000000000000000000000000000000604482015290519081900360640190fd5b600092508791505b83821015613b9757856002811115613b5f57fe5b60008381526012602052604090206003015460ff166002811115613b7f57fe5b1415613b8c576001830192505b600190910190613b4b565b82604051908082528060200260200182016040528015613bc1578160200160208202803883390190505b509050600092508791505b8382101561110d57856002811115613be057fe5b60008381526012602052604090206003015460ff166002811115613c0057fe5b1415613c2757818184815181101515613c1557fe5b60209081029091010152600192909201915b600190910190613bcc565b60065460009060a060020a900460ff161515600114613c89576040805160e560020a62461bcd02815260206004820152601c602482015260008051602061496b833981519152604482015290519081900360640190fd5b3360008181526002602052604090205460ff161515613ce0576040805160e560020a62461bcd028152602060048201526015602482015260008051602061492b833981519152604482015290519081900360640190fd5b6000548360328211801590613cf55750818111155b8015613d0057508015155b8015613d0b57508115155b1515613d4f576040805160e560020a62461bcd028152602060048201526014602482015260008051602061498b833981519152604482015290519081900360640190fd5b600154851415613da9576040805160e560020a62461bcd02815260206004820152600d60248201527f496e76616c69642076616c756500000000000000000000000000000000000000604482015290519081900360640190fd5b6004549350613dbd84600387600080613dfe565b600084815260056020526040902080546001820154600283015460039093015461308593889360ff1692916117f1565b60035481565b61040081565b600181565b60e060405190810160405280856008811115613e1657fe5b815260208082018690526040808301869052606083018590523360808401528051600080825292810190915260a0909201919050815260200160019052600086815260056020526040902081518154829060ff19166001836008811115613e7957fe5b0217905550602082810151600183015560408301516002830155606083015160038301556080830151600483018054600160a060020a031916600160a060020a0390921691909117905560a08301518051613eda9260058501920190614884565b5060c082015160068201805460ff19166001836004811115613ef857fe5b021790555090505033600160a060020a0316857fdd9ce6d431d4ac3e8bea81bc2d7760b97d30c4e54252d8c8c59054849b8f61b58686868660405180856008811115613f4057fe5b60ff168152602081019490945250604080840192909252606083015251908190036080019150a3600454613f7b90600163ffffffff610bb816565b6004555050505050565b600081815260056020526040902060040154600160a060020a0316331415614041576000818152600560205260409081902060068101805460ff191660041790558054600182015460028301546003909301549351339486947f01011152a3b44da915f5831c5c63c3448b616dcc166c3543f289ed79645280c99460ff1693929091908085600881111561401557fe5b60ff168152602081019490945250604080840192909252606083015251908190036080019150a3612b01565b61404b8133614700565b60008181526005602081905260409182902080546001820154600283015460038401549551339688967fed38e5621fac2aa23736077187104abfe9c8aa1c5b4eb73015d8cfdf403fe0709660ff909616959192910190808660088111156140ae57fe5b60ff16815260208101869052604081018590526060810184905260a082820381016080830190815284549183018290529160c001908490801561411a57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116140fc575b5050965050505050505060405180910390a350565b6000808383111561413f57600080fd5b5050900390565b600154600082815260056020819052604090912001541015919050565b6000600160008381526005602052604090205460ff16600881111561418457fe5b14156141f2576000828152600560205260408082206001015481517f70480275000000000000000000000000000000000000000000000000000000008152600160a060020a0390911660048201529051309263704802759260248082019391829003018183875af193505050505b600260008381526005602052604090205460ff16600881111561421157fe5b141561427f576000828152600560205260408082206001015481517f27e1f7df000000000000000000000000000000000000000000000000000000008152600160a060020a039091166004820152905130926327e1f7df9260248082019391829003018183875af193505050505b600360008381526005602052604090205460ff16600881111561429e57fe5b1415614304576000828152600560205260408082206001015481517fc47afb3a00000000000000000000000000000000000000000000000000000000815260048101919091529051309263c47afb3a9260248082019391829003018183875af193505050505b600460008381526005602052604090205460ff16600881111561432357fe5b141561437a5730600160a060020a0316634f97638f6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303816000875af193505050505b600560008381526005602052604090205460ff16600881111561439957fe5b141561441357600082815260056020526040808220600181015460029091015482517f505ebed4000000000000000000000000000000000000000000000000000000008152600160a060020a03909216600483015260248201529051309263505ebed49260448082019391829003018183875af193505050505b600660008381526005602052604090205460ff16600881111561443257fe5b14156144ac57600082815260056020526040808220600181015460029091015482517f5df8b09a000000000000000000000000000000000000000000000000000000008152600160a060020a039092166004830152602482015290513092635df8b09a9260448082019391829003018183875af193505050505b600760008381526005602052604090205460ff1660088111156144cb57fe5b1415614531576000828152600560205260408082206001015481517fc804b11500000000000000000000000000000000000000000000000000000000815260048101919091529051309263c804b1159260248082019391829003018183875af193505050505b600860008381526005602052604090205460ff16600881111561455057fe5b14156145be576000828152600560205260408082206001015481517f944dd5a2000000000000000000000000000000000000000000000000000000008152600160a060020a0390911660048201529051309263944dd5a29260248082019391829003018183875af193505050505b8015614662576000828152600560205260409081902060068101805460ff1916600290811790915581546001830154918301546003909301549351339487947f48f16d9e6ab6f19798a7c7f307ecea3def480049fa0a09280e2a3fa45aaa84269460ff90941693929091908085600881111561463657fe5b60ff168152602081019490945250604080840192909252606083015251908190036080019150a3612937565b6000828152600560205260409081902060068101805460ff1916600390811790915581546001830154600284015492909301549351339487947fbd3ad69fc5a8e233118506c67ebe892bef493fcf2eb9e6986f6d6c3f2adf0e8a9460ff909416939092909190808560088111156146d557fe5b60ff168152602081019490945250604080840192909252606083015251908190036080019150a35050565b600082815260056020819052604082200154905b81811015610d215760008481526005602081905260409091200180548290811061473a57fe5b600091825260209091200154600160a060020a038481169116141561485857600019820181146147ea576000848152600560208190526040909120018054600019840190811061478657fe5b60009182526020808320909101548683526005918290526040909220018054600160a060020a0390921691839081106147bb57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b6000848152600560208190526040909120018054600019840190811061480c57fe5b60009182526020909120018054600160a060020a031916905561483682600163ffffffff61412f16565b6000858152600560208190526040909120614852910182614860565b50610d21565b600101614714565b815481835581811115610f2257600083815260209020610f229181019083016148e9565b8280548282559060005260206000209081019282156148d9579160200282015b828111156148d95782518254600160a060020a031916600160a060020a039091161782556020909201916001909101906148a4565b506148e5929150614906565b5090565b61490391905b808211156148e557600081556001016148ef565b90565b61490391905b808211156148e5578054600160a060020a031916815560010161490c560041646472657373206973206e6f742061646d696e2e00000000000000000000004e6f742061206d756c74697369672d7472616e73616374696f6e2e0000000000436f6e7472616374206973206e6f7420696e697469616c697a65642e00000000496e76616c696420726571756972656d656e742e00000000000000000000000041646472657373206973206e756c6c0000000000000000000000000000000000a165627a7a723058206f507a45eb565be1f982c7739190dc14fa77620830c6da497f5c977c3b19d8290029",
}

// CnStakingContractABI is the input ABI used to generate the binding from.
// Deprecated: Use CnStakingContractMetaData.ABI instead.
var CnStakingContractABI = CnStakingContractMetaData.ABI

// CnStakingContractBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const CnStakingContractBinRuntime = ``

// Deprecated: Use CnStakingContractMetaData.Sigs instead.
// CnStakingContractFuncSigs maps the 4-byte function signature to its string representation.
var CnStakingContractFuncSigs = CnStakingContractMetaData.Sigs

// CnStakingContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CnStakingContractMetaData.Bin instead.
var CnStakingContractBin = CnStakingContractMetaData.Bin

// DeployCnStakingContract deploys a new Kaia contract, binding an instance of CnStakingContract to it.
func DeployCnStakingContract(auth *bind.TransactOpts, backend bind.ContractBackend, _contractValidator common.Address, _nodeId common.Address, _rewardAddress common.Address, _cnAdminlist []common.Address, _requirement *big.Int, _unlockTime []*big.Int, _unlockAmount []*big.Int) (common.Address, *types.Transaction, *CnStakingContract, error) {
	parsed, err := CnStakingContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CnStakingContractBin), backend, _contractValidator, _nodeId, _rewardAddress, _cnAdminlist, _requirement, _unlockTime, _unlockAmount)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CnStakingContract{CnStakingContractCaller: CnStakingContractCaller{contract: contract}, CnStakingContractTransactor: CnStakingContractTransactor{contract: contract}, CnStakingContractFilterer: CnStakingContractFilterer{contract: contract}}, nil
}

// CnStakingContract is an auto generated Go binding around a Kaia contract.
type CnStakingContract struct {
	CnStakingContractCaller     // Read-only binding to the contract
	CnStakingContractTransactor // Write-only binding to the contract
	CnStakingContractFilterer   // Log filterer for contract events
}

// CnStakingContractCaller is an auto generated read-only Go binding around a Kaia contract.
type CnStakingContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CnStakingContractTransactor is an auto generated write-only Go binding around a Kaia contract.
type CnStakingContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CnStakingContractFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type CnStakingContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CnStakingContractSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type CnStakingContractSession struct {
	Contract     *CnStakingContract // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// CnStakingContractCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type CnStakingContractCallerSession struct {
	Contract *CnStakingContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// CnStakingContractTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type CnStakingContractTransactorSession struct {
	Contract     *CnStakingContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// CnStakingContractRaw is an auto generated low-level Go binding around a Kaia contract.
type CnStakingContractRaw struct {
	Contract *CnStakingContract // Generic contract binding to access the raw methods on
}

// CnStakingContractCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type CnStakingContractCallerRaw struct {
	Contract *CnStakingContractCaller // Generic read-only contract binding to access the raw methods on
}

// CnStakingContractTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type CnStakingContractTransactorRaw struct {
	Contract *CnStakingContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCnStakingContract creates a new instance of CnStakingContract, bound to a specific deployed contract.
func NewCnStakingContract(address common.Address, backend bind.ContractBackend) (*CnStakingContract, error) {
	contract, err := bindCnStakingContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CnStakingContract{CnStakingContractCaller: CnStakingContractCaller{contract: contract}, CnStakingContractTransactor: CnStakingContractTransactor{contract: contract}, CnStakingContractFilterer: CnStakingContractFilterer{contract: contract}}, nil
}

// NewCnStakingContractCaller creates a new read-only instance of CnStakingContract, bound to a specific deployed contract.
func NewCnStakingContractCaller(address common.Address, caller bind.ContractCaller) (*CnStakingContractCaller, error) {
	contract, err := bindCnStakingContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CnStakingContractCaller{contract: contract}, nil
}

// NewCnStakingContractTransactor creates a new write-only instance of CnStakingContract, bound to a specific deployed contract.
func NewCnStakingContractTransactor(address common.Address, transactor bind.ContractTransactor) (*CnStakingContractTransactor, error) {
	contract, err := bindCnStakingContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CnStakingContractTransactor{contract: contract}, nil
}

// NewCnStakingContractFilterer creates a new log filterer instance of CnStakingContract, bound to a specific deployed contract.
func NewCnStakingContractFilterer(address common.Address, filterer bind.ContractFilterer) (*CnStakingContractFilterer, error) {
	contract, err := bindCnStakingContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CnStakingContractFilterer{contract: contract}, nil
}

// bindCnStakingContract binds a generic wrapper to an already deployed contract.
func bindCnStakingContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CnStakingContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CnStakingContract *CnStakingContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CnStakingContract.Contract.CnStakingContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CnStakingContract *CnStakingContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingContract.Contract.CnStakingContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CnStakingContract *CnStakingContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CnStakingContract.Contract.CnStakingContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CnStakingContract *CnStakingContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CnStakingContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CnStakingContract *CnStakingContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CnStakingContract *CnStakingContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CnStakingContract.Contract.contract.Transact(opts, method, params...)
}

// ADDRESSBOOKADDRESS is a free data retrieval call binding the contract method 0xf2f2f49b.
//
// Solidity: function ADDRESS_BOOK_ADDRESS() view returns(address)
func (_CnStakingContract *CnStakingContractCaller) ADDRESSBOOKADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "ADDRESS_BOOK_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ADDRESSBOOKADDRESS is a free data retrieval call binding the contract method 0xf2f2f49b.
//
// Solidity: function ADDRESS_BOOK_ADDRESS() view returns(address)
func (_CnStakingContract *CnStakingContractSession) ADDRESSBOOKADDRESS() (common.Address, error) {
	return _CnStakingContract.Contract.ADDRESSBOOKADDRESS(&_CnStakingContract.CallOpts)
}

// ADDRESSBOOKADDRESS is a free data retrieval call binding the contract method 0xf2f2f49b.
//
// Solidity: function ADDRESS_BOOK_ADDRESS() view returns(address)
func (_CnStakingContract *CnStakingContractCallerSession) ADDRESSBOOKADDRESS() (common.Address, error) {
	return _CnStakingContract.Contract.ADDRESSBOOKADDRESS(&_CnStakingContract.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_CnStakingContract *CnStakingContractCaller) CONTRACTTYPE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "CONTRACT_TYPE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_CnStakingContract *CnStakingContractSession) CONTRACTTYPE() (string, error) {
	return _CnStakingContract.Contract.CONTRACTTYPE(&_CnStakingContract.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_CnStakingContract *CnStakingContractCallerSession) CONTRACTTYPE() (string, error) {
	return _CnStakingContract.Contract.CONTRACTTYPE(&_CnStakingContract.CallOpts)
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() view returns(uint256)
func (_CnStakingContract *CnStakingContractCaller) MAXADMIN(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "MAX_ADMIN")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() view returns(uint256)
func (_CnStakingContract *CnStakingContractSession) MAXADMIN() (*big.Int, error) {
	return _CnStakingContract.Contract.MAXADMIN(&_CnStakingContract.CallOpts)
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() view returns(uint256)
func (_CnStakingContract *CnStakingContractCallerSession) MAXADMIN() (*big.Int, error) {
	return _CnStakingContract.Contract.MAXADMIN(&_CnStakingContract.CallOpts)
}

// ONEWEEK is a free data retrieval call binding the contract method 0x8e6f6b77.
//
// Solidity: function ONE_WEEK() view returns(uint256)
func (_CnStakingContract *CnStakingContractCaller) ONEWEEK(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "ONE_WEEK")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ONEWEEK is a free data retrieval call binding the contract method 0x8e6f6b77.
//
// Solidity: function ONE_WEEK() view returns(uint256)
func (_CnStakingContract *CnStakingContractSession) ONEWEEK() (*big.Int, error) {
	return _CnStakingContract.Contract.ONEWEEK(&_CnStakingContract.CallOpts)
}

// ONEWEEK is a free data retrieval call binding the contract method 0x8e6f6b77.
//
// Solidity: function ONE_WEEK() view returns(uint256)
func (_CnStakingContract *CnStakingContractCallerSession) ONEWEEK() (*big.Int, error) {
	return _CnStakingContract.Contract.ONEWEEK(&_CnStakingContract.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_CnStakingContract *CnStakingContractCaller) VERSION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_CnStakingContract *CnStakingContractSession) VERSION() (*big.Int, error) {
	return _CnStakingContract.Contract.VERSION(&_CnStakingContract.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_CnStakingContract *CnStakingContractCallerSession) VERSION() (*big.Int, error) {
	return _CnStakingContract.Contract.VERSION(&_CnStakingContract.CallOpts)
}

// ContractValidator is a free data retrieval call binding the contract method 0x7a5db068.
//
// Solidity: function contractValidator() view returns(address)
func (_CnStakingContract *CnStakingContractCaller) ContractValidator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "contractValidator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContractValidator is a free data retrieval call binding the contract method 0x7a5db068.
//
// Solidity: function contractValidator() view returns(address)
func (_CnStakingContract *CnStakingContractSession) ContractValidator() (common.Address, error) {
	return _CnStakingContract.Contract.ContractValidator(&_CnStakingContract.CallOpts)
}

// ContractValidator is a free data retrieval call binding the contract method 0x7a5db068.
//
// Solidity: function contractValidator() view returns(address)
func (_CnStakingContract *CnStakingContractCallerSession) ContractValidator() (common.Address, error) {
	return _CnStakingContract.Contract.ContractValidator(&_CnStakingContract.CallOpts)
}

// GetApprovedStakingWithdrawalIds is a free data retrieval call binding the contract method 0xd2569eb9.
//
// Solidity: function getApprovedStakingWithdrawalIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[])
func (_CnStakingContract *CnStakingContractCaller) GetApprovedStakingWithdrawalIds(opts *bind.CallOpts, _from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "getApprovedStakingWithdrawalIds", _from, _to, _state)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetApprovedStakingWithdrawalIds is a free data retrieval call binding the contract method 0xd2569eb9.
//
// Solidity: function getApprovedStakingWithdrawalIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[])
func (_CnStakingContract *CnStakingContractSession) GetApprovedStakingWithdrawalIds(_from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	return _CnStakingContract.Contract.GetApprovedStakingWithdrawalIds(&_CnStakingContract.CallOpts, _from, _to, _state)
}

// GetApprovedStakingWithdrawalIds is a free data retrieval call binding the contract method 0xd2569eb9.
//
// Solidity: function getApprovedStakingWithdrawalIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[])
func (_CnStakingContract *CnStakingContractCallerSession) GetApprovedStakingWithdrawalIds(_from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	return _CnStakingContract.Contract.GetApprovedStakingWithdrawalIds(&_CnStakingContract.CallOpts, _from, _to, _state)
}

// GetApprovedStakingWithdrawalInfo is a free data retrieval call binding the contract method 0x725c0503.
//
// Solidity: function getApprovedStakingWithdrawalInfo(uint256 _index) view returns(address, uint256, uint256, uint8)
func (_CnStakingContract *CnStakingContractCaller) GetApprovedStakingWithdrawalInfo(opts *bind.CallOpts, _index *big.Int) (common.Address, *big.Int, *big.Int, uint8, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "getApprovedStakingWithdrawalInfo", _index)

	if err != nil {
		return *new(common.Address), *new(*big.Int), *new(*big.Int), *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(uint8)).(*uint8)

	return out0, out1, out2, out3, err

}

// GetApprovedStakingWithdrawalInfo is a free data retrieval call binding the contract method 0x725c0503.
//
// Solidity: function getApprovedStakingWithdrawalInfo(uint256 _index) view returns(address, uint256, uint256, uint8)
func (_CnStakingContract *CnStakingContractSession) GetApprovedStakingWithdrawalInfo(_index *big.Int) (common.Address, *big.Int, *big.Int, uint8, error) {
	return _CnStakingContract.Contract.GetApprovedStakingWithdrawalInfo(&_CnStakingContract.CallOpts, _index)
}

// GetApprovedStakingWithdrawalInfo is a free data retrieval call binding the contract method 0x725c0503.
//
// Solidity: function getApprovedStakingWithdrawalInfo(uint256 _index) view returns(address, uint256, uint256, uint8)
func (_CnStakingContract *CnStakingContractCallerSession) GetApprovedStakingWithdrawalInfo(_index *big.Int) (common.Address, *big.Int, *big.Int, uint8, error) {
	return _CnStakingContract.Contract.GetApprovedStakingWithdrawalInfo(&_CnStakingContract.CallOpts, _index)
}

// GetLockupStakingInfo is a free data retrieval call binding the contract method 0x5ecd75f2.
//
// Solidity: function getLockupStakingInfo() view returns(uint256[], uint256[], uint256, uint256, uint256)
func (_CnStakingContract *CnStakingContractCaller) GetLockupStakingInfo(opts *bind.CallOpts) ([]*big.Int, []*big.Int, *big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "getLockupStakingInfo")

	if err != nil {
		return *new([]*big.Int), *new([]*big.Int), *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
	out1 := *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	out4 := *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, out4, err

}

// GetLockupStakingInfo is a free data retrieval call binding the contract method 0x5ecd75f2.
//
// Solidity: function getLockupStakingInfo() view returns(uint256[], uint256[], uint256, uint256, uint256)
func (_CnStakingContract *CnStakingContractSession) GetLockupStakingInfo() ([]*big.Int, []*big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _CnStakingContract.Contract.GetLockupStakingInfo(&_CnStakingContract.CallOpts)
}

// GetLockupStakingInfo is a free data retrieval call binding the contract method 0x5ecd75f2.
//
// Solidity: function getLockupStakingInfo() view returns(uint256[], uint256[], uint256, uint256, uint256)
func (_CnStakingContract *CnStakingContractCallerSession) GetLockupStakingInfo() ([]*big.Int, []*big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _CnStakingContract.Contract.GetLockupStakingInfo(&_CnStakingContract.CallOpts)
}

// GetRequestIds is a free data retrieval call binding the contract method 0x0fd440ec.
//
// Solidity: function getRequestIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[])
func (_CnStakingContract *CnStakingContractCaller) GetRequestIds(opts *bind.CallOpts, _from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "getRequestIds", _from, _to, _state)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetRequestIds is a free data retrieval call binding the contract method 0x0fd440ec.
//
// Solidity: function getRequestIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[])
func (_CnStakingContract *CnStakingContractSession) GetRequestIds(_from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	return _CnStakingContract.Contract.GetRequestIds(&_CnStakingContract.CallOpts, _from, _to, _state)
}

// GetRequestIds is a free data retrieval call binding the contract method 0x0fd440ec.
//
// Solidity: function getRequestIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[])
func (_CnStakingContract *CnStakingContractCallerSession) GetRequestIds(_from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	return _CnStakingContract.Contract.GetRequestIds(&_CnStakingContract.CallOpts, _from, _to, _state)
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(uint256 _id) view returns(uint8, bytes32, bytes32, bytes32, address, address[], uint8)
func (_CnStakingContract *CnStakingContractCaller) GetRequestInfo(opts *bind.CallOpts, _id *big.Int) (uint8, [32]byte, [32]byte, [32]byte, common.Address, []common.Address, uint8, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "getRequestInfo", _id)

	if err != nil {
		return *new(uint8), *new([32]byte), *new([32]byte), *new([32]byte), *new(common.Address), *new([]common.Address), *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	out1 := *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	out2 := *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)
	out3 := *abi.ConvertType(out[3], new([32]byte)).(*[32]byte)
	out4 := *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	out5 := *abi.ConvertType(out[5], new([]common.Address)).(*[]common.Address)
	out6 := *abi.ConvertType(out[6], new(uint8)).(*uint8)

	return out0, out1, out2, out3, out4, out5, out6, err

}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(uint256 _id) view returns(uint8, bytes32, bytes32, bytes32, address, address[], uint8)
func (_CnStakingContract *CnStakingContractSession) GetRequestInfo(_id *big.Int) (uint8, [32]byte, [32]byte, [32]byte, common.Address, []common.Address, uint8, error) {
	return _CnStakingContract.Contract.GetRequestInfo(&_CnStakingContract.CallOpts, _id)
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(uint256 _id) view returns(uint8, bytes32, bytes32, bytes32, address, address[], uint8)
func (_CnStakingContract *CnStakingContractCallerSession) GetRequestInfo(_id *big.Int) (uint8, [32]byte, [32]byte, [32]byte, common.Address, []common.Address, uint8, error) {
	return _CnStakingContract.Contract.GetRequestInfo(&_CnStakingContract.CallOpts, _id)
}

// GetReviewers is a free data retrieval call binding the contract method 0x75a87643.
//
// Solidity: function getReviewers() view returns(address[])
func (_CnStakingContract *CnStakingContractCaller) GetReviewers(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "getReviewers")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetReviewers is a free data retrieval call binding the contract method 0x75a87643.
//
// Solidity: function getReviewers() view returns(address[])
func (_CnStakingContract *CnStakingContractSession) GetReviewers() ([]common.Address, error) {
	return _CnStakingContract.Contract.GetReviewers(&_CnStakingContract.CallOpts)
}

// GetReviewers is a free data retrieval call binding the contract method 0x75a87643.
//
// Solidity: function getReviewers() view returns(address[])
func (_CnStakingContract *CnStakingContractCallerSession) GetReviewers() ([]common.Address, error) {
	return _CnStakingContract.Contract.GetReviewers(&_CnStakingContract.CallOpts)
}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address, address, address, address[], uint256, uint256[], uint256[], bool, bool)
func (_CnStakingContract *CnStakingContractCaller) GetState(opts *bind.CallOpts) (common.Address, common.Address, common.Address, []common.Address, *big.Int, []*big.Int, []*big.Int, bool, bool, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "getState")

	if err != nil {
		return *new(common.Address), *new(common.Address), *new(common.Address), *new([]common.Address), *new(*big.Int), *new([]*big.Int), *new([]*big.Int), *new(bool), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	out2 := *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	out3 := *abi.ConvertType(out[3], new([]common.Address)).(*[]common.Address)
	out4 := *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	out5 := *abi.ConvertType(out[5], new([]*big.Int)).(*[]*big.Int)
	out6 := *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)
	out7 := *abi.ConvertType(out[7], new(bool)).(*bool)
	out8 := *abi.ConvertType(out[8], new(bool)).(*bool)

	return out0, out1, out2, out3, out4, out5, out6, out7, out8, err

}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address, address, address, address[], uint256, uint256[], uint256[], bool, bool)
func (_CnStakingContract *CnStakingContractSession) GetState() (common.Address, common.Address, common.Address, []common.Address, *big.Int, []*big.Int, []*big.Int, bool, bool, error) {
	return _CnStakingContract.Contract.GetState(&_CnStakingContract.CallOpts)
}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address, address, address, address[], uint256, uint256[], uint256[], bool, bool)
func (_CnStakingContract *CnStakingContractCallerSession) GetState() (common.Address, common.Address, common.Address, []common.Address, *big.Int, []*big.Int, []*big.Int, bool, bool, error) {
	return _CnStakingContract.Contract.GetState(&_CnStakingContract.CallOpts)
}

// InitialLockupStaking is a free data retrieval call binding the contract method 0x06704222.
//
// Solidity: function initialLockupStaking() view returns(uint256)
func (_CnStakingContract *CnStakingContractCaller) InitialLockupStaking(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "initialLockupStaking")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InitialLockupStaking is a free data retrieval call binding the contract method 0x06704222.
//
// Solidity: function initialLockupStaking() view returns(uint256)
func (_CnStakingContract *CnStakingContractSession) InitialLockupStaking() (*big.Int, error) {
	return _CnStakingContract.Contract.InitialLockupStaking(&_CnStakingContract.CallOpts)
}

// InitialLockupStaking is a free data retrieval call binding the contract method 0x06704222.
//
// Solidity: function initialLockupStaking() view returns(uint256)
func (_CnStakingContract *CnStakingContractCallerSession) InitialLockupStaking() (*big.Int, error) {
	return _CnStakingContract.Contract.InitialLockupStaking(&_CnStakingContract.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_CnStakingContract *CnStakingContractCaller) IsInitialized(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "isInitialized")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_CnStakingContract *CnStakingContractSession) IsInitialized() (bool, error) {
	return _CnStakingContract.Contract.IsInitialized(&_CnStakingContract.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_CnStakingContract *CnStakingContractCallerSession) IsInitialized() (bool, error) {
	return _CnStakingContract.Contract.IsInitialized(&_CnStakingContract.CallOpts)
}

// LastClearedId is a free data retrieval call binding the contract method 0xe7abb98d.
//
// Solidity: function lastClearedId() view returns(uint256)
func (_CnStakingContract *CnStakingContractCaller) LastClearedId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "lastClearedId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastClearedId is a free data retrieval call binding the contract method 0xe7abb98d.
//
// Solidity: function lastClearedId() view returns(uint256)
func (_CnStakingContract *CnStakingContractSession) LastClearedId() (*big.Int, error) {
	return _CnStakingContract.Contract.LastClearedId(&_CnStakingContract.CallOpts)
}

// LastClearedId is a free data retrieval call binding the contract method 0xe7abb98d.
//
// Solidity: function lastClearedId() view returns(uint256)
func (_CnStakingContract *CnStakingContractCallerSession) LastClearedId() (*big.Int, error) {
	return _CnStakingContract.Contract.LastClearedId(&_CnStakingContract.CallOpts)
}

// LockupConditions is a free data retrieval call binding the contract method 0x2429f8a9.
//
// Solidity: function lockupConditions() view returns(bool allReviewed, uint256 reviewedCount)
func (_CnStakingContract *CnStakingContractCaller) LockupConditions(opts *bind.CallOpts) (struct {
	AllReviewed   bool
	ReviewedCount *big.Int
}, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "lockupConditions")

	outstruct := new(struct {
		AllReviewed   bool
		ReviewedCount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AllReviewed = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ReviewedCount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// LockupConditions is a free data retrieval call binding the contract method 0x2429f8a9.
//
// Solidity: function lockupConditions() view returns(bool allReviewed, uint256 reviewedCount)
func (_CnStakingContract *CnStakingContractSession) LockupConditions() (struct {
	AllReviewed   bool
	ReviewedCount *big.Int
}, error) {
	return _CnStakingContract.Contract.LockupConditions(&_CnStakingContract.CallOpts)
}

// LockupConditions is a free data retrieval call binding the contract method 0x2429f8a9.
//
// Solidity: function lockupConditions() view returns(bool allReviewed, uint256 reviewedCount)
func (_CnStakingContract *CnStakingContractCallerSession) LockupConditions() (struct {
	AllReviewed   bool
	ReviewedCount *big.Int
}, error) {
	return _CnStakingContract.Contract.LockupConditions(&_CnStakingContract.CallOpts)
}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_CnStakingContract *CnStakingContractCaller) NodeId(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "nodeId")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_CnStakingContract *CnStakingContractSession) NodeId() (common.Address, error) {
	return _CnStakingContract.Contract.NodeId(&_CnStakingContract.CallOpts)
}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_CnStakingContract *CnStakingContractCallerSession) NodeId() (common.Address, error) {
	return _CnStakingContract.Contract.NodeId(&_CnStakingContract.CallOpts)
}

// RemainingLockupStaking is a free data retrieval call binding the contract method 0x7b5e0481.
//
// Solidity: function remainingLockupStaking() view returns(uint256)
func (_CnStakingContract *CnStakingContractCaller) RemainingLockupStaking(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "remainingLockupStaking")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RemainingLockupStaking is a free data retrieval call binding the contract method 0x7b5e0481.
//
// Solidity: function remainingLockupStaking() view returns(uint256)
func (_CnStakingContract *CnStakingContractSession) RemainingLockupStaking() (*big.Int, error) {
	return _CnStakingContract.Contract.RemainingLockupStaking(&_CnStakingContract.CallOpts)
}

// RemainingLockupStaking is a free data retrieval call binding the contract method 0x7b5e0481.
//
// Solidity: function remainingLockupStaking() view returns(uint256)
func (_CnStakingContract *CnStakingContractCallerSession) RemainingLockupStaking() (*big.Int, error) {
	return _CnStakingContract.Contract.RemainingLockupStaking(&_CnStakingContract.CallOpts)
}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() view returns(uint256)
func (_CnStakingContract *CnStakingContractCaller) RequestCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "requestCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() view returns(uint256)
func (_CnStakingContract *CnStakingContractSession) RequestCount() (*big.Int, error) {
	return _CnStakingContract.Contract.RequestCount(&_CnStakingContract.CallOpts)
}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() view returns(uint256)
func (_CnStakingContract *CnStakingContractCallerSession) RequestCount() (*big.Int, error) {
	return _CnStakingContract.Contract.RequestCount(&_CnStakingContract.CallOpts)
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() view returns(uint256)
func (_CnStakingContract *CnStakingContractCaller) Requirement(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "requirement")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() view returns(uint256)
func (_CnStakingContract *CnStakingContractSession) Requirement() (*big.Int, error) {
	return _CnStakingContract.Contract.Requirement(&_CnStakingContract.CallOpts)
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() view returns(uint256)
func (_CnStakingContract *CnStakingContractCallerSession) Requirement() (*big.Int, error) {
	return _CnStakingContract.Contract.Requirement(&_CnStakingContract.CallOpts)
}

// RewardAddress is a free data retrieval call binding the contract method 0x8cf57cb9.
//
// Solidity: function rewardAddress() view returns(address)
func (_CnStakingContract *CnStakingContractCaller) RewardAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "rewardAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RewardAddress is a free data retrieval call binding the contract method 0x8cf57cb9.
//
// Solidity: function rewardAddress() view returns(address)
func (_CnStakingContract *CnStakingContractSession) RewardAddress() (common.Address, error) {
	return _CnStakingContract.Contract.RewardAddress(&_CnStakingContract.CallOpts)
}

// RewardAddress is a free data retrieval call binding the contract method 0x8cf57cb9.
//
// Solidity: function rewardAddress() view returns(address)
func (_CnStakingContract *CnStakingContractCallerSession) RewardAddress() (common.Address, error) {
	return _CnStakingContract.Contract.RewardAddress(&_CnStakingContract.CallOpts)
}

// Staking is a free data retrieval call binding the contract method 0x4cf088d9.
//
// Solidity: function staking() view returns(uint256)
func (_CnStakingContract *CnStakingContractCaller) Staking(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "staking")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Staking is a free data retrieval call binding the contract method 0x4cf088d9.
//
// Solidity: function staking() view returns(uint256)
func (_CnStakingContract *CnStakingContractSession) Staking() (*big.Int, error) {
	return _CnStakingContract.Contract.Staking(&_CnStakingContract.CallOpts)
}

// Staking is a free data retrieval call binding the contract method 0x4cf088d9.
//
// Solidity: function staking() view returns(uint256)
func (_CnStakingContract *CnStakingContractCallerSession) Staking() (*big.Int, error) {
	return _CnStakingContract.Contract.Staking(&_CnStakingContract.CallOpts)
}

// WithdrawalRequestCount is a free data retrieval call binding the contract method 0x19e44e32.
//
// Solidity: function withdrawalRequestCount() view returns(uint256)
func (_CnStakingContract *CnStakingContractCaller) WithdrawalRequestCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingContract.contract.Call(opts, &out, "withdrawalRequestCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawalRequestCount is a free data retrieval call binding the contract method 0x19e44e32.
//
// Solidity: function withdrawalRequestCount() view returns(uint256)
func (_CnStakingContract *CnStakingContractSession) WithdrawalRequestCount() (*big.Int, error) {
	return _CnStakingContract.Contract.WithdrawalRequestCount(&_CnStakingContract.CallOpts)
}

// WithdrawalRequestCount is a free data retrieval call binding the contract method 0x19e44e32.
//
// Solidity: function withdrawalRequestCount() view returns(uint256)
func (_CnStakingContract *CnStakingContractCallerSession) WithdrawalRequestCount() (*big.Int, error) {
	return _CnStakingContract.Contract.WithdrawalRequestCount(&_CnStakingContract.CallOpts)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address _admin) returns()
func (_CnStakingContract *CnStakingContractTransactor) AddAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "addAdmin", _admin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address _admin) returns()
func (_CnStakingContract *CnStakingContractSession) AddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingContract.Contract.AddAdmin(&_CnStakingContract.TransactOpts, _admin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address _admin) returns()
func (_CnStakingContract *CnStakingContractTransactorSession) AddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingContract.Contract.AddAdmin(&_CnStakingContract.TransactOpts, _admin)
}

// ApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x5df8b09a.
//
// Solidity: function approveStakingWithdrawal(address _to, uint256 _value) returns()
func (_CnStakingContract *CnStakingContractTransactor) ApproveStakingWithdrawal(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "approveStakingWithdrawal", _to, _value)
}

// ApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x5df8b09a.
//
// Solidity: function approveStakingWithdrawal(address _to, uint256 _value) returns()
func (_CnStakingContract *CnStakingContractSession) ApproveStakingWithdrawal(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.Contract.ApproveStakingWithdrawal(&_CnStakingContract.TransactOpts, _to, _value)
}

// ApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x5df8b09a.
//
// Solidity: function approveStakingWithdrawal(address _to, uint256 _value) returns()
func (_CnStakingContract *CnStakingContractTransactorSession) ApproveStakingWithdrawal(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.Contract.ApproveStakingWithdrawal(&_CnStakingContract.TransactOpts, _to, _value)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _approvedWithdrawalId) returns()
func (_CnStakingContract *CnStakingContractTransactor) CancelApprovedStakingWithdrawal(opts *bind.TransactOpts, _approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "cancelApprovedStakingWithdrawal", _approvedWithdrawalId)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _approvedWithdrawalId) returns()
func (_CnStakingContract *CnStakingContractSession) CancelApprovedStakingWithdrawal(_approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.Contract.CancelApprovedStakingWithdrawal(&_CnStakingContract.TransactOpts, _approvedWithdrawalId)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _approvedWithdrawalId) returns()
func (_CnStakingContract *CnStakingContractTransactorSession) CancelApprovedStakingWithdrawal(_approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.Contract.CancelApprovedStakingWithdrawal(&_CnStakingContract.TransactOpts, _approvedWithdrawalId)
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_CnStakingContract *CnStakingContractTransactor) ClearRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "clearRequest")
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_CnStakingContract *CnStakingContractSession) ClearRequest() (*types.Transaction, error) {
	return _CnStakingContract.Contract.ClearRequest(&_CnStakingContract.TransactOpts)
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_CnStakingContract *CnStakingContractTransactorSession) ClearRequest() (*types.Transaction, error) {
	return _CnStakingContract.Contract.ClearRequest(&_CnStakingContract.TransactOpts)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0x3b2d2aca.
//
// Solidity: function confirmRequest(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_CnStakingContract *CnStakingContractTransactor) ConfirmRequest(opts *bind.TransactOpts, _id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "confirmRequest", _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0x3b2d2aca.
//
// Solidity: function confirmRequest(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_CnStakingContract *CnStakingContractSession) ConfirmRequest(_id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _CnStakingContract.Contract.ConfirmRequest(&_CnStakingContract.TransactOpts, _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0x3b2d2aca.
//
// Solidity: function confirmRequest(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_CnStakingContract *CnStakingContractTransactorSession) ConfirmRequest(_id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _CnStakingContract.Contract.ConfirmRequest(&_CnStakingContract.TransactOpts, _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(address _admin) returns()
func (_CnStakingContract *CnStakingContractTransactor) DeleteAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "deleteAdmin", _admin)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(address _admin) returns()
func (_CnStakingContract *CnStakingContractSession) DeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingContract.Contract.DeleteAdmin(&_CnStakingContract.TransactOpts, _admin)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(address _admin) returns()
func (_CnStakingContract *CnStakingContractTransactorSession) DeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingContract.Contract.DeleteAdmin(&_CnStakingContract.TransactOpts, _admin)
}

// DepositLockupStakingAndInit is a paid mutator transaction binding the contract method 0x6a27c206.
//
// Solidity: function depositLockupStakingAndInit() payable returns()
func (_CnStakingContract *CnStakingContractTransactor) DepositLockupStakingAndInit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "depositLockupStakingAndInit")
}

// DepositLockupStakingAndInit is a paid mutator transaction binding the contract method 0x6a27c206.
//
// Solidity: function depositLockupStakingAndInit() payable returns()
func (_CnStakingContract *CnStakingContractSession) DepositLockupStakingAndInit() (*types.Transaction, error) {
	return _CnStakingContract.Contract.DepositLockupStakingAndInit(&_CnStakingContract.TransactOpts)
}

// DepositLockupStakingAndInit is a paid mutator transaction binding the contract method 0x6a27c206.
//
// Solidity: function depositLockupStakingAndInit() payable returns()
func (_CnStakingContract *CnStakingContractTransactorSession) DepositLockupStakingAndInit() (*types.Transaction, error) {
	return _CnStakingContract.Contract.DepositLockupStakingAndInit(&_CnStakingContract.TransactOpts)
}

// ReviewInitialConditions is a paid mutator transaction binding the contract method 0x702b9c9b.
//
// Solidity: function reviewInitialConditions() returns()
func (_CnStakingContract *CnStakingContractTransactor) ReviewInitialConditions(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "reviewInitialConditions")
}

// ReviewInitialConditions is a paid mutator transaction binding the contract method 0x702b9c9b.
//
// Solidity: function reviewInitialConditions() returns()
func (_CnStakingContract *CnStakingContractSession) ReviewInitialConditions() (*types.Transaction, error) {
	return _CnStakingContract.Contract.ReviewInitialConditions(&_CnStakingContract.TransactOpts)
}

// ReviewInitialConditions is a paid mutator transaction binding the contract method 0x702b9c9b.
//
// Solidity: function reviewInitialConditions() returns()
func (_CnStakingContract *CnStakingContractTransactorSession) ReviewInitialConditions() (*types.Transaction, error) {
	return _CnStakingContract.Contract.ReviewInitialConditions(&_CnStakingContract.TransactOpts)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x164990f8.
//
// Solidity: function revokeConfirmation(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_CnStakingContract *CnStakingContractTransactor) RevokeConfirmation(opts *bind.TransactOpts, _id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "revokeConfirmation", _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x164990f8.
//
// Solidity: function revokeConfirmation(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_CnStakingContract *CnStakingContractSession) RevokeConfirmation(_id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _CnStakingContract.Contract.RevokeConfirmation(&_CnStakingContract.TransactOpts, _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x164990f8.
//
// Solidity: function revokeConfirmation(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_CnStakingContract *CnStakingContractTransactorSession) RevokeConfirmation(_id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _CnStakingContract.Contract.RevokeConfirmation(&_CnStakingContract.TransactOpts, _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// StakeKlay is a paid mutator transaction binding the contract method 0xc72507e9.
//
// Solidity: function stakeKlay() payable returns()
func (_CnStakingContract *CnStakingContractTransactor) StakeKlay(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "stakeKlay")
}

// StakeKlay is a paid mutator transaction binding the contract method 0xc72507e9.
//
// Solidity: function stakeKlay() payable returns()
func (_CnStakingContract *CnStakingContractSession) StakeKlay() (*types.Transaction, error) {
	return _CnStakingContract.Contract.StakeKlay(&_CnStakingContract.TransactOpts)
}

// StakeKlay is a paid mutator transaction binding the contract method 0xc72507e9.
//
// Solidity: function stakeKlay() payable returns()
func (_CnStakingContract *CnStakingContractTransactorSession) StakeKlay() (*types.Transaction, error) {
	return _CnStakingContract.Contract.StakeKlay(&_CnStakingContract.TransactOpts)
}

// SubmitAddAdmin is a paid mutator transaction binding the contract method 0x863f5c0a.
//
// Solidity: function submitAddAdmin(address _admin) returns()
func (_CnStakingContract *CnStakingContractTransactor) SubmitAddAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "submitAddAdmin", _admin)
}

// SubmitAddAdmin is a paid mutator transaction binding the contract method 0x863f5c0a.
//
// Solidity: function submitAddAdmin(address _admin) returns()
func (_CnStakingContract *CnStakingContractSession) SubmitAddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingContract.Contract.SubmitAddAdmin(&_CnStakingContract.TransactOpts, _admin)
}

// SubmitAddAdmin is a paid mutator transaction binding the contract method 0x863f5c0a.
//
// Solidity: function submitAddAdmin(address _admin) returns()
func (_CnStakingContract *CnStakingContractTransactorSession) SubmitAddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingContract.Contract.SubmitAddAdmin(&_CnStakingContract.TransactOpts, _admin)
}

// SubmitApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x7818097c.
//
// Solidity: function submitApproveStakingWithdrawal(address _to, uint256 _value) returns()
func (_CnStakingContract *CnStakingContractTransactor) SubmitApproveStakingWithdrawal(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "submitApproveStakingWithdrawal", _to, _value)
}

// SubmitApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x7818097c.
//
// Solidity: function submitApproveStakingWithdrawal(address _to, uint256 _value) returns()
func (_CnStakingContract *CnStakingContractSession) SubmitApproveStakingWithdrawal(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.Contract.SubmitApproveStakingWithdrawal(&_CnStakingContract.TransactOpts, _to, _value)
}

// SubmitApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x7818097c.
//
// Solidity: function submitApproveStakingWithdrawal(address _to, uint256 _value) returns()
func (_CnStakingContract *CnStakingContractTransactorSession) SubmitApproveStakingWithdrawal(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.Contract.SubmitApproveStakingWithdrawal(&_CnStakingContract.TransactOpts, _to, _value)
}

// SubmitCancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0x06b35d31.
//
// Solidity: function submitCancelApprovedStakingWithdrawal(uint256 _approvedWithdrawalId) returns()
func (_CnStakingContract *CnStakingContractTransactor) SubmitCancelApprovedStakingWithdrawal(opts *bind.TransactOpts, _approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "submitCancelApprovedStakingWithdrawal", _approvedWithdrawalId)
}

// SubmitCancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0x06b35d31.
//
// Solidity: function submitCancelApprovedStakingWithdrawal(uint256 _approvedWithdrawalId) returns()
func (_CnStakingContract *CnStakingContractSession) SubmitCancelApprovedStakingWithdrawal(_approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.Contract.SubmitCancelApprovedStakingWithdrawal(&_CnStakingContract.TransactOpts, _approvedWithdrawalId)
}

// SubmitCancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0x06b35d31.
//
// Solidity: function submitCancelApprovedStakingWithdrawal(uint256 _approvedWithdrawalId) returns()
func (_CnStakingContract *CnStakingContractTransactorSession) SubmitCancelApprovedStakingWithdrawal(_approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.Contract.SubmitCancelApprovedStakingWithdrawal(&_CnStakingContract.TransactOpts, _approvedWithdrawalId)
}

// SubmitClearRequest is a paid mutator transaction binding the contract method 0x87cd9feb.
//
// Solidity: function submitClearRequest() returns()
func (_CnStakingContract *CnStakingContractTransactor) SubmitClearRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "submitClearRequest")
}

// SubmitClearRequest is a paid mutator transaction binding the contract method 0x87cd9feb.
//
// Solidity: function submitClearRequest() returns()
func (_CnStakingContract *CnStakingContractSession) SubmitClearRequest() (*types.Transaction, error) {
	return _CnStakingContract.Contract.SubmitClearRequest(&_CnStakingContract.TransactOpts)
}

// SubmitClearRequest is a paid mutator transaction binding the contract method 0x87cd9feb.
//
// Solidity: function submitClearRequest() returns()
func (_CnStakingContract *CnStakingContractTransactorSession) SubmitClearRequest() (*types.Transaction, error) {
	return _CnStakingContract.Contract.SubmitClearRequest(&_CnStakingContract.TransactOpts)
}

// SubmitDeleteAdmin is a paid mutator transaction binding the contract method 0x791b5123.
//
// Solidity: function submitDeleteAdmin(address _admin) returns()
func (_CnStakingContract *CnStakingContractTransactor) SubmitDeleteAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "submitDeleteAdmin", _admin)
}

// SubmitDeleteAdmin is a paid mutator transaction binding the contract method 0x791b5123.
//
// Solidity: function submitDeleteAdmin(address _admin) returns()
func (_CnStakingContract *CnStakingContractSession) SubmitDeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingContract.Contract.SubmitDeleteAdmin(&_CnStakingContract.TransactOpts, _admin)
}

// SubmitDeleteAdmin is a paid mutator transaction binding the contract method 0x791b5123.
//
// Solidity: function submitDeleteAdmin(address _admin) returns()
func (_CnStakingContract *CnStakingContractTransactorSession) SubmitDeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingContract.Contract.SubmitDeleteAdmin(&_CnStakingContract.TransactOpts, _admin)
}

// SubmitUpdateRequirement is a paid mutator transaction binding the contract method 0xe748357b.
//
// Solidity: function submitUpdateRequirement(uint256 _requirement) returns()
func (_CnStakingContract *CnStakingContractTransactor) SubmitUpdateRequirement(opts *bind.TransactOpts, _requirement *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "submitUpdateRequirement", _requirement)
}

// SubmitUpdateRequirement is a paid mutator transaction binding the contract method 0xe748357b.
//
// Solidity: function submitUpdateRequirement(uint256 _requirement) returns()
func (_CnStakingContract *CnStakingContractSession) SubmitUpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.Contract.SubmitUpdateRequirement(&_CnStakingContract.TransactOpts, _requirement)
}

// SubmitUpdateRequirement is a paid mutator transaction binding the contract method 0xe748357b.
//
// Solidity: function submitUpdateRequirement(uint256 _requirement) returns()
func (_CnStakingContract *CnStakingContractTransactorSession) SubmitUpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.Contract.SubmitUpdateRequirement(&_CnStakingContract.TransactOpts, _requirement)
}

// SubmitUpdateRewardAddress is a paid mutator transaction binding the contract method 0x069135af.
//
// Solidity: function submitUpdateRewardAddress(address _rewardAddress) returns()
func (_CnStakingContract *CnStakingContractTransactor) SubmitUpdateRewardAddress(opts *bind.TransactOpts, _rewardAddress common.Address) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "submitUpdateRewardAddress", _rewardAddress)
}

// SubmitUpdateRewardAddress is a paid mutator transaction binding the contract method 0x069135af.
//
// Solidity: function submitUpdateRewardAddress(address _rewardAddress) returns()
func (_CnStakingContract *CnStakingContractSession) SubmitUpdateRewardAddress(_rewardAddress common.Address) (*types.Transaction, error) {
	return _CnStakingContract.Contract.SubmitUpdateRewardAddress(&_CnStakingContract.TransactOpts, _rewardAddress)
}

// SubmitUpdateRewardAddress is a paid mutator transaction binding the contract method 0x069135af.
//
// Solidity: function submitUpdateRewardAddress(address _rewardAddress) returns()
func (_CnStakingContract *CnStakingContractTransactorSession) SubmitUpdateRewardAddress(_rewardAddress common.Address) (*types.Transaction, error) {
	return _CnStakingContract.Contract.SubmitUpdateRewardAddress(&_CnStakingContract.TransactOpts, _rewardAddress)
}

// SubmitWithdrawLockupStaking is a paid mutator transaction binding the contract method 0x4b8bc6f8.
//
// Solidity: function submitWithdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingContract *CnStakingContractTransactor) SubmitWithdrawLockupStaking(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "submitWithdrawLockupStaking", _to, _value)
}

// SubmitWithdrawLockupStaking is a paid mutator transaction binding the contract method 0x4b8bc6f8.
//
// Solidity: function submitWithdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingContract *CnStakingContractSession) SubmitWithdrawLockupStaking(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.Contract.SubmitWithdrawLockupStaking(&_CnStakingContract.TransactOpts, _to, _value)
}

// SubmitWithdrawLockupStaking is a paid mutator transaction binding the contract method 0x4b8bc6f8.
//
// Solidity: function submitWithdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingContract *CnStakingContractTransactorSession) SubmitWithdrawLockupStaking(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.Contract.SubmitWithdrawLockupStaking(&_CnStakingContract.TransactOpts, _to, _value)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(uint256 _requirement) returns()
func (_CnStakingContract *CnStakingContractTransactor) UpdateRequirement(opts *bind.TransactOpts, _requirement *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "updateRequirement", _requirement)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(uint256 _requirement) returns()
func (_CnStakingContract *CnStakingContractSession) UpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.Contract.UpdateRequirement(&_CnStakingContract.TransactOpts, _requirement)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(uint256 _requirement) returns()
func (_CnStakingContract *CnStakingContractTransactorSession) UpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.Contract.UpdateRequirement(&_CnStakingContract.TransactOpts, _requirement)
}

// UpdateRewardAddress is a paid mutator transaction binding the contract method 0x944dd5a2.
//
// Solidity: function updateRewardAddress(address _rewardAddress) returns()
func (_CnStakingContract *CnStakingContractTransactor) UpdateRewardAddress(opts *bind.TransactOpts, _rewardAddress common.Address) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "updateRewardAddress", _rewardAddress)
}

// UpdateRewardAddress is a paid mutator transaction binding the contract method 0x944dd5a2.
//
// Solidity: function updateRewardAddress(address _rewardAddress) returns()
func (_CnStakingContract *CnStakingContractSession) UpdateRewardAddress(_rewardAddress common.Address) (*types.Transaction, error) {
	return _CnStakingContract.Contract.UpdateRewardAddress(&_CnStakingContract.TransactOpts, _rewardAddress)
}

// UpdateRewardAddress is a paid mutator transaction binding the contract method 0x944dd5a2.
//
// Solidity: function updateRewardAddress(address _rewardAddress) returns()
func (_CnStakingContract *CnStakingContractTransactorSession) UpdateRewardAddress(_rewardAddress common.Address) (*types.Transaction, error) {
	return _CnStakingContract.Contract.UpdateRewardAddress(&_CnStakingContract.TransactOpts, _rewardAddress)
}

// WithdrawApprovedStaking is a paid mutator transaction binding the contract method 0x6e93df0d.
//
// Solidity: function withdrawApprovedStaking(uint256 _approvedWithdrawalId) returns()
func (_CnStakingContract *CnStakingContractTransactor) WithdrawApprovedStaking(opts *bind.TransactOpts, _approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "withdrawApprovedStaking", _approvedWithdrawalId)
}

// WithdrawApprovedStaking is a paid mutator transaction binding the contract method 0x6e93df0d.
//
// Solidity: function withdrawApprovedStaking(uint256 _approvedWithdrawalId) returns()
func (_CnStakingContract *CnStakingContractSession) WithdrawApprovedStaking(_approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.Contract.WithdrawApprovedStaking(&_CnStakingContract.TransactOpts, _approvedWithdrawalId)
}

// WithdrawApprovedStaking is a paid mutator transaction binding the contract method 0x6e93df0d.
//
// Solidity: function withdrawApprovedStaking(uint256 _approvedWithdrawalId) returns()
func (_CnStakingContract *CnStakingContractTransactorSession) WithdrawApprovedStaking(_approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.Contract.WithdrawApprovedStaking(&_CnStakingContract.TransactOpts, _approvedWithdrawalId)
}

// WithdrawLockupStaking is a paid mutator transaction binding the contract method 0x505ebed4.
//
// Solidity: function withdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingContract *CnStakingContractTransactor) WithdrawLockupStaking(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.contract.Transact(opts, "withdrawLockupStaking", _to, _value)
}

// WithdrawLockupStaking is a paid mutator transaction binding the contract method 0x505ebed4.
//
// Solidity: function withdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingContract *CnStakingContractSession) WithdrawLockupStaking(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.Contract.WithdrawLockupStaking(&_CnStakingContract.TransactOpts, _to, _value)
}

// WithdrawLockupStaking is a paid mutator transaction binding the contract method 0x505ebed4.
//
// Solidity: function withdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingContract *CnStakingContractTransactorSession) WithdrawLockupStaking(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingContract.Contract.WithdrawLockupStaking(&_CnStakingContract.TransactOpts, _to, _value)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_CnStakingContract *CnStakingContractTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _CnStakingContract.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_CnStakingContract *CnStakingContractSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _CnStakingContract.Contract.Fallback(&_CnStakingContract.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_CnStakingContract *CnStakingContractTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _CnStakingContract.Contract.Fallback(&_CnStakingContract.TransactOpts, calldata)
}

// CnStakingContractAddAdminIterator is returned from FilterAddAdmin and is used to iterate over the raw logs and unpacked data for AddAdmin events raised by the CnStakingContract contract.
type CnStakingContractAddAdminIterator struct {
	Event *CnStakingContractAddAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractAddAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractAddAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractAddAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractAddAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractAddAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractAddAdmin represents a AddAdmin event raised by the CnStakingContract contract.
type CnStakingContractAddAdmin struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAddAdmin is a free log retrieval operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: event AddAdmin(address indexed admin)
func (_CnStakingContract *CnStakingContractFilterer) FilterAddAdmin(opts *bind.FilterOpts, admin []common.Address) (*CnStakingContractAddAdminIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "AddAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingContractAddAdminIterator{contract: _CnStakingContract.contract, event: "AddAdmin", logs: logs, sub: sub}, nil
}

// WatchAddAdmin is a free log subscription operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: event AddAdmin(address indexed admin)
func (_CnStakingContract *CnStakingContractFilterer) WatchAddAdmin(opts *bind.WatchOpts, sink chan<- *CnStakingContractAddAdmin, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "AddAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractAddAdmin)
				if err := _CnStakingContract.contract.UnpackLog(event, "AddAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddAdmin is a log parse operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: event AddAdmin(address indexed admin)
func (_CnStakingContract *CnStakingContractFilterer) ParseAddAdmin(log types.Log) (*CnStakingContractAddAdmin, error) {
	event := new(CnStakingContractAddAdmin)
	if err := _CnStakingContract.contract.UnpackLog(event, "AddAdmin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractApproveStakingWithdrawalIterator is returned from FilterApproveStakingWithdrawal and is used to iterate over the raw logs and unpacked data for ApproveStakingWithdrawal events raised by the CnStakingContract contract.
type CnStakingContractApproveStakingWithdrawalIterator struct {
	Event *CnStakingContractApproveStakingWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractApproveStakingWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractApproveStakingWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractApproveStakingWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractApproveStakingWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractApproveStakingWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractApproveStakingWithdrawal represents a ApproveStakingWithdrawal event raised by the CnStakingContract contract.
type CnStakingContractApproveStakingWithdrawal struct {
	ApprovedWithdrawalId *big.Int
	To                   common.Address
	Value                *big.Int
	WithdrawableFrom     *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterApproveStakingWithdrawal is a free log retrieval operation binding the contract event 0xdd0988b8c11a867814c87be652f93a86d35c6a235b92977e99d5394bd8580ced.
//
// Solidity: event ApproveStakingWithdrawal(uint256 approvedWithdrawalId, address to, uint256 value, uint256 withdrawableFrom)
func (_CnStakingContract *CnStakingContractFilterer) FilterApproveStakingWithdrawal(opts *bind.FilterOpts) (*CnStakingContractApproveStakingWithdrawalIterator, error) {

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "ApproveStakingWithdrawal")
	if err != nil {
		return nil, err
	}
	return &CnStakingContractApproveStakingWithdrawalIterator{contract: _CnStakingContract.contract, event: "ApproveStakingWithdrawal", logs: logs, sub: sub}, nil
}

// WatchApproveStakingWithdrawal is a free log subscription operation binding the contract event 0xdd0988b8c11a867814c87be652f93a86d35c6a235b92977e99d5394bd8580ced.
//
// Solidity: event ApproveStakingWithdrawal(uint256 approvedWithdrawalId, address to, uint256 value, uint256 withdrawableFrom)
func (_CnStakingContract *CnStakingContractFilterer) WatchApproveStakingWithdrawal(opts *bind.WatchOpts, sink chan<- *CnStakingContractApproveStakingWithdrawal) (event.Subscription, error) {

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "ApproveStakingWithdrawal")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractApproveStakingWithdrawal)
				if err := _CnStakingContract.contract.UnpackLog(event, "ApproveStakingWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproveStakingWithdrawal is a log parse operation binding the contract event 0xdd0988b8c11a867814c87be652f93a86d35c6a235b92977e99d5394bd8580ced.
//
// Solidity: event ApproveStakingWithdrawal(uint256 approvedWithdrawalId, address to, uint256 value, uint256 withdrawableFrom)
func (_CnStakingContract *CnStakingContractFilterer) ParseApproveStakingWithdrawal(log types.Log) (*CnStakingContractApproveStakingWithdrawal, error) {
	event := new(CnStakingContractApproveStakingWithdrawal)
	if err := _CnStakingContract.contract.UnpackLog(event, "ApproveStakingWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractCancelApprovedStakingWithdrawalIterator is returned from FilterCancelApprovedStakingWithdrawal and is used to iterate over the raw logs and unpacked data for CancelApprovedStakingWithdrawal events raised by the CnStakingContract contract.
type CnStakingContractCancelApprovedStakingWithdrawalIterator struct {
	Event *CnStakingContractCancelApprovedStakingWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractCancelApprovedStakingWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractCancelApprovedStakingWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractCancelApprovedStakingWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractCancelApprovedStakingWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractCancelApprovedStakingWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractCancelApprovedStakingWithdrawal represents a CancelApprovedStakingWithdrawal event raised by the CnStakingContract contract.
type CnStakingContractCancelApprovedStakingWithdrawal struct {
	ApprovedWithdrawalId *big.Int
	To                   common.Address
	Value                *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterCancelApprovedStakingWithdrawal is a free log retrieval operation binding the contract event 0xcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df.
//
// Solidity: event CancelApprovedStakingWithdrawal(uint256 approvedWithdrawalId, address to, uint256 value)
func (_CnStakingContract *CnStakingContractFilterer) FilterCancelApprovedStakingWithdrawal(opts *bind.FilterOpts) (*CnStakingContractCancelApprovedStakingWithdrawalIterator, error) {

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "CancelApprovedStakingWithdrawal")
	if err != nil {
		return nil, err
	}
	return &CnStakingContractCancelApprovedStakingWithdrawalIterator{contract: _CnStakingContract.contract, event: "CancelApprovedStakingWithdrawal", logs: logs, sub: sub}, nil
}

// WatchCancelApprovedStakingWithdrawal is a free log subscription operation binding the contract event 0xcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df.
//
// Solidity: event CancelApprovedStakingWithdrawal(uint256 approvedWithdrawalId, address to, uint256 value)
func (_CnStakingContract *CnStakingContractFilterer) WatchCancelApprovedStakingWithdrawal(opts *bind.WatchOpts, sink chan<- *CnStakingContractCancelApprovedStakingWithdrawal) (event.Subscription, error) {

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "CancelApprovedStakingWithdrawal")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractCancelApprovedStakingWithdrawal)
				if err := _CnStakingContract.contract.UnpackLog(event, "CancelApprovedStakingWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancelApprovedStakingWithdrawal is a log parse operation binding the contract event 0xcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df.
//
// Solidity: event CancelApprovedStakingWithdrawal(uint256 approvedWithdrawalId, address to, uint256 value)
func (_CnStakingContract *CnStakingContractFilterer) ParseCancelApprovedStakingWithdrawal(log types.Log) (*CnStakingContractCancelApprovedStakingWithdrawal, error) {
	event := new(CnStakingContractCancelApprovedStakingWithdrawal)
	if err := _CnStakingContract.contract.UnpackLog(event, "CancelApprovedStakingWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractCancelRequestIterator is returned from FilterCancelRequest and is used to iterate over the raw logs and unpacked data for CancelRequest events raised by the CnStakingContract contract.
type CnStakingContractCancelRequestIterator struct {
	Event *CnStakingContractCancelRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractCancelRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractCancelRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractCancelRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractCancelRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractCancelRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractCancelRequest represents a CancelRequest event raised by the CnStakingContract contract.
type CnStakingContractCancelRequest struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCancelRequest is a free log retrieval operation binding the contract event 0x01011152a3b44da915f5831c5c63c3448b616dcc166c3543f289ed79645280c9.
//
// Solidity: event CancelRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingContract *CnStakingContractFilterer) FilterCancelRequest(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*CnStakingContractCancelRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "CancelRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingContractCancelRequestIterator{contract: _CnStakingContract.contract, event: "CancelRequest", logs: logs, sub: sub}, nil
}

// WatchCancelRequest is a free log subscription operation binding the contract event 0x01011152a3b44da915f5831c5c63c3448b616dcc166c3543f289ed79645280c9.
//
// Solidity: event CancelRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingContract *CnStakingContractFilterer) WatchCancelRequest(opts *bind.WatchOpts, sink chan<- *CnStakingContractCancelRequest, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "CancelRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractCancelRequest)
				if err := _CnStakingContract.contract.UnpackLog(event, "CancelRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancelRequest is a log parse operation binding the contract event 0x01011152a3b44da915f5831c5c63c3448b616dcc166c3543f289ed79645280c9.
//
// Solidity: event CancelRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingContract *CnStakingContractFilterer) ParseCancelRequest(log types.Log) (*CnStakingContractCancelRequest, error) {
	event := new(CnStakingContractCancelRequest)
	if err := _CnStakingContract.contract.UnpackLog(event, "CancelRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractClearRequestIterator is returned from FilterClearRequest and is used to iterate over the raw logs and unpacked data for ClearRequest events raised by the CnStakingContract contract.
type CnStakingContractClearRequestIterator struct {
	Event *CnStakingContractClearRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractClearRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractClearRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractClearRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractClearRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractClearRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractClearRequest represents a ClearRequest event raised by the CnStakingContract contract.
type CnStakingContractClearRequest struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterClearRequest is a free log retrieval operation binding the contract event 0x907527d30089abd16e30f06ddbbbc18480505176262f19bc16c1fbf9262f9c6b.
//
// Solidity: event ClearRequest()
func (_CnStakingContract *CnStakingContractFilterer) FilterClearRequest(opts *bind.FilterOpts) (*CnStakingContractClearRequestIterator, error) {

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "ClearRequest")
	if err != nil {
		return nil, err
	}
	return &CnStakingContractClearRequestIterator{contract: _CnStakingContract.contract, event: "ClearRequest", logs: logs, sub: sub}, nil
}

// WatchClearRequest is a free log subscription operation binding the contract event 0x907527d30089abd16e30f06ddbbbc18480505176262f19bc16c1fbf9262f9c6b.
//
// Solidity: event ClearRequest()
func (_CnStakingContract *CnStakingContractFilterer) WatchClearRequest(opts *bind.WatchOpts, sink chan<- *CnStakingContractClearRequest) (event.Subscription, error) {

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "ClearRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractClearRequest)
				if err := _CnStakingContract.contract.UnpackLog(event, "ClearRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClearRequest is a log parse operation binding the contract event 0x907527d30089abd16e30f06ddbbbc18480505176262f19bc16c1fbf9262f9c6b.
//
// Solidity: event ClearRequest()
func (_CnStakingContract *CnStakingContractFilterer) ParseClearRequest(log types.Log) (*CnStakingContractClearRequest, error) {
	event := new(CnStakingContractClearRequest)
	if err := _CnStakingContract.contract.UnpackLog(event, "ClearRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractCompleteReviewInitialConditionsIterator is returned from FilterCompleteReviewInitialConditions and is used to iterate over the raw logs and unpacked data for CompleteReviewInitialConditions events raised by the CnStakingContract contract.
type CnStakingContractCompleteReviewInitialConditionsIterator struct {
	Event *CnStakingContractCompleteReviewInitialConditions // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractCompleteReviewInitialConditionsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractCompleteReviewInitialConditions)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractCompleteReviewInitialConditions)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractCompleteReviewInitialConditionsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractCompleteReviewInitialConditionsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractCompleteReviewInitialConditions represents a CompleteReviewInitialConditions event raised by the CnStakingContract contract.
type CnStakingContractCompleteReviewInitialConditions struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterCompleteReviewInitialConditions is a free log retrieval operation binding the contract event 0x244ff9a3d72b1dc5a4bce7f05fb615395f2a8c7ad6ea525d2bac9030f75d7a9b.
//
// Solidity: event CompleteReviewInitialConditions()
func (_CnStakingContract *CnStakingContractFilterer) FilterCompleteReviewInitialConditions(opts *bind.FilterOpts) (*CnStakingContractCompleteReviewInitialConditionsIterator, error) {

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "CompleteReviewInitialConditions")
	if err != nil {
		return nil, err
	}
	return &CnStakingContractCompleteReviewInitialConditionsIterator{contract: _CnStakingContract.contract, event: "CompleteReviewInitialConditions", logs: logs, sub: sub}, nil
}

// WatchCompleteReviewInitialConditions is a free log subscription operation binding the contract event 0x244ff9a3d72b1dc5a4bce7f05fb615395f2a8c7ad6ea525d2bac9030f75d7a9b.
//
// Solidity: event CompleteReviewInitialConditions()
func (_CnStakingContract *CnStakingContractFilterer) WatchCompleteReviewInitialConditions(opts *bind.WatchOpts, sink chan<- *CnStakingContractCompleteReviewInitialConditions) (event.Subscription, error) {

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "CompleteReviewInitialConditions")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractCompleteReviewInitialConditions)
				if err := _CnStakingContract.contract.UnpackLog(event, "CompleteReviewInitialConditions", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCompleteReviewInitialConditions is a log parse operation binding the contract event 0x244ff9a3d72b1dc5a4bce7f05fb615395f2a8c7ad6ea525d2bac9030f75d7a9b.
//
// Solidity: event CompleteReviewInitialConditions()
func (_CnStakingContract *CnStakingContractFilterer) ParseCompleteReviewInitialConditions(log types.Log) (*CnStakingContractCompleteReviewInitialConditions, error) {
	event := new(CnStakingContractCompleteReviewInitialConditions)
	if err := _CnStakingContract.contract.UnpackLog(event, "CompleteReviewInitialConditions", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractConfirmRequestIterator is returned from FilterConfirmRequest and is used to iterate over the raw logs and unpacked data for ConfirmRequest events raised by the CnStakingContract contract.
type CnStakingContractConfirmRequestIterator struct {
	Event *CnStakingContractConfirmRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractConfirmRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractConfirmRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractConfirmRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractConfirmRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractConfirmRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractConfirmRequest represents a ConfirmRequest event raised by the CnStakingContract contract.
type CnStakingContractConfirmRequest struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Confirmers []common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterConfirmRequest is a free log retrieval operation binding the contract event 0x658055f08cf63659025f616b2baf94baf8f4d2ee9c600c2ae722b4b7716cce46.
//
// Solidity: event ConfirmRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_CnStakingContract *CnStakingContractFilterer) FilterConfirmRequest(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*CnStakingContractConfirmRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "ConfirmRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingContractConfirmRequestIterator{contract: _CnStakingContract.contract, event: "ConfirmRequest", logs: logs, sub: sub}, nil
}

// WatchConfirmRequest is a free log subscription operation binding the contract event 0x658055f08cf63659025f616b2baf94baf8f4d2ee9c600c2ae722b4b7716cce46.
//
// Solidity: event ConfirmRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_CnStakingContract *CnStakingContractFilterer) WatchConfirmRequest(opts *bind.WatchOpts, sink chan<- *CnStakingContractConfirmRequest, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "ConfirmRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractConfirmRequest)
				if err := _CnStakingContract.contract.UnpackLog(event, "ConfirmRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfirmRequest is a log parse operation binding the contract event 0x658055f08cf63659025f616b2baf94baf8f4d2ee9c600c2ae722b4b7716cce46.
//
// Solidity: event ConfirmRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_CnStakingContract *CnStakingContractFilterer) ParseConfirmRequest(log types.Log) (*CnStakingContractConfirmRequest, error) {
	event := new(CnStakingContractConfirmRequest)
	if err := _CnStakingContract.contract.UnpackLog(event, "ConfirmRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractDeleteAdminIterator is returned from FilterDeleteAdmin and is used to iterate over the raw logs and unpacked data for DeleteAdmin events raised by the CnStakingContract contract.
type CnStakingContractDeleteAdminIterator struct {
	Event *CnStakingContractDeleteAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractDeleteAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractDeleteAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractDeleteAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractDeleteAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractDeleteAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractDeleteAdmin represents a DeleteAdmin event raised by the CnStakingContract contract.
type CnStakingContractDeleteAdmin struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDeleteAdmin is a free log retrieval operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: event DeleteAdmin(address indexed admin)
func (_CnStakingContract *CnStakingContractFilterer) FilterDeleteAdmin(opts *bind.FilterOpts, admin []common.Address) (*CnStakingContractDeleteAdminIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "DeleteAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingContractDeleteAdminIterator{contract: _CnStakingContract.contract, event: "DeleteAdmin", logs: logs, sub: sub}, nil
}

// WatchDeleteAdmin is a free log subscription operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: event DeleteAdmin(address indexed admin)
func (_CnStakingContract *CnStakingContractFilterer) WatchDeleteAdmin(opts *bind.WatchOpts, sink chan<- *CnStakingContractDeleteAdmin, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "DeleteAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractDeleteAdmin)
				if err := _CnStakingContract.contract.UnpackLog(event, "DeleteAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeleteAdmin is a log parse operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: event DeleteAdmin(address indexed admin)
func (_CnStakingContract *CnStakingContractFilterer) ParseDeleteAdmin(log types.Log) (*CnStakingContractDeleteAdmin, error) {
	event := new(CnStakingContractDeleteAdmin)
	if err := _CnStakingContract.contract.UnpackLog(event, "DeleteAdmin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractDeployContractIterator is returned from FilterDeployContract and is used to iterate over the raw logs and unpacked data for DeployContract events raised by the CnStakingContract contract.
type CnStakingContractDeployContractIterator struct {
	Event *CnStakingContractDeployContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractDeployContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractDeployContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractDeployContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractDeployContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractDeployContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractDeployContract represents a DeployContract event raised by the CnStakingContract contract.
type CnStakingContractDeployContract struct {
	ContractType      string
	ContractValidator common.Address
	NodeId            common.Address
	RewardAddress     common.Address
	CnAdminList       []common.Address
	Requirement       *big.Int
	UnlockTime        []*big.Int
	UnlockAmount      []*big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterDeployContract is a free log retrieval operation binding the contract event 0xb03718e2ed5bd9937371e2b685eccb81e680ebd61609db18f411eb1539ad3aaf.
//
// Solidity: event DeployContract(string contractType, address contractValidator, address nodeId, address rewardAddress, address[] cnAdminList, uint256 requirement, uint256[] unlockTime, uint256[] unlockAmount)
func (_CnStakingContract *CnStakingContractFilterer) FilterDeployContract(opts *bind.FilterOpts) (*CnStakingContractDeployContractIterator, error) {

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "DeployContract")
	if err != nil {
		return nil, err
	}
	return &CnStakingContractDeployContractIterator{contract: _CnStakingContract.contract, event: "DeployContract", logs: logs, sub: sub}, nil
}

// WatchDeployContract is a free log subscription operation binding the contract event 0xb03718e2ed5bd9937371e2b685eccb81e680ebd61609db18f411eb1539ad3aaf.
//
// Solidity: event DeployContract(string contractType, address contractValidator, address nodeId, address rewardAddress, address[] cnAdminList, uint256 requirement, uint256[] unlockTime, uint256[] unlockAmount)
func (_CnStakingContract *CnStakingContractFilterer) WatchDeployContract(opts *bind.WatchOpts, sink chan<- *CnStakingContractDeployContract) (event.Subscription, error) {

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "DeployContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractDeployContract)
				if err := _CnStakingContract.contract.UnpackLog(event, "DeployContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployContract is a log parse operation binding the contract event 0xb03718e2ed5bd9937371e2b685eccb81e680ebd61609db18f411eb1539ad3aaf.
//
// Solidity: event DeployContract(string contractType, address contractValidator, address nodeId, address rewardAddress, address[] cnAdminList, uint256 requirement, uint256[] unlockTime, uint256[] unlockAmount)
func (_CnStakingContract *CnStakingContractFilterer) ParseDeployContract(log types.Log) (*CnStakingContractDeployContract, error) {
	event := new(CnStakingContractDeployContract)
	if err := _CnStakingContract.contract.UnpackLog(event, "DeployContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractDepositLockupStakingAndInitIterator is returned from FilterDepositLockupStakingAndInit and is used to iterate over the raw logs and unpacked data for DepositLockupStakingAndInit events raised by the CnStakingContract contract.
type CnStakingContractDepositLockupStakingAndInitIterator struct {
	Event *CnStakingContractDepositLockupStakingAndInit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractDepositLockupStakingAndInitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractDepositLockupStakingAndInit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractDepositLockupStakingAndInit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractDepositLockupStakingAndInitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractDepositLockupStakingAndInitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractDepositLockupStakingAndInit represents a DepositLockupStakingAndInit event raised by the CnStakingContract contract.
type CnStakingContractDepositLockupStakingAndInit struct {
	From  common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDepositLockupStakingAndInit is a free log retrieval operation binding the contract event 0x2b3c5e8e58d7d1e42ccd071c6f749d53f9ee506020a81fad9ff98140ccccde69.
//
// Solidity: event DepositLockupStakingAndInit(address from, uint256 value)
func (_CnStakingContract *CnStakingContractFilterer) FilterDepositLockupStakingAndInit(opts *bind.FilterOpts) (*CnStakingContractDepositLockupStakingAndInitIterator, error) {

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "DepositLockupStakingAndInit")
	if err != nil {
		return nil, err
	}
	return &CnStakingContractDepositLockupStakingAndInitIterator{contract: _CnStakingContract.contract, event: "DepositLockupStakingAndInit", logs: logs, sub: sub}, nil
}

// WatchDepositLockupStakingAndInit is a free log subscription operation binding the contract event 0x2b3c5e8e58d7d1e42ccd071c6f749d53f9ee506020a81fad9ff98140ccccde69.
//
// Solidity: event DepositLockupStakingAndInit(address from, uint256 value)
func (_CnStakingContract *CnStakingContractFilterer) WatchDepositLockupStakingAndInit(opts *bind.WatchOpts, sink chan<- *CnStakingContractDepositLockupStakingAndInit) (event.Subscription, error) {

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "DepositLockupStakingAndInit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractDepositLockupStakingAndInit)
				if err := _CnStakingContract.contract.UnpackLog(event, "DepositLockupStakingAndInit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositLockupStakingAndInit is a log parse operation binding the contract event 0x2b3c5e8e58d7d1e42ccd071c6f749d53f9ee506020a81fad9ff98140ccccde69.
//
// Solidity: event DepositLockupStakingAndInit(address from, uint256 value)
func (_CnStakingContract *CnStakingContractFilterer) ParseDepositLockupStakingAndInit(log types.Log) (*CnStakingContractDepositLockupStakingAndInit, error) {
	event := new(CnStakingContractDepositLockupStakingAndInit)
	if err := _CnStakingContract.contract.UnpackLog(event, "DepositLockupStakingAndInit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractExecuteRequestFailureIterator is returned from FilterExecuteRequestFailure and is used to iterate over the raw logs and unpacked data for ExecuteRequestFailure events raised by the CnStakingContract contract.
type CnStakingContractExecuteRequestFailureIterator struct {
	Event *CnStakingContractExecuteRequestFailure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractExecuteRequestFailureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractExecuteRequestFailure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractExecuteRequestFailure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractExecuteRequestFailureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractExecuteRequestFailureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractExecuteRequestFailure represents a ExecuteRequestFailure event raised by the CnStakingContract contract.
type CnStakingContractExecuteRequestFailure struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterExecuteRequestFailure is a free log retrieval operation binding the contract event 0xbd3ad69fc5a8e233118506c67ebe892bef493fcf2eb9e6986f6d6c3f2adf0e8a.
//
// Solidity: event ExecuteRequestFailure(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingContract *CnStakingContractFilterer) FilterExecuteRequestFailure(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*CnStakingContractExecuteRequestFailureIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "ExecuteRequestFailure", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingContractExecuteRequestFailureIterator{contract: _CnStakingContract.contract, event: "ExecuteRequestFailure", logs: logs, sub: sub}, nil
}

// WatchExecuteRequestFailure is a free log subscription operation binding the contract event 0xbd3ad69fc5a8e233118506c67ebe892bef493fcf2eb9e6986f6d6c3f2adf0e8a.
//
// Solidity: event ExecuteRequestFailure(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingContract *CnStakingContractFilterer) WatchExecuteRequestFailure(opts *bind.WatchOpts, sink chan<- *CnStakingContractExecuteRequestFailure, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "ExecuteRequestFailure", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractExecuteRequestFailure)
				if err := _CnStakingContract.contract.UnpackLog(event, "ExecuteRequestFailure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecuteRequestFailure is a log parse operation binding the contract event 0xbd3ad69fc5a8e233118506c67ebe892bef493fcf2eb9e6986f6d6c3f2adf0e8a.
//
// Solidity: event ExecuteRequestFailure(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingContract *CnStakingContractFilterer) ParseExecuteRequestFailure(log types.Log) (*CnStakingContractExecuteRequestFailure, error) {
	event := new(CnStakingContractExecuteRequestFailure)
	if err := _CnStakingContract.contract.UnpackLog(event, "ExecuteRequestFailure", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractExecuteRequestSuccessIterator is returned from FilterExecuteRequestSuccess and is used to iterate over the raw logs and unpacked data for ExecuteRequestSuccess events raised by the CnStakingContract contract.
type CnStakingContractExecuteRequestSuccessIterator struct {
	Event *CnStakingContractExecuteRequestSuccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractExecuteRequestSuccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractExecuteRequestSuccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractExecuteRequestSuccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractExecuteRequestSuccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractExecuteRequestSuccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractExecuteRequestSuccess represents a ExecuteRequestSuccess event raised by the CnStakingContract contract.
type CnStakingContractExecuteRequestSuccess struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterExecuteRequestSuccess is a free log retrieval operation binding the contract event 0x48f16d9e6ab6f19798a7c7f307ecea3def480049fa0a09280e2a3fa45aaa8426.
//
// Solidity: event ExecuteRequestSuccess(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingContract *CnStakingContractFilterer) FilterExecuteRequestSuccess(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*CnStakingContractExecuteRequestSuccessIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "ExecuteRequestSuccess", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingContractExecuteRequestSuccessIterator{contract: _CnStakingContract.contract, event: "ExecuteRequestSuccess", logs: logs, sub: sub}, nil
}

// WatchExecuteRequestSuccess is a free log subscription operation binding the contract event 0x48f16d9e6ab6f19798a7c7f307ecea3def480049fa0a09280e2a3fa45aaa8426.
//
// Solidity: event ExecuteRequestSuccess(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingContract *CnStakingContractFilterer) WatchExecuteRequestSuccess(opts *bind.WatchOpts, sink chan<- *CnStakingContractExecuteRequestSuccess, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "ExecuteRequestSuccess", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractExecuteRequestSuccess)
				if err := _CnStakingContract.contract.UnpackLog(event, "ExecuteRequestSuccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecuteRequestSuccess is a log parse operation binding the contract event 0x48f16d9e6ab6f19798a7c7f307ecea3def480049fa0a09280e2a3fa45aaa8426.
//
// Solidity: event ExecuteRequestSuccess(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingContract *CnStakingContractFilterer) ParseExecuteRequestSuccess(log types.Log) (*CnStakingContractExecuteRequestSuccess, error) {
	event := new(CnStakingContractExecuteRequestSuccess)
	if err := _CnStakingContract.contract.UnpackLog(event, "ExecuteRequestSuccess", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractReviewInitialConditionsIterator is returned from FilterReviewInitialConditions and is used to iterate over the raw logs and unpacked data for ReviewInitialConditions events raised by the CnStakingContract contract.
type CnStakingContractReviewInitialConditionsIterator struct {
	Event *CnStakingContractReviewInitialConditions // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractReviewInitialConditionsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractReviewInitialConditions)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractReviewInitialConditions)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractReviewInitialConditionsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractReviewInitialConditionsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractReviewInitialConditions represents a ReviewInitialConditions event raised by the CnStakingContract contract.
type CnStakingContractReviewInitialConditions struct {
	From common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterReviewInitialConditions is a free log retrieval operation binding the contract event 0x65d287f4118b03f8cc979b433fd0b2246074200dd5da70c9daf204aaa0da1a2c.
//
// Solidity: event ReviewInitialConditions(address indexed from)
func (_CnStakingContract *CnStakingContractFilterer) FilterReviewInitialConditions(opts *bind.FilterOpts, from []common.Address) (*CnStakingContractReviewInitialConditionsIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "ReviewInitialConditions", fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingContractReviewInitialConditionsIterator{contract: _CnStakingContract.contract, event: "ReviewInitialConditions", logs: logs, sub: sub}, nil
}

// WatchReviewInitialConditions is a free log subscription operation binding the contract event 0x65d287f4118b03f8cc979b433fd0b2246074200dd5da70c9daf204aaa0da1a2c.
//
// Solidity: event ReviewInitialConditions(address indexed from)
func (_CnStakingContract *CnStakingContractFilterer) WatchReviewInitialConditions(opts *bind.WatchOpts, sink chan<- *CnStakingContractReviewInitialConditions, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "ReviewInitialConditions", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractReviewInitialConditions)
				if err := _CnStakingContract.contract.UnpackLog(event, "ReviewInitialConditions", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReviewInitialConditions is a log parse operation binding the contract event 0x65d287f4118b03f8cc979b433fd0b2246074200dd5da70c9daf204aaa0da1a2c.
//
// Solidity: event ReviewInitialConditions(address indexed from)
func (_CnStakingContract *CnStakingContractFilterer) ParseReviewInitialConditions(log types.Log) (*CnStakingContractReviewInitialConditions, error) {
	event := new(CnStakingContractReviewInitialConditions)
	if err := _CnStakingContract.contract.UnpackLog(event, "ReviewInitialConditions", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractReviseRewardAddressIterator is returned from FilterReviseRewardAddress and is used to iterate over the raw logs and unpacked data for ReviseRewardAddress events raised by the CnStakingContract contract.
type CnStakingContractReviseRewardAddressIterator struct {
	Event *CnStakingContractReviseRewardAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractReviseRewardAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractReviseRewardAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractReviseRewardAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractReviseRewardAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractReviseRewardAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractReviseRewardAddress represents a ReviseRewardAddress event raised by the CnStakingContract contract.
type CnStakingContractReviseRewardAddress struct {
	CnNodeId          common.Address
	PrevRewardAddress common.Address
	CurRewardAddress  common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterReviseRewardAddress is a free log retrieval operation binding the contract event 0xaa5c92ffd739bc0b8b117b671e7d713917ddb1440b436263a3ea106d70c6f05f.
//
// Solidity: event ReviseRewardAddress(address cnNodeId, address prevRewardAddress, address curRewardAddress)
func (_CnStakingContract *CnStakingContractFilterer) FilterReviseRewardAddress(opts *bind.FilterOpts) (*CnStakingContractReviseRewardAddressIterator, error) {

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "ReviseRewardAddress")
	if err != nil {
		return nil, err
	}
	return &CnStakingContractReviseRewardAddressIterator{contract: _CnStakingContract.contract, event: "ReviseRewardAddress", logs: logs, sub: sub}, nil
}

// WatchReviseRewardAddress is a free log subscription operation binding the contract event 0xaa5c92ffd739bc0b8b117b671e7d713917ddb1440b436263a3ea106d70c6f05f.
//
// Solidity: event ReviseRewardAddress(address cnNodeId, address prevRewardAddress, address curRewardAddress)
func (_CnStakingContract *CnStakingContractFilterer) WatchReviseRewardAddress(opts *bind.WatchOpts, sink chan<- *CnStakingContractReviseRewardAddress) (event.Subscription, error) {

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "ReviseRewardAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractReviseRewardAddress)
				if err := _CnStakingContract.contract.UnpackLog(event, "ReviseRewardAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReviseRewardAddress is a log parse operation binding the contract event 0xaa5c92ffd739bc0b8b117b671e7d713917ddb1440b436263a3ea106d70c6f05f.
//
// Solidity: event ReviseRewardAddress(address cnNodeId, address prevRewardAddress, address curRewardAddress)
func (_CnStakingContract *CnStakingContractFilterer) ParseReviseRewardAddress(log types.Log) (*CnStakingContractReviseRewardAddress, error) {
	event := new(CnStakingContractReviseRewardAddress)
	if err := _CnStakingContract.contract.UnpackLog(event, "ReviseRewardAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractRevokeConfirmationIterator is returned from FilterRevokeConfirmation and is used to iterate over the raw logs and unpacked data for RevokeConfirmation events raised by the CnStakingContract contract.
type CnStakingContractRevokeConfirmationIterator struct {
	Event *CnStakingContractRevokeConfirmation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractRevokeConfirmationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractRevokeConfirmation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractRevokeConfirmation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractRevokeConfirmationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractRevokeConfirmationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractRevokeConfirmation represents a RevokeConfirmation event raised by the CnStakingContract contract.
type CnStakingContractRevokeConfirmation struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Confirmers []common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRevokeConfirmation is a free log retrieval operation binding the contract event 0xed38e5621fac2aa23736077187104abfe9c8aa1c5b4eb73015d8cfdf403fe070.
//
// Solidity: event RevokeConfirmation(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_CnStakingContract *CnStakingContractFilterer) FilterRevokeConfirmation(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*CnStakingContractRevokeConfirmationIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "RevokeConfirmation", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingContractRevokeConfirmationIterator{contract: _CnStakingContract.contract, event: "RevokeConfirmation", logs: logs, sub: sub}, nil
}

// WatchRevokeConfirmation is a free log subscription operation binding the contract event 0xed38e5621fac2aa23736077187104abfe9c8aa1c5b4eb73015d8cfdf403fe070.
//
// Solidity: event RevokeConfirmation(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_CnStakingContract *CnStakingContractFilterer) WatchRevokeConfirmation(opts *bind.WatchOpts, sink chan<- *CnStakingContractRevokeConfirmation, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "RevokeConfirmation", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractRevokeConfirmation)
				if err := _CnStakingContract.contract.UnpackLog(event, "RevokeConfirmation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevokeConfirmation is a log parse operation binding the contract event 0xed38e5621fac2aa23736077187104abfe9c8aa1c5b4eb73015d8cfdf403fe070.
//
// Solidity: event RevokeConfirmation(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_CnStakingContract *CnStakingContractFilterer) ParseRevokeConfirmation(log types.Log) (*CnStakingContractRevokeConfirmation, error) {
	event := new(CnStakingContractRevokeConfirmation)
	if err := _CnStakingContract.contract.UnpackLog(event, "RevokeConfirmation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractStakeKlayIterator is returned from FilterStakeKlay and is used to iterate over the raw logs and unpacked data for StakeKlay events raised by the CnStakingContract contract.
type CnStakingContractStakeKlayIterator struct {
	Event *CnStakingContractStakeKlay // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractStakeKlayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractStakeKlay)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractStakeKlay)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractStakeKlayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractStakeKlayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractStakeKlay represents a StakeKlay event raised by the CnStakingContract contract.
type CnStakingContractStakeKlay struct {
	From  common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterStakeKlay is a free log retrieval operation binding the contract event 0x016a7abf22d0d58c184d5eb406e8e9f6007698168251cf67add43fa4d13768f6.
//
// Solidity: event StakeKlay(address from, uint256 value)
func (_CnStakingContract *CnStakingContractFilterer) FilterStakeKlay(opts *bind.FilterOpts) (*CnStakingContractStakeKlayIterator, error) {

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "StakeKlay")
	if err != nil {
		return nil, err
	}
	return &CnStakingContractStakeKlayIterator{contract: _CnStakingContract.contract, event: "StakeKlay", logs: logs, sub: sub}, nil
}

// WatchStakeKlay is a free log subscription operation binding the contract event 0x016a7abf22d0d58c184d5eb406e8e9f6007698168251cf67add43fa4d13768f6.
//
// Solidity: event StakeKlay(address from, uint256 value)
func (_CnStakingContract *CnStakingContractFilterer) WatchStakeKlay(opts *bind.WatchOpts, sink chan<- *CnStakingContractStakeKlay) (event.Subscription, error) {

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "StakeKlay")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractStakeKlay)
				if err := _CnStakingContract.contract.UnpackLog(event, "StakeKlay", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeKlay is a log parse operation binding the contract event 0x016a7abf22d0d58c184d5eb406e8e9f6007698168251cf67add43fa4d13768f6.
//
// Solidity: event StakeKlay(address from, uint256 value)
func (_CnStakingContract *CnStakingContractFilterer) ParseStakeKlay(log types.Log) (*CnStakingContractStakeKlay, error) {
	event := new(CnStakingContractStakeKlay)
	if err := _CnStakingContract.contract.UnpackLog(event, "StakeKlay", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractSubmitRequestIterator is returned from FilterSubmitRequest and is used to iterate over the raw logs and unpacked data for SubmitRequest events raised by the CnStakingContract contract.
type CnStakingContractSubmitRequestIterator struct {
	Event *CnStakingContractSubmitRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractSubmitRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractSubmitRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractSubmitRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractSubmitRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractSubmitRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractSubmitRequest represents a SubmitRequest event raised by the CnStakingContract contract.
type CnStakingContractSubmitRequest struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSubmitRequest is a free log retrieval operation binding the contract event 0xdd9ce6d431d4ac3e8bea81bc2d7760b97d30c4e54252d8c8c59054849b8f61b5.
//
// Solidity: event SubmitRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingContract *CnStakingContractFilterer) FilterSubmitRequest(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*CnStakingContractSubmitRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "SubmitRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingContractSubmitRequestIterator{contract: _CnStakingContract.contract, event: "SubmitRequest", logs: logs, sub: sub}, nil
}

// WatchSubmitRequest is a free log subscription operation binding the contract event 0xdd9ce6d431d4ac3e8bea81bc2d7760b97d30c4e54252d8c8c59054849b8f61b5.
//
// Solidity: event SubmitRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingContract *CnStakingContractFilterer) WatchSubmitRequest(opts *bind.WatchOpts, sink chan<- *CnStakingContractSubmitRequest, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "SubmitRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractSubmitRequest)
				if err := _CnStakingContract.contract.UnpackLog(event, "SubmitRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmitRequest is a log parse operation binding the contract event 0xdd9ce6d431d4ac3e8bea81bc2d7760b97d30c4e54252d8c8c59054849b8f61b5.
//
// Solidity: event SubmitRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingContract *CnStakingContractFilterer) ParseSubmitRequest(log types.Log) (*CnStakingContractSubmitRequest, error) {
	event := new(CnStakingContractSubmitRequest)
	if err := _CnStakingContract.contract.UnpackLog(event, "SubmitRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractUpdateRequirementIterator is returned from FilterUpdateRequirement and is used to iterate over the raw logs and unpacked data for UpdateRequirement events raised by the CnStakingContract contract.
type CnStakingContractUpdateRequirementIterator struct {
	Event *CnStakingContractUpdateRequirement // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractUpdateRequirementIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractUpdateRequirement)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractUpdateRequirement)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractUpdateRequirementIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractUpdateRequirementIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractUpdateRequirement represents a UpdateRequirement event raised by the CnStakingContract contract.
type CnStakingContractUpdateRequirement struct {
	Requirement *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequirement is a free log retrieval operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: event UpdateRequirement(uint256 requirement)
func (_CnStakingContract *CnStakingContractFilterer) FilterUpdateRequirement(opts *bind.FilterOpts) (*CnStakingContractUpdateRequirementIterator, error) {

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "UpdateRequirement")
	if err != nil {
		return nil, err
	}
	return &CnStakingContractUpdateRequirementIterator{contract: _CnStakingContract.contract, event: "UpdateRequirement", logs: logs, sub: sub}, nil
}

// WatchUpdateRequirement is a free log subscription operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: event UpdateRequirement(uint256 requirement)
func (_CnStakingContract *CnStakingContractFilterer) WatchUpdateRequirement(opts *bind.WatchOpts, sink chan<- *CnStakingContractUpdateRequirement) (event.Subscription, error) {

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "UpdateRequirement")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractUpdateRequirement)
				if err := _CnStakingContract.contract.UnpackLog(event, "UpdateRequirement", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequirement is a log parse operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: event UpdateRequirement(uint256 requirement)
func (_CnStakingContract *CnStakingContractFilterer) ParseUpdateRequirement(log types.Log) (*CnStakingContractUpdateRequirement, error) {
	event := new(CnStakingContractUpdateRequirement)
	if err := _CnStakingContract.contract.UnpackLog(event, "UpdateRequirement", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractUpdateRewardAddressIterator is returned from FilterUpdateRewardAddress and is used to iterate over the raw logs and unpacked data for UpdateRewardAddress events raised by the CnStakingContract contract.
type CnStakingContractUpdateRewardAddressIterator struct {
	Event *CnStakingContractUpdateRewardAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractUpdateRewardAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractUpdateRewardAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractUpdateRewardAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractUpdateRewardAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractUpdateRewardAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractUpdateRewardAddress represents a UpdateRewardAddress event raised by the CnStakingContract contract.
type CnStakingContractUpdateRewardAddress struct {
	RewardAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterUpdateRewardAddress is a free log retrieval operation binding the contract event 0xbe1849831e6775a2022006aeebcc00f70d10bc4202c8187e215ad9e9911f2b06.
//
// Solidity: event UpdateRewardAddress(address rewardAddress)
func (_CnStakingContract *CnStakingContractFilterer) FilterUpdateRewardAddress(opts *bind.FilterOpts) (*CnStakingContractUpdateRewardAddressIterator, error) {

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "UpdateRewardAddress")
	if err != nil {
		return nil, err
	}
	return &CnStakingContractUpdateRewardAddressIterator{contract: _CnStakingContract.contract, event: "UpdateRewardAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateRewardAddress is a free log subscription operation binding the contract event 0xbe1849831e6775a2022006aeebcc00f70d10bc4202c8187e215ad9e9911f2b06.
//
// Solidity: event UpdateRewardAddress(address rewardAddress)
func (_CnStakingContract *CnStakingContractFilterer) WatchUpdateRewardAddress(opts *bind.WatchOpts, sink chan<- *CnStakingContractUpdateRewardAddress) (event.Subscription, error) {

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "UpdateRewardAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractUpdateRewardAddress)
				if err := _CnStakingContract.contract.UnpackLog(event, "UpdateRewardAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRewardAddress is a log parse operation binding the contract event 0xbe1849831e6775a2022006aeebcc00f70d10bc4202c8187e215ad9e9911f2b06.
//
// Solidity: event UpdateRewardAddress(address rewardAddress)
func (_CnStakingContract *CnStakingContractFilterer) ParseUpdateRewardAddress(log types.Log) (*CnStakingContractUpdateRewardAddress, error) {
	event := new(CnStakingContractUpdateRewardAddress)
	if err := _CnStakingContract.contract.UnpackLog(event, "UpdateRewardAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractWithdrawApprovedStakingIterator is returned from FilterWithdrawApprovedStaking and is used to iterate over the raw logs and unpacked data for WithdrawApprovedStaking events raised by the CnStakingContract contract.
type CnStakingContractWithdrawApprovedStakingIterator struct {
	Event *CnStakingContractWithdrawApprovedStaking // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractWithdrawApprovedStakingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractWithdrawApprovedStaking)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractWithdrawApprovedStaking)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractWithdrawApprovedStakingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractWithdrawApprovedStakingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractWithdrawApprovedStaking represents a WithdrawApprovedStaking event raised by the CnStakingContract contract.
type CnStakingContractWithdrawApprovedStaking struct {
	ApprovedWithdrawalId *big.Int
	To                   common.Address
	Value                *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterWithdrawApprovedStaking is a free log retrieval operation binding the contract event 0x7a2d48d1df1249429730a253e5713a7d7a2024913de2fbccafdf36efdd32bf05.
//
// Solidity: event WithdrawApprovedStaking(uint256 approvedWithdrawalId, address to, uint256 value)
func (_CnStakingContract *CnStakingContractFilterer) FilterWithdrawApprovedStaking(opts *bind.FilterOpts) (*CnStakingContractWithdrawApprovedStakingIterator, error) {

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "WithdrawApprovedStaking")
	if err != nil {
		return nil, err
	}
	return &CnStakingContractWithdrawApprovedStakingIterator{contract: _CnStakingContract.contract, event: "WithdrawApprovedStaking", logs: logs, sub: sub}, nil
}

// WatchWithdrawApprovedStaking is a free log subscription operation binding the contract event 0x7a2d48d1df1249429730a253e5713a7d7a2024913de2fbccafdf36efdd32bf05.
//
// Solidity: event WithdrawApprovedStaking(uint256 approvedWithdrawalId, address to, uint256 value)
func (_CnStakingContract *CnStakingContractFilterer) WatchWithdrawApprovedStaking(opts *bind.WatchOpts, sink chan<- *CnStakingContractWithdrawApprovedStaking) (event.Subscription, error) {

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "WithdrawApprovedStaking")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractWithdrawApprovedStaking)
				if err := _CnStakingContract.contract.UnpackLog(event, "WithdrawApprovedStaking", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawApprovedStaking is a log parse operation binding the contract event 0x7a2d48d1df1249429730a253e5713a7d7a2024913de2fbccafdf36efdd32bf05.
//
// Solidity: event WithdrawApprovedStaking(uint256 approvedWithdrawalId, address to, uint256 value)
func (_CnStakingContract *CnStakingContractFilterer) ParseWithdrawApprovedStaking(log types.Log) (*CnStakingContractWithdrawApprovedStaking, error) {
	event := new(CnStakingContractWithdrawApprovedStaking)
	if err := _CnStakingContract.contract.UnpackLog(event, "WithdrawApprovedStaking", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractWithdrawLockupStakingIterator is returned from FilterWithdrawLockupStaking and is used to iterate over the raw logs and unpacked data for WithdrawLockupStaking events raised by the CnStakingContract contract.
type CnStakingContractWithdrawLockupStakingIterator struct {
	Event *CnStakingContractWithdrawLockupStaking // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingContractWithdrawLockupStakingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingContractWithdrawLockupStaking)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingContractWithdrawLockupStaking)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingContractWithdrawLockupStakingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingContractWithdrawLockupStakingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingContractWithdrawLockupStaking represents a WithdrawLockupStaking event raised by the CnStakingContract contract.
type CnStakingContractWithdrawLockupStaking struct {
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWithdrawLockupStaking is a free log retrieval operation binding the contract event 0x2d9d65e4fcab96e158761a8d3cc0bd7fd76951ab5574667b07190da171777470.
//
// Solidity: event WithdrawLockupStaking(address indexed to, uint256 value)
func (_CnStakingContract *CnStakingContractFilterer) FilterWithdrawLockupStaking(opts *bind.FilterOpts, to []common.Address) (*CnStakingContractWithdrawLockupStakingIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingContract.contract.FilterLogs(opts, "WithdrawLockupStaking", toRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingContractWithdrawLockupStakingIterator{contract: _CnStakingContract.contract, event: "WithdrawLockupStaking", logs: logs, sub: sub}, nil
}

// WatchWithdrawLockupStaking is a free log subscription operation binding the contract event 0x2d9d65e4fcab96e158761a8d3cc0bd7fd76951ab5574667b07190da171777470.
//
// Solidity: event WithdrawLockupStaking(address indexed to, uint256 value)
func (_CnStakingContract *CnStakingContractFilterer) WatchWithdrawLockupStaking(opts *bind.WatchOpts, sink chan<- *CnStakingContractWithdrawLockupStaking, to []common.Address) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingContract.contract.WatchLogs(opts, "WithdrawLockupStaking", toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingContractWithdrawLockupStaking)
				if err := _CnStakingContract.contract.UnpackLog(event, "WithdrawLockupStaking", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawLockupStaking is a log parse operation binding the contract event 0x2d9d65e4fcab96e158761a8d3cc0bd7fd76951ab5574667b07190da171777470.
//
// Solidity: event WithdrawLockupStaking(address indexed to, uint256 value)
func (_CnStakingContract *CnStakingContractFilterer) ParseWithdrawLockupStaking(log types.Log) (*CnStakingContractWithdrawLockupStaking, error) {
	event := new(CnStakingContractWithdrawLockupStaking)
	if err := _CnStakingContract.contract.UnpackLog(event, "WithdrawLockupStaking", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingContractInterfaceMetaData contains all meta data concerning the CnStakingContractInterface contract.
var CnStakingContractInterfaceMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"nodeId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"392e53cd": "isInitialized()",
		"139d7fed": "nodeId()",
		"8cf57cb9": "rewardAddress()",
	},
}

// CnStakingContractInterfaceABI is the input ABI used to generate the binding from.
// Deprecated: Use CnStakingContractInterfaceMetaData.ABI instead.
var CnStakingContractInterfaceABI = CnStakingContractInterfaceMetaData.ABI

// CnStakingContractInterfaceBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const CnStakingContractInterfaceBinRuntime = ``

// Deprecated: Use CnStakingContractInterfaceMetaData.Sigs instead.
// CnStakingContractInterfaceFuncSigs maps the 4-byte function signature to its string representation.
var CnStakingContractInterfaceFuncSigs = CnStakingContractInterfaceMetaData.Sigs

// CnStakingContractInterface is an auto generated Go binding around a Kaia contract.
type CnStakingContractInterface struct {
	CnStakingContractInterfaceCaller     // Read-only binding to the contract
	CnStakingContractInterfaceTransactor // Write-only binding to the contract
	CnStakingContractInterfaceFilterer   // Log filterer for contract events
}

// CnStakingContractInterfaceCaller is an auto generated read-only Go binding around a Kaia contract.
type CnStakingContractInterfaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CnStakingContractInterfaceTransactor is an auto generated write-only Go binding around a Kaia contract.
type CnStakingContractInterfaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CnStakingContractInterfaceFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type CnStakingContractInterfaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CnStakingContractInterfaceSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type CnStakingContractInterfaceSession struct {
	Contract     *CnStakingContractInterface // Generic contract binding to set the session for
	CallOpts     bind.CallOpts               // Call options to use throughout this session
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// CnStakingContractInterfaceCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type CnStakingContractInterfaceCallerSession struct {
	Contract *CnStakingContractInterfaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                     // Call options to use throughout this session
}

// CnStakingContractInterfaceTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type CnStakingContractInterfaceTransactorSession struct {
	Contract     *CnStakingContractInterfaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                     // Transaction auth options to use throughout this session
}

// CnStakingContractInterfaceRaw is an auto generated low-level Go binding around a Kaia contract.
type CnStakingContractInterfaceRaw struct {
	Contract *CnStakingContractInterface // Generic contract binding to access the raw methods on
}

// CnStakingContractInterfaceCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type CnStakingContractInterfaceCallerRaw struct {
	Contract *CnStakingContractInterfaceCaller // Generic read-only contract binding to access the raw methods on
}

// CnStakingContractInterfaceTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type CnStakingContractInterfaceTransactorRaw struct {
	Contract *CnStakingContractInterfaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCnStakingContractInterface creates a new instance of CnStakingContractInterface, bound to a specific deployed contract.
func NewCnStakingContractInterface(address common.Address, backend bind.ContractBackend) (*CnStakingContractInterface, error) {
	contract, err := bindCnStakingContractInterface(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CnStakingContractInterface{CnStakingContractInterfaceCaller: CnStakingContractInterfaceCaller{contract: contract}, CnStakingContractInterfaceTransactor: CnStakingContractInterfaceTransactor{contract: contract}, CnStakingContractInterfaceFilterer: CnStakingContractInterfaceFilterer{contract: contract}}, nil
}

// NewCnStakingContractInterfaceCaller creates a new read-only instance of CnStakingContractInterface, bound to a specific deployed contract.
func NewCnStakingContractInterfaceCaller(address common.Address, caller bind.ContractCaller) (*CnStakingContractInterfaceCaller, error) {
	contract, err := bindCnStakingContractInterface(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CnStakingContractInterfaceCaller{contract: contract}, nil
}

// NewCnStakingContractInterfaceTransactor creates a new write-only instance of CnStakingContractInterface, bound to a specific deployed contract.
func NewCnStakingContractInterfaceTransactor(address common.Address, transactor bind.ContractTransactor) (*CnStakingContractInterfaceTransactor, error) {
	contract, err := bindCnStakingContractInterface(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CnStakingContractInterfaceTransactor{contract: contract}, nil
}

// NewCnStakingContractInterfaceFilterer creates a new log filterer instance of CnStakingContractInterface, bound to a specific deployed contract.
func NewCnStakingContractInterfaceFilterer(address common.Address, filterer bind.ContractFilterer) (*CnStakingContractInterfaceFilterer, error) {
	contract, err := bindCnStakingContractInterface(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CnStakingContractInterfaceFilterer{contract: contract}, nil
}

// bindCnStakingContractInterface binds a generic wrapper to an already deployed contract.
func bindCnStakingContractInterface(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CnStakingContractInterfaceMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CnStakingContractInterface *CnStakingContractInterfaceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CnStakingContractInterface.Contract.CnStakingContractInterfaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CnStakingContractInterface *CnStakingContractInterfaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingContractInterface.Contract.CnStakingContractInterfaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CnStakingContractInterface *CnStakingContractInterfaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CnStakingContractInterface.Contract.CnStakingContractInterfaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CnStakingContractInterface *CnStakingContractInterfaceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CnStakingContractInterface.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CnStakingContractInterface *CnStakingContractInterfaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingContractInterface.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CnStakingContractInterface *CnStakingContractInterfaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CnStakingContractInterface.Contract.contract.Transact(opts, method, params...)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_CnStakingContractInterface *CnStakingContractInterfaceCaller) IsInitialized(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CnStakingContractInterface.contract.Call(opts, &out, "isInitialized")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_CnStakingContractInterface *CnStakingContractInterfaceSession) IsInitialized() (bool, error) {
	return _CnStakingContractInterface.Contract.IsInitialized(&_CnStakingContractInterface.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_CnStakingContractInterface *CnStakingContractInterfaceCallerSession) IsInitialized() (bool, error) {
	return _CnStakingContractInterface.Contract.IsInitialized(&_CnStakingContractInterface.CallOpts)
}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_CnStakingContractInterface *CnStakingContractInterfaceCaller) NodeId(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingContractInterface.contract.Call(opts, &out, "nodeId")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_CnStakingContractInterface *CnStakingContractInterfaceSession) NodeId() (common.Address, error) {
	return _CnStakingContractInterface.Contract.NodeId(&_CnStakingContractInterface.CallOpts)
}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_CnStakingContractInterface *CnStakingContractInterfaceCallerSession) NodeId() (common.Address, error) {
	return _CnStakingContractInterface.Contract.NodeId(&_CnStakingContractInterface.CallOpts)
}

// RewardAddress is a free data retrieval call binding the contract method 0x8cf57cb9.
//
// Solidity: function rewardAddress() view returns(address)
func (_CnStakingContractInterface *CnStakingContractInterfaceCaller) RewardAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingContractInterface.contract.Call(opts, &out, "rewardAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RewardAddress is a free data retrieval call binding the contract method 0x8cf57cb9.
//
// Solidity: function rewardAddress() view returns(address)
func (_CnStakingContractInterface *CnStakingContractInterfaceSession) RewardAddress() (common.Address, error) {
	return _CnStakingContractInterface.Contract.RewardAddress(&_CnStakingContractInterface.CallOpts)
}

// RewardAddress is a free data retrieval call binding the contract method 0x8cf57cb9.
//
// Solidity: function rewardAddress() view returns(address)
func (_CnStakingContractInterface *CnStakingContractInterfaceCallerSession) RewardAddress() (common.Address, error) {
	return _CnStakingContractInterface.Contract.RewardAddress(&_CnStakingContractInterface.CallOpts)
}

// KirContractInterfaceMetaData contains all meta data concerning the KirContractInterface contract.
var KirContractInterfaceMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"getKirVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"44426346": "getKirVersion()",
	},
}

// KirContractInterfaceABI is the input ABI used to generate the binding from.
// Deprecated: Use KirContractInterfaceMetaData.ABI instead.
var KirContractInterfaceABI = KirContractInterfaceMetaData.ABI

// KirContractInterfaceBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const KirContractInterfaceBinRuntime = ``

// Deprecated: Use KirContractInterfaceMetaData.Sigs instead.
// KirContractInterfaceFuncSigs maps the 4-byte function signature to its string representation.
var KirContractInterfaceFuncSigs = KirContractInterfaceMetaData.Sigs

// KirContractInterface is an auto generated Go binding around a Kaia contract.
type KirContractInterface struct {
	KirContractInterfaceCaller     // Read-only binding to the contract
	KirContractInterfaceTransactor // Write-only binding to the contract
	KirContractInterfaceFilterer   // Log filterer for contract events
}

// KirContractInterfaceCaller is an auto generated read-only Go binding around a Kaia contract.
type KirContractInterfaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KirContractInterfaceTransactor is an auto generated write-only Go binding around a Kaia contract.
type KirContractInterfaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KirContractInterfaceFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type KirContractInterfaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KirContractInterfaceSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type KirContractInterfaceSession struct {
	Contract     *KirContractInterface // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// KirContractInterfaceCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type KirContractInterfaceCallerSession struct {
	Contract *KirContractInterfaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// KirContractInterfaceTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type KirContractInterfaceTransactorSession struct {
	Contract     *KirContractInterfaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// KirContractInterfaceRaw is an auto generated low-level Go binding around a Kaia contract.
type KirContractInterfaceRaw struct {
	Contract *KirContractInterface // Generic contract binding to access the raw methods on
}

// KirContractInterfaceCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type KirContractInterfaceCallerRaw struct {
	Contract *KirContractInterfaceCaller // Generic read-only contract binding to access the raw methods on
}

// KirContractInterfaceTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type KirContractInterfaceTransactorRaw struct {
	Contract *KirContractInterfaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKirContractInterface creates a new instance of KirContractInterface, bound to a specific deployed contract.
func NewKirContractInterface(address common.Address, backend bind.ContractBackend) (*KirContractInterface, error) {
	contract, err := bindKirContractInterface(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &KirContractInterface{KirContractInterfaceCaller: KirContractInterfaceCaller{contract: contract}, KirContractInterfaceTransactor: KirContractInterfaceTransactor{contract: contract}, KirContractInterfaceFilterer: KirContractInterfaceFilterer{contract: contract}}, nil
}

// NewKirContractInterfaceCaller creates a new read-only instance of KirContractInterface, bound to a specific deployed contract.
func NewKirContractInterfaceCaller(address common.Address, caller bind.ContractCaller) (*KirContractInterfaceCaller, error) {
	contract, err := bindKirContractInterface(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KirContractInterfaceCaller{contract: contract}, nil
}

// NewKirContractInterfaceTransactor creates a new write-only instance of KirContractInterface, bound to a specific deployed contract.
func NewKirContractInterfaceTransactor(address common.Address, transactor bind.ContractTransactor) (*KirContractInterfaceTransactor, error) {
	contract, err := bindKirContractInterface(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KirContractInterfaceTransactor{contract: contract}, nil
}

// NewKirContractInterfaceFilterer creates a new log filterer instance of KirContractInterface, bound to a specific deployed contract.
func NewKirContractInterfaceFilterer(address common.Address, filterer bind.ContractFilterer) (*KirContractInterfaceFilterer, error) {
	contract, err := bindKirContractInterface(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KirContractInterfaceFilterer{contract: contract}, nil
}

// bindKirContractInterface binds a generic wrapper to an already deployed contract.
func bindKirContractInterface(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := KirContractInterfaceMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KirContractInterface *KirContractInterfaceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KirContractInterface.Contract.KirContractInterfaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KirContractInterface *KirContractInterfaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KirContractInterface.Contract.KirContractInterfaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KirContractInterface *KirContractInterfaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KirContractInterface.Contract.KirContractInterfaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KirContractInterface *KirContractInterfaceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KirContractInterface.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KirContractInterface *KirContractInterfaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KirContractInterface.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KirContractInterface *KirContractInterfaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KirContractInterface.Contract.contract.Transact(opts, method, params...)
}

// GetKirVersion is a free data retrieval call binding the contract method 0x44426346.
//
// Solidity: function getKirVersion() pure returns(uint256)
func (_KirContractInterface *KirContractInterfaceCaller) GetKirVersion(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _KirContractInterface.contract.Call(opts, &out, "getKirVersion")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetKirVersion is a free data retrieval call binding the contract method 0x44426346.
//
// Solidity: function getKirVersion() pure returns(uint256)
func (_KirContractInterface *KirContractInterfaceSession) GetKirVersion() (*big.Int, error) {
	return _KirContractInterface.Contract.GetKirVersion(&_KirContractInterface.CallOpts)
}

// GetKirVersion is a free data retrieval call binding the contract method 0x44426346.
//
// Solidity: function getKirVersion() pure returns(uint256)
func (_KirContractInterface *KirContractInterfaceCallerSession) GetKirVersion() (*big.Int, error) {
	return _KirContractInterface.Contract.GetKirVersion(&_KirContractInterface.CallOpts)
}

// PocContractInterfaceMetaData contains all meta data concerning the PocContractInterface contract.
var PocContractInterfaceMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"getPocVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"0f610072": "getPocVersion()",
	},
}

// PocContractInterfaceABI is the input ABI used to generate the binding from.
// Deprecated: Use PocContractInterfaceMetaData.ABI instead.
var PocContractInterfaceABI = PocContractInterfaceMetaData.ABI

// PocContractInterfaceBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const PocContractInterfaceBinRuntime = ``

// Deprecated: Use PocContractInterfaceMetaData.Sigs instead.
// PocContractInterfaceFuncSigs maps the 4-byte function signature to its string representation.
var PocContractInterfaceFuncSigs = PocContractInterfaceMetaData.Sigs

// PocContractInterface is an auto generated Go binding around a Kaia contract.
type PocContractInterface struct {
	PocContractInterfaceCaller     // Read-only binding to the contract
	PocContractInterfaceTransactor // Write-only binding to the contract
	PocContractInterfaceFilterer   // Log filterer for contract events
}

// PocContractInterfaceCaller is an auto generated read-only Go binding around a Kaia contract.
type PocContractInterfaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PocContractInterfaceTransactor is an auto generated write-only Go binding around a Kaia contract.
type PocContractInterfaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PocContractInterfaceFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type PocContractInterfaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PocContractInterfaceSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type PocContractInterfaceSession struct {
	Contract     *PocContractInterface // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// PocContractInterfaceCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type PocContractInterfaceCallerSession struct {
	Contract *PocContractInterfaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// PocContractInterfaceTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type PocContractInterfaceTransactorSession struct {
	Contract     *PocContractInterfaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// PocContractInterfaceRaw is an auto generated low-level Go binding around a Kaia contract.
type PocContractInterfaceRaw struct {
	Contract *PocContractInterface // Generic contract binding to access the raw methods on
}

// PocContractInterfaceCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type PocContractInterfaceCallerRaw struct {
	Contract *PocContractInterfaceCaller // Generic read-only contract binding to access the raw methods on
}

// PocContractInterfaceTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type PocContractInterfaceTransactorRaw struct {
	Contract *PocContractInterfaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPocContractInterface creates a new instance of PocContractInterface, bound to a specific deployed contract.
func NewPocContractInterface(address common.Address, backend bind.ContractBackend) (*PocContractInterface, error) {
	contract, err := bindPocContractInterface(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PocContractInterface{PocContractInterfaceCaller: PocContractInterfaceCaller{contract: contract}, PocContractInterfaceTransactor: PocContractInterfaceTransactor{contract: contract}, PocContractInterfaceFilterer: PocContractInterfaceFilterer{contract: contract}}, nil
}

// NewPocContractInterfaceCaller creates a new read-only instance of PocContractInterface, bound to a specific deployed contract.
func NewPocContractInterfaceCaller(address common.Address, caller bind.ContractCaller) (*PocContractInterfaceCaller, error) {
	contract, err := bindPocContractInterface(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PocContractInterfaceCaller{contract: contract}, nil
}

// NewPocContractInterfaceTransactor creates a new write-only instance of PocContractInterface, bound to a specific deployed contract.
func NewPocContractInterfaceTransactor(address common.Address, transactor bind.ContractTransactor) (*PocContractInterfaceTransactor, error) {
	contract, err := bindPocContractInterface(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PocContractInterfaceTransactor{contract: contract}, nil
}

// NewPocContractInterfaceFilterer creates a new log filterer instance of PocContractInterface, bound to a specific deployed contract.
func NewPocContractInterfaceFilterer(address common.Address, filterer bind.ContractFilterer) (*PocContractInterfaceFilterer, error) {
	contract, err := bindPocContractInterface(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PocContractInterfaceFilterer{contract: contract}, nil
}

// bindPocContractInterface binds a generic wrapper to an already deployed contract.
func bindPocContractInterface(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PocContractInterfaceMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PocContractInterface *PocContractInterfaceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PocContractInterface.Contract.PocContractInterfaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PocContractInterface *PocContractInterfaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PocContractInterface.Contract.PocContractInterfaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PocContractInterface *PocContractInterfaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PocContractInterface.Contract.PocContractInterfaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PocContractInterface *PocContractInterfaceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PocContractInterface.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PocContractInterface *PocContractInterfaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PocContractInterface.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PocContractInterface *PocContractInterfaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PocContractInterface.Contract.contract.Transact(opts, method, params...)
}

// GetPocVersion is a free data retrieval call binding the contract method 0x0f610072.
//
// Solidity: function getPocVersion() pure returns(uint256)
func (_PocContractInterface *PocContractInterfaceCaller) GetPocVersion(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PocContractInterface.contract.Call(opts, &out, "getPocVersion")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPocVersion is a free data retrieval call binding the contract method 0x0f610072.
//
// Solidity: function getPocVersion() pure returns(uint256)
func (_PocContractInterface *PocContractInterfaceSession) GetPocVersion() (*big.Int, error) {
	return _PocContractInterface.Contract.GetPocVersion(&_PocContractInterface.CallOpts)
}

// GetPocVersion is a free data retrieval call binding the contract method 0x0f610072.
//
// Solidity: function getPocVersion() pure returns(uint256)
func (_PocContractInterface *PocContractInterfaceCallerSession) GetPocVersion() (*big.Int, error) {
	return _PocContractInterface.Contract.GetPocVersion(&_PocContractInterface.CallOpts)
}

// SafeMathMetaData contains all meta data concerning the SafeMath contract.
var SafeMathMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820388c28e29beee4317abb85f3d5a70ae216d53e4cb6a8be4352c79fdd7621fe530029",
}

// SafeMathABI is the input ABI used to generate the binding from.
// Deprecated: Use SafeMathMetaData.ABI instead.
var SafeMathABI = SafeMathMetaData.ABI

// SafeMathBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const SafeMathBinRuntime = `73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820388c28e29beee4317abb85f3d5a70ae216d53e4cb6a8be4352c79fdd7621fe530029`

// SafeMathBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SafeMathMetaData.Bin instead.
var SafeMathBin = SafeMathMetaData.Bin

// DeploySafeMath deploys a new Kaia contract, binding an instance of SafeMath to it.
func DeploySafeMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SafeMath, error) {
	parsed, err := SafeMathMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SafeMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// SafeMath is an auto generated Go binding around a Kaia contract.
type SafeMath struct {
	SafeMathCaller     // Read-only binding to the contract
	SafeMathTransactor // Write-only binding to the contract
	SafeMathFilterer   // Log filterer for contract events
}

// SafeMathCaller is an auto generated read-only Go binding around a Kaia contract.
type SafeMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathTransactor is an auto generated write-only Go binding around a Kaia contract.
type SafeMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type SafeMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type SafeMathSession struct {
	Contract     *SafeMath         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SafeMathCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type SafeMathCallerSession struct {
	Contract *SafeMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// SafeMathTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type SafeMathTransactorSession struct {
	Contract     *SafeMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SafeMathRaw is an auto generated low-level Go binding around a Kaia contract.
type SafeMathRaw struct {
	Contract *SafeMath // Generic contract binding to access the raw methods on
}

// SafeMathCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type SafeMathCallerRaw struct {
	Contract *SafeMathCaller // Generic read-only contract binding to access the raw methods on
}

// SafeMathTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type SafeMathTransactorRaw struct {
	Contract *SafeMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSafeMath creates a new instance of SafeMath, bound to a specific deployed contract.
func NewSafeMath(address common.Address, backend bind.ContractBackend) (*SafeMath, error) {
	contract, err := bindSafeMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// NewSafeMathCaller creates a new read-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathCaller(address common.Address, caller bind.ContractCaller) (*SafeMathCaller, error) {
	contract, err := bindSafeMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathCaller{contract: contract}, nil
}

// NewSafeMathTransactor creates a new write-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathTransactor(address common.Address, transactor bind.ContractTransactor) (*SafeMathTransactor, error) {
	contract, err := bindSafeMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathTransactor{contract: contract}, nil
}

// NewSafeMathFilterer creates a new log filterer instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathFilterer(address common.Address, filterer bind.ContractFilterer) (*SafeMathFilterer, error) {
	contract, err := bindSafeMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SafeMathFilterer{contract: contract}, nil
}

// bindSafeMath binds a generic wrapper to an already deployed contract.
func bindSafeMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SafeMathMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.SafeMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transact(opts, method, params...)
}
