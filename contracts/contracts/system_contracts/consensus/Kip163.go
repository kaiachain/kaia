// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package consensus

import (
	"errors"
	"math/big"
	"strings"

	"github.com/kaiachain/kaia"
	"github.com/kaiachain/kaia/accounts/abi"
	"github.com/kaiachain/kaia/accounts/abi/bind"
	"github.com/kaiachain/kaia/blockchain/types"
	"github.com/kaiachain/kaia/common"
	"github.com/kaiachain/kaia/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = kaia.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IPublicDelegationPDConstructorArgs is an auto generated low-level Go binding around an user-defined struct.
type IPublicDelegationPDConstructorArgs struct {
	Owner          common.Address
	CommissionTo   common.Address
	CommissionRate *big.Int
	GcName         string
}

// AccessControlMetaData contains all meta data concerning the AccessControl contract.
var AccessControlMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"a217fddf": "DEFAULT_ADMIN_ROLE()",
		"248a9ca3": "getRoleAdmin(bytes32)",
		"2f2ff15d": "grantRole(bytes32,address)",
		"91d14854": "hasRole(bytes32,address)",
		"36568abe": "renounceRole(bytes32,address)",
		"d547741f": "revokeRole(bytes32,address)",
		"01ffc9a7": "supportsInterface(bytes4)",
	},
}

// AccessControlABI is the input ABI used to generate the binding from.
// Deprecated: Use AccessControlMetaData.ABI instead.
var AccessControlABI = AccessControlMetaData.ABI

// AccessControlBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const AccessControlBinRuntime = ``

// Deprecated: Use AccessControlMetaData.Sigs instead.
// AccessControlFuncSigs maps the 4-byte function signature to its string representation.
var AccessControlFuncSigs = AccessControlMetaData.Sigs

// AccessControl is an auto generated Go binding around a Kaia contract.
type AccessControl struct {
	AccessControlCaller     // Read-only binding to the contract
	AccessControlTransactor // Write-only binding to the contract
	AccessControlFilterer   // Log filterer for contract events
}

// AccessControlCaller is an auto generated read-only Go binding around a Kaia contract.
type AccessControlCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlTransactor is an auto generated write-only Go binding around a Kaia contract.
type AccessControlTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type AccessControlFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type AccessControlSession struct {
	Contract     *AccessControl    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AccessControlCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type AccessControlCallerSession struct {
	Contract *AccessControlCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// AccessControlTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type AccessControlTransactorSession struct {
	Contract     *AccessControlTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// AccessControlRaw is an auto generated low-level Go binding around a Kaia contract.
type AccessControlRaw struct {
	Contract *AccessControl // Generic contract binding to access the raw methods on
}

// AccessControlCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type AccessControlCallerRaw struct {
	Contract *AccessControlCaller // Generic read-only contract binding to access the raw methods on
}

// AccessControlTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type AccessControlTransactorRaw struct {
	Contract *AccessControlTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccessControl creates a new instance of AccessControl, bound to a specific deployed contract.
func NewAccessControl(address common.Address, backend bind.ContractBackend) (*AccessControl, error) {
	contract, err := bindAccessControl(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccessControl{AccessControlCaller: AccessControlCaller{contract: contract}, AccessControlTransactor: AccessControlTransactor{contract: contract}, AccessControlFilterer: AccessControlFilterer{contract: contract}}, nil
}

// NewAccessControlCaller creates a new read-only instance of AccessControl, bound to a specific deployed contract.
func NewAccessControlCaller(address common.Address, caller bind.ContractCaller) (*AccessControlCaller, error) {
	contract, err := bindAccessControl(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessControlCaller{contract: contract}, nil
}

// NewAccessControlTransactor creates a new write-only instance of AccessControl, bound to a specific deployed contract.
func NewAccessControlTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessControlTransactor, error) {
	contract, err := bindAccessControl(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessControlTransactor{contract: contract}, nil
}

// NewAccessControlFilterer creates a new log filterer instance of AccessControl, bound to a specific deployed contract.
func NewAccessControlFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessControlFilterer, error) {
	contract, err := bindAccessControl(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessControlFilterer{contract: contract}, nil
}

// bindAccessControl binds a generic wrapper to an already deployed contract.
func bindAccessControl(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AccessControlMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessControl *AccessControlRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccessControl.Contract.AccessControlCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessControl *AccessControlRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControl.Contract.AccessControlTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessControl *AccessControlRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessControl.Contract.AccessControlTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessControl *AccessControlCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccessControl.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessControl *AccessControlTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControl.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessControl *AccessControlTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessControl.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_AccessControl *AccessControlCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _AccessControl.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_AccessControl *AccessControlSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _AccessControl.Contract.DEFAULTADMINROLE(&_AccessControl.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_AccessControl *AccessControlCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _AccessControl.Contract.DEFAULTADMINROLE(&_AccessControl.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_AccessControl *AccessControlCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _AccessControl.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_AccessControl *AccessControlSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _AccessControl.Contract.GetRoleAdmin(&_AccessControl.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_AccessControl *AccessControlCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _AccessControl.Contract.GetRoleAdmin(&_AccessControl.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_AccessControl *AccessControlCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _AccessControl.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_AccessControl *AccessControlSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _AccessControl.Contract.HasRole(&_AccessControl.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_AccessControl *AccessControlCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _AccessControl.Contract.HasRole(&_AccessControl.CallOpts, role, account)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AccessControl *AccessControlCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _AccessControl.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AccessControl *AccessControlSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _AccessControl.Contract.SupportsInterface(&_AccessControl.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AccessControl *AccessControlCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _AccessControl.Contract.SupportsInterface(&_AccessControl.CallOpts, interfaceId)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_AccessControl *AccessControlTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _AccessControl.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_AccessControl *AccessControlSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _AccessControl.Contract.GrantRole(&_AccessControl.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_AccessControl *AccessControlTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _AccessControl.Contract.GrantRole(&_AccessControl.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_AccessControl *AccessControlTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _AccessControl.contract.Transact(opts, "renounceRole", role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_AccessControl *AccessControlSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _AccessControl.Contract.RenounceRole(&_AccessControl.TransactOpts, role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_AccessControl *AccessControlTransactorSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _AccessControl.Contract.RenounceRole(&_AccessControl.TransactOpts, role, callerConfirmation)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_AccessControl *AccessControlTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _AccessControl.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_AccessControl *AccessControlSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _AccessControl.Contract.RevokeRole(&_AccessControl.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_AccessControl *AccessControlTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _AccessControl.Contract.RevokeRole(&_AccessControl.TransactOpts, role, account)
}

// AccessControlRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the AccessControl contract.
type AccessControlRoleAdminChangedIterator struct {
	Event *AccessControlRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessControlRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessControlRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessControlRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessControlRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessControlRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessControlRoleAdminChanged represents a RoleAdminChanged event raised by the AccessControl contract.
type AccessControlRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_AccessControl *AccessControlFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*AccessControlRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _AccessControl.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &AccessControlRoleAdminChangedIterator{contract: _AccessControl.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_AccessControl *AccessControlFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *AccessControlRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _AccessControl.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessControlRoleAdminChanged)
				if err := _AccessControl.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_AccessControl *AccessControlFilterer) ParseRoleAdminChanged(log types.Log) (*AccessControlRoleAdminChanged, error) {
	event := new(AccessControlRoleAdminChanged)
	if err := _AccessControl.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccessControlRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the AccessControl contract.
type AccessControlRoleGrantedIterator struct {
	Event *AccessControlRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessControlRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessControlRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessControlRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessControlRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessControlRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessControlRoleGranted represents a RoleGranted event raised by the AccessControl contract.
type AccessControlRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_AccessControl *AccessControlFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*AccessControlRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _AccessControl.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &AccessControlRoleGrantedIterator{contract: _AccessControl.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_AccessControl *AccessControlFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *AccessControlRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _AccessControl.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessControlRoleGranted)
				if err := _AccessControl.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_AccessControl *AccessControlFilterer) ParseRoleGranted(log types.Log) (*AccessControlRoleGranted, error) {
	event := new(AccessControlRoleGranted)
	if err := _AccessControl.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccessControlRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the AccessControl contract.
type AccessControlRoleRevokedIterator struct {
	Event *AccessControlRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessControlRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessControlRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessControlRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessControlRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessControlRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessControlRoleRevoked represents a RoleRevoked event raised by the AccessControl contract.
type AccessControlRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_AccessControl *AccessControlFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*AccessControlRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _AccessControl.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &AccessControlRoleRevokedIterator{contract: _AccessControl.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_AccessControl *AccessControlFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *AccessControlRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _AccessControl.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessControlRoleRevoked)
				if err := _AccessControl.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_AccessControl *AccessControlFilterer) ParseRoleRevoked(log types.Log) (*AccessControlRoleRevoked, error) {
	event := new(AccessControlRoleRevoked)
	if err := _AccessControl.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccessControlEnumerableMetaData contains all meta data concerning the AccessControlEnumerable contract.
var AccessControlEnumerableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"a217fddf": "DEFAULT_ADMIN_ROLE()",
		"248a9ca3": "getRoleAdmin(bytes32)",
		"9010d07c": "getRoleMember(bytes32,uint256)",
		"ca15c873": "getRoleMemberCount(bytes32)",
		"2f2ff15d": "grantRole(bytes32,address)",
		"91d14854": "hasRole(bytes32,address)",
		"36568abe": "renounceRole(bytes32,address)",
		"d547741f": "revokeRole(bytes32,address)",
		"01ffc9a7": "supportsInterface(bytes4)",
	},
}

// AccessControlEnumerableABI is the input ABI used to generate the binding from.
// Deprecated: Use AccessControlEnumerableMetaData.ABI instead.
var AccessControlEnumerableABI = AccessControlEnumerableMetaData.ABI

// AccessControlEnumerableBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const AccessControlEnumerableBinRuntime = ``

// Deprecated: Use AccessControlEnumerableMetaData.Sigs instead.
// AccessControlEnumerableFuncSigs maps the 4-byte function signature to its string representation.
var AccessControlEnumerableFuncSigs = AccessControlEnumerableMetaData.Sigs

// AccessControlEnumerable is an auto generated Go binding around a Kaia contract.
type AccessControlEnumerable struct {
	AccessControlEnumerableCaller     // Read-only binding to the contract
	AccessControlEnumerableTransactor // Write-only binding to the contract
	AccessControlEnumerableFilterer   // Log filterer for contract events
}

// AccessControlEnumerableCaller is an auto generated read-only Go binding around a Kaia contract.
type AccessControlEnumerableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlEnumerableTransactor is an auto generated write-only Go binding around a Kaia contract.
type AccessControlEnumerableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlEnumerableFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type AccessControlEnumerableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessControlEnumerableSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type AccessControlEnumerableSession struct {
	Contract     *AccessControlEnumerable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// AccessControlEnumerableCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type AccessControlEnumerableCallerSession struct {
	Contract *AccessControlEnumerableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// AccessControlEnumerableTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type AccessControlEnumerableTransactorSession struct {
	Contract     *AccessControlEnumerableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// AccessControlEnumerableRaw is an auto generated low-level Go binding around a Kaia contract.
type AccessControlEnumerableRaw struct {
	Contract *AccessControlEnumerable // Generic contract binding to access the raw methods on
}

// AccessControlEnumerableCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type AccessControlEnumerableCallerRaw struct {
	Contract *AccessControlEnumerableCaller // Generic read-only contract binding to access the raw methods on
}

// AccessControlEnumerableTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type AccessControlEnumerableTransactorRaw struct {
	Contract *AccessControlEnumerableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccessControlEnumerable creates a new instance of AccessControlEnumerable, bound to a specific deployed contract.
func NewAccessControlEnumerable(address common.Address, backend bind.ContractBackend) (*AccessControlEnumerable, error) {
	contract, err := bindAccessControlEnumerable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccessControlEnumerable{AccessControlEnumerableCaller: AccessControlEnumerableCaller{contract: contract}, AccessControlEnumerableTransactor: AccessControlEnumerableTransactor{contract: contract}, AccessControlEnumerableFilterer: AccessControlEnumerableFilterer{contract: contract}}, nil
}

// NewAccessControlEnumerableCaller creates a new read-only instance of AccessControlEnumerable, bound to a specific deployed contract.
func NewAccessControlEnumerableCaller(address common.Address, caller bind.ContractCaller) (*AccessControlEnumerableCaller, error) {
	contract, err := bindAccessControlEnumerable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessControlEnumerableCaller{contract: contract}, nil
}

// NewAccessControlEnumerableTransactor creates a new write-only instance of AccessControlEnumerable, bound to a specific deployed contract.
func NewAccessControlEnumerableTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessControlEnumerableTransactor, error) {
	contract, err := bindAccessControlEnumerable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessControlEnumerableTransactor{contract: contract}, nil
}

// NewAccessControlEnumerableFilterer creates a new log filterer instance of AccessControlEnumerable, bound to a specific deployed contract.
func NewAccessControlEnumerableFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessControlEnumerableFilterer, error) {
	contract, err := bindAccessControlEnumerable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessControlEnumerableFilterer{contract: contract}, nil
}

// bindAccessControlEnumerable binds a generic wrapper to an already deployed contract.
func bindAccessControlEnumerable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AccessControlEnumerableMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessControlEnumerable *AccessControlEnumerableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccessControlEnumerable.Contract.AccessControlEnumerableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessControlEnumerable *AccessControlEnumerableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlEnumerable.Contract.AccessControlEnumerableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessControlEnumerable *AccessControlEnumerableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessControlEnumerable.Contract.AccessControlEnumerableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccessControlEnumerable *AccessControlEnumerableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AccessControlEnumerable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccessControlEnumerable *AccessControlEnumerableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessControlEnumerable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccessControlEnumerable *AccessControlEnumerableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccessControlEnumerable.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_AccessControlEnumerable *AccessControlEnumerableCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _AccessControlEnumerable.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_AccessControlEnumerable *AccessControlEnumerableSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _AccessControlEnumerable.Contract.DEFAULTADMINROLE(&_AccessControlEnumerable.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_AccessControlEnumerable *AccessControlEnumerableCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _AccessControlEnumerable.Contract.DEFAULTADMINROLE(&_AccessControlEnumerable.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_AccessControlEnumerable *AccessControlEnumerableCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _AccessControlEnumerable.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_AccessControlEnumerable *AccessControlEnumerableSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _AccessControlEnumerable.Contract.GetRoleAdmin(&_AccessControlEnumerable.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_AccessControlEnumerable *AccessControlEnumerableCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _AccessControlEnumerable.Contract.GetRoleAdmin(&_AccessControlEnumerable.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_AccessControlEnumerable *AccessControlEnumerableCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AccessControlEnumerable.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_AccessControlEnumerable *AccessControlEnumerableSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _AccessControlEnumerable.Contract.GetRoleMember(&_AccessControlEnumerable.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_AccessControlEnumerable *AccessControlEnumerableCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _AccessControlEnumerable.Contract.GetRoleMember(&_AccessControlEnumerable.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_AccessControlEnumerable *AccessControlEnumerableCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _AccessControlEnumerable.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_AccessControlEnumerable *AccessControlEnumerableSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _AccessControlEnumerable.Contract.GetRoleMemberCount(&_AccessControlEnumerable.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_AccessControlEnumerable *AccessControlEnumerableCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _AccessControlEnumerable.Contract.GetRoleMemberCount(&_AccessControlEnumerable.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_AccessControlEnumerable *AccessControlEnumerableCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _AccessControlEnumerable.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_AccessControlEnumerable *AccessControlEnumerableSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _AccessControlEnumerable.Contract.HasRole(&_AccessControlEnumerable.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_AccessControlEnumerable *AccessControlEnumerableCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _AccessControlEnumerable.Contract.HasRole(&_AccessControlEnumerable.CallOpts, role, account)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AccessControlEnumerable *AccessControlEnumerableCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _AccessControlEnumerable.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AccessControlEnumerable *AccessControlEnumerableSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _AccessControlEnumerable.Contract.SupportsInterface(&_AccessControlEnumerable.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AccessControlEnumerable *AccessControlEnumerableCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _AccessControlEnumerable.Contract.SupportsInterface(&_AccessControlEnumerable.CallOpts, interfaceId)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_AccessControlEnumerable *AccessControlEnumerableTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _AccessControlEnumerable.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_AccessControlEnumerable *AccessControlEnumerableSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _AccessControlEnumerable.Contract.GrantRole(&_AccessControlEnumerable.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_AccessControlEnumerable *AccessControlEnumerableTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _AccessControlEnumerable.Contract.GrantRole(&_AccessControlEnumerable.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_AccessControlEnumerable *AccessControlEnumerableTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _AccessControlEnumerable.contract.Transact(opts, "renounceRole", role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_AccessControlEnumerable *AccessControlEnumerableSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _AccessControlEnumerable.Contract.RenounceRole(&_AccessControlEnumerable.TransactOpts, role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_AccessControlEnumerable *AccessControlEnumerableTransactorSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _AccessControlEnumerable.Contract.RenounceRole(&_AccessControlEnumerable.TransactOpts, role, callerConfirmation)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_AccessControlEnumerable *AccessControlEnumerableTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _AccessControlEnumerable.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_AccessControlEnumerable *AccessControlEnumerableSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _AccessControlEnumerable.Contract.RevokeRole(&_AccessControlEnumerable.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_AccessControlEnumerable *AccessControlEnumerableTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _AccessControlEnumerable.Contract.RevokeRole(&_AccessControlEnumerable.TransactOpts, role, account)
}

// AccessControlEnumerableRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the AccessControlEnumerable contract.
type AccessControlEnumerableRoleAdminChangedIterator struct {
	Event *AccessControlEnumerableRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessControlEnumerableRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessControlEnumerableRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessControlEnumerableRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessControlEnumerableRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessControlEnumerableRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessControlEnumerableRoleAdminChanged represents a RoleAdminChanged event raised by the AccessControlEnumerable contract.
type AccessControlEnumerableRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_AccessControlEnumerable *AccessControlEnumerableFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*AccessControlEnumerableRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _AccessControlEnumerable.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &AccessControlEnumerableRoleAdminChangedIterator{contract: _AccessControlEnumerable.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_AccessControlEnumerable *AccessControlEnumerableFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *AccessControlEnumerableRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _AccessControlEnumerable.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessControlEnumerableRoleAdminChanged)
				if err := _AccessControlEnumerable.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_AccessControlEnumerable *AccessControlEnumerableFilterer) ParseRoleAdminChanged(log types.Log) (*AccessControlEnumerableRoleAdminChanged, error) {
	event := new(AccessControlEnumerableRoleAdminChanged)
	if err := _AccessControlEnumerable.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccessControlEnumerableRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the AccessControlEnumerable contract.
type AccessControlEnumerableRoleGrantedIterator struct {
	Event *AccessControlEnumerableRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessControlEnumerableRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessControlEnumerableRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessControlEnumerableRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessControlEnumerableRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessControlEnumerableRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessControlEnumerableRoleGranted represents a RoleGranted event raised by the AccessControlEnumerable contract.
type AccessControlEnumerableRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_AccessControlEnumerable *AccessControlEnumerableFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*AccessControlEnumerableRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _AccessControlEnumerable.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &AccessControlEnumerableRoleGrantedIterator{contract: _AccessControlEnumerable.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_AccessControlEnumerable *AccessControlEnumerableFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *AccessControlEnumerableRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _AccessControlEnumerable.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessControlEnumerableRoleGranted)
				if err := _AccessControlEnumerable.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_AccessControlEnumerable *AccessControlEnumerableFilterer) ParseRoleGranted(log types.Log) (*AccessControlEnumerableRoleGranted, error) {
	event := new(AccessControlEnumerableRoleGranted)
	if err := _AccessControlEnumerable.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccessControlEnumerableRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the AccessControlEnumerable contract.
type AccessControlEnumerableRoleRevokedIterator struct {
	Event *AccessControlEnumerableRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessControlEnumerableRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessControlEnumerableRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessControlEnumerableRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessControlEnumerableRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessControlEnumerableRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessControlEnumerableRoleRevoked represents a RoleRevoked event raised by the AccessControlEnumerable contract.
type AccessControlEnumerableRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_AccessControlEnumerable *AccessControlEnumerableFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*AccessControlEnumerableRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _AccessControlEnumerable.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &AccessControlEnumerableRoleRevokedIterator{contract: _AccessControlEnumerable.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_AccessControlEnumerable *AccessControlEnumerableFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *AccessControlEnumerableRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _AccessControlEnumerable.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessControlEnumerableRoleRevoked)
				if err := _AccessControlEnumerable.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_AccessControlEnumerable *AccessControlEnumerableFilterer) ParseRoleRevoked(log types.Log) (*AccessControlEnumerableRoleRevoked, error) {
	event := new(AccessControlEnumerableRoleRevoked)
	if err := _AccessControlEnumerable.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressMetaData contains all meta data concerning the Address contract.
var AddressMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"}]",
	Bin: "0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212209fbc8aa9b9dc658648b91a6dd768a349611759c4eaffc74f8b43a0a1ed9c007164736f6c63430008190033",
}

// AddressABI is the input ABI used to generate the binding from.
// Deprecated: Use AddressMetaData.ABI instead.
var AddressABI = AddressMetaData.ABI

// AddressBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const AddressBinRuntime = `730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212209fbc8aa9b9dc658648b91a6dd768a349611759c4eaffc74f8b43a0a1ed9c007164736f6c63430008190033`

// AddressBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AddressMetaData.Bin instead.
var AddressBin = AddressMetaData.Bin

// DeployAddress deploys a new Kaia contract, binding an instance of Address to it.
func DeployAddress(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Address, error) {
	parsed, err := AddressMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AddressBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// Address is an auto generated Go binding around a Kaia contract.
type Address struct {
	AddressCaller     // Read-only binding to the contract
	AddressTransactor // Write-only binding to the contract
	AddressFilterer   // Log filterer for contract events
}

// AddressCaller is an auto generated read-only Go binding around a Kaia contract.
type AddressCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressTransactor is an auto generated write-only Go binding around a Kaia contract.
type AddressTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type AddressFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type AddressSession struct {
	Contract     *Address          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AddressCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type AddressCallerSession struct {
	Contract *AddressCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// AddressTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type AddressTransactorSession struct {
	Contract     *AddressTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AddressRaw is an auto generated low-level Go binding around a Kaia contract.
type AddressRaw struct {
	Contract *Address // Generic contract binding to access the raw methods on
}

// AddressCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type AddressCallerRaw struct {
	Contract *AddressCaller // Generic read-only contract binding to access the raw methods on
}

// AddressTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type AddressTransactorRaw struct {
	Contract *AddressTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAddress creates a new instance of Address, bound to a specific deployed contract.
func NewAddress(address common.Address, backend bind.ContractBackend) (*Address, error) {
	contract, err := bindAddress(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// NewAddressCaller creates a new read-only instance of Address, bound to a specific deployed contract.
func NewAddressCaller(address common.Address, caller bind.ContractCaller) (*AddressCaller, error) {
	contract, err := bindAddress(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AddressCaller{contract: contract}, nil
}

// NewAddressTransactor creates a new write-only instance of Address, bound to a specific deployed contract.
func NewAddressTransactor(address common.Address, transactor bind.ContractTransactor) (*AddressTransactor, error) {
	contract, err := bindAddress(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AddressTransactor{contract: contract}, nil
}

// NewAddressFilterer creates a new log filterer instance of Address, bound to a specific deployed contract.
func NewAddressFilterer(address common.Address, filterer bind.ContractFilterer) (*AddressFilterer, error) {
	contract, err := bindAddress(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AddressFilterer{contract: contract}, nil
}

// bindAddress binds a generic wrapper to an already deployed contract.
func bindAddress(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AddressMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Address *AddressRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Address.Contract.AddressCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Address *AddressRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.Contract.AddressTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Address *AddressRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Address.Contract.AddressTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Address *AddressCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Address.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Address *AddressTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Address *AddressTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Address.Contract.contract.Transact(opts, method, params...)
}

// CnStakingV3MetaData contains all meta data concerning the CnStakingV3 contract.
var CnStakingV3MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nodeId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_unlockTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_unlockAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"AcceptRewardAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"approvedWithdrawalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawableFrom\",\"type\":\"uint256\"}],\"name\":\"ApproveStakingWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"approvedWithdrawalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CancelApprovedStakingWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CompleteReviewInitialConditions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DelegateKaia\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contractType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nodeId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"unlockTime\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"unlockAmount\",\"type\":\"uint256[]\"}],\"name\":\"DeployCnStakingV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DepositLockupStakingAndInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevCnStakingV3\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetCnStakingV3\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"HandleRedelegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetCnStakingV3\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Redelegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"ReviewInitialConditions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"publicDelegation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"SetPublicDelegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRedelegationEnabled\",\"type\":\"bool\"}],\"name\":\"ToggleRedelegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gcId\",\"type\":\"uint256\"}],\"name\":\"UpdateGCId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"UpdateRewardAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingTracker\",\"type\":\"address\"}],\"name\":\"UpdateStakingTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"UpdateVoterAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"approvedWithdrawalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawApprovedStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawLockupStaking\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_BOOK_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_LOCKUP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKING_APPROVER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKING_CLAIMER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"acceptRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveStakingWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancelApprovedStakingWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLockupStakingAndInit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gcId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"enumICnStakingV3.WithdrawalStakingState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"getApprovedStakingWithdrawalIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getApprovedStakingWithdrawalInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableFrom\",\"type\":\"uint256\"},{\"internalType\":\"enumICnStakingV3.WithdrawalStakingState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockupStakingInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unlockTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unlockAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"initial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"handleRedelegation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialLockupStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicDelegationEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRedelegationEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastRedelegation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupConditions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allReviewed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reviewedCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicDelegation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetCnV3\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"redelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingLockupStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reviewInitialConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gcId\",\"type\":\"uint256\"}],\"name\":\"setGCId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pdFactory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_pdArgs\",\"type\":\"bytes\"}],\"name\":\"setPublicDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tracker\",\"type\":\"address\"}],\"name\":\"setStakingTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRedelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updateRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tracker\",\"type\":\"address\"}],\"name\":\"updateStakingTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updateVoterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawApprovedStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawLockupStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalRequestMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableFrom\",\"type\":\"uint256\"},{\"internalType\":\"enumICnStakingV3.WithdrawalStakingState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"f2f2f49b": "ADDRESS_BOOK_ADDRESS()",
		"75b238fc": "ADMIN_ROLE()",
		"4b6a94cc": "CONTRACT_TYPE()",
		"a217fddf": "DEFAULT_ADMIN_ROLE()",
		"8e6f6b77": "ONE_WEEK()",
		"f5b541a6": "OPERATOR_ROLE()",
		"3780b3ed": "STAKER_ROLE()",
		"96106ae4": "STAKE_LOCKUP()",
		"0c07d842": "UNSTAKING_APPROVER_ROLE()",
		"9c394c5d": "UNSTAKING_CLAIMER_ROLE()",
		"ffa1ad74": "VERSION()",
		"aa4058b9": "acceptRewardAddress(address)",
		"5df8b09a": "approveStakingWithdrawal(address,uint256)",
		"c804b115": "cancelApprovedStakingWithdrawal(uint256)",
		"c89e4361": "delegate()",
		"6a27c206": "depositLockupStakingAndInit()",
		"6d2714db": "gcId()",
		"d2569eb9": "getApprovedStakingWithdrawalIds(uint256,uint256,uint8)",
		"725c0503": "getApprovedStakingWithdrawalInfo(uint256)",
		"5ecd75f2": "getLockupStakingInfo()",
		"248a9ca3": "getRoleAdmin(bytes32)",
		"9010d07c": "getRoleMember(bytes32,uint256)",
		"ca15c873": "getRoleMemberCount(bytes32)",
		"2f2ff15d": "grantRole(bytes32,address)",
		"a006e90c": "handleRedelegation(address)",
		"91d14854": "hasRole(bytes32,address)",
		"06704222": "initialLockupStaking()",
		"392e53cd": "isInitialized()",
		"bfc7e948": "isPublicDelegationEnabled()",
		"7a66c96b": "isRedelegationEnabled()",
		"14d3ce10": "lastRedelegation(address)",
		"2429f8a9": "lockupConditions()",
		"139d7fed": "nodeId()",
		"8740568b": "pendingRewardAddress()",
		"e1a12d35": "publicDelegation()",
		"6bd8f804": "redelegate(address,address,uint256)",
		"7b5e0481": "remainingLockupStaking()",
		"36568abe": "renounceRole(bytes32,address)",
		"702b9c9b": "reviewInitialConditions()",
		"d547741f": "revokeRole(bytes32,address)",
		"8cf57cb9": "rewardAddress()",
		"ff4634bc": "setGCId(uint256)",
		"2e5dc0f7": "setPublicDelegation(address,bytes)",
		"c336aa35": "setStakingTracker(address)",
		"4cf088d9": "staking()",
		"008c477a": "stakingTracker()",
		"01ffc9a7": "supportsInterface(bytes4)",
		"d75859ec": "toggleRedelegation()",
		"630b1146": "unstaking()",
		"944dd5a2": "updateRewardAddress(address)",
		"5be6eacc": "updateStakingTracker(address)",
		"5784d18b": "updateVoterAddress(address)",
		"992ac9fa": "voterAddress()",
		"6e93df0d": "withdrawApprovedStaking(uint256)",
		"505ebed4": "withdrawLockupStaking(address,uint256)",
		"19e44e32": "withdrawalRequestCount()",
		"284fbedc": "withdrawalRequestMap(uint256)",
	},
	Bin: "0x60c060405234801561000f575f80fd5b5060405161417c38038061417c83398101604081905261002e9161063f565b8361003881610163565b6100438484846101b4565b61006d7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92987610392565b506100987fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177587610392565b506001600160a01b0384161560a05282516100ba906005906020860190610519565b5081516100ce906006906020850190610519565b506001600160a01b03858116608052600380546001600160a01b031916918616919091179055604080518082018252601181527010db94dd185ada5b99d0dbdb9d1c9858dd607a1b602082015290517f8ceb5a03da525381440f64ae9f54fa4cb32a6299f0521f5261edd8839a0f326591610150918890889088908890610709565b60405180910390a1505050505050610799565b6001600160a01b0381166101b15760405162461bcd60e51b815260206004820152601060248201526f20b2323932b9b99034b990373ab6361760811b60448201526064015b60405180910390fd5b50565b6001600160a01b0383166102215781511580156101d057508051155b61021c5760405162461bcd60e51b815260206004820152601860248201527f496e697469616c206c6f636b75702064697361626c65642e000000000000000060448201526064016101a8565b505050565b80518251146102725760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420696e697469616c20636f6e646974696f6e732e000000000060448201526064016101a8565b81511561021c57425f5b825181101561038b5783818151811061029757610297610785565b602002602001015182106102fc5760405162461bcd60e51b815260206004820152602660248201527f556e6c6f636b2074696d65206973206e6f7420696e20617363656e64696e672060448201526537b93232b91760d11b60648201526084016101a8565b5f83828151811061030f5761030f610785565b6020026020010151116103645760405162461bcd60e51b815260206004820152601e60248201527f416d6f756e74206973206e6f7420706f736974697665206e756d6265722e000060448201526064016101a8565b83818151811061037657610376610785565b6020908102919091010151915060010161027c565b5050505050565b5f8061039e84846103c8565b905080156103bf575f8481526014602052604090206103bd9084610459565b505b90505b92915050565b5f6103d3838361046d565b610452575f8381526013602090815260408083206001600160a01b03861684529091529020805460ff1916600117905561040a3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016103c2565b505f6103c2565b5f6103bf836001600160a01b0384166104d4565b5f60a05115801561049d57507fb9e206fa2af7ee1331b72ce58b6d938ac810ce9b5cdb65d35ab723fd67badf9e83145b156104aa575060016103c2565b5f8381526013602090815260408083206001600160a01b038616845290915290205460ff166103bf565b5f81815260018301602052604081205461045257508154600181810184555f8481526020808220909301849055845484825282860190935260409020919091556103c2565b828054828255905f5260205f20908101928215610552579160200282015b82811115610552578251825591602001919060010190610537565b5061055e929150610562565b5090565b5b8082111561055e575f8155600101610563565b80516001600160a01b038116811461058c575f80fd5b919050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f8301126105b4575f80fd5b815160206001600160401b03808311156105d0576105d0610591565b8260051b604051601f19603f830116810181811084821117156105f5576105f5610591565b6040529384526020818701810194908101925087851115610614575f80fd5b6020870191505b848210156106345781518352918301919083019061061b565b979650505050505050565b5f805f805f60a08688031215610653575f80fd5b61065c86610576565b945061066a60208701610576565b935061067860408701610576565b60608701519093506001600160401b0380821115610694575f80fd5b6106a089838a016105a5565b935060808801519150808211156106b5575f80fd5b506106c2888289016105a5565b9150509295509295909350565b5f815180845260208085019450602084015f5b838110156106fe578151875295820195908201906001016106e2565b509495945050505050565b60a081525f86518060a0840152806020890160c085015e5f60c08285018101919091526001600160a01b03888116602086015287166040850152601f909101601f191683018381038201606085015290610765908201866106cf565b9050828103608084015261077981856106cf565b98975050505050505050565b634e487b7160e01b5f52603260045260245ffd5b60805160a0516139916107eb5f395f818161097901528181610c29015281816116400152818161166801528181611f0e01528181611f96015281816126dd0152612b1b01525f61045e01526139915ff3fe608060405260043610610368575f3560e01c8063725c0503116101c8578063a217fddf116100fd578063d2569eb91161009d578063f2f2f49b1161006d578063f2f2f49b14610a7e578063f5b541a614610a93578063ff4634bc14610ab3578063ffa1ad7414610ad2575f80fd5b8063d2569eb914610a00578063d547741f14610a2c578063d75859ec14610a4b578063e1a12d3514610a5f575f80fd5b8063c336aa35116100d8578063c336aa351461099b578063c804b115146109ba578063c89e4361146109d9578063ca15c873146109e1575f80fd5b8063a217fddf14610936578063aa4058b914610949578063bfc7e94814610968575f80fd5b80639010d07c1161016857806396106ae41161014357806396106ae414610871578063992ac9fa146108e45780639c394c5d14610903578063a006e90c14610923575f80fd5b80639010d07c1461088757806391d14854146108a6578063944dd5a2146108c5575f80fd5b80637b5e0481116101a35780637b5e04811461081e5780638740568b146108335780638cf57cb9146108525780638e6f6b7714610871575f80fd5b8063725c05031461079757806375b238fc146107e55780637a66c96b14610805575f80fd5b8063392e53cd1161029e5780635ecd75f21161023e5780636bd8f804116102195780636bd8f804146107315780636d2714db146107505780636e93df0d14610764578063702b9c9b14610783575f80fd5b80635ecd75f2146106ef578063630b1146146107145780636a27c20614610729575f80fd5b8063505ebed411610279578063505ebed4146106735780635784d18b146106925780635be6eacc146106b15780635df8b09a146106d0575f80fd5b8063392e53cd146105fc5780634b6a94cc146106155780634cf088d91461065e575f80fd5b80632429f8a9116103095780632e5dc0f7116102e45780632e5dc0f71461057f5780632f2ff15d1461059e57806336568abe146105bd5780633780b3ed146105dc575f80fd5b80632429f8a9146104c0578063248a9ca3146104f4578063284fbedc14610522575f80fd5b80630c07d842116103445780630c07d8421461042d578063139d7fed1461044d57806314d3ce101461048057806319e44e32146104ab575f80fd5b80628c477a1461039a57806301ffc9a7146103db578063067042221461040a575f80fd5b3661039657610375610ae6565b5f805160206138dc83398151915261038c81610b3f565b610394610b4c565b005b5f80fd5b3480156103a5575f80fd5b506011546103be9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156103e6575f80fd5b506103fa6103f5366004613161565b610bd4565b60405190151581526020016103d2565b348015610415575f80fd5b5061041f600a5481565b6040519081526020016103d2565b348015610438575f80fd5b5061041f5f8051602061391c83398151915281565b348015610458575f80fd5b506103be7f000000000000000000000000000000000000000000000000000000000000000081565b34801561048b575f80fd5b5061041f61049a36600461319c565b60026020525f908152604090205481565b3480156104b6575f80fd5b5061041f600f5481565b3480156104cb575f80fd5b506007546008546104dd9160ff169082565b6040805192151583526020830191909152016103d2565b3480156104ff575f80fd5b5061041f61050e3660046131b7565b5f9081526013602052604090206001015490565b34801561052d575f80fd5b5061056f61053c3660046131b7565b60106020525f908152604090208054600182015460028301546003909301546001600160a01b0390921692909160ff1684565b6040516103d294939291906131e2565b34801561058a575f80fd5b50610394610599366004613297565b610bfe565b3480156105a9575f80fd5b506103946105b8366004613324565b610dc8565b3480156105c8575f80fd5b506103946105d7366004613324565b610df2565b3480156105e7575f80fd5b5061041f5f805160206138dc83398151915281565b348015610607575f80fd5b50600c546103fa9060ff1681565b348015610620575f80fd5b506106516040518060400160405280601181526020017010db94dd185ada5b99d0dbdb9d1c9858dd607a1b81525081565b6040516103d29190613380565b348015610669575f80fd5b5061041f600d5481565b34801561067e575f80fd5b5061039461068d366004613392565b610e2a565b34801561069d575f80fd5b506103946106ac36600461319c565b610fa2565b3480156106bc575f80fd5b506103946106cb36600461319c565b611140565b3480156106db575f80fd5b5061041f6106ea366004613392565b611359565b3480156106fa575f80fd5b506107036114d9565b6040516103d29594939291906133f6565b34801561071f575f80fd5b5061041f600e5481565b610394611610565b34801561073c575f80fd5b5061039461074b366004613438565b611824565b34801561075b575f80fd5b5061041f5f5481565b34801561076f575f80fd5b5061039461077e3660046131b7565b611ae4565b34801561078e575f80fd5b50610394611dc3565b3480156107a2575f80fd5b5061056f6107b13660046131b7565b5f9081526010602052604090208054600182015460028301546003909301546001600160a01b039092169390929160ff1690565b3480156107f0575f80fd5b5061041f5f805160206138fc83398151915281565b348015610810575f80fd5b506011546103fa9060ff1681565b348015610829575f80fd5b5061041f600b5481565b34801561083e575f80fd5b506004546103be906001600160a01b031681565b34801561085d575f80fd5b506003546103be906001600160a01b031681565b34801561087c575f80fd5b5061041f62093a8081565b348015610892575f80fd5b506103be6108a1366004613476565b611eed565b3480156108b1575f80fd5b506103fa6108c0366004613324565b611f0b565b3480156108d0575f80fd5b506103946108df36600461319c565b611f7d565b3480156108ef575f80fd5b506012546103be906001600160a01b031681565b34801561090e575f80fd5b5061041f5f8051602061393c83398151915281565b61039461093136600461319c565b61204c565b348015610941575f80fd5b5061041f5f81565b348015610954575f80fd5b5061039461096336600461319c565b61225f565b348015610973575f80fd5b506103fa7f000000000000000000000000000000000000000000000000000000000000000081565b3480156109a6575f80fd5b506103946109b536600461319c565b6123e4565b3480156109c5575f80fd5b506103946109d43660046131b7565b61245d565b610394612573565b3480156109ec575f80fd5b5061041f6109fb3660046131b7565b61259a565b348015610a0b575f80fd5b50610a1f610a1a366004613496565b6125b0565b6040516103d291906134cf565b348015610a37575f80fd5b50610394610a46366004613324565b6126a0565b348015610a56575f80fd5b506103946126c4565b348015610a6a575f80fd5b506001546103be906001600160a01b031681565b348015610a89575f80fd5b506103be61040081565b348015610a9e575f80fd5b5061041f5f805160206138bc83398151915281565b348015610abe575f80fd5b50610394610acd3660046131b7565b612796565b348015610add575f80fd5b5061041f600381565b600c5460ff16610b3d5760405162461bcd60e51b815260206004820152601c60248201527f436f6e7472616374206973206e6f7420696e697469616c697a65642e0000000060448201526064015b60405180910390fd5b565b610b49813361282c565b50565b5f3411610b8d5760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b21030b6b7bab73a1760891b6044820152606401610b34565b600d805434019055610b9d612865565b60405134815233907f8ecbcbd560048c1f474847748189e8c43f1fdee737fbd34523b04b5a9bbdffaa9060200160405180910390a2565b5f6001600160e01b03198216635a05180f60e01b1480610bf85750610bf8826128bd565b92915050565b610c066128f1565b81610c1081612944565b5f805160206138fc833981519152610c2781610b3f565b7f0000000000000000000000000000000000000000000000000000000000000000610c945760405162461bcd60e51b815260206004820152601b60248201527f5075626c69632064656c65676174696f6e2064697361626c65642e00000000006044820152606401610b34565b5f835111610cd45760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b21030b933b99760991b6044820152606401610b34565b5f83806020019051810190610ce9919061352e565b604051631e1e087360e21b81529091506001600160a01b0386169063787821cc90610d189084906004016135dc565b6020604051808303815f875af1158015610d34573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d589190613628565b600180546001600160a01b03199081166001600160a01b0393909316928317909155600380549091168217905560408051828152602081019290925233917f669ea85a3c8fdb578f28c81d130bb3cf68e5f3845d178688ae84abdba59c9030910160405180910390a25050505050565b5f82815260136020526040902060010154610de281610b3f565b610dec838361298d565b50505050565b6001600160a01b0381163314610e1b5760405163334bd91960e11b815260040160405180910390fd5b610e2582826129c0565b505050565b5f805160206138bc833981519152610e4181610b3f565b82610e4b81612944565b5f610e546114d9565b9450505050505f84118015610e695750808411155b610eb55760405162461bcd60e51b815260206004820152601a60248201527f56616c7565206973206e6f7420776974686472617761626c652e0000000000006044820152606401610b34565b600b805485900390556040515f906001600160a01b0387169086908381818185875af1925050503d805f8114610f06576040519150601f19603f3d011682016040523d82523d5f602084013e610f0b565b606091505b5050905080610f4f5760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b6044820152606401610b34565b610f57612865565b856001600160a01b03167f2d9d65e4fcab96e158761a8d3cc0bd7fd76951ab5574667b07190da17177747086604051610f9291815260200190565b60405180910390a2505050505050565b5f805160206138bc833981519152610fb981610b3f565b601280546001600160a01b0319166001600160a01b038481169190911790915560115461010090041615611109576001600160a01b038216156110ac576011546040516327a38e0160e11b81526001600160a01b03848116600483015261010090920490911690634f471c0290602401602060405180830381865afa158015611044573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110689190613643565b156110ac5760405162461bcd60e51b81526020600482015260146024820152732b37ba32b91030b63932b0b23c903a30b5b2b71760611b6044820152606401610b34565b60115460405163aad8cb3f60e01b81523060048201526101009091046001600160a01b03169063aad8cb3f906024015f604051808303815f87803b1580156110f2575f80fd5b505af1158015611104573d5f803e3d5ffd5b505050505b6040516001600160a01b038316907f61ee88e3c7513df1e6e214415e781030278cf98b7fbb9d6d53720ee8aeb654ee905f90a25050565b5f805160206138bc83398151915261115781610b3f565b61116b6001600160a01b03831660016129eb565b6111b15760405162461bcd60e51b815260206004820152601760248201527624b73b30b634b21029ba30b5b4b733aa3930b1b5b2b91760491b6044820152606401610b34565b60115461010090046001600160a01b03161561130757601154604051635605a4e560e01b81523060048201526101009091046001600160a01b031690635605a4e5906024015f604051808303815f87803b15801561120d575f80fd5b505af115801561121f573d5f803e3d5ffd5b50505050601160019054906101000a90046001600160a01b03166001600160a01b031663d4377d4d6040518163ffffffff1660e01b81526004015f60405180830381865afa158015611273573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261129a919081019061367d565b51156113075760405162461bcd60e51b815260206004820152603660248201527f43616e6e6f742075706461746520747261636b6572207768656e2074686572656044820152751034b99030b71030b1ba34bb32903a3930b1b5b2b91760511b6064820152608401610b34565b60118054610100600160a81b0319166101006001600160a01b038516908102919091179091556040517fef25e066ac14a10491ae1ac89a8247282158e169968aaccbceb257d0878bdfd0905f90a25050565b5f8261136481612944565b5f8051602061391c83398151915261137b81610b3f565b5f841180156113995750600d5484600e54611396919061371d565b11155b6113d65760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b2103b30b63ab29760911b6044820152606401610b34565b600f80546001808201909255604080516080810182526001600160a01b03898116825260208083018a81524262093a80018486018181525f60608701818152898252601090955296909620855181546001600160a01b031916951694909417845590518388015593516002808401919091559051600383018054969a509496939592949093909260ff1916918490811115611473576114736131ce565b021790555050600e8054870190555061148a612865565b60408051868152602081018390526001600160a01b0388169186917fdd0988b8c11a867814c87be652f93a86d35c6a235b92977e99d5394bd8580ced910160405180910390a350505092915050565b6060805f805f6114e7610ae6565b5f805b60055481101561154d57600580548290811061150857611508613730565b905f5260205f20015442111561153a57600680548290811061152c5761152c613730565b905f5260205f200154820191505b600b54600a5403820392506001016114ea565b5060055f016005600101600a54600b5485848054806020026020016040519081016040528092919081815260200182805480156115a757602002820191905f5260205f20905b815481526020019060010190808311611593575b50505050509450838054806020026020016040519081016040528092919081815260200182805480156115f757602002820191905f5260205f20905b8154815260200190600101908083116115e3575b5050505050935095509550955095509550509091929394565b6116186128f1565b5f5415801590611637575060115461010090046001600160a01b031615155b80156116b357507f000000000000000000000000000000000000000000000000000000000000000015806116b357507f0000000000000000000000000000000000000000000000000000000000000000801561169d57506001546001600160a01b031615155b80156116b357506003546001600160a01b031615155b6116f65760405162461bcd60e51b81526020600482015260146024820152732737ba1039b2ba103ab810383937b832b9363c9760611b6044820152606401610b34565b60075460ff1615156001146117455760405162461bcd60e51b81526020600482015260156024820152742932bb34b2bbb9903737ba103334b734b9b432b21760591b6044820152606401610b34565b5f805b60065481101561177e57600680548290811061176657611766613730565b5f918252602090912001549190910190600101611748565b508034146117c65760405162461bcd60e51b81526020600482015260156024820152742b30b63ab2903237b2b9903737ba1036b0ba31b41760591b6044820152606401610b34565b600a819055600b8190556117d8612b19565b600c805460ff1916600117905560405133907f2b3c5e8e58d7d1e42ccd071c6f749d53f9ee506020a81fad9ff98140ccccde69906118199034815260200190565b60405180910390a250565b61182c610ae6565b8261183681612944565b60115460ff16801561185257506001546001600160a01b031633145b6118975760405162461bcd60e51b81526020600482015260166024820152752932b232b632b3b0ba34b7b7103234b9b0b13632b21760511b6044820152606401610b34565b306001600160a01b038416036118e75760405162461bcd60e51b81526020600482015260156024820152742a30b933b2ba1031b0b713ba1031329039b2b6331760591b6044820152606401610b34565b6118fb6001600160a01b0384166003612bf5565b61193e5760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21021b729ba30b5b4b733ab199760611b6044820152606401610b34565b5f8211801561195c5750600d5482600e54611959919061371d565b11155b6119995760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b2103b30b63ab29760911b6044820152606401610b34565b6001600160a01b0384165f9081526002602052604090205415806119e357506001600160a01b0384165f9081526002602052604090205442906119e09062093a809061371d565b11155b611a275760405162461bcd60e51b815260206004820152601560248201527421b0b713ba103932b232b632b3b0ba32903cb2ba1760591b6044820152606401610b34565b600d80548390039055604051632801ba4360e21b81526001600160a01b03858116600483015284169063a006e90c9084906024015f604051808303818588803b158015611a72575f80fd5b505af1158015611a84573d5f803e3d5ffd5b5050505050611a91612865565b826001600160a01b0316846001600160a01b03167f4830c21a6eb4b2b3af6c4d24cfbd78ce437d5b690aac56ceec54df1d4d24e1a084604051611ad691815260200190565b60405180910390a350505050565b5f8051602061393c833981519152611afb81610b3f565b5f82815260106020526040902080546001600160a01b0316611b2f5760405162461bcd60e51b8152600401610b3490613744565b5f600382015460ff166002811115611b4957611b496131ce565b14611b875760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039ba30ba329760911b6044820152606401610b34565b600d5481600101541115611bdd5760405162461bcd60e51b815260206004820152601a60248201527f56616c7565206973206e6f7420776974686472617761626c652e0000000000006044820152606401610b34565b4281600201541115611c295760405162461bcd60e51b81526020600482015260156024820152742737ba103bb4ba34323930bbb0b13632903cb2ba1760591b6044820152606401610b34565b600281015462093a8001428111611cad5760038201805460ff191660021790556001820154600e8054919091039055611c60612865565b815460018301546040519081526001600160a01b039091169085907fcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df9060200160405180910390a3610dec565b60038201805460ff1916600190811790915582018054600d80549190910390558054600e8054919091039055825490546040515f926001600160a01b031691908381818185875af1925050503d805f8114611d23576040519150601f19603f3d011682016040523d82523d5f602084013e611d28565b606091505b5050905080611d6c5760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b6044820152606401610b34565b611d74612865565b825460018401546040519081526001600160a01b039091169086907f7a2d48d1df1249429730a253e5713a7d7a2024913de2fbccafdf36efdd32bf059060200160405180910390a35050505050565b611dcb6128f1565b5f805160206138fc833981519152611de281610b3f565b335f8181526009602052604090205460ff1615611e415760405162461bcd60e51b815260206004820152601c60248201527f4d73672e73656e64657220616c72656164792072657669657765642e000000006044820152606401610b34565b6001600160a01b0381165f81815260096020526040808220805460ff19166001908117909155600880549091019055517f65d287f4118b03f8cc979b433fd0b2246074200dd5da70c9daf204aaa0da1a2c9190a2611eab5f805160206138fc83398151915261259a565b60085403611ee9576007805460ff191660011790556040517f244ff9a3d72b1dc5a4bce7f05fb615395f2a8c7ad6ea525d2bac9030f75d7a9b905f90a15b5050565b5f828152601460205260408120611f049083612e03565b9392505050565b5f7f0000000000000000000000000000000000000000000000000000000000000000158015611f4657505f805160206138dc83398151915283145b15611f5357506001610bf8565b5f8381526013602090815260408083206001600160a01b038616845290915290205460ff16611f04565b5f805160206138bc833981519152611f9481610b3f565b7f0000000000000000000000000000000000000000000000000000000000000000156120025760405162461bcd60e51b815260206004820152601a60248201527f5075626c69632064656c65676174696f6e20656e61626c65642e0000000000006044820152606401610b34565b600480546001600160a01b0319166001600160a01b0384169081179091556040517fbe1849831e6775a2022006aeebcc00f70d10bc4202c8187e215ad9e9911f2b06905f90a25050565b612054610ae6565b8061205e81612944565b60115460ff166120a95760405162461bcd60e51b81526020600482015260166024820152752932b232b632b3b0ba34b7b7103234b9b0b13632b21760511b6044820152606401610b34565b6120b4336003612bf5565b6120f75760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21021b729ba30b5b4b733ab199760611b6044820152606401610b34565b6001600160a01b038083165f908152600260209081526040808320429055600154815163228cb73360e01b81529151941693849263228cb73392600480820193918290030181865afa15801561214f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121739190613643565b6040516325fb490360e11b81526001600160a01b0386811660048301524792909201925090831690634bf692069034906024015f604051808303818588803b1580156121bd575f80fd5b505af11580156121cf573d5f803e3d5ffd5b50505050504781146122175760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b21039ba30b5b2a337b91760791b6044820152606401610b34565b604051348152309033906001600160a01b038716907fcbbd772ac9792b90fb77aa3194b0279ec4dbea1880ecc3674ecd2f4bf39b0c909060200160405180910390a450505050565b612267612e0e565b6122c25760405162461bcd60e51b815260206004820152602660248201527f556e617574686f72697a656420746f2061636365707420726577617264206164604482015265323932b9b99760d11b6064820152608401610b34565b6004546001600160a01b038281169116146123315760405162461bcd60e51b815260206004820152602960248201527f476976656e206164647265737320646f6573206e6f74206d6174636820746865604482015268103832b73234b7339760b91b6064820152608401610b34565b6004805460405163832a2aad60e01b81526001600160a01b03909116918101919091526104009063832a2aad906024015f604051808303815f87803b158015612378575f80fd5b505af115801561238a573d5f803e3d5ffd5b505060048054600380546001600160a01b0383166001600160a01b031991821681179092559091169091556040519092507f36e0b58f785f850d6622cb742fa1e0750728da3c75816916830b50b747efb6b691505f90a250565b6123ec6128f1565b5f805160206138fc83398151915261240381610b3f565b6124176001600160a01b03831660016129eb565b6113075760405162461bcd60e51b815260206004820152601760248201527624b73b30b634b21029ba30b5b4b733aa3930b1b5b2b91760491b6044820152606401610b34565b5f8051602061391c83398151915261247481610b3f565b5f82815260106020526040902080546001600160a01b03166124a85760405162461bcd60e51b8152600401610b3490613744565b5f600382015460ff1660028111156124c2576124c26131ce565b146125005760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039ba30ba329760911b6044820152606401610b34565b60038101805460ff191660021790556001810154600e8054919091039055612526612865565b805460018201546040519081526001600160a01b039091169084907fcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df9060200160405180910390a3505050565b61257b610ae6565b5f805160206138dc83398151915261259281610b3f565b610b49610b4c565b5f818152601460205260408120610bf890612ee6565b60605f8315806125c25750600f548410155b6125cc57836125d0565b600f545b90506125dc8582613786565b67ffffffffffffffff8111156125f4576125f461322b565b60405190808252806020026020018201604052801561261d578160200160208202803683370190505b5091505f855b828110156126955784600281111561263d5761263d6131ce565b5f8281526010602052604090206003015460ff166002811115612662576126626131ce565b0361268d578084838060010194508151811061268057612680613730565b6020026020010181815250505b600101612623565b508252509392505050565b5f828152601360205260409020600101546126ba81610b3f565b610dec83836129c0565b5f805160206138bc8339815191526126db81610b3f565b7f00000000000000000000000000000000000000000000000000000000000000006127485760405162461bcd60e51b815260206004820152601b60248201527f5075626c69632064656c65676174696f6e2064697361626c65642e00000000006044820152606401610b34565b6011805460ff8082161560ff1990921682179092556040519116151581527f02efa9113845c402ffbbc237400eeba75de99c23f054459573f88caa5a9418989060200160405180910390a150565b61279e6128f1565b5f805160206138fc8339815191526127b581610b3f565b815f036127fc5760405162461bcd60e51b815260206004820152601560248201527423a19024a21031b0b73737ba103132903d32b9379760591b6044820152606401610b34565b5f82815560405183917f469cb2f3ce5d5e879269af625b54571651feb0ede6e83ee89b9c888648af514f91a25050565b6128368282611f0b565b611ee95760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610b34565b601154604051635605a4e560e01b81523060048201526101009091046001600160a01b031690635605a4e5906024015f604051808303815f87803b1580156128ab575f80fd5b505af1158015610dec573d5f803e3d5ffd5b5f6001600160e01b03198216637965db0b60e01b1480610bf857506301ffc9a760e01b6001600160e01b0319831614610bf8565b600c5460ff1615610b3d5760405162461bcd60e51b815260206004820152601e60248201527f436f6e747261637420686173206265656e20696e697469616c697a65642e00006044820152606401610b34565b6001600160a01b038116610b495760405162461bcd60e51b815260206004820152601060248201526f20b2323932b9b99034b990373ab6361760811b6044820152606401610b34565b5f806129998484612eef565b90508015611f04575f8481526014602052604090206129b89084612f80565b509392505050565b5f806129cc8484612f94565b90508015611f04575f8481526014602052604090206129b89084612fff565b5f826001600160a01b03163b5f03612a0457505f610bf8565b5f839050806001600160a01b0316634b6a94cc6040518163ffffffff1660e01b81526004015f60405180830381865afa158015612a43573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052612a6a9190810190613799565b805190602001207fccfe28814eb3e9d0e6cfd45eb754f27c5eb4399dac6379181362ebd8b6a865c314612aa0575f915050610bf8565b82816001600160a01b031663ffa1ad746040518163ffffffff1660e01b8152600401602060405180830381865afa158015612add573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b019190613643565b14612b0f575f915050610bf8565b5060019392505050565b7f0000000000000000000000000000000000000000000000000000000000000000612b87575f612b565f805160206138bc8339815191525f611eed565b9050612b6f5f8051602061391c8339815191528261298d565b50611ee95f8051602061393c8339815191528261298d565b600154612bab905f805160206138dc833981519152906001600160a01b031661298d565b50600154612bd0905f8051602061391c833981519152906001600160a01b031661298d565b50600154610b49905f8051602061393c833981519152906001600160a01b031661298d565b5f826001600160a01b03163b5f03612c0e57505f610bf8565b5f839050806001600160a01b0316634b6a94cc6040518163ffffffff1660e01b81526004015f60405180830381865afa158015612c4d573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052612c749190810190613799565b805190602001207fa2f5d64a9f0bcdeed97e196203f5a8c1a5c8293988b625b7925686d30805508214612caa575f915050610bf8565b82816001600160a01b031663ffa1ad746040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ce7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612d0b9190613643565b14612d19575f915050610bf8565b5f816001600160a01b031663139d7fed6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d56573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612d7a9190613628565b604051630aabaead60e11b81526001600160a01b03821660048201529091505f90610400906315575d5a90602401606060405180830381865afa158015612dc3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612de791906137cb565b506001600160a01b039081169088161494505050505092915050565b5f611f048383613013565b6004545f906001600160a01b03163303612e285750600190565b5f6104006001600160a01b0316631865c57d6040518163ffffffff1660e01b81526004015f60405180830381865afa158015612e66573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052612e8d919081019061380a565b5090505f5b8151811015612ede57818181518110612ead57612ead613730565b60200260200101516001600160a01b0316336001600160a01b031603612ed65760019250505090565b600101612e92565b505f91505090565b5f610bf8825490565b5f612efa8383611f0b565b612f79575f8381526013602090815260408083206001600160a01b03861684529091529020805460ff19166001179055612f313390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610bf8565b505f610bf8565b5f611f04836001600160a01b038416613039565b5f612f9f8383611f0b565b15612f79575f8381526013602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610bf8565b5f611f04836001600160a01b03841661307e565b5f825f01828154811061302857613028613730565b905f5260205f200154905092915050565b5f818152600183016020526040812054612f7957508154600181810184555f848152602080822090930184905584548482528286019093526040902091909155610bf8565b5f8181526001830160205260408120548015613158575f6130a0600183613786565b85549091505f906130b390600190613786565b9050808214613112575f865f0182815481106130d1576130d1613730565b905f5260205f200154905080875f0184815481106130f1576130f1613730565b5f918252602080832090910192909255918252600188019052604090208390555b8554869080613123576131236138a7565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f905560019350505050610bf8565b5f915050610bf8565b5f60208284031215613171575f80fd5b81356001600160e01b031981168114611f04575f80fd5b6001600160a01b0381168114610b49575f80fd5b5f602082840312156131ac575f80fd5b8135611f0481613188565b5f602082840312156131c7575f80fd5b5035919050565b634e487b7160e01b5f52602160045260245ffd5b6001600160a01b03851681526020810184905260408101839052608081016003831061321c57634e487b7160e01b5f52602160045260245ffd5b82606083015295945050505050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff811182821017156132685761326861322b565b604052919050565b5f67ffffffffffffffff8211156132895761328961322b565b50601f01601f191660200190565b5f80604083850312156132a8575f80fd5b82356132b381613188565b9150602083013567ffffffffffffffff8111156132ce575f80fd5b8301601f810185136132de575f80fd5b80356132f16132ec82613270565b61323f565b818152866020838501011115613305575f80fd5b816020840160208301375f602083830101528093505050509250929050565b5f8060408385031215613335575f80fd5b82359150602083013561334781613188565b809150509250929050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f611f046020830184613352565b5f80604083850312156133a3575f80fd5b82356133ae81613188565b946020939093013593505050565b5f815180845260208085019450602084015f5b838110156133eb578151875295820195908201906001016133cf565b509495945050505050565b60a081525f61340860a08301886133bc565b828103602084015261341a81886133bc565b60408401969096525050606081019290925260809091015292915050565b5f805f6060848603121561344a575f80fd5b833561345581613188565b9250602084013561346581613188565b929592945050506040919091013590565b5f8060408385031215613487575f80fd5b50508035926020909101359150565b5f805f606084860312156134a8575f80fd5b83359250602084013591506040840135600381106134c4575f80fd5b809150509250925092565b602081525f611f0460208301846133bc565b5f82601f8301126134f0575f80fd5b81516134fe6132ec82613270565b818152846020838601011115613512575f80fd5b8160208501602083015e5f918101602001919091529392505050565b5f6020828403121561353e575f80fd5b815167ffffffffffffffff80821115613555575f80fd5b9083019060808286031215613568575f80fd5b6040516080810181811083821117156135835761358361322b565b604052825161359181613188565b815260208301516135a181613188565b6020820152604083810151908201526060830151828111156135c1575f80fd5b6135cd878286016134e1565b60608301525095945050505050565b602081525f60018060a01b038084511660208401528060208501511660408401525060408301516060830152606083015160808084015261362060a0840182613352565b949350505050565b5f60208284031215613638575f80fd5b8151611f0481613188565b5f60208284031215613653575f80fd5b5051919050565b5f67ffffffffffffffff8211156136735761367361322b565b5060051b60200190565b5f602080838503121561368e575f80fd5b825167ffffffffffffffff8111156136a4575f80fd5b8301601f810185136136b4575f80fd5b80516136c26132ec8261365a565b81815260059190911b820183019083810190878311156136e0575f80fd5b928401925b828410156136fe578351825292840192908401906136e5565b979650505050505050565b634e487b7160e01b5f52601160045260245ffd5b80820180821115610bf857610bf8613709565b634e487b7160e01b5f52603260045260245ffd5b60208082526022908201527f5769746864726177616c207265717565737420646f6573206e6f7420657869736040820152613a1760f11b606082015260800190565b81810381811115610bf857610bf8613709565b5f602082840312156137a9575f80fd5b815167ffffffffffffffff8111156137bf575f80fd5b613620848285016134e1565b5f805f606084860312156137dd575f80fd5b83516137e881613188565b60208501519093506137f981613188565b60408501519092506134c481613188565b5f806040838503121561381b575f80fd5b825167ffffffffffffffff811115613831575f80fd5b8301601f81018513613841575f80fd5b805160206138516132ec8361365a565b82815260059290921b8301810191818101908884111561386f575f80fd5b938201935b8385101561389657845161388781613188565b82529382019390820190613874565b969091015195979596505050505050565b634e487b7160e01b5f52603160045260245ffdfe97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929b9e206fa2af7ee1331b72ce58b6d938ac810ce9b5cdb65d35ab723fd67badf9ea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756bbd235a04f337cdf14b2f1846017b33479fad2c3ae66d711584f13463a2170adb8f45a81765d409768c063c845ce4a132a06990e9ba80f54a39553a43ea2c34a264697066735822122099daf6a025170c3a4e3d63a2f82bc097797b15264efd7b25ade9f09f491c056264736f6c63430008190033",
}

// CnStakingV3ABI is the input ABI used to generate the binding from.
// Deprecated: Use CnStakingV3MetaData.ABI instead.
var CnStakingV3ABI = CnStakingV3MetaData.ABI

// CnStakingV3BinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const CnStakingV3BinRuntime = `608060405260043610610368575f3560e01c8063725c0503116101c8578063a217fddf116100fd578063d2569eb91161009d578063f2f2f49b1161006d578063f2f2f49b14610a7e578063f5b541a614610a93578063ff4634bc14610ab3578063ffa1ad7414610ad2575f80fd5b8063d2569eb914610a00578063d547741f14610a2c578063d75859ec14610a4b578063e1a12d3514610a5f575f80fd5b8063c336aa35116100d8578063c336aa351461099b578063c804b115146109ba578063c89e4361146109d9578063ca15c873146109e1575f80fd5b8063a217fddf14610936578063aa4058b914610949578063bfc7e94814610968575f80fd5b80639010d07c1161016857806396106ae41161014357806396106ae414610871578063992ac9fa146108e45780639c394c5d14610903578063a006e90c14610923575f80fd5b80639010d07c1461088757806391d14854146108a6578063944dd5a2146108c5575f80fd5b80637b5e0481116101a35780637b5e04811461081e5780638740568b146108335780638cf57cb9146108525780638e6f6b7714610871575f80fd5b8063725c05031461079757806375b238fc146107e55780637a66c96b14610805575f80fd5b8063392e53cd1161029e5780635ecd75f21161023e5780636bd8f804116102195780636bd8f804146107315780636d2714db146107505780636e93df0d14610764578063702b9c9b14610783575f80fd5b80635ecd75f2146106ef578063630b1146146107145780636a27c20614610729575f80fd5b8063505ebed411610279578063505ebed4146106735780635784d18b146106925780635be6eacc146106b15780635df8b09a146106d0575f80fd5b8063392e53cd146105fc5780634b6a94cc146106155780634cf088d91461065e575f80fd5b80632429f8a9116103095780632e5dc0f7116102e45780632e5dc0f71461057f5780632f2ff15d1461059e57806336568abe146105bd5780633780b3ed146105dc575f80fd5b80632429f8a9146104c0578063248a9ca3146104f4578063284fbedc14610522575f80fd5b80630c07d842116103445780630c07d8421461042d578063139d7fed1461044d57806314d3ce101461048057806319e44e32146104ab575f80fd5b80628c477a1461039a57806301ffc9a7146103db578063067042221461040a575f80fd5b3661039657610375610ae6565b5f805160206138dc83398151915261038c81610b3f565b610394610b4c565b005b5f80fd5b3480156103a5575f80fd5b506011546103be9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156103e6575f80fd5b506103fa6103f5366004613161565b610bd4565b60405190151581526020016103d2565b348015610415575f80fd5b5061041f600a5481565b6040519081526020016103d2565b348015610438575f80fd5b5061041f5f8051602061391c83398151915281565b348015610458575f80fd5b506103be7f000000000000000000000000000000000000000000000000000000000000000081565b34801561048b575f80fd5b5061041f61049a36600461319c565b60026020525f908152604090205481565b3480156104b6575f80fd5b5061041f600f5481565b3480156104cb575f80fd5b506007546008546104dd9160ff169082565b6040805192151583526020830191909152016103d2565b3480156104ff575f80fd5b5061041f61050e3660046131b7565b5f9081526013602052604090206001015490565b34801561052d575f80fd5b5061056f61053c3660046131b7565b60106020525f908152604090208054600182015460028301546003909301546001600160a01b0390921692909160ff1684565b6040516103d294939291906131e2565b34801561058a575f80fd5b50610394610599366004613297565b610bfe565b3480156105a9575f80fd5b506103946105b8366004613324565b610dc8565b3480156105c8575f80fd5b506103946105d7366004613324565b610df2565b3480156105e7575f80fd5b5061041f5f805160206138dc83398151915281565b348015610607575f80fd5b50600c546103fa9060ff1681565b348015610620575f80fd5b506106516040518060400160405280601181526020017010db94dd185ada5b99d0dbdb9d1c9858dd607a1b81525081565b6040516103d29190613380565b348015610669575f80fd5b5061041f600d5481565b34801561067e575f80fd5b5061039461068d366004613392565b610e2a565b34801561069d575f80fd5b506103946106ac36600461319c565b610fa2565b3480156106bc575f80fd5b506103946106cb36600461319c565b611140565b3480156106db575f80fd5b5061041f6106ea366004613392565b611359565b3480156106fa575f80fd5b506107036114d9565b6040516103d29594939291906133f6565b34801561071f575f80fd5b5061041f600e5481565b610394611610565b34801561073c575f80fd5b5061039461074b366004613438565b611824565b34801561075b575f80fd5b5061041f5f5481565b34801561076f575f80fd5b5061039461077e3660046131b7565b611ae4565b34801561078e575f80fd5b50610394611dc3565b3480156107a2575f80fd5b5061056f6107b13660046131b7565b5f9081526010602052604090208054600182015460028301546003909301546001600160a01b039092169390929160ff1690565b3480156107f0575f80fd5b5061041f5f805160206138fc83398151915281565b348015610810575f80fd5b506011546103fa9060ff1681565b348015610829575f80fd5b5061041f600b5481565b34801561083e575f80fd5b506004546103be906001600160a01b031681565b34801561085d575f80fd5b506003546103be906001600160a01b031681565b34801561087c575f80fd5b5061041f62093a8081565b348015610892575f80fd5b506103be6108a1366004613476565b611eed565b3480156108b1575f80fd5b506103fa6108c0366004613324565b611f0b565b3480156108d0575f80fd5b506103946108df36600461319c565b611f7d565b3480156108ef575f80fd5b506012546103be906001600160a01b031681565b34801561090e575f80fd5b5061041f5f8051602061393c83398151915281565b61039461093136600461319c565b61204c565b348015610941575f80fd5b5061041f5f81565b348015610954575f80fd5b5061039461096336600461319c565b61225f565b348015610973575f80fd5b506103fa7f000000000000000000000000000000000000000000000000000000000000000081565b3480156109a6575f80fd5b506103946109b536600461319c565b6123e4565b3480156109c5575f80fd5b506103946109d43660046131b7565b61245d565b610394612573565b3480156109ec575f80fd5b5061041f6109fb3660046131b7565b61259a565b348015610a0b575f80fd5b50610a1f610a1a366004613496565b6125b0565b6040516103d291906134cf565b348015610a37575f80fd5b50610394610a46366004613324565b6126a0565b348015610a56575f80fd5b506103946126c4565b348015610a6a575f80fd5b506001546103be906001600160a01b031681565b348015610a89575f80fd5b506103be61040081565b348015610a9e575f80fd5b5061041f5f805160206138bc83398151915281565b348015610abe575f80fd5b50610394610acd3660046131b7565b612796565b348015610add575f80fd5b5061041f600381565b600c5460ff16610b3d5760405162461bcd60e51b815260206004820152601c60248201527f436f6e7472616374206973206e6f7420696e697469616c697a65642e0000000060448201526064015b60405180910390fd5b565b610b49813361282c565b50565b5f3411610b8d5760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b21030b6b7bab73a1760891b6044820152606401610b34565b600d805434019055610b9d612865565b60405134815233907f8ecbcbd560048c1f474847748189e8c43f1fdee737fbd34523b04b5a9bbdffaa9060200160405180910390a2565b5f6001600160e01b03198216635a05180f60e01b1480610bf85750610bf8826128bd565b92915050565b610c066128f1565b81610c1081612944565b5f805160206138fc833981519152610c2781610b3f565b7f0000000000000000000000000000000000000000000000000000000000000000610c945760405162461bcd60e51b815260206004820152601b60248201527f5075626c69632064656c65676174696f6e2064697361626c65642e00000000006044820152606401610b34565b5f835111610cd45760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b21030b933b99760991b6044820152606401610b34565b5f83806020019051810190610ce9919061352e565b604051631e1e087360e21b81529091506001600160a01b0386169063787821cc90610d189084906004016135dc565b6020604051808303815f875af1158015610d34573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d589190613628565b600180546001600160a01b03199081166001600160a01b0393909316928317909155600380549091168217905560408051828152602081019290925233917f669ea85a3c8fdb578f28c81d130bb3cf68e5f3845d178688ae84abdba59c9030910160405180910390a25050505050565b5f82815260136020526040902060010154610de281610b3f565b610dec838361298d565b50505050565b6001600160a01b0381163314610e1b5760405163334bd91960e11b815260040160405180910390fd5b610e2582826129c0565b505050565b5f805160206138bc833981519152610e4181610b3f565b82610e4b81612944565b5f610e546114d9565b9450505050505f84118015610e695750808411155b610eb55760405162461bcd60e51b815260206004820152601a60248201527f56616c7565206973206e6f7420776974686472617761626c652e0000000000006044820152606401610b34565b600b805485900390556040515f906001600160a01b0387169086908381818185875af1925050503d805f8114610f06576040519150601f19603f3d011682016040523d82523d5f602084013e610f0b565b606091505b5050905080610f4f5760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b6044820152606401610b34565b610f57612865565b856001600160a01b03167f2d9d65e4fcab96e158761a8d3cc0bd7fd76951ab5574667b07190da17177747086604051610f9291815260200190565b60405180910390a2505050505050565b5f805160206138bc833981519152610fb981610b3f565b601280546001600160a01b0319166001600160a01b038481169190911790915560115461010090041615611109576001600160a01b038216156110ac576011546040516327a38e0160e11b81526001600160a01b03848116600483015261010090920490911690634f471c0290602401602060405180830381865afa158015611044573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110689190613643565b156110ac5760405162461bcd60e51b81526020600482015260146024820152732b37ba32b91030b63932b0b23c903a30b5b2b71760611b6044820152606401610b34565b60115460405163aad8cb3f60e01b81523060048201526101009091046001600160a01b03169063aad8cb3f906024015f604051808303815f87803b1580156110f2575f80fd5b505af1158015611104573d5f803e3d5ffd5b505050505b6040516001600160a01b038316907f61ee88e3c7513df1e6e214415e781030278cf98b7fbb9d6d53720ee8aeb654ee905f90a25050565b5f805160206138bc83398151915261115781610b3f565b61116b6001600160a01b03831660016129eb565b6111b15760405162461bcd60e51b815260206004820152601760248201527624b73b30b634b21029ba30b5b4b733aa3930b1b5b2b91760491b6044820152606401610b34565b60115461010090046001600160a01b03161561130757601154604051635605a4e560e01b81523060048201526101009091046001600160a01b031690635605a4e5906024015f604051808303815f87803b15801561120d575f80fd5b505af115801561121f573d5f803e3d5ffd5b50505050601160019054906101000a90046001600160a01b03166001600160a01b031663d4377d4d6040518163ffffffff1660e01b81526004015f60405180830381865afa158015611273573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261129a919081019061367d565b51156113075760405162461bcd60e51b815260206004820152603660248201527f43616e6e6f742075706461746520747261636b6572207768656e2074686572656044820152751034b99030b71030b1ba34bb32903a3930b1b5b2b91760511b6064820152608401610b34565b60118054610100600160a81b0319166101006001600160a01b038516908102919091179091556040517fef25e066ac14a10491ae1ac89a8247282158e169968aaccbceb257d0878bdfd0905f90a25050565b5f8261136481612944565b5f8051602061391c83398151915261137b81610b3f565b5f841180156113995750600d5484600e54611396919061371d565b11155b6113d65760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b2103b30b63ab29760911b6044820152606401610b34565b600f80546001808201909255604080516080810182526001600160a01b03898116825260208083018a81524262093a80018486018181525f60608701818152898252601090955296909620855181546001600160a01b031916951694909417845590518388015593516002808401919091559051600383018054969a509496939592949093909260ff1916918490811115611473576114736131ce565b021790555050600e8054870190555061148a612865565b60408051868152602081018390526001600160a01b0388169186917fdd0988b8c11a867814c87be652f93a86d35c6a235b92977e99d5394bd8580ced910160405180910390a350505092915050565b6060805f805f6114e7610ae6565b5f805b60055481101561154d57600580548290811061150857611508613730565b905f5260205f20015442111561153a57600680548290811061152c5761152c613730565b905f5260205f200154820191505b600b54600a5403820392506001016114ea565b5060055f016005600101600a54600b5485848054806020026020016040519081016040528092919081815260200182805480156115a757602002820191905f5260205f20905b815481526020019060010190808311611593575b50505050509450838054806020026020016040519081016040528092919081815260200182805480156115f757602002820191905f5260205f20905b8154815260200190600101908083116115e3575b5050505050935095509550955095509550509091929394565b6116186128f1565b5f5415801590611637575060115461010090046001600160a01b031615155b80156116b357507f000000000000000000000000000000000000000000000000000000000000000015806116b357507f0000000000000000000000000000000000000000000000000000000000000000801561169d57506001546001600160a01b031615155b80156116b357506003546001600160a01b031615155b6116f65760405162461bcd60e51b81526020600482015260146024820152732737ba1039b2ba103ab810383937b832b9363c9760611b6044820152606401610b34565b60075460ff1615156001146117455760405162461bcd60e51b81526020600482015260156024820152742932bb34b2bbb9903737ba103334b734b9b432b21760591b6044820152606401610b34565b5f805b60065481101561177e57600680548290811061176657611766613730565b5f918252602090912001549190910190600101611748565b508034146117c65760405162461bcd60e51b81526020600482015260156024820152742b30b63ab2903237b2b9903737ba1036b0ba31b41760591b6044820152606401610b34565b600a819055600b8190556117d8612b19565b600c805460ff1916600117905560405133907f2b3c5e8e58d7d1e42ccd071c6f749d53f9ee506020a81fad9ff98140ccccde69906118199034815260200190565b60405180910390a250565b61182c610ae6565b8261183681612944565b60115460ff16801561185257506001546001600160a01b031633145b6118975760405162461bcd60e51b81526020600482015260166024820152752932b232b632b3b0ba34b7b7103234b9b0b13632b21760511b6044820152606401610b34565b306001600160a01b038416036118e75760405162461bcd60e51b81526020600482015260156024820152742a30b933b2ba1031b0b713ba1031329039b2b6331760591b6044820152606401610b34565b6118fb6001600160a01b0384166003612bf5565b61193e5760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21021b729ba30b5b4b733ab199760611b6044820152606401610b34565b5f8211801561195c5750600d5482600e54611959919061371d565b11155b6119995760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b2103b30b63ab29760911b6044820152606401610b34565b6001600160a01b0384165f9081526002602052604090205415806119e357506001600160a01b0384165f9081526002602052604090205442906119e09062093a809061371d565b11155b611a275760405162461bcd60e51b815260206004820152601560248201527421b0b713ba103932b232b632b3b0ba32903cb2ba1760591b6044820152606401610b34565b600d80548390039055604051632801ba4360e21b81526001600160a01b03858116600483015284169063a006e90c9084906024015f604051808303818588803b158015611a72575f80fd5b505af1158015611a84573d5f803e3d5ffd5b5050505050611a91612865565b826001600160a01b0316846001600160a01b03167f4830c21a6eb4b2b3af6c4d24cfbd78ce437d5b690aac56ceec54df1d4d24e1a084604051611ad691815260200190565b60405180910390a350505050565b5f8051602061393c833981519152611afb81610b3f565b5f82815260106020526040902080546001600160a01b0316611b2f5760405162461bcd60e51b8152600401610b3490613744565b5f600382015460ff166002811115611b4957611b496131ce565b14611b875760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039ba30ba329760911b6044820152606401610b34565b600d5481600101541115611bdd5760405162461bcd60e51b815260206004820152601a60248201527f56616c7565206973206e6f7420776974686472617761626c652e0000000000006044820152606401610b34565b4281600201541115611c295760405162461bcd60e51b81526020600482015260156024820152742737ba103bb4ba34323930bbb0b13632903cb2ba1760591b6044820152606401610b34565b600281015462093a8001428111611cad5760038201805460ff191660021790556001820154600e8054919091039055611c60612865565b815460018301546040519081526001600160a01b039091169085907fcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df9060200160405180910390a3610dec565b60038201805460ff1916600190811790915582018054600d80549190910390558054600e8054919091039055825490546040515f926001600160a01b031691908381818185875af1925050503d805f8114611d23576040519150601f19603f3d011682016040523d82523d5f602084013e611d28565b606091505b5050905080611d6c5760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b6044820152606401610b34565b611d74612865565b825460018401546040519081526001600160a01b039091169086907f7a2d48d1df1249429730a253e5713a7d7a2024913de2fbccafdf36efdd32bf059060200160405180910390a35050505050565b611dcb6128f1565b5f805160206138fc833981519152611de281610b3f565b335f8181526009602052604090205460ff1615611e415760405162461bcd60e51b815260206004820152601c60248201527f4d73672e73656e64657220616c72656164792072657669657765642e000000006044820152606401610b34565b6001600160a01b0381165f81815260096020526040808220805460ff19166001908117909155600880549091019055517f65d287f4118b03f8cc979b433fd0b2246074200dd5da70c9daf204aaa0da1a2c9190a2611eab5f805160206138fc83398151915261259a565b60085403611ee9576007805460ff191660011790556040517f244ff9a3d72b1dc5a4bce7f05fb615395f2a8c7ad6ea525d2bac9030f75d7a9b905f90a15b5050565b5f828152601460205260408120611f049083612e03565b9392505050565b5f7f0000000000000000000000000000000000000000000000000000000000000000158015611f4657505f805160206138dc83398151915283145b15611f5357506001610bf8565b5f8381526013602090815260408083206001600160a01b038616845290915290205460ff16611f04565b5f805160206138bc833981519152611f9481610b3f565b7f0000000000000000000000000000000000000000000000000000000000000000156120025760405162461bcd60e51b815260206004820152601a60248201527f5075626c69632064656c65676174696f6e20656e61626c65642e0000000000006044820152606401610b34565b600480546001600160a01b0319166001600160a01b0384169081179091556040517fbe1849831e6775a2022006aeebcc00f70d10bc4202c8187e215ad9e9911f2b06905f90a25050565b612054610ae6565b8061205e81612944565b60115460ff166120a95760405162461bcd60e51b81526020600482015260166024820152752932b232b632b3b0ba34b7b7103234b9b0b13632b21760511b6044820152606401610b34565b6120b4336003612bf5565b6120f75760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21021b729ba30b5b4b733ab199760611b6044820152606401610b34565b6001600160a01b038083165f908152600260209081526040808320429055600154815163228cb73360e01b81529151941693849263228cb73392600480820193918290030181865afa15801561214f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121739190613643565b6040516325fb490360e11b81526001600160a01b0386811660048301524792909201925090831690634bf692069034906024015f604051808303818588803b1580156121bd575f80fd5b505af11580156121cf573d5f803e3d5ffd5b50505050504781146122175760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b21039ba30b5b2a337b91760791b6044820152606401610b34565b604051348152309033906001600160a01b038716907fcbbd772ac9792b90fb77aa3194b0279ec4dbea1880ecc3674ecd2f4bf39b0c909060200160405180910390a450505050565b612267612e0e565b6122c25760405162461bcd60e51b815260206004820152602660248201527f556e617574686f72697a656420746f2061636365707420726577617264206164604482015265323932b9b99760d11b6064820152608401610b34565b6004546001600160a01b038281169116146123315760405162461bcd60e51b815260206004820152602960248201527f476976656e206164647265737320646f6573206e6f74206d6174636820746865604482015268103832b73234b7339760b91b6064820152608401610b34565b6004805460405163832a2aad60e01b81526001600160a01b03909116918101919091526104009063832a2aad906024015f604051808303815f87803b158015612378575f80fd5b505af115801561238a573d5f803e3d5ffd5b505060048054600380546001600160a01b0383166001600160a01b031991821681179092559091169091556040519092507f36e0b58f785f850d6622cb742fa1e0750728da3c75816916830b50b747efb6b691505f90a250565b6123ec6128f1565b5f805160206138fc83398151915261240381610b3f565b6124176001600160a01b03831660016129eb565b6113075760405162461bcd60e51b815260206004820152601760248201527624b73b30b634b21029ba30b5b4b733aa3930b1b5b2b91760491b6044820152606401610b34565b5f8051602061391c83398151915261247481610b3f565b5f82815260106020526040902080546001600160a01b03166124a85760405162461bcd60e51b8152600401610b3490613744565b5f600382015460ff1660028111156124c2576124c26131ce565b146125005760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039ba30ba329760911b6044820152606401610b34565b60038101805460ff191660021790556001810154600e8054919091039055612526612865565b805460018201546040519081526001600160a01b039091169084907fcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df9060200160405180910390a3505050565b61257b610ae6565b5f805160206138dc83398151915261259281610b3f565b610b49610b4c565b5f818152601460205260408120610bf890612ee6565b60605f8315806125c25750600f548410155b6125cc57836125d0565b600f545b90506125dc8582613786565b67ffffffffffffffff8111156125f4576125f461322b565b60405190808252806020026020018201604052801561261d578160200160208202803683370190505b5091505f855b828110156126955784600281111561263d5761263d6131ce565b5f8281526010602052604090206003015460ff166002811115612662576126626131ce565b0361268d578084838060010194508151811061268057612680613730565b6020026020010181815250505b600101612623565b508252509392505050565b5f828152601360205260409020600101546126ba81610b3f565b610dec83836129c0565b5f805160206138bc8339815191526126db81610b3f565b7f00000000000000000000000000000000000000000000000000000000000000006127485760405162461bcd60e51b815260206004820152601b60248201527f5075626c69632064656c65676174696f6e2064697361626c65642e00000000006044820152606401610b34565b6011805460ff8082161560ff1990921682179092556040519116151581527f02efa9113845c402ffbbc237400eeba75de99c23f054459573f88caa5a9418989060200160405180910390a150565b61279e6128f1565b5f805160206138fc8339815191526127b581610b3f565b815f036127fc5760405162461bcd60e51b815260206004820152601560248201527423a19024a21031b0b73737ba103132903d32b9379760591b6044820152606401610b34565b5f82815560405183917f469cb2f3ce5d5e879269af625b54571651feb0ede6e83ee89b9c888648af514f91a25050565b6128368282611f0b565b611ee95760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610b34565b601154604051635605a4e560e01b81523060048201526101009091046001600160a01b031690635605a4e5906024015f604051808303815f87803b1580156128ab575f80fd5b505af1158015610dec573d5f803e3d5ffd5b5f6001600160e01b03198216637965db0b60e01b1480610bf857506301ffc9a760e01b6001600160e01b0319831614610bf8565b600c5460ff1615610b3d5760405162461bcd60e51b815260206004820152601e60248201527f436f6e747261637420686173206265656e20696e697469616c697a65642e00006044820152606401610b34565b6001600160a01b038116610b495760405162461bcd60e51b815260206004820152601060248201526f20b2323932b9b99034b990373ab6361760811b6044820152606401610b34565b5f806129998484612eef565b90508015611f04575f8481526014602052604090206129b89084612f80565b509392505050565b5f806129cc8484612f94565b90508015611f04575f8481526014602052604090206129b89084612fff565b5f826001600160a01b03163b5f03612a0457505f610bf8565b5f839050806001600160a01b0316634b6a94cc6040518163ffffffff1660e01b81526004015f60405180830381865afa158015612a43573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052612a6a9190810190613799565b805190602001207fccfe28814eb3e9d0e6cfd45eb754f27c5eb4399dac6379181362ebd8b6a865c314612aa0575f915050610bf8565b82816001600160a01b031663ffa1ad746040518163ffffffff1660e01b8152600401602060405180830381865afa158015612add573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b019190613643565b14612b0f575f915050610bf8565b5060019392505050565b7f0000000000000000000000000000000000000000000000000000000000000000612b87575f612b565f805160206138bc8339815191525f611eed565b9050612b6f5f8051602061391c8339815191528261298d565b50611ee95f8051602061393c8339815191528261298d565b600154612bab905f805160206138dc833981519152906001600160a01b031661298d565b50600154612bd0905f8051602061391c833981519152906001600160a01b031661298d565b50600154610b49905f8051602061393c833981519152906001600160a01b031661298d565b5f826001600160a01b03163b5f03612c0e57505f610bf8565b5f839050806001600160a01b0316634b6a94cc6040518163ffffffff1660e01b81526004015f60405180830381865afa158015612c4d573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052612c749190810190613799565b805190602001207fa2f5d64a9f0bcdeed97e196203f5a8c1a5c8293988b625b7925686d30805508214612caa575f915050610bf8565b82816001600160a01b031663ffa1ad746040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ce7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612d0b9190613643565b14612d19575f915050610bf8565b5f816001600160a01b031663139d7fed6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d56573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612d7a9190613628565b604051630aabaead60e11b81526001600160a01b03821660048201529091505f90610400906315575d5a90602401606060405180830381865afa158015612dc3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612de791906137cb565b506001600160a01b039081169088161494505050505092915050565b5f611f048383613013565b6004545f906001600160a01b03163303612e285750600190565b5f6104006001600160a01b0316631865c57d6040518163ffffffff1660e01b81526004015f60405180830381865afa158015612e66573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052612e8d919081019061380a565b5090505f5b8151811015612ede57818181518110612ead57612ead613730565b60200260200101516001600160a01b0316336001600160a01b031603612ed65760019250505090565b600101612e92565b505f91505090565b5f610bf8825490565b5f612efa8383611f0b565b612f79575f8381526013602090815260408083206001600160a01b03861684529091529020805460ff19166001179055612f313390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610bf8565b505f610bf8565b5f611f04836001600160a01b038416613039565b5f612f9f8383611f0b565b15612f79575f8381526013602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610bf8565b5f611f04836001600160a01b03841661307e565b5f825f01828154811061302857613028613730565b905f5260205f200154905092915050565b5f818152600183016020526040812054612f7957508154600181810184555f848152602080822090930184905584548482528286019093526040902091909155610bf8565b5f8181526001830160205260408120548015613158575f6130a0600183613786565b85549091505f906130b390600190613786565b9050808214613112575f865f0182815481106130d1576130d1613730565b905f5260205f200154905080875f0184815481106130f1576130f1613730565b5f918252602080832090910192909255918252600188019052604090208390555b8554869080613123576131236138a7565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f905560019350505050610bf8565b5f915050610bf8565b5f60208284031215613171575f80fd5b81356001600160e01b031981168114611f04575f80fd5b6001600160a01b0381168114610b49575f80fd5b5f602082840312156131ac575f80fd5b8135611f0481613188565b5f602082840312156131c7575f80fd5b5035919050565b634e487b7160e01b5f52602160045260245ffd5b6001600160a01b03851681526020810184905260408101839052608081016003831061321c57634e487b7160e01b5f52602160045260245ffd5b82606083015295945050505050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff811182821017156132685761326861322b565b604052919050565b5f67ffffffffffffffff8211156132895761328961322b565b50601f01601f191660200190565b5f80604083850312156132a8575f80fd5b82356132b381613188565b9150602083013567ffffffffffffffff8111156132ce575f80fd5b8301601f810185136132de575f80fd5b80356132f16132ec82613270565b61323f565b818152866020838501011115613305575f80fd5b816020840160208301375f602083830101528093505050509250929050565b5f8060408385031215613335575f80fd5b82359150602083013561334781613188565b809150509250929050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f611f046020830184613352565b5f80604083850312156133a3575f80fd5b82356133ae81613188565b946020939093013593505050565b5f815180845260208085019450602084015f5b838110156133eb578151875295820195908201906001016133cf565b509495945050505050565b60a081525f61340860a08301886133bc565b828103602084015261341a81886133bc565b60408401969096525050606081019290925260809091015292915050565b5f805f6060848603121561344a575f80fd5b833561345581613188565b9250602084013561346581613188565b929592945050506040919091013590565b5f8060408385031215613487575f80fd5b50508035926020909101359150565b5f805f606084860312156134a8575f80fd5b83359250602084013591506040840135600381106134c4575f80fd5b809150509250925092565b602081525f611f0460208301846133bc565b5f82601f8301126134f0575f80fd5b81516134fe6132ec82613270565b818152846020838601011115613512575f80fd5b8160208501602083015e5f918101602001919091529392505050565b5f6020828403121561353e575f80fd5b815167ffffffffffffffff80821115613555575f80fd5b9083019060808286031215613568575f80fd5b6040516080810181811083821117156135835761358361322b565b604052825161359181613188565b815260208301516135a181613188565b6020820152604083810151908201526060830151828111156135c1575f80fd5b6135cd878286016134e1565b60608301525095945050505050565b602081525f60018060a01b038084511660208401528060208501511660408401525060408301516060830152606083015160808084015261362060a0840182613352565b949350505050565b5f60208284031215613638575f80fd5b8151611f0481613188565b5f60208284031215613653575f80fd5b5051919050565b5f67ffffffffffffffff8211156136735761367361322b565b5060051b60200190565b5f602080838503121561368e575f80fd5b825167ffffffffffffffff8111156136a4575f80fd5b8301601f810185136136b4575f80fd5b80516136c26132ec8261365a565b81815260059190911b820183019083810190878311156136e0575f80fd5b928401925b828410156136fe578351825292840192908401906136e5565b979650505050505050565b634e487b7160e01b5f52601160045260245ffd5b80820180821115610bf857610bf8613709565b634e487b7160e01b5f52603260045260245ffd5b60208082526022908201527f5769746864726177616c207265717565737420646f6573206e6f7420657869736040820152613a1760f11b606082015260800190565b81810381811115610bf857610bf8613709565b5f602082840312156137a9575f80fd5b815167ffffffffffffffff8111156137bf575f80fd5b613620848285016134e1565b5f805f606084860312156137dd575f80fd5b83516137e881613188565b60208501519093506137f981613188565b60408501519092506134c481613188565b5f806040838503121561381b575f80fd5b825167ffffffffffffffff811115613831575f80fd5b8301601f81018513613841575f80fd5b805160206138516132ec8361365a565b82815260059290921b8301810191818101908884111561386f575f80fd5b938201935b8385101561389657845161388781613188565b82529382019390820190613874565b969091015195979596505050505050565b634e487b7160e01b5f52603160045260245ffdfe97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929b9e206fa2af7ee1331b72ce58b6d938ac810ce9b5cdb65d35ab723fd67badf9ea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756bbd235a04f337cdf14b2f1846017b33479fad2c3ae66d711584f13463a2170adb8f45a81765d409768c063c845ce4a132a06990e9ba80f54a39553a43ea2c34a264697066735822122099daf6a025170c3a4e3d63a2f82bc097797b15264efd7b25ade9f09f491c056264736f6c63430008190033`

// Deprecated: Use CnStakingV3MetaData.Sigs instead.
// CnStakingV3FuncSigs maps the 4-byte function signature to its string representation.
var CnStakingV3FuncSigs = CnStakingV3MetaData.Sigs

// CnStakingV3Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CnStakingV3MetaData.Bin instead.
var CnStakingV3Bin = CnStakingV3MetaData.Bin

// DeployCnStakingV3 deploys a new Kaia contract, binding an instance of CnStakingV3 to it.
func DeployCnStakingV3(auth *bind.TransactOpts, backend bind.ContractBackend, _owner common.Address, _nodeId common.Address, _rewardAddress common.Address, _unlockTime []*big.Int, _unlockAmount []*big.Int) (common.Address, *types.Transaction, *CnStakingV3, error) {
	parsed, err := CnStakingV3MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CnStakingV3Bin), backend, _owner, _nodeId, _rewardAddress, _unlockTime, _unlockAmount)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CnStakingV3{CnStakingV3Caller: CnStakingV3Caller{contract: contract}, CnStakingV3Transactor: CnStakingV3Transactor{contract: contract}, CnStakingV3Filterer: CnStakingV3Filterer{contract: contract}}, nil
}

// CnStakingV3 is an auto generated Go binding around a Kaia contract.
type CnStakingV3 struct {
	CnStakingV3Caller     // Read-only binding to the contract
	CnStakingV3Transactor // Write-only binding to the contract
	CnStakingV3Filterer   // Log filterer for contract events
}

// CnStakingV3Caller is an auto generated read-only Go binding around a Kaia contract.
type CnStakingV3Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CnStakingV3Transactor is an auto generated write-only Go binding around a Kaia contract.
type CnStakingV3Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CnStakingV3Filterer is an auto generated log filtering Go binding around a Kaia contract events.
type CnStakingV3Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CnStakingV3Session is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type CnStakingV3Session struct {
	Contract     *CnStakingV3      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CnStakingV3CallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type CnStakingV3CallerSession struct {
	Contract *CnStakingV3Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// CnStakingV3TransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type CnStakingV3TransactorSession struct {
	Contract     *CnStakingV3Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// CnStakingV3Raw is an auto generated low-level Go binding around a Kaia contract.
type CnStakingV3Raw struct {
	Contract *CnStakingV3 // Generic contract binding to access the raw methods on
}

// CnStakingV3CallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type CnStakingV3CallerRaw struct {
	Contract *CnStakingV3Caller // Generic read-only contract binding to access the raw methods on
}

// CnStakingV3TransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type CnStakingV3TransactorRaw struct {
	Contract *CnStakingV3Transactor // Generic write-only contract binding to access the raw methods on
}

// NewCnStakingV3 creates a new instance of CnStakingV3, bound to a specific deployed contract.
func NewCnStakingV3(address common.Address, backend bind.ContractBackend) (*CnStakingV3, error) {
	contract, err := bindCnStakingV3(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3{CnStakingV3Caller: CnStakingV3Caller{contract: contract}, CnStakingV3Transactor: CnStakingV3Transactor{contract: contract}, CnStakingV3Filterer: CnStakingV3Filterer{contract: contract}}, nil
}

// NewCnStakingV3Caller creates a new read-only instance of CnStakingV3, bound to a specific deployed contract.
func NewCnStakingV3Caller(address common.Address, caller bind.ContractCaller) (*CnStakingV3Caller, error) {
	contract, err := bindCnStakingV3(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3Caller{contract: contract}, nil
}

// NewCnStakingV3Transactor creates a new write-only instance of CnStakingV3, bound to a specific deployed contract.
func NewCnStakingV3Transactor(address common.Address, transactor bind.ContractTransactor) (*CnStakingV3Transactor, error) {
	contract, err := bindCnStakingV3(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3Transactor{contract: contract}, nil
}

// NewCnStakingV3Filterer creates a new log filterer instance of CnStakingV3, bound to a specific deployed contract.
func NewCnStakingV3Filterer(address common.Address, filterer bind.ContractFilterer) (*CnStakingV3Filterer, error) {
	contract, err := bindCnStakingV3(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3Filterer{contract: contract}, nil
}

// bindCnStakingV3 binds a generic wrapper to an already deployed contract.
func bindCnStakingV3(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CnStakingV3MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CnStakingV3 *CnStakingV3Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CnStakingV3.Contract.CnStakingV3Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CnStakingV3 *CnStakingV3Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3.Contract.CnStakingV3Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CnStakingV3 *CnStakingV3Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CnStakingV3.Contract.CnStakingV3Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CnStakingV3 *CnStakingV3CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CnStakingV3.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CnStakingV3 *CnStakingV3TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CnStakingV3 *CnStakingV3TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CnStakingV3.Contract.contract.Transact(opts, method, params...)
}

// ADDRESSBOOKADDRESS is a free data retrieval call binding the contract method 0xf2f2f49b.
//
// Solidity: function ADDRESS_BOOK_ADDRESS() view returns(address)
func (_CnStakingV3 *CnStakingV3Caller) ADDRESSBOOKADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "ADDRESS_BOOK_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ADDRESSBOOKADDRESS is a free data retrieval call binding the contract method 0xf2f2f49b.
//
// Solidity: function ADDRESS_BOOK_ADDRESS() view returns(address)
func (_CnStakingV3 *CnStakingV3Session) ADDRESSBOOKADDRESS() (common.Address, error) {
	return _CnStakingV3.Contract.ADDRESSBOOKADDRESS(&_CnStakingV3.CallOpts)
}

// ADDRESSBOOKADDRESS is a free data retrieval call binding the contract method 0xf2f2f49b.
//
// Solidity: function ADDRESS_BOOK_ADDRESS() view returns(address)
func (_CnStakingV3 *CnStakingV3CallerSession) ADDRESSBOOKADDRESS() (common.Address, error) {
	return _CnStakingV3.Contract.ADDRESSBOOKADDRESS(&_CnStakingV3.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_CnStakingV3 *CnStakingV3Caller) ADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_CnStakingV3 *CnStakingV3Session) ADMINROLE() ([32]byte, error) {
	return _CnStakingV3.Contract.ADMINROLE(&_CnStakingV3.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_CnStakingV3 *CnStakingV3CallerSession) ADMINROLE() ([32]byte, error) {
	return _CnStakingV3.Contract.ADMINROLE(&_CnStakingV3.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_CnStakingV3 *CnStakingV3Caller) CONTRACTTYPE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "CONTRACT_TYPE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_CnStakingV3 *CnStakingV3Session) CONTRACTTYPE() (string, error) {
	return _CnStakingV3.Contract.CONTRACTTYPE(&_CnStakingV3.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_CnStakingV3 *CnStakingV3CallerSession) CONTRACTTYPE() (string, error) {
	return _CnStakingV3.Contract.CONTRACTTYPE(&_CnStakingV3.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CnStakingV3 *CnStakingV3Caller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CnStakingV3 *CnStakingV3Session) DEFAULTADMINROLE() ([32]byte, error) {
	return _CnStakingV3.Contract.DEFAULTADMINROLE(&_CnStakingV3.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CnStakingV3 *CnStakingV3CallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CnStakingV3.Contract.DEFAULTADMINROLE(&_CnStakingV3.CallOpts)
}

// ONEWEEK is a free data retrieval call binding the contract method 0x8e6f6b77.
//
// Solidity: function ONE_WEEK() view returns(uint256)
func (_CnStakingV3 *CnStakingV3Caller) ONEWEEK(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "ONE_WEEK")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ONEWEEK is a free data retrieval call binding the contract method 0x8e6f6b77.
//
// Solidity: function ONE_WEEK() view returns(uint256)
func (_CnStakingV3 *CnStakingV3Session) ONEWEEK() (*big.Int, error) {
	return _CnStakingV3.Contract.ONEWEEK(&_CnStakingV3.CallOpts)
}

// ONEWEEK is a free data retrieval call binding the contract method 0x8e6f6b77.
//
// Solidity: function ONE_WEEK() view returns(uint256)
func (_CnStakingV3 *CnStakingV3CallerSession) ONEWEEK() (*big.Int, error) {
	return _CnStakingV3.Contract.ONEWEEK(&_CnStakingV3.CallOpts)
}

// OPERATORROLE is a free data retrieval call binding the contract method 0xf5b541a6.
//
// Solidity: function OPERATOR_ROLE() view returns(bytes32)
func (_CnStakingV3 *CnStakingV3Caller) OPERATORROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "OPERATOR_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// OPERATORROLE is a free data retrieval call binding the contract method 0xf5b541a6.
//
// Solidity: function OPERATOR_ROLE() view returns(bytes32)
func (_CnStakingV3 *CnStakingV3Session) OPERATORROLE() ([32]byte, error) {
	return _CnStakingV3.Contract.OPERATORROLE(&_CnStakingV3.CallOpts)
}

// OPERATORROLE is a free data retrieval call binding the contract method 0xf5b541a6.
//
// Solidity: function OPERATOR_ROLE() view returns(bytes32)
func (_CnStakingV3 *CnStakingV3CallerSession) OPERATORROLE() ([32]byte, error) {
	return _CnStakingV3.Contract.OPERATORROLE(&_CnStakingV3.CallOpts)
}

// STAKERROLE is a free data retrieval call binding the contract method 0x3780b3ed.
//
// Solidity: function STAKER_ROLE() view returns(bytes32)
func (_CnStakingV3 *CnStakingV3Caller) STAKERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "STAKER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// STAKERROLE is a free data retrieval call binding the contract method 0x3780b3ed.
//
// Solidity: function STAKER_ROLE() view returns(bytes32)
func (_CnStakingV3 *CnStakingV3Session) STAKERROLE() ([32]byte, error) {
	return _CnStakingV3.Contract.STAKERROLE(&_CnStakingV3.CallOpts)
}

// STAKERROLE is a free data retrieval call binding the contract method 0x3780b3ed.
//
// Solidity: function STAKER_ROLE() view returns(bytes32)
func (_CnStakingV3 *CnStakingV3CallerSession) STAKERROLE() ([32]byte, error) {
	return _CnStakingV3.Contract.STAKERROLE(&_CnStakingV3.CallOpts)
}

// STAKELOCKUP is a free data retrieval call binding the contract method 0x96106ae4.
//
// Solidity: function STAKE_LOCKUP() view returns(uint256)
func (_CnStakingV3 *CnStakingV3Caller) STAKELOCKUP(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "STAKE_LOCKUP")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// STAKELOCKUP is a free data retrieval call binding the contract method 0x96106ae4.
//
// Solidity: function STAKE_LOCKUP() view returns(uint256)
func (_CnStakingV3 *CnStakingV3Session) STAKELOCKUP() (*big.Int, error) {
	return _CnStakingV3.Contract.STAKELOCKUP(&_CnStakingV3.CallOpts)
}

// STAKELOCKUP is a free data retrieval call binding the contract method 0x96106ae4.
//
// Solidity: function STAKE_LOCKUP() view returns(uint256)
func (_CnStakingV3 *CnStakingV3CallerSession) STAKELOCKUP() (*big.Int, error) {
	return _CnStakingV3.Contract.STAKELOCKUP(&_CnStakingV3.CallOpts)
}

// UNSTAKINGAPPROVERROLE is a free data retrieval call binding the contract method 0x0c07d842.
//
// Solidity: function UNSTAKING_APPROVER_ROLE() view returns(bytes32)
func (_CnStakingV3 *CnStakingV3Caller) UNSTAKINGAPPROVERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "UNSTAKING_APPROVER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// UNSTAKINGAPPROVERROLE is a free data retrieval call binding the contract method 0x0c07d842.
//
// Solidity: function UNSTAKING_APPROVER_ROLE() view returns(bytes32)
func (_CnStakingV3 *CnStakingV3Session) UNSTAKINGAPPROVERROLE() ([32]byte, error) {
	return _CnStakingV3.Contract.UNSTAKINGAPPROVERROLE(&_CnStakingV3.CallOpts)
}

// UNSTAKINGAPPROVERROLE is a free data retrieval call binding the contract method 0x0c07d842.
//
// Solidity: function UNSTAKING_APPROVER_ROLE() view returns(bytes32)
func (_CnStakingV3 *CnStakingV3CallerSession) UNSTAKINGAPPROVERROLE() ([32]byte, error) {
	return _CnStakingV3.Contract.UNSTAKINGAPPROVERROLE(&_CnStakingV3.CallOpts)
}

// UNSTAKINGCLAIMERROLE is a free data retrieval call binding the contract method 0x9c394c5d.
//
// Solidity: function UNSTAKING_CLAIMER_ROLE() view returns(bytes32)
func (_CnStakingV3 *CnStakingV3Caller) UNSTAKINGCLAIMERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "UNSTAKING_CLAIMER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// UNSTAKINGCLAIMERROLE is a free data retrieval call binding the contract method 0x9c394c5d.
//
// Solidity: function UNSTAKING_CLAIMER_ROLE() view returns(bytes32)
func (_CnStakingV3 *CnStakingV3Session) UNSTAKINGCLAIMERROLE() ([32]byte, error) {
	return _CnStakingV3.Contract.UNSTAKINGCLAIMERROLE(&_CnStakingV3.CallOpts)
}

// UNSTAKINGCLAIMERROLE is a free data retrieval call binding the contract method 0x9c394c5d.
//
// Solidity: function UNSTAKING_CLAIMER_ROLE() view returns(bytes32)
func (_CnStakingV3 *CnStakingV3CallerSession) UNSTAKINGCLAIMERROLE() ([32]byte, error) {
	return _CnStakingV3.Contract.UNSTAKINGCLAIMERROLE(&_CnStakingV3.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_CnStakingV3 *CnStakingV3Caller) VERSION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_CnStakingV3 *CnStakingV3Session) VERSION() (*big.Int, error) {
	return _CnStakingV3.Contract.VERSION(&_CnStakingV3.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_CnStakingV3 *CnStakingV3CallerSession) VERSION() (*big.Int, error) {
	return _CnStakingV3.Contract.VERSION(&_CnStakingV3.CallOpts)
}

// GcId is a free data retrieval call binding the contract method 0x6d2714db.
//
// Solidity: function gcId() view returns(uint256)
func (_CnStakingV3 *CnStakingV3Caller) GcId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "gcId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GcId is a free data retrieval call binding the contract method 0x6d2714db.
//
// Solidity: function gcId() view returns(uint256)
func (_CnStakingV3 *CnStakingV3Session) GcId() (*big.Int, error) {
	return _CnStakingV3.Contract.GcId(&_CnStakingV3.CallOpts)
}

// GcId is a free data retrieval call binding the contract method 0x6d2714db.
//
// Solidity: function gcId() view returns(uint256)
func (_CnStakingV3 *CnStakingV3CallerSession) GcId() (*big.Int, error) {
	return _CnStakingV3.Contract.GcId(&_CnStakingV3.CallOpts)
}

// GetApprovedStakingWithdrawalIds is a free data retrieval call binding the contract method 0xd2569eb9.
//
// Solidity: function getApprovedStakingWithdrawalIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_CnStakingV3 *CnStakingV3Caller) GetApprovedStakingWithdrawalIds(opts *bind.CallOpts, _from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "getApprovedStakingWithdrawalIds", _from, _to, _state)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetApprovedStakingWithdrawalIds is a free data retrieval call binding the contract method 0xd2569eb9.
//
// Solidity: function getApprovedStakingWithdrawalIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_CnStakingV3 *CnStakingV3Session) GetApprovedStakingWithdrawalIds(_from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	return _CnStakingV3.Contract.GetApprovedStakingWithdrawalIds(&_CnStakingV3.CallOpts, _from, _to, _state)
}

// GetApprovedStakingWithdrawalIds is a free data retrieval call binding the contract method 0xd2569eb9.
//
// Solidity: function getApprovedStakingWithdrawalIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_CnStakingV3 *CnStakingV3CallerSession) GetApprovedStakingWithdrawalIds(_from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	return _CnStakingV3.Contract.GetApprovedStakingWithdrawalIds(&_CnStakingV3.CallOpts, _from, _to, _state)
}

// GetApprovedStakingWithdrawalInfo is a free data retrieval call binding the contract method 0x725c0503.
//
// Solidity: function getApprovedStakingWithdrawalInfo(uint256 _index) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_CnStakingV3 *CnStakingV3Caller) GetApprovedStakingWithdrawalInfo(opts *bind.CallOpts, _index *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "getApprovedStakingWithdrawalInfo", _index)

	outstruct := new(struct {
		To               common.Address
		Value            *big.Int
		WithdrawableFrom *big.Int
		State            uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.To = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Value = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.WithdrawableFrom = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.State = *abi.ConvertType(out[3], new(uint8)).(*uint8)

	return *outstruct, err

}

// GetApprovedStakingWithdrawalInfo is a free data retrieval call binding the contract method 0x725c0503.
//
// Solidity: function getApprovedStakingWithdrawalInfo(uint256 _index) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_CnStakingV3 *CnStakingV3Session) GetApprovedStakingWithdrawalInfo(_index *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	return _CnStakingV3.Contract.GetApprovedStakingWithdrawalInfo(&_CnStakingV3.CallOpts, _index)
}

// GetApprovedStakingWithdrawalInfo is a free data retrieval call binding the contract method 0x725c0503.
//
// Solidity: function getApprovedStakingWithdrawalInfo(uint256 _index) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_CnStakingV3 *CnStakingV3CallerSession) GetApprovedStakingWithdrawalInfo(_index *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	return _CnStakingV3.Contract.GetApprovedStakingWithdrawalInfo(&_CnStakingV3.CallOpts, _index)
}

// GetLockupStakingInfo is a free data retrieval call binding the contract method 0x5ecd75f2.
//
// Solidity: function getLockupStakingInfo() view returns(uint256[] unlockTime, uint256[] unlockAmount, uint256 initial, uint256 remaining, uint256 withdrawable)
func (_CnStakingV3 *CnStakingV3Caller) GetLockupStakingInfo(opts *bind.CallOpts) (struct {
	UnlockTime   []*big.Int
	UnlockAmount []*big.Int
	Initial      *big.Int
	Remaining    *big.Int
	Withdrawable *big.Int
}, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "getLockupStakingInfo")

	outstruct := new(struct {
		UnlockTime   []*big.Int
		UnlockAmount []*big.Int
		Initial      *big.Int
		Remaining    *big.Int
		Withdrawable *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.UnlockTime = *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
	outstruct.UnlockAmount = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)
	outstruct.Initial = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Remaining = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Withdrawable = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetLockupStakingInfo is a free data retrieval call binding the contract method 0x5ecd75f2.
//
// Solidity: function getLockupStakingInfo() view returns(uint256[] unlockTime, uint256[] unlockAmount, uint256 initial, uint256 remaining, uint256 withdrawable)
func (_CnStakingV3 *CnStakingV3Session) GetLockupStakingInfo() (struct {
	UnlockTime   []*big.Int
	UnlockAmount []*big.Int
	Initial      *big.Int
	Remaining    *big.Int
	Withdrawable *big.Int
}, error) {
	return _CnStakingV3.Contract.GetLockupStakingInfo(&_CnStakingV3.CallOpts)
}

// GetLockupStakingInfo is a free data retrieval call binding the contract method 0x5ecd75f2.
//
// Solidity: function getLockupStakingInfo() view returns(uint256[] unlockTime, uint256[] unlockAmount, uint256 initial, uint256 remaining, uint256 withdrawable)
func (_CnStakingV3 *CnStakingV3CallerSession) GetLockupStakingInfo() (struct {
	UnlockTime   []*big.Int
	UnlockAmount []*big.Int
	Initial      *big.Int
	Remaining    *big.Int
	Withdrawable *big.Int
}, error) {
	return _CnStakingV3.Contract.GetLockupStakingInfo(&_CnStakingV3.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CnStakingV3 *CnStakingV3Caller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CnStakingV3 *CnStakingV3Session) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CnStakingV3.Contract.GetRoleAdmin(&_CnStakingV3.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CnStakingV3 *CnStakingV3CallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CnStakingV3.Contract.GetRoleAdmin(&_CnStakingV3.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_CnStakingV3 *CnStakingV3Caller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_CnStakingV3 *CnStakingV3Session) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _CnStakingV3.Contract.GetRoleMember(&_CnStakingV3.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_CnStakingV3 *CnStakingV3CallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _CnStakingV3.Contract.GetRoleMember(&_CnStakingV3.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_CnStakingV3 *CnStakingV3Caller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_CnStakingV3 *CnStakingV3Session) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _CnStakingV3.Contract.GetRoleMemberCount(&_CnStakingV3.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_CnStakingV3 *CnStakingV3CallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _CnStakingV3.Contract.GetRoleMemberCount(&_CnStakingV3.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CnStakingV3 *CnStakingV3Caller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CnStakingV3 *CnStakingV3Session) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CnStakingV3.Contract.HasRole(&_CnStakingV3.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CnStakingV3 *CnStakingV3CallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CnStakingV3.Contract.HasRole(&_CnStakingV3.CallOpts, role, account)
}

// InitialLockupStaking is a free data retrieval call binding the contract method 0x06704222.
//
// Solidity: function initialLockupStaking() view returns(uint256)
func (_CnStakingV3 *CnStakingV3Caller) InitialLockupStaking(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "initialLockupStaking")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InitialLockupStaking is a free data retrieval call binding the contract method 0x06704222.
//
// Solidity: function initialLockupStaking() view returns(uint256)
func (_CnStakingV3 *CnStakingV3Session) InitialLockupStaking() (*big.Int, error) {
	return _CnStakingV3.Contract.InitialLockupStaking(&_CnStakingV3.CallOpts)
}

// InitialLockupStaking is a free data retrieval call binding the contract method 0x06704222.
//
// Solidity: function initialLockupStaking() view returns(uint256)
func (_CnStakingV3 *CnStakingV3CallerSession) InitialLockupStaking() (*big.Int, error) {
	return _CnStakingV3.Contract.InitialLockupStaking(&_CnStakingV3.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_CnStakingV3 *CnStakingV3Caller) IsInitialized(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "isInitialized")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_CnStakingV3 *CnStakingV3Session) IsInitialized() (bool, error) {
	return _CnStakingV3.Contract.IsInitialized(&_CnStakingV3.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_CnStakingV3 *CnStakingV3CallerSession) IsInitialized() (bool, error) {
	return _CnStakingV3.Contract.IsInitialized(&_CnStakingV3.CallOpts)
}

// IsPublicDelegationEnabled is a free data retrieval call binding the contract method 0xbfc7e948.
//
// Solidity: function isPublicDelegationEnabled() view returns(bool)
func (_CnStakingV3 *CnStakingV3Caller) IsPublicDelegationEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "isPublicDelegationEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPublicDelegationEnabled is a free data retrieval call binding the contract method 0xbfc7e948.
//
// Solidity: function isPublicDelegationEnabled() view returns(bool)
func (_CnStakingV3 *CnStakingV3Session) IsPublicDelegationEnabled() (bool, error) {
	return _CnStakingV3.Contract.IsPublicDelegationEnabled(&_CnStakingV3.CallOpts)
}

// IsPublicDelegationEnabled is a free data retrieval call binding the contract method 0xbfc7e948.
//
// Solidity: function isPublicDelegationEnabled() view returns(bool)
func (_CnStakingV3 *CnStakingV3CallerSession) IsPublicDelegationEnabled() (bool, error) {
	return _CnStakingV3.Contract.IsPublicDelegationEnabled(&_CnStakingV3.CallOpts)
}

// IsRedelegationEnabled is a free data retrieval call binding the contract method 0x7a66c96b.
//
// Solidity: function isRedelegationEnabled() view returns(bool)
func (_CnStakingV3 *CnStakingV3Caller) IsRedelegationEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "isRedelegationEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRedelegationEnabled is a free data retrieval call binding the contract method 0x7a66c96b.
//
// Solidity: function isRedelegationEnabled() view returns(bool)
func (_CnStakingV3 *CnStakingV3Session) IsRedelegationEnabled() (bool, error) {
	return _CnStakingV3.Contract.IsRedelegationEnabled(&_CnStakingV3.CallOpts)
}

// IsRedelegationEnabled is a free data retrieval call binding the contract method 0x7a66c96b.
//
// Solidity: function isRedelegationEnabled() view returns(bool)
func (_CnStakingV3 *CnStakingV3CallerSession) IsRedelegationEnabled() (bool, error) {
	return _CnStakingV3.Contract.IsRedelegationEnabled(&_CnStakingV3.CallOpts)
}

// LastRedelegation is a free data retrieval call binding the contract method 0x14d3ce10.
//
// Solidity: function lastRedelegation(address ) view returns(uint256)
func (_CnStakingV3 *CnStakingV3Caller) LastRedelegation(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "lastRedelegation", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastRedelegation is a free data retrieval call binding the contract method 0x14d3ce10.
//
// Solidity: function lastRedelegation(address ) view returns(uint256)
func (_CnStakingV3 *CnStakingV3Session) LastRedelegation(arg0 common.Address) (*big.Int, error) {
	return _CnStakingV3.Contract.LastRedelegation(&_CnStakingV3.CallOpts, arg0)
}

// LastRedelegation is a free data retrieval call binding the contract method 0x14d3ce10.
//
// Solidity: function lastRedelegation(address ) view returns(uint256)
func (_CnStakingV3 *CnStakingV3CallerSession) LastRedelegation(arg0 common.Address) (*big.Int, error) {
	return _CnStakingV3.Contract.LastRedelegation(&_CnStakingV3.CallOpts, arg0)
}

// LockupConditions is a free data retrieval call binding the contract method 0x2429f8a9.
//
// Solidity: function lockupConditions() view returns(bool allReviewed, uint256 reviewedCount)
func (_CnStakingV3 *CnStakingV3Caller) LockupConditions(opts *bind.CallOpts) (struct {
	AllReviewed   bool
	ReviewedCount *big.Int
}, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "lockupConditions")

	outstruct := new(struct {
		AllReviewed   bool
		ReviewedCount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AllReviewed = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ReviewedCount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// LockupConditions is a free data retrieval call binding the contract method 0x2429f8a9.
//
// Solidity: function lockupConditions() view returns(bool allReviewed, uint256 reviewedCount)
func (_CnStakingV3 *CnStakingV3Session) LockupConditions() (struct {
	AllReviewed   bool
	ReviewedCount *big.Int
}, error) {
	return _CnStakingV3.Contract.LockupConditions(&_CnStakingV3.CallOpts)
}

// LockupConditions is a free data retrieval call binding the contract method 0x2429f8a9.
//
// Solidity: function lockupConditions() view returns(bool allReviewed, uint256 reviewedCount)
func (_CnStakingV3 *CnStakingV3CallerSession) LockupConditions() (struct {
	AllReviewed   bool
	ReviewedCount *big.Int
}, error) {
	return _CnStakingV3.Contract.LockupConditions(&_CnStakingV3.CallOpts)
}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_CnStakingV3 *CnStakingV3Caller) NodeId(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "nodeId")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_CnStakingV3 *CnStakingV3Session) NodeId() (common.Address, error) {
	return _CnStakingV3.Contract.NodeId(&_CnStakingV3.CallOpts)
}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_CnStakingV3 *CnStakingV3CallerSession) NodeId() (common.Address, error) {
	return _CnStakingV3.Contract.NodeId(&_CnStakingV3.CallOpts)
}

// PendingRewardAddress is a free data retrieval call binding the contract method 0x8740568b.
//
// Solidity: function pendingRewardAddress() view returns(address)
func (_CnStakingV3 *CnStakingV3Caller) PendingRewardAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "pendingRewardAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingRewardAddress is a free data retrieval call binding the contract method 0x8740568b.
//
// Solidity: function pendingRewardAddress() view returns(address)
func (_CnStakingV3 *CnStakingV3Session) PendingRewardAddress() (common.Address, error) {
	return _CnStakingV3.Contract.PendingRewardAddress(&_CnStakingV3.CallOpts)
}

// PendingRewardAddress is a free data retrieval call binding the contract method 0x8740568b.
//
// Solidity: function pendingRewardAddress() view returns(address)
func (_CnStakingV3 *CnStakingV3CallerSession) PendingRewardAddress() (common.Address, error) {
	return _CnStakingV3.Contract.PendingRewardAddress(&_CnStakingV3.CallOpts)
}

// PublicDelegation is a free data retrieval call binding the contract method 0xe1a12d35.
//
// Solidity: function publicDelegation() view returns(address)
func (_CnStakingV3 *CnStakingV3Caller) PublicDelegation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "publicDelegation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PublicDelegation is a free data retrieval call binding the contract method 0xe1a12d35.
//
// Solidity: function publicDelegation() view returns(address)
func (_CnStakingV3 *CnStakingV3Session) PublicDelegation() (common.Address, error) {
	return _CnStakingV3.Contract.PublicDelegation(&_CnStakingV3.CallOpts)
}

// PublicDelegation is a free data retrieval call binding the contract method 0xe1a12d35.
//
// Solidity: function publicDelegation() view returns(address)
func (_CnStakingV3 *CnStakingV3CallerSession) PublicDelegation() (common.Address, error) {
	return _CnStakingV3.Contract.PublicDelegation(&_CnStakingV3.CallOpts)
}

// RemainingLockupStaking is a free data retrieval call binding the contract method 0x7b5e0481.
//
// Solidity: function remainingLockupStaking() view returns(uint256)
func (_CnStakingV3 *CnStakingV3Caller) RemainingLockupStaking(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "remainingLockupStaking")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RemainingLockupStaking is a free data retrieval call binding the contract method 0x7b5e0481.
//
// Solidity: function remainingLockupStaking() view returns(uint256)
func (_CnStakingV3 *CnStakingV3Session) RemainingLockupStaking() (*big.Int, error) {
	return _CnStakingV3.Contract.RemainingLockupStaking(&_CnStakingV3.CallOpts)
}

// RemainingLockupStaking is a free data retrieval call binding the contract method 0x7b5e0481.
//
// Solidity: function remainingLockupStaking() view returns(uint256)
func (_CnStakingV3 *CnStakingV3CallerSession) RemainingLockupStaking() (*big.Int, error) {
	return _CnStakingV3.Contract.RemainingLockupStaking(&_CnStakingV3.CallOpts)
}

// RewardAddress is a free data retrieval call binding the contract method 0x8cf57cb9.
//
// Solidity: function rewardAddress() view returns(address)
func (_CnStakingV3 *CnStakingV3Caller) RewardAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "rewardAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RewardAddress is a free data retrieval call binding the contract method 0x8cf57cb9.
//
// Solidity: function rewardAddress() view returns(address)
func (_CnStakingV3 *CnStakingV3Session) RewardAddress() (common.Address, error) {
	return _CnStakingV3.Contract.RewardAddress(&_CnStakingV3.CallOpts)
}

// RewardAddress is a free data retrieval call binding the contract method 0x8cf57cb9.
//
// Solidity: function rewardAddress() view returns(address)
func (_CnStakingV3 *CnStakingV3CallerSession) RewardAddress() (common.Address, error) {
	return _CnStakingV3.Contract.RewardAddress(&_CnStakingV3.CallOpts)
}

// Staking is a free data retrieval call binding the contract method 0x4cf088d9.
//
// Solidity: function staking() view returns(uint256)
func (_CnStakingV3 *CnStakingV3Caller) Staking(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "staking")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Staking is a free data retrieval call binding the contract method 0x4cf088d9.
//
// Solidity: function staking() view returns(uint256)
func (_CnStakingV3 *CnStakingV3Session) Staking() (*big.Int, error) {
	return _CnStakingV3.Contract.Staking(&_CnStakingV3.CallOpts)
}

// Staking is a free data retrieval call binding the contract method 0x4cf088d9.
//
// Solidity: function staking() view returns(uint256)
func (_CnStakingV3 *CnStakingV3CallerSession) Staking() (*big.Int, error) {
	return _CnStakingV3.Contract.Staking(&_CnStakingV3.CallOpts)
}

// StakingTracker is a free data retrieval call binding the contract method 0x008c477a.
//
// Solidity: function stakingTracker() view returns(address)
func (_CnStakingV3 *CnStakingV3Caller) StakingTracker(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "stakingTracker")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakingTracker is a free data retrieval call binding the contract method 0x008c477a.
//
// Solidity: function stakingTracker() view returns(address)
func (_CnStakingV3 *CnStakingV3Session) StakingTracker() (common.Address, error) {
	return _CnStakingV3.Contract.StakingTracker(&_CnStakingV3.CallOpts)
}

// StakingTracker is a free data retrieval call binding the contract method 0x008c477a.
//
// Solidity: function stakingTracker() view returns(address)
func (_CnStakingV3 *CnStakingV3CallerSession) StakingTracker() (common.Address, error) {
	return _CnStakingV3.Contract.StakingTracker(&_CnStakingV3.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CnStakingV3 *CnStakingV3Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CnStakingV3 *CnStakingV3Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CnStakingV3.Contract.SupportsInterface(&_CnStakingV3.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CnStakingV3 *CnStakingV3CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CnStakingV3.Contract.SupportsInterface(&_CnStakingV3.CallOpts, interfaceId)
}

// Unstaking is a free data retrieval call binding the contract method 0x630b1146.
//
// Solidity: function unstaking() view returns(uint256)
func (_CnStakingV3 *CnStakingV3Caller) Unstaking(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "unstaking")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Unstaking is a free data retrieval call binding the contract method 0x630b1146.
//
// Solidity: function unstaking() view returns(uint256)
func (_CnStakingV3 *CnStakingV3Session) Unstaking() (*big.Int, error) {
	return _CnStakingV3.Contract.Unstaking(&_CnStakingV3.CallOpts)
}

// Unstaking is a free data retrieval call binding the contract method 0x630b1146.
//
// Solidity: function unstaking() view returns(uint256)
func (_CnStakingV3 *CnStakingV3CallerSession) Unstaking() (*big.Int, error) {
	return _CnStakingV3.Contract.Unstaking(&_CnStakingV3.CallOpts)
}

// VoterAddress is a free data retrieval call binding the contract method 0x992ac9fa.
//
// Solidity: function voterAddress() view returns(address)
func (_CnStakingV3 *CnStakingV3Caller) VoterAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "voterAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VoterAddress is a free data retrieval call binding the contract method 0x992ac9fa.
//
// Solidity: function voterAddress() view returns(address)
func (_CnStakingV3 *CnStakingV3Session) VoterAddress() (common.Address, error) {
	return _CnStakingV3.Contract.VoterAddress(&_CnStakingV3.CallOpts)
}

// VoterAddress is a free data retrieval call binding the contract method 0x992ac9fa.
//
// Solidity: function voterAddress() view returns(address)
func (_CnStakingV3 *CnStakingV3CallerSession) VoterAddress() (common.Address, error) {
	return _CnStakingV3.Contract.VoterAddress(&_CnStakingV3.CallOpts)
}

// WithdrawalRequestCount is a free data retrieval call binding the contract method 0x19e44e32.
//
// Solidity: function withdrawalRequestCount() view returns(uint256)
func (_CnStakingV3 *CnStakingV3Caller) WithdrawalRequestCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "withdrawalRequestCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawalRequestCount is a free data retrieval call binding the contract method 0x19e44e32.
//
// Solidity: function withdrawalRequestCount() view returns(uint256)
func (_CnStakingV3 *CnStakingV3Session) WithdrawalRequestCount() (*big.Int, error) {
	return _CnStakingV3.Contract.WithdrawalRequestCount(&_CnStakingV3.CallOpts)
}

// WithdrawalRequestCount is a free data retrieval call binding the contract method 0x19e44e32.
//
// Solidity: function withdrawalRequestCount() view returns(uint256)
func (_CnStakingV3 *CnStakingV3CallerSession) WithdrawalRequestCount() (*big.Int, error) {
	return _CnStakingV3.Contract.WithdrawalRequestCount(&_CnStakingV3.CallOpts)
}

// WithdrawalRequestMap is a free data retrieval call binding the contract method 0x284fbedc.
//
// Solidity: function withdrawalRequestMap(uint256 ) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_CnStakingV3 *CnStakingV3Caller) WithdrawalRequestMap(opts *bind.CallOpts, arg0 *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	var out []interface{}
	err := _CnStakingV3.contract.Call(opts, &out, "withdrawalRequestMap", arg0)

	outstruct := new(struct {
		To               common.Address
		Value            *big.Int
		WithdrawableFrom *big.Int
		State            uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.To = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Value = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.WithdrawableFrom = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.State = *abi.ConvertType(out[3], new(uint8)).(*uint8)

	return *outstruct, err

}

// WithdrawalRequestMap is a free data retrieval call binding the contract method 0x284fbedc.
//
// Solidity: function withdrawalRequestMap(uint256 ) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_CnStakingV3 *CnStakingV3Session) WithdrawalRequestMap(arg0 *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	return _CnStakingV3.Contract.WithdrawalRequestMap(&_CnStakingV3.CallOpts, arg0)
}

// WithdrawalRequestMap is a free data retrieval call binding the contract method 0x284fbedc.
//
// Solidity: function withdrawalRequestMap(uint256 ) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_CnStakingV3 *CnStakingV3CallerSession) WithdrawalRequestMap(arg0 *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	return _CnStakingV3.Contract.WithdrawalRequestMap(&_CnStakingV3.CallOpts, arg0)
}

// AcceptRewardAddress is a paid mutator transaction binding the contract method 0xaa4058b9.
//
// Solidity: function acceptRewardAddress(address _addr) returns()
func (_CnStakingV3 *CnStakingV3Transactor) AcceptRewardAddress(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3.contract.Transact(opts, "acceptRewardAddress", _addr)
}

// AcceptRewardAddress is a paid mutator transaction binding the contract method 0xaa4058b9.
//
// Solidity: function acceptRewardAddress(address _addr) returns()
func (_CnStakingV3 *CnStakingV3Session) AcceptRewardAddress(_addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3.Contract.AcceptRewardAddress(&_CnStakingV3.TransactOpts, _addr)
}

// AcceptRewardAddress is a paid mutator transaction binding the contract method 0xaa4058b9.
//
// Solidity: function acceptRewardAddress(address _addr) returns()
func (_CnStakingV3 *CnStakingV3TransactorSession) AcceptRewardAddress(_addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3.Contract.AcceptRewardAddress(&_CnStakingV3.TransactOpts, _addr)
}

// ApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x5df8b09a.
//
// Solidity: function approveStakingWithdrawal(address _to, uint256 _value) returns(uint256 id)
func (_CnStakingV3 *CnStakingV3Transactor) ApproveStakingWithdrawal(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3.contract.Transact(opts, "approveStakingWithdrawal", _to, _value)
}

// ApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x5df8b09a.
//
// Solidity: function approveStakingWithdrawal(address _to, uint256 _value) returns(uint256 id)
func (_CnStakingV3 *CnStakingV3Session) ApproveStakingWithdrawal(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3.Contract.ApproveStakingWithdrawal(&_CnStakingV3.TransactOpts, _to, _value)
}

// ApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x5df8b09a.
//
// Solidity: function approveStakingWithdrawal(address _to, uint256 _value) returns(uint256 id)
func (_CnStakingV3 *CnStakingV3TransactorSession) ApproveStakingWithdrawal(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3.Contract.ApproveStakingWithdrawal(&_CnStakingV3.TransactOpts, _to, _value)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _id) returns()
func (_CnStakingV3 *CnStakingV3Transactor) CancelApprovedStakingWithdrawal(opts *bind.TransactOpts, _id *big.Int) (*types.Transaction, error) {
	return _CnStakingV3.contract.Transact(opts, "cancelApprovedStakingWithdrawal", _id)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _id) returns()
func (_CnStakingV3 *CnStakingV3Session) CancelApprovedStakingWithdrawal(_id *big.Int) (*types.Transaction, error) {
	return _CnStakingV3.Contract.CancelApprovedStakingWithdrawal(&_CnStakingV3.TransactOpts, _id)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _id) returns()
func (_CnStakingV3 *CnStakingV3TransactorSession) CancelApprovedStakingWithdrawal(_id *big.Int) (*types.Transaction, error) {
	return _CnStakingV3.Contract.CancelApprovedStakingWithdrawal(&_CnStakingV3.TransactOpts, _id)
}

// Delegate is a paid mutator transaction binding the contract method 0xc89e4361.
//
// Solidity: function delegate() payable returns()
func (_CnStakingV3 *CnStakingV3Transactor) Delegate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3.contract.Transact(opts, "delegate")
}

// Delegate is a paid mutator transaction binding the contract method 0xc89e4361.
//
// Solidity: function delegate() payable returns()
func (_CnStakingV3 *CnStakingV3Session) Delegate() (*types.Transaction, error) {
	return _CnStakingV3.Contract.Delegate(&_CnStakingV3.TransactOpts)
}

// Delegate is a paid mutator transaction binding the contract method 0xc89e4361.
//
// Solidity: function delegate() payable returns()
func (_CnStakingV3 *CnStakingV3TransactorSession) Delegate() (*types.Transaction, error) {
	return _CnStakingV3.Contract.Delegate(&_CnStakingV3.TransactOpts)
}

// DepositLockupStakingAndInit is a paid mutator transaction binding the contract method 0x6a27c206.
//
// Solidity: function depositLockupStakingAndInit() payable returns()
func (_CnStakingV3 *CnStakingV3Transactor) DepositLockupStakingAndInit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3.contract.Transact(opts, "depositLockupStakingAndInit")
}

// DepositLockupStakingAndInit is a paid mutator transaction binding the contract method 0x6a27c206.
//
// Solidity: function depositLockupStakingAndInit() payable returns()
func (_CnStakingV3 *CnStakingV3Session) DepositLockupStakingAndInit() (*types.Transaction, error) {
	return _CnStakingV3.Contract.DepositLockupStakingAndInit(&_CnStakingV3.TransactOpts)
}

// DepositLockupStakingAndInit is a paid mutator transaction binding the contract method 0x6a27c206.
//
// Solidity: function depositLockupStakingAndInit() payable returns()
func (_CnStakingV3 *CnStakingV3TransactorSession) DepositLockupStakingAndInit() (*types.Transaction, error) {
	return _CnStakingV3.Contract.DepositLockupStakingAndInit(&_CnStakingV3.TransactOpts)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CnStakingV3 *CnStakingV3Transactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CnStakingV3.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CnStakingV3 *CnStakingV3Session) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CnStakingV3.Contract.GrantRole(&_CnStakingV3.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CnStakingV3 *CnStakingV3TransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CnStakingV3.Contract.GrantRole(&_CnStakingV3.TransactOpts, role, account)
}

// HandleRedelegation is a paid mutator transaction binding the contract method 0xa006e90c.
//
// Solidity: function handleRedelegation(address _user) payable returns()
func (_CnStakingV3 *CnStakingV3Transactor) HandleRedelegation(opts *bind.TransactOpts, _user common.Address) (*types.Transaction, error) {
	return _CnStakingV3.contract.Transact(opts, "handleRedelegation", _user)
}

// HandleRedelegation is a paid mutator transaction binding the contract method 0xa006e90c.
//
// Solidity: function handleRedelegation(address _user) payable returns()
func (_CnStakingV3 *CnStakingV3Session) HandleRedelegation(_user common.Address) (*types.Transaction, error) {
	return _CnStakingV3.Contract.HandleRedelegation(&_CnStakingV3.TransactOpts, _user)
}

// HandleRedelegation is a paid mutator transaction binding the contract method 0xa006e90c.
//
// Solidity: function handleRedelegation(address _user) payable returns()
func (_CnStakingV3 *CnStakingV3TransactorSession) HandleRedelegation(_user common.Address) (*types.Transaction, error) {
	return _CnStakingV3.Contract.HandleRedelegation(&_CnStakingV3.TransactOpts, _user)
}

// Redelegate is a paid mutator transaction binding the contract method 0x6bd8f804.
//
// Solidity: function redelegate(address _user, address _targetCnV3, uint256 _value) returns()
func (_CnStakingV3 *CnStakingV3Transactor) Redelegate(opts *bind.TransactOpts, _user common.Address, _targetCnV3 common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3.contract.Transact(opts, "redelegate", _user, _targetCnV3, _value)
}

// Redelegate is a paid mutator transaction binding the contract method 0x6bd8f804.
//
// Solidity: function redelegate(address _user, address _targetCnV3, uint256 _value) returns()
func (_CnStakingV3 *CnStakingV3Session) Redelegate(_user common.Address, _targetCnV3 common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3.Contract.Redelegate(&_CnStakingV3.TransactOpts, _user, _targetCnV3, _value)
}

// Redelegate is a paid mutator transaction binding the contract method 0x6bd8f804.
//
// Solidity: function redelegate(address _user, address _targetCnV3, uint256 _value) returns()
func (_CnStakingV3 *CnStakingV3TransactorSession) Redelegate(_user common.Address, _targetCnV3 common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3.Contract.Redelegate(&_CnStakingV3.TransactOpts, _user, _targetCnV3, _value)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_CnStakingV3 *CnStakingV3Transactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _CnStakingV3.contract.Transact(opts, "renounceRole", role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_CnStakingV3 *CnStakingV3Session) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _CnStakingV3.Contract.RenounceRole(&_CnStakingV3.TransactOpts, role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_CnStakingV3 *CnStakingV3TransactorSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _CnStakingV3.Contract.RenounceRole(&_CnStakingV3.TransactOpts, role, callerConfirmation)
}

// ReviewInitialConditions is a paid mutator transaction binding the contract method 0x702b9c9b.
//
// Solidity: function reviewInitialConditions() returns()
func (_CnStakingV3 *CnStakingV3Transactor) ReviewInitialConditions(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3.contract.Transact(opts, "reviewInitialConditions")
}

// ReviewInitialConditions is a paid mutator transaction binding the contract method 0x702b9c9b.
//
// Solidity: function reviewInitialConditions() returns()
func (_CnStakingV3 *CnStakingV3Session) ReviewInitialConditions() (*types.Transaction, error) {
	return _CnStakingV3.Contract.ReviewInitialConditions(&_CnStakingV3.TransactOpts)
}

// ReviewInitialConditions is a paid mutator transaction binding the contract method 0x702b9c9b.
//
// Solidity: function reviewInitialConditions() returns()
func (_CnStakingV3 *CnStakingV3TransactorSession) ReviewInitialConditions() (*types.Transaction, error) {
	return _CnStakingV3.Contract.ReviewInitialConditions(&_CnStakingV3.TransactOpts)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CnStakingV3 *CnStakingV3Transactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CnStakingV3.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CnStakingV3 *CnStakingV3Session) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CnStakingV3.Contract.RevokeRole(&_CnStakingV3.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CnStakingV3 *CnStakingV3TransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CnStakingV3.Contract.RevokeRole(&_CnStakingV3.TransactOpts, role, account)
}

// SetGCId is a paid mutator transaction binding the contract method 0xff4634bc.
//
// Solidity: function setGCId(uint256 _gcId) returns()
func (_CnStakingV3 *CnStakingV3Transactor) SetGCId(opts *bind.TransactOpts, _gcId *big.Int) (*types.Transaction, error) {
	return _CnStakingV3.contract.Transact(opts, "setGCId", _gcId)
}

// SetGCId is a paid mutator transaction binding the contract method 0xff4634bc.
//
// Solidity: function setGCId(uint256 _gcId) returns()
func (_CnStakingV3 *CnStakingV3Session) SetGCId(_gcId *big.Int) (*types.Transaction, error) {
	return _CnStakingV3.Contract.SetGCId(&_CnStakingV3.TransactOpts, _gcId)
}

// SetGCId is a paid mutator transaction binding the contract method 0xff4634bc.
//
// Solidity: function setGCId(uint256 _gcId) returns()
func (_CnStakingV3 *CnStakingV3TransactorSession) SetGCId(_gcId *big.Int) (*types.Transaction, error) {
	return _CnStakingV3.Contract.SetGCId(&_CnStakingV3.TransactOpts, _gcId)
}

// SetPublicDelegation is a paid mutator transaction binding the contract method 0x2e5dc0f7.
//
// Solidity: function setPublicDelegation(address _pdFactory, bytes _pdArgs) returns()
func (_CnStakingV3 *CnStakingV3Transactor) SetPublicDelegation(opts *bind.TransactOpts, _pdFactory common.Address, _pdArgs []byte) (*types.Transaction, error) {
	return _CnStakingV3.contract.Transact(opts, "setPublicDelegation", _pdFactory, _pdArgs)
}

// SetPublicDelegation is a paid mutator transaction binding the contract method 0x2e5dc0f7.
//
// Solidity: function setPublicDelegation(address _pdFactory, bytes _pdArgs) returns()
func (_CnStakingV3 *CnStakingV3Session) SetPublicDelegation(_pdFactory common.Address, _pdArgs []byte) (*types.Transaction, error) {
	return _CnStakingV3.Contract.SetPublicDelegation(&_CnStakingV3.TransactOpts, _pdFactory, _pdArgs)
}

// SetPublicDelegation is a paid mutator transaction binding the contract method 0x2e5dc0f7.
//
// Solidity: function setPublicDelegation(address _pdFactory, bytes _pdArgs) returns()
func (_CnStakingV3 *CnStakingV3TransactorSession) SetPublicDelegation(_pdFactory common.Address, _pdArgs []byte) (*types.Transaction, error) {
	return _CnStakingV3.Contract.SetPublicDelegation(&_CnStakingV3.TransactOpts, _pdFactory, _pdArgs)
}

// SetStakingTracker is a paid mutator transaction binding the contract method 0xc336aa35.
//
// Solidity: function setStakingTracker(address _tracker) returns()
func (_CnStakingV3 *CnStakingV3Transactor) SetStakingTracker(opts *bind.TransactOpts, _tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3.contract.Transact(opts, "setStakingTracker", _tracker)
}

// SetStakingTracker is a paid mutator transaction binding the contract method 0xc336aa35.
//
// Solidity: function setStakingTracker(address _tracker) returns()
func (_CnStakingV3 *CnStakingV3Session) SetStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3.Contract.SetStakingTracker(&_CnStakingV3.TransactOpts, _tracker)
}

// SetStakingTracker is a paid mutator transaction binding the contract method 0xc336aa35.
//
// Solidity: function setStakingTracker(address _tracker) returns()
func (_CnStakingV3 *CnStakingV3TransactorSession) SetStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3.Contract.SetStakingTracker(&_CnStakingV3.TransactOpts, _tracker)
}

// ToggleRedelegation is a paid mutator transaction binding the contract method 0xd75859ec.
//
// Solidity: function toggleRedelegation() returns()
func (_CnStakingV3 *CnStakingV3Transactor) ToggleRedelegation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3.contract.Transact(opts, "toggleRedelegation")
}

// ToggleRedelegation is a paid mutator transaction binding the contract method 0xd75859ec.
//
// Solidity: function toggleRedelegation() returns()
func (_CnStakingV3 *CnStakingV3Session) ToggleRedelegation() (*types.Transaction, error) {
	return _CnStakingV3.Contract.ToggleRedelegation(&_CnStakingV3.TransactOpts)
}

// ToggleRedelegation is a paid mutator transaction binding the contract method 0xd75859ec.
//
// Solidity: function toggleRedelegation() returns()
func (_CnStakingV3 *CnStakingV3TransactorSession) ToggleRedelegation() (*types.Transaction, error) {
	return _CnStakingV3.Contract.ToggleRedelegation(&_CnStakingV3.TransactOpts)
}

// UpdateRewardAddress is a paid mutator transaction binding the contract method 0x944dd5a2.
//
// Solidity: function updateRewardAddress(address _addr) returns()
func (_CnStakingV3 *CnStakingV3Transactor) UpdateRewardAddress(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3.contract.Transact(opts, "updateRewardAddress", _addr)
}

// UpdateRewardAddress is a paid mutator transaction binding the contract method 0x944dd5a2.
//
// Solidity: function updateRewardAddress(address _addr) returns()
func (_CnStakingV3 *CnStakingV3Session) UpdateRewardAddress(_addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3.Contract.UpdateRewardAddress(&_CnStakingV3.TransactOpts, _addr)
}

// UpdateRewardAddress is a paid mutator transaction binding the contract method 0x944dd5a2.
//
// Solidity: function updateRewardAddress(address _addr) returns()
func (_CnStakingV3 *CnStakingV3TransactorSession) UpdateRewardAddress(_addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3.Contract.UpdateRewardAddress(&_CnStakingV3.TransactOpts, _addr)
}

// UpdateStakingTracker is a paid mutator transaction binding the contract method 0x5be6eacc.
//
// Solidity: function updateStakingTracker(address _tracker) returns()
func (_CnStakingV3 *CnStakingV3Transactor) UpdateStakingTracker(opts *bind.TransactOpts, _tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3.contract.Transact(opts, "updateStakingTracker", _tracker)
}

// UpdateStakingTracker is a paid mutator transaction binding the contract method 0x5be6eacc.
//
// Solidity: function updateStakingTracker(address _tracker) returns()
func (_CnStakingV3 *CnStakingV3Session) UpdateStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3.Contract.UpdateStakingTracker(&_CnStakingV3.TransactOpts, _tracker)
}

// UpdateStakingTracker is a paid mutator transaction binding the contract method 0x5be6eacc.
//
// Solidity: function updateStakingTracker(address _tracker) returns()
func (_CnStakingV3 *CnStakingV3TransactorSession) UpdateStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3.Contract.UpdateStakingTracker(&_CnStakingV3.TransactOpts, _tracker)
}

// UpdateVoterAddress is a paid mutator transaction binding the contract method 0x5784d18b.
//
// Solidity: function updateVoterAddress(address _addr) returns()
func (_CnStakingV3 *CnStakingV3Transactor) UpdateVoterAddress(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3.contract.Transact(opts, "updateVoterAddress", _addr)
}

// UpdateVoterAddress is a paid mutator transaction binding the contract method 0x5784d18b.
//
// Solidity: function updateVoterAddress(address _addr) returns()
func (_CnStakingV3 *CnStakingV3Session) UpdateVoterAddress(_addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3.Contract.UpdateVoterAddress(&_CnStakingV3.TransactOpts, _addr)
}

// UpdateVoterAddress is a paid mutator transaction binding the contract method 0x5784d18b.
//
// Solidity: function updateVoterAddress(address _addr) returns()
func (_CnStakingV3 *CnStakingV3TransactorSession) UpdateVoterAddress(_addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3.Contract.UpdateVoterAddress(&_CnStakingV3.TransactOpts, _addr)
}

// WithdrawApprovedStaking is a paid mutator transaction binding the contract method 0x6e93df0d.
//
// Solidity: function withdrawApprovedStaking(uint256 _id) returns()
func (_CnStakingV3 *CnStakingV3Transactor) WithdrawApprovedStaking(opts *bind.TransactOpts, _id *big.Int) (*types.Transaction, error) {
	return _CnStakingV3.contract.Transact(opts, "withdrawApprovedStaking", _id)
}

// WithdrawApprovedStaking is a paid mutator transaction binding the contract method 0x6e93df0d.
//
// Solidity: function withdrawApprovedStaking(uint256 _id) returns()
func (_CnStakingV3 *CnStakingV3Session) WithdrawApprovedStaking(_id *big.Int) (*types.Transaction, error) {
	return _CnStakingV3.Contract.WithdrawApprovedStaking(&_CnStakingV3.TransactOpts, _id)
}

// WithdrawApprovedStaking is a paid mutator transaction binding the contract method 0x6e93df0d.
//
// Solidity: function withdrawApprovedStaking(uint256 _id) returns()
func (_CnStakingV3 *CnStakingV3TransactorSession) WithdrawApprovedStaking(_id *big.Int) (*types.Transaction, error) {
	return _CnStakingV3.Contract.WithdrawApprovedStaking(&_CnStakingV3.TransactOpts, _id)
}

// WithdrawLockupStaking is a paid mutator transaction binding the contract method 0x505ebed4.
//
// Solidity: function withdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingV3 *CnStakingV3Transactor) WithdrawLockupStaking(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3.contract.Transact(opts, "withdrawLockupStaking", _to, _value)
}

// WithdrawLockupStaking is a paid mutator transaction binding the contract method 0x505ebed4.
//
// Solidity: function withdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingV3 *CnStakingV3Session) WithdrawLockupStaking(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3.Contract.WithdrawLockupStaking(&_CnStakingV3.TransactOpts, _to, _value)
}

// WithdrawLockupStaking is a paid mutator transaction binding the contract method 0x505ebed4.
//
// Solidity: function withdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingV3 *CnStakingV3TransactorSession) WithdrawLockupStaking(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3.Contract.WithdrawLockupStaking(&_CnStakingV3.TransactOpts, _to, _value)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_CnStakingV3 *CnStakingV3Transactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_CnStakingV3 *CnStakingV3Session) Receive() (*types.Transaction, error) {
	return _CnStakingV3.Contract.Receive(&_CnStakingV3.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_CnStakingV3 *CnStakingV3TransactorSession) Receive() (*types.Transaction, error) {
	return _CnStakingV3.Contract.Receive(&_CnStakingV3.TransactOpts)
}

// CnStakingV3AcceptRewardAddressIterator is returned from FilterAcceptRewardAddress and is used to iterate over the raw logs and unpacked data for AcceptRewardAddress events raised by the CnStakingV3 contract.
type CnStakingV3AcceptRewardAddressIterator struct {
	Event *CnStakingV3AcceptRewardAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3AcceptRewardAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3AcceptRewardAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3AcceptRewardAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3AcceptRewardAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3AcceptRewardAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3AcceptRewardAddress represents a AcceptRewardAddress event raised by the CnStakingV3 contract.
type CnStakingV3AcceptRewardAddress struct {
	RewardAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAcceptRewardAddress is a free log retrieval operation binding the contract event 0x36e0b58f785f850d6622cb742fa1e0750728da3c75816916830b50b747efb6b6.
//
// Solidity: event AcceptRewardAddress(address indexed rewardAddress)
func (_CnStakingV3 *CnStakingV3Filterer) FilterAcceptRewardAddress(opts *bind.FilterOpts, rewardAddress []common.Address) (*CnStakingV3AcceptRewardAddressIterator, error) {

	var rewardAddressRule []interface{}
	for _, rewardAddressItem := range rewardAddress {
		rewardAddressRule = append(rewardAddressRule, rewardAddressItem)
	}

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "AcceptRewardAddress", rewardAddressRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3AcceptRewardAddressIterator{contract: _CnStakingV3.contract, event: "AcceptRewardAddress", logs: logs, sub: sub}, nil
}

// WatchAcceptRewardAddress is a free log subscription operation binding the contract event 0x36e0b58f785f850d6622cb742fa1e0750728da3c75816916830b50b747efb6b6.
//
// Solidity: event AcceptRewardAddress(address indexed rewardAddress)
func (_CnStakingV3 *CnStakingV3Filterer) WatchAcceptRewardAddress(opts *bind.WatchOpts, sink chan<- *CnStakingV3AcceptRewardAddress, rewardAddress []common.Address) (event.Subscription, error) {

	var rewardAddressRule []interface{}
	for _, rewardAddressItem := range rewardAddress {
		rewardAddressRule = append(rewardAddressRule, rewardAddressItem)
	}

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "AcceptRewardAddress", rewardAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3AcceptRewardAddress)
				if err := _CnStakingV3.contract.UnpackLog(event, "AcceptRewardAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAcceptRewardAddress is a log parse operation binding the contract event 0x36e0b58f785f850d6622cb742fa1e0750728da3c75816916830b50b747efb6b6.
//
// Solidity: event AcceptRewardAddress(address indexed rewardAddress)
func (_CnStakingV3 *CnStakingV3Filterer) ParseAcceptRewardAddress(log types.Log) (*CnStakingV3AcceptRewardAddress, error) {
	event := new(CnStakingV3AcceptRewardAddress)
	if err := _CnStakingV3.contract.UnpackLog(event, "AcceptRewardAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3ApproveStakingWithdrawalIterator is returned from FilterApproveStakingWithdrawal and is used to iterate over the raw logs and unpacked data for ApproveStakingWithdrawal events raised by the CnStakingV3 contract.
type CnStakingV3ApproveStakingWithdrawalIterator struct {
	Event *CnStakingV3ApproveStakingWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3ApproveStakingWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3ApproveStakingWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3ApproveStakingWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3ApproveStakingWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3ApproveStakingWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3ApproveStakingWithdrawal represents a ApproveStakingWithdrawal event raised by the CnStakingV3 contract.
type CnStakingV3ApproveStakingWithdrawal struct {
	ApprovedWithdrawalId *big.Int
	To                   common.Address
	Value                *big.Int
	WithdrawableFrom     *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterApproveStakingWithdrawal is a free log retrieval operation binding the contract event 0xdd0988b8c11a867814c87be652f93a86d35c6a235b92977e99d5394bd8580ced.
//
// Solidity: event ApproveStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value, uint256 withdrawableFrom)
func (_CnStakingV3 *CnStakingV3Filterer) FilterApproveStakingWithdrawal(opts *bind.FilterOpts, approvedWithdrawalId []*big.Int, to []common.Address) (*CnStakingV3ApproveStakingWithdrawalIterator, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "ApproveStakingWithdrawal", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3ApproveStakingWithdrawalIterator{contract: _CnStakingV3.contract, event: "ApproveStakingWithdrawal", logs: logs, sub: sub}, nil
}

// WatchApproveStakingWithdrawal is a free log subscription operation binding the contract event 0xdd0988b8c11a867814c87be652f93a86d35c6a235b92977e99d5394bd8580ced.
//
// Solidity: event ApproveStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value, uint256 withdrawableFrom)
func (_CnStakingV3 *CnStakingV3Filterer) WatchApproveStakingWithdrawal(opts *bind.WatchOpts, sink chan<- *CnStakingV3ApproveStakingWithdrawal, approvedWithdrawalId []*big.Int, to []common.Address) (event.Subscription, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "ApproveStakingWithdrawal", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3ApproveStakingWithdrawal)
				if err := _CnStakingV3.contract.UnpackLog(event, "ApproveStakingWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproveStakingWithdrawal is a log parse operation binding the contract event 0xdd0988b8c11a867814c87be652f93a86d35c6a235b92977e99d5394bd8580ced.
//
// Solidity: event ApproveStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value, uint256 withdrawableFrom)
func (_CnStakingV3 *CnStakingV3Filterer) ParseApproveStakingWithdrawal(log types.Log) (*CnStakingV3ApproveStakingWithdrawal, error) {
	event := new(CnStakingV3ApproveStakingWithdrawal)
	if err := _CnStakingV3.contract.UnpackLog(event, "ApproveStakingWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3CancelApprovedStakingWithdrawalIterator is returned from FilterCancelApprovedStakingWithdrawal and is used to iterate over the raw logs and unpacked data for CancelApprovedStakingWithdrawal events raised by the CnStakingV3 contract.
type CnStakingV3CancelApprovedStakingWithdrawalIterator struct {
	Event *CnStakingV3CancelApprovedStakingWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3CancelApprovedStakingWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3CancelApprovedStakingWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3CancelApprovedStakingWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3CancelApprovedStakingWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3CancelApprovedStakingWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3CancelApprovedStakingWithdrawal represents a CancelApprovedStakingWithdrawal event raised by the CnStakingV3 contract.
type CnStakingV3CancelApprovedStakingWithdrawal struct {
	ApprovedWithdrawalId *big.Int
	To                   common.Address
	Value                *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterCancelApprovedStakingWithdrawal is a free log retrieval operation binding the contract event 0xcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df.
//
// Solidity: event CancelApprovedStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) FilterCancelApprovedStakingWithdrawal(opts *bind.FilterOpts, approvedWithdrawalId []*big.Int, to []common.Address) (*CnStakingV3CancelApprovedStakingWithdrawalIterator, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "CancelApprovedStakingWithdrawal", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3CancelApprovedStakingWithdrawalIterator{contract: _CnStakingV3.contract, event: "CancelApprovedStakingWithdrawal", logs: logs, sub: sub}, nil
}

// WatchCancelApprovedStakingWithdrawal is a free log subscription operation binding the contract event 0xcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df.
//
// Solidity: event CancelApprovedStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) WatchCancelApprovedStakingWithdrawal(opts *bind.WatchOpts, sink chan<- *CnStakingV3CancelApprovedStakingWithdrawal, approvedWithdrawalId []*big.Int, to []common.Address) (event.Subscription, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "CancelApprovedStakingWithdrawal", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3CancelApprovedStakingWithdrawal)
				if err := _CnStakingV3.contract.UnpackLog(event, "CancelApprovedStakingWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancelApprovedStakingWithdrawal is a log parse operation binding the contract event 0xcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df.
//
// Solidity: event CancelApprovedStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) ParseCancelApprovedStakingWithdrawal(log types.Log) (*CnStakingV3CancelApprovedStakingWithdrawal, error) {
	event := new(CnStakingV3CancelApprovedStakingWithdrawal)
	if err := _CnStakingV3.contract.UnpackLog(event, "CancelApprovedStakingWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3CompleteReviewInitialConditionsIterator is returned from FilterCompleteReviewInitialConditions and is used to iterate over the raw logs and unpacked data for CompleteReviewInitialConditions events raised by the CnStakingV3 contract.
type CnStakingV3CompleteReviewInitialConditionsIterator struct {
	Event *CnStakingV3CompleteReviewInitialConditions // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3CompleteReviewInitialConditionsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3CompleteReviewInitialConditions)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3CompleteReviewInitialConditions)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3CompleteReviewInitialConditionsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3CompleteReviewInitialConditionsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3CompleteReviewInitialConditions represents a CompleteReviewInitialConditions event raised by the CnStakingV3 contract.
type CnStakingV3CompleteReviewInitialConditions struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterCompleteReviewInitialConditions is a free log retrieval operation binding the contract event 0x244ff9a3d72b1dc5a4bce7f05fb615395f2a8c7ad6ea525d2bac9030f75d7a9b.
//
// Solidity: event CompleteReviewInitialConditions()
func (_CnStakingV3 *CnStakingV3Filterer) FilterCompleteReviewInitialConditions(opts *bind.FilterOpts) (*CnStakingV3CompleteReviewInitialConditionsIterator, error) {

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "CompleteReviewInitialConditions")
	if err != nil {
		return nil, err
	}
	return &CnStakingV3CompleteReviewInitialConditionsIterator{contract: _CnStakingV3.contract, event: "CompleteReviewInitialConditions", logs: logs, sub: sub}, nil
}

// WatchCompleteReviewInitialConditions is a free log subscription operation binding the contract event 0x244ff9a3d72b1dc5a4bce7f05fb615395f2a8c7ad6ea525d2bac9030f75d7a9b.
//
// Solidity: event CompleteReviewInitialConditions()
func (_CnStakingV3 *CnStakingV3Filterer) WatchCompleteReviewInitialConditions(opts *bind.WatchOpts, sink chan<- *CnStakingV3CompleteReviewInitialConditions) (event.Subscription, error) {

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "CompleteReviewInitialConditions")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3CompleteReviewInitialConditions)
				if err := _CnStakingV3.contract.UnpackLog(event, "CompleteReviewInitialConditions", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCompleteReviewInitialConditions is a log parse operation binding the contract event 0x244ff9a3d72b1dc5a4bce7f05fb615395f2a8c7ad6ea525d2bac9030f75d7a9b.
//
// Solidity: event CompleteReviewInitialConditions()
func (_CnStakingV3 *CnStakingV3Filterer) ParseCompleteReviewInitialConditions(log types.Log) (*CnStakingV3CompleteReviewInitialConditions, error) {
	event := new(CnStakingV3CompleteReviewInitialConditions)
	if err := _CnStakingV3.contract.UnpackLog(event, "CompleteReviewInitialConditions", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3DelegateKaiaIterator is returned from FilterDelegateKaia and is used to iterate over the raw logs and unpacked data for DelegateKaia events raised by the CnStakingV3 contract.
type CnStakingV3DelegateKaiaIterator struct {
	Event *CnStakingV3DelegateKaia // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3DelegateKaiaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3DelegateKaia)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3DelegateKaia)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3DelegateKaiaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3DelegateKaiaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3DelegateKaia represents a DelegateKaia event raised by the CnStakingV3 contract.
type CnStakingV3DelegateKaia struct {
	From  common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDelegateKaia is a free log retrieval operation binding the contract event 0x8ecbcbd560048c1f474847748189e8c43f1fdee737fbd34523b04b5a9bbdffaa.
//
// Solidity: event DelegateKaia(address indexed from, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) FilterDelegateKaia(opts *bind.FilterOpts, from []common.Address) (*CnStakingV3DelegateKaiaIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "DelegateKaia", fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3DelegateKaiaIterator{contract: _CnStakingV3.contract, event: "DelegateKaia", logs: logs, sub: sub}, nil
}

// WatchDelegateKaia is a free log subscription operation binding the contract event 0x8ecbcbd560048c1f474847748189e8c43f1fdee737fbd34523b04b5a9bbdffaa.
//
// Solidity: event DelegateKaia(address indexed from, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) WatchDelegateKaia(opts *bind.WatchOpts, sink chan<- *CnStakingV3DelegateKaia, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "DelegateKaia", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3DelegateKaia)
				if err := _CnStakingV3.contract.UnpackLog(event, "DelegateKaia", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateKaia is a log parse operation binding the contract event 0x8ecbcbd560048c1f474847748189e8c43f1fdee737fbd34523b04b5a9bbdffaa.
//
// Solidity: event DelegateKaia(address indexed from, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) ParseDelegateKaia(log types.Log) (*CnStakingV3DelegateKaia, error) {
	event := new(CnStakingV3DelegateKaia)
	if err := _CnStakingV3.contract.UnpackLog(event, "DelegateKaia", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3DeployCnStakingV3Iterator is returned from FilterDeployCnStakingV3 and is used to iterate over the raw logs and unpacked data for DeployCnStakingV3 events raised by the CnStakingV3 contract.
type CnStakingV3DeployCnStakingV3Iterator struct {
	Event *CnStakingV3DeployCnStakingV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3DeployCnStakingV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3DeployCnStakingV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3DeployCnStakingV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3DeployCnStakingV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3DeployCnStakingV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3DeployCnStakingV3 represents a DeployCnStakingV3 event raised by the CnStakingV3 contract.
type CnStakingV3DeployCnStakingV3 struct {
	ContractType  string
	NodeId        common.Address
	RewardAddress common.Address
	UnlockTime    []*big.Int
	UnlockAmount  []*big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterDeployCnStakingV3 is a free log retrieval operation binding the contract event 0x8ceb5a03da525381440f64ae9f54fa4cb32a6299f0521f5261edd8839a0f3265.
//
// Solidity: event DeployCnStakingV3(string contractType, address nodeId, address rewardAddress, uint256[] unlockTime, uint256[] unlockAmount)
func (_CnStakingV3 *CnStakingV3Filterer) FilterDeployCnStakingV3(opts *bind.FilterOpts) (*CnStakingV3DeployCnStakingV3Iterator, error) {

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "DeployCnStakingV3")
	if err != nil {
		return nil, err
	}
	return &CnStakingV3DeployCnStakingV3Iterator{contract: _CnStakingV3.contract, event: "DeployCnStakingV3", logs: logs, sub: sub}, nil
}

// WatchDeployCnStakingV3 is a free log subscription operation binding the contract event 0x8ceb5a03da525381440f64ae9f54fa4cb32a6299f0521f5261edd8839a0f3265.
//
// Solidity: event DeployCnStakingV3(string contractType, address nodeId, address rewardAddress, uint256[] unlockTime, uint256[] unlockAmount)
func (_CnStakingV3 *CnStakingV3Filterer) WatchDeployCnStakingV3(opts *bind.WatchOpts, sink chan<- *CnStakingV3DeployCnStakingV3) (event.Subscription, error) {

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "DeployCnStakingV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3DeployCnStakingV3)
				if err := _CnStakingV3.contract.UnpackLog(event, "DeployCnStakingV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployCnStakingV3 is a log parse operation binding the contract event 0x8ceb5a03da525381440f64ae9f54fa4cb32a6299f0521f5261edd8839a0f3265.
//
// Solidity: event DeployCnStakingV3(string contractType, address nodeId, address rewardAddress, uint256[] unlockTime, uint256[] unlockAmount)
func (_CnStakingV3 *CnStakingV3Filterer) ParseDeployCnStakingV3(log types.Log) (*CnStakingV3DeployCnStakingV3, error) {
	event := new(CnStakingV3DeployCnStakingV3)
	if err := _CnStakingV3.contract.UnpackLog(event, "DeployCnStakingV3", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3DepositLockupStakingAndInitIterator is returned from FilterDepositLockupStakingAndInit and is used to iterate over the raw logs and unpacked data for DepositLockupStakingAndInit events raised by the CnStakingV3 contract.
type CnStakingV3DepositLockupStakingAndInitIterator struct {
	Event *CnStakingV3DepositLockupStakingAndInit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3DepositLockupStakingAndInitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3DepositLockupStakingAndInit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3DepositLockupStakingAndInit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3DepositLockupStakingAndInitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3DepositLockupStakingAndInitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3DepositLockupStakingAndInit represents a DepositLockupStakingAndInit event raised by the CnStakingV3 contract.
type CnStakingV3DepositLockupStakingAndInit struct {
	From  common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDepositLockupStakingAndInit is a free log retrieval operation binding the contract event 0x2b3c5e8e58d7d1e42ccd071c6f749d53f9ee506020a81fad9ff98140ccccde69.
//
// Solidity: event DepositLockupStakingAndInit(address indexed from, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) FilterDepositLockupStakingAndInit(opts *bind.FilterOpts, from []common.Address) (*CnStakingV3DepositLockupStakingAndInitIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "DepositLockupStakingAndInit", fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3DepositLockupStakingAndInitIterator{contract: _CnStakingV3.contract, event: "DepositLockupStakingAndInit", logs: logs, sub: sub}, nil
}

// WatchDepositLockupStakingAndInit is a free log subscription operation binding the contract event 0x2b3c5e8e58d7d1e42ccd071c6f749d53f9ee506020a81fad9ff98140ccccde69.
//
// Solidity: event DepositLockupStakingAndInit(address indexed from, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) WatchDepositLockupStakingAndInit(opts *bind.WatchOpts, sink chan<- *CnStakingV3DepositLockupStakingAndInit, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "DepositLockupStakingAndInit", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3DepositLockupStakingAndInit)
				if err := _CnStakingV3.contract.UnpackLog(event, "DepositLockupStakingAndInit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositLockupStakingAndInit is a log parse operation binding the contract event 0x2b3c5e8e58d7d1e42ccd071c6f749d53f9ee506020a81fad9ff98140ccccde69.
//
// Solidity: event DepositLockupStakingAndInit(address indexed from, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) ParseDepositLockupStakingAndInit(log types.Log) (*CnStakingV3DepositLockupStakingAndInit, error) {
	event := new(CnStakingV3DepositLockupStakingAndInit)
	if err := _CnStakingV3.contract.UnpackLog(event, "DepositLockupStakingAndInit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3HandleRedelegationIterator is returned from FilterHandleRedelegation and is used to iterate over the raw logs and unpacked data for HandleRedelegation events raised by the CnStakingV3 contract.
type CnStakingV3HandleRedelegationIterator struct {
	Event *CnStakingV3HandleRedelegation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3HandleRedelegationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3HandleRedelegation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3HandleRedelegation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3HandleRedelegationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3HandleRedelegationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3HandleRedelegation represents a HandleRedelegation event raised by the CnStakingV3 contract.
type CnStakingV3HandleRedelegation struct {
	User              common.Address
	PrevCnStakingV3   common.Address
	TargetCnStakingV3 common.Address
	Value             *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterHandleRedelegation is a free log retrieval operation binding the contract event 0xcbbd772ac9792b90fb77aa3194b0279ec4dbea1880ecc3674ecd2f4bf39b0c90.
//
// Solidity: event HandleRedelegation(address indexed user, address indexed prevCnStakingV3, address indexed targetCnStakingV3, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) FilterHandleRedelegation(opts *bind.FilterOpts, user []common.Address, prevCnStakingV3 []common.Address, targetCnStakingV3 []common.Address) (*CnStakingV3HandleRedelegationIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var prevCnStakingV3Rule []interface{}
	for _, prevCnStakingV3Item := range prevCnStakingV3 {
		prevCnStakingV3Rule = append(prevCnStakingV3Rule, prevCnStakingV3Item)
	}
	var targetCnStakingV3Rule []interface{}
	for _, targetCnStakingV3Item := range targetCnStakingV3 {
		targetCnStakingV3Rule = append(targetCnStakingV3Rule, targetCnStakingV3Item)
	}

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "HandleRedelegation", userRule, prevCnStakingV3Rule, targetCnStakingV3Rule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3HandleRedelegationIterator{contract: _CnStakingV3.contract, event: "HandleRedelegation", logs: logs, sub: sub}, nil
}

// WatchHandleRedelegation is a free log subscription operation binding the contract event 0xcbbd772ac9792b90fb77aa3194b0279ec4dbea1880ecc3674ecd2f4bf39b0c90.
//
// Solidity: event HandleRedelegation(address indexed user, address indexed prevCnStakingV3, address indexed targetCnStakingV3, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) WatchHandleRedelegation(opts *bind.WatchOpts, sink chan<- *CnStakingV3HandleRedelegation, user []common.Address, prevCnStakingV3 []common.Address, targetCnStakingV3 []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var prevCnStakingV3Rule []interface{}
	for _, prevCnStakingV3Item := range prevCnStakingV3 {
		prevCnStakingV3Rule = append(prevCnStakingV3Rule, prevCnStakingV3Item)
	}
	var targetCnStakingV3Rule []interface{}
	for _, targetCnStakingV3Item := range targetCnStakingV3 {
		targetCnStakingV3Rule = append(targetCnStakingV3Rule, targetCnStakingV3Item)
	}

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "HandleRedelegation", userRule, prevCnStakingV3Rule, targetCnStakingV3Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3HandleRedelegation)
				if err := _CnStakingV3.contract.UnpackLog(event, "HandleRedelegation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHandleRedelegation is a log parse operation binding the contract event 0xcbbd772ac9792b90fb77aa3194b0279ec4dbea1880ecc3674ecd2f4bf39b0c90.
//
// Solidity: event HandleRedelegation(address indexed user, address indexed prevCnStakingV3, address indexed targetCnStakingV3, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) ParseHandleRedelegation(log types.Log) (*CnStakingV3HandleRedelegation, error) {
	event := new(CnStakingV3HandleRedelegation)
	if err := _CnStakingV3.contract.UnpackLog(event, "HandleRedelegation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3RedelegationIterator is returned from FilterRedelegation and is used to iterate over the raw logs and unpacked data for Redelegation events raised by the CnStakingV3 contract.
type CnStakingV3RedelegationIterator struct {
	Event *CnStakingV3Redelegation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3RedelegationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3Redelegation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3Redelegation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3RedelegationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3RedelegationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3Redelegation represents a Redelegation event raised by the CnStakingV3 contract.
type CnStakingV3Redelegation struct {
	User              common.Address
	TargetCnStakingV3 common.Address
	Value             *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRedelegation is a free log retrieval operation binding the contract event 0x4830c21a6eb4b2b3af6c4d24cfbd78ce437d5b690aac56ceec54df1d4d24e1a0.
//
// Solidity: event Redelegation(address indexed user, address indexed targetCnStakingV3, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) FilterRedelegation(opts *bind.FilterOpts, user []common.Address, targetCnStakingV3 []common.Address) (*CnStakingV3RedelegationIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var targetCnStakingV3Rule []interface{}
	for _, targetCnStakingV3Item := range targetCnStakingV3 {
		targetCnStakingV3Rule = append(targetCnStakingV3Rule, targetCnStakingV3Item)
	}

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "Redelegation", userRule, targetCnStakingV3Rule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3RedelegationIterator{contract: _CnStakingV3.contract, event: "Redelegation", logs: logs, sub: sub}, nil
}

// WatchRedelegation is a free log subscription operation binding the contract event 0x4830c21a6eb4b2b3af6c4d24cfbd78ce437d5b690aac56ceec54df1d4d24e1a0.
//
// Solidity: event Redelegation(address indexed user, address indexed targetCnStakingV3, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) WatchRedelegation(opts *bind.WatchOpts, sink chan<- *CnStakingV3Redelegation, user []common.Address, targetCnStakingV3 []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var targetCnStakingV3Rule []interface{}
	for _, targetCnStakingV3Item := range targetCnStakingV3 {
		targetCnStakingV3Rule = append(targetCnStakingV3Rule, targetCnStakingV3Item)
	}

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "Redelegation", userRule, targetCnStakingV3Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3Redelegation)
				if err := _CnStakingV3.contract.UnpackLog(event, "Redelegation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedelegation is a log parse operation binding the contract event 0x4830c21a6eb4b2b3af6c4d24cfbd78ce437d5b690aac56ceec54df1d4d24e1a0.
//
// Solidity: event Redelegation(address indexed user, address indexed targetCnStakingV3, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) ParseRedelegation(log types.Log) (*CnStakingV3Redelegation, error) {
	event := new(CnStakingV3Redelegation)
	if err := _CnStakingV3.contract.UnpackLog(event, "Redelegation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3ReviewInitialConditionsIterator is returned from FilterReviewInitialConditions and is used to iterate over the raw logs and unpacked data for ReviewInitialConditions events raised by the CnStakingV3 contract.
type CnStakingV3ReviewInitialConditionsIterator struct {
	Event *CnStakingV3ReviewInitialConditions // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3ReviewInitialConditionsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3ReviewInitialConditions)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3ReviewInitialConditions)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3ReviewInitialConditionsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3ReviewInitialConditionsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3ReviewInitialConditions represents a ReviewInitialConditions event raised by the CnStakingV3 contract.
type CnStakingV3ReviewInitialConditions struct {
	From common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterReviewInitialConditions is a free log retrieval operation binding the contract event 0x65d287f4118b03f8cc979b433fd0b2246074200dd5da70c9daf204aaa0da1a2c.
//
// Solidity: event ReviewInitialConditions(address indexed from)
func (_CnStakingV3 *CnStakingV3Filterer) FilterReviewInitialConditions(opts *bind.FilterOpts, from []common.Address) (*CnStakingV3ReviewInitialConditionsIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "ReviewInitialConditions", fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3ReviewInitialConditionsIterator{contract: _CnStakingV3.contract, event: "ReviewInitialConditions", logs: logs, sub: sub}, nil
}

// WatchReviewInitialConditions is a free log subscription operation binding the contract event 0x65d287f4118b03f8cc979b433fd0b2246074200dd5da70c9daf204aaa0da1a2c.
//
// Solidity: event ReviewInitialConditions(address indexed from)
func (_CnStakingV3 *CnStakingV3Filterer) WatchReviewInitialConditions(opts *bind.WatchOpts, sink chan<- *CnStakingV3ReviewInitialConditions, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "ReviewInitialConditions", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3ReviewInitialConditions)
				if err := _CnStakingV3.contract.UnpackLog(event, "ReviewInitialConditions", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReviewInitialConditions is a log parse operation binding the contract event 0x65d287f4118b03f8cc979b433fd0b2246074200dd5da70c9daf204aaa0da1a2c.
//
// Solidity: event ReviewInitialConditions(address indexed from)
func (_CnStakingV3 *CnStakingV3Filterer) ParseReviewInitialConditions(log types.Log) (*CnStakingV3ReviewInitialConditions, error) {
	event := new(CnStakingV3ReviewInitialConditions)
	if err := _CnStakingV3.contract.UnpackLog(event, "ReviewInitialConditions", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3RoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the CnStakingV3 contract.
type CnStakingV3RoleAdminChangedIterator struct {
	Event *CnStakingV3RoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3RoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3RoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3RoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3RoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3RoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3RoleAdminChanged represents a RoleAdminChanged event raised by the CnStakingV3 contract.
type CnStakingV3RoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CnStakingV3 *CnStakingV3Filterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*CnStakingV3RoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3RoleAdminChangedIterator{contract: _CnStakingV3.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CnStakingV3 *CnStakingV3Filterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *CnStakingV3RoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3RoleAdminChanged)
				if err := _CnStakingV3.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CnStakingV3 *CnStakingV3Filterer) ParseRoleAdminChanged(log types.Log) (*CnStakingV3RoleAdminChanged, error) {
	event := new(CnStakingV3RoleAdminChanged)
	if err := _CnStakingV3.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3RoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the CnStakingV3 contract.
type CnStakingV3RoleGrantedIterator struct {
	Event *CnStakingV3RoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3RoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3RoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3RoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3RoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3RoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3RoleGranted represents a RoleGranted event raised by the CnStakingV3 contract.
type CnStakingV3RoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CnStakingV3 *CnStakingV3Filterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CnStakingV3RoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3RoleGrantedIterator{contract: _CnStakingV3.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CnStakingV3 *CnStakingV3Filterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *CnStakingV3RoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3RoleGranted)
				if err := _CnStakingV3.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CnStakingV3 *CnStakingV3Filterer) ParseRoleGranted(log types.Log) (*CnStakingV3RoleGranted, error) {
	event := new(CnStakingV3RoleGranted)
	if err := _CnStakingV3.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3RoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the CnStakingV3 contract.
type CnStakingV3RoleRevokedIterator struct {
	Event *CnStakingV3RoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3RoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3RoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3RoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3RoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3RoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3RoleRevoked represents a RoleRevoked event raised by the CnStakingV3 contract.
type CnStakingV3RoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CnStakingV3 *CnStakingV3Filterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CnStakingV3RoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3RoleRevokedIterator{contract: _CnStakingV3.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CnStakingV3 *CnStakingV3Filterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *CnStakingV3RoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3RoleRevoked)
				if err := _CnStakingV3.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CnStakingV3 *CnStakingV3Filterer) ParseRoleRevoked(log types.Log) (*CnStakingV3RoleRevoked, error) {
	event := new(CnStakingV3RoleRevoked)
	if err := _CnStakingV3.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3SetPublicDelegationIterator is returned from FilterSetPublicDelegation and is used to iterate over the raw logs and unpacked data for SetPublicDelegation events raised by the CnStakingV3 contract.
type CnStakingV3SetPublicDelegationIterator struct {
	Event *CnStakingV3SetPublicDelegation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3SetPublicDelegationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3SetPublicDelegation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3SetPublicDelegation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3SetPublicDelegationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3SetPublicDelegationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3SetPublicDelegation represents a SetPublicDelegation event raised by the CnStakingV3 contract.
type CnStakingV3SetPublicDelegation struct {
	From             common.Address
	PublicDelegation common.Address
	RewardAddress    common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterSetPublicDelegation is a free log retrieval operation binding the contract event 0x669ea85a3c8fdb578f28c81d130bb3cf68e5f3845d178688ae84abdba59c9030.
//
// Solidity: event SetPublicDelegation(address indexed from, address publicDelegation, address rewardAddress)
func (_CnStakingV3 *CnStakingV3Filterer) FilterSetPublicDelegation(opts *bind.FilterOpts, from []common.Address) (*CnStakingV3SetPublicDelegationIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "SetPublicDelegation", fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3SetPublicDelegationIterator{contract: _CnStakingV3.contract, event: "SetPublicDelegation", logs: logs, sub: sub}, nil
}

// WatchSetPublicDelegation is a free log subscription operation binding the contract event 0x669ea85a3c8fdb578f28c81d130bb3cf68e5f3845d178688ae84abdba59c9030.
//
// Solidity: event SetPublicDelegation(address indexed from, address publicDelegation, address rewardAddress)
func (_CnStakingV3 *CnStakingV3Filterer) WatchSetPublicDelegation(opts *bind.WatchOpts, sink chan<- *CnStakingV3SetPublicDelegation, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "SetPublicDelegation", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3SetPublicDelegation)
				if err := _CnStakingV3.contract.UnpackLog(event, "SetPublicDelegation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetPublicDelegation is a log parse operation binding the contract event 0x669ea85a3c8fdb578f28c81d130bb3cf68e5f3845d178688ae84abdba59c9030.
//
// Solidity: event SetPublicDelegation(address indexed from, address publicDelegation, address rewardAddress)
func (_CnStakingV3 *CnStakingV3Filterer) ParseSetPublicDelegation(log types.Log) (*CnStakingV3SetPublicDelegation, error) {
	event := new(CnStakingV3SetPublicDelegation)
	if err := _CnStakingV3.contract.UnpackLog(event, "SetPublicDelegation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3ToggleRedelegationIterator is returned from FilterToggleRedelegation and is used to iterate over the raw logs and unpacked data for ToggleRedelegation events raised by the CnStakingV3 contract.
type CnStakingV3ToggleRedelegationIterator struct {
	Event *CnStakingV3ToggleRedelegation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3ToggleRedelegationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3ToggleRedelegation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3ToggleRedelegation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3ToggleRedelegationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3ToggleRedelegationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3ToggleRedelegation represents a ToggleRedelegation event raised by the CnStakingV3 contract.
type CnStakingV3ToggleRedelegation struct {
	IsRedelegationEnabled bool
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterToggleRedelegation is a free log retrieval operation binding the contract event 0x02efa9113845c402ffbbc237400eeba75de99c23f054459573f88caa5a941898.
//
// Solidity: event ToggleRedelegation(bool isRedelegationEnabled)
func (_CnStakingV3 *CnStakingV3Filterer) FilterToggleRedelegation(opts *bind.FilterOpts) (*CnStakingV3ToggleRedelegationIterator, error) {

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "ToggleRedelegation")
	if err != nil {
		return nil, err
	}
	return &CnStakingV3ToggleRedelegationIterator{contract: _CnStakingV3.contract, event: "ToggleRedelegation", logs: logs, sub: sub}, nil
}

// WatchToggleRedelegation is a free log subscription operation binding the contract event 0x02efa9113845c402ffbbc237400eeba75de99c23f054459573f88caa5a941898.
//
// Solidity: event ToggleRedelegation(bool isRedelegationEnabled)
func (_CnStakingV3 *CnStakingV3Filterer) WatchToggleRedelegation(opts *bind.WatchOpts, sink chan<- *CnStakingV3ToggleRedelegation) (event.Subscription, error) {

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "ToggleRedelegation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3ToggleRedelegation)
				if err := _CnStakingV3.contract.UnpackLog(event, "ToggleRedelegation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseToggleRedelegation is a log parse operation binding the contract event 0x02efa9113845c402ffbbc237400eeba75de99c23f054459573f88caa5a941898.
//
// Solidity: event ToggleRedelegation(bool isRedelegationEnabled)
func (_CnStakingV3 *CnStakingV3Filterer) ParseToggleRedelegation(log types.Log) (*CnStakingV3ToggleRedelegation, error) {
	event := new(CnStakingV3ToggleRedelegation)
	if err := _CnStakingV3.contract.UnpackLog(event, "ToggleRedelegation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3UpdateGCIdIterator is returned from FilterUpdateGCId and is used to iterate over the raw logs and unpacked data for UpdateGCId events raised by the CnStakingV3 contract.
type CnStakingV3UpdateGCIdIterator struct {
	Event *CnStakingV3UpdateGCId // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3UpdateGCIdIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3UpdateGCId)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3UpdateGCId)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3UpdateGCIdIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3UpdateGCIdIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3UpdateGCId represents a UpdateGCId event raised by the CnStakingV3 contract.
type CnStakingV3UpdateGCId struct {
	GcId *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterUpdateGCId is a free log retrieval operation binding the contract event 0x469cb2f3ce5d5e879269af625b54571651feb0ede6e83ee89b9c888648af514f.
//
// Solidity: event UpdateGCId(uint256 indexed gcId)
func (_CnStakingV3 *CnStakingV3Filterer) FilterUpdateGCId(opts *bind.FilterOpts, gcId []*big.Int) (*CnStakingV3UpdateGCIdIterator, error) {

	var gcIdRule []interface{}
	for _, gcIdItem := range gcId {
		gcIdRule = append(gcIdRule, gcIdItem)
	}

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "UpdateGCId", gcIdRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3UpdateGCIdIterator{contract: _CnStakingV3.contract, event: "UpdateGCId", logs: logs, sub: sub}, nil
}

// WatchUpdateGCId is a free log subscription operation binding the contract event 0x469cb2f3ce5d5e879269af625b54571651feb0ede6e83ee89b9c888648af514f.
//
// Solidity: event UpdateGCId(uint256 indexed gcId)
func (_CnStakingV3 *CnStakingV3Filterer) WatchUpdateGCId(opts *bind.WatchOpts, sink chan<- *CnStakingV3UpdateGCId, gcId []*big.Int) (event.Subscription, error) {

	var gcIdRule []interface{}
	for _, gcIdItem := range gcId {
		gcIdRule = append(gcIdRule, gcIdItem)
	}

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "UpdateGCId", gcIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3UpdateGCId)
				if err := _CnStakingV3.contract.UnpackLog(event, "UpdateGCId", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateGCId is a log parse operation binding the contract event 0x469cb2f3ce5d5e879269af625b54571651feb0ede6e83ee89b9c888648af514f.
//
// Solidity: event UpdateGCId(uint256 indexed gcId)
func (_CnStakingV3 *CnStakingV3Filterer) ParseUpdateGCId(log types.Log) (*CnStakingV3UpdateGCId, error) {
	event := new(CnStakingV3UpdateGCId)
	if err := _CnStakingV3.contract.UnpackLog(event, "UpdateGCId", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3UpdateRewardAddressIterator is returned from FilterUpdateRewardAddress and is used to iterate over the raw logs and unpacked data for UpdateRewardAddress events raised by the CnStakingV3 contract.
type CnStakingV3UpdateRewardAddressIterator struct {
	Event *CnStakingV3UpdateRewardAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3UpdateRewardAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3UpdateRewardAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3UpdateRewardAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3UpdateRewardAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3UpdateRewardAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3UpdateRewardAddress represents a UpdateRewardAddress event raised by the CnStakingV3 contract.
type CnStakingV3UpdateRewardAddress struct {
	RewardAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterUpdateRewardAddress is a free log retrieval operation binding the contract event 0xbe1849831e6775a2022006aeebcc00f70d10bc4202c8187e215ad9e9911f2b06.
//
// Solidity: event UpdateRewardAddress(address indexed rewardAddress)
func (_CnStakingV3 *CnStakingV3Filterer) FilterUpdateRewardAddress(opts *bind.FilterOpts, rewardAddress []common.Address) (*CnStakingV3UpdateRewardAddressIterator, error) {

	var rewardAddressRule []interface{}
	for _, rewardAddressItem := range rewardAddress {
		rewardAddressRule = append(rewardAddressRule, rewardAddressItem)
	}

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "UpdateRewardAddress", rewardAddressRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3UpdateRewardAddressIterator{contract: _CnStakingV3.contract, event: "UpdateRewardAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateRewardAddress is a free log subscription operation binding the contract event 0xbe1849831e6775a2022006aeebcc00f70d10bc4202c8187e215ad9e9911f2b06.
//
// Solidity: event UpdateRewardAddress(address indexed rewardAddress)
func (_CnStakingV3 *CnStakingV3Filterer) WatchUpdateRewardAddress(opts *bind.WatchOpts, sink chan<- *CnStakingV3UpdateRewardAddress, rewardAddress []common.Address) (event.Subscription, error) {

	var rewardAddressRule []interface{}
	for _, rewardAddressItem := range rewardAddress {
		rewardAddressRule = append(rewardAddressRule, rewardAddressItem)
	}

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "UpdateRewardAddress", rewardAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3UpdateRewardAddress)
				if err := _CnStakingV3.contract.UnpackLog(event, "UpdateRewardAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRewardAddress is a log parse operation binding the contract event 0xbe1849831e6775a2022006aeebcc00f70d10bc4202c8187e215ad9e9911f2b06.
//
// Solidity: event UpdateRewardAddress(address indexed rewardAddress)
func (_CnStakingV3 *CnStakingV3Filterer) ParseUpdateRewardAddress(log types.Log) (*CnStakingV3UpdateRewardAddress, error) {
	event := new(CnStakingV3UpdateRewardAddress)
	if err := _CnStakingV3.contract.UnpackLog(event, "UpdateRewardAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3UpdateStakingTrackerIterator is returned from FilterUpdateStakingTracker and is used to iterate over the raw logs and unpacked data for UpdateStakingTracker events raised by the CnStakingV3 contract.
type CnStakingV3UpdateStakingTrackerIterator struct {
	Event *CnStakingV3UpdateStakingTracker // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3UpdateStakingTrackerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3UpdateStakingTracker)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3UpdateStakingTracker)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3UpdateStakingTrackerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3UpdateStakingTrackerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3UpdateStakingTracker represents a UpdateStakingTracker event raised by the CnStakingV3 contract.
type CnStakingV3UpdateStakingTracker struct {
	StakingTracker common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpdateStakingTracker is a free log retrieval operation binding the contract event 0xef25e066ac14a10491ae1ac89a8247282158e169968aaccbceb257d0878bdfd0.
//
// Solidity: event UpdateStakingTracker(address indexed stakingTracker)
func (_CnStakingV3 *CnStakingV3Filterer) FilterUpdateStakingTracker(opts *bind.FilterOpts, stakingTracker []common.Address) (*CnStakingV3UpdateStakingTrackerIterator, error) {

	var stakingTrackerRule []interface{}
	for _, stakingTrackerItem := range stakingTracker {
		stakingTrackerRule = append(stakingTrackerRule, stakingTrackerItem)
	}

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "UpdateStakingTracker", stakingTrackerRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3UpdateStakingTrackerIterator{contract: _CnStakingV3.contract, event: "UpdateStakingTracker", logs: logs, sub: sub}, nil
}

// WatchUpdateStakingTracker is a free log subscription operation binding the contract event 0xef25e066ac14a10491ae1ac89a8247282158e169968aaccbceb257d0878bdfd0.
//
// Solidity: event UpdateStakingTracker(address indexed stakingTracker)
func (_CnStakingV3 *CnStakingV3Filterer) WatchUpdateStakingTracker(opts *bind.WatchOpts, sink chan<- *CnStakingV3UpdateStakingTracker, stakingTracker []common.Address) (event.Subscription, error) {

	var stakingTrackerRule []interface{}
	for _, stakingTrackerItem := range stakingTracker {
		stakingTrackerRule = append(stakingTrackerRule, stakingTrackerItem)
	}

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "UpdateStakingTracker", stakingTrackerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3UpdateStakingTracker)
				if err := _CnStakingV3.contract.UnpackLog(event, "UpdateStakingTracker", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateStakingTracker is a log parse operation binding the contract event 0xef25e066ac14a10491ae1ac89a8247282158e169968aaccbceb257d0878bdfd0.
//
// Solidity: event UpdateStakingTracker(address indexed stakingTracker)
func (_CnStakingV3 *CnStakingV3Filterer) ParseUpdateStakingTracker(log types.Log) (*CnStakingV3UpdateStakingTracker, error) {
	event := new(CnStakingV3UpdateStakingTracker)
	if err := _CnStakingV3.contract.UnpackLog(event, "UpdateStakingTracker", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3UpdateVoterAddressIterator is returned from FilterUpdateVoterAddress and is used to iterate over the raw logs and unpacked data for UpdateVoterAddress events raised by the CnStakingV3 contract.
type CnStakingV3UpdateVoterAddressIterator struct {
	Event *CnStakingV3UpdateVoterAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3UpdateVoterAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3UpdateVoterAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3UpdateVoterAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3UpdateVoterAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3UpdateVoterAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3UpdateVoterAddress represents a UpdateVoterAddress event raised by the CnStakingV3 contract.
type CnStakingV3UpdateVoterAddress struct {
	VoterAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterUpdateVoterAddress is a free log retrieval operation binding the contract event 0x61ee88e3c7513df1e6e214415e781030278cf98b7fbb9d6d53720ee8aeb654ee.
//
// Solidity: event UpdateVoterAddress(address indexed voterAddress)
func (_CnStakingV3 *CnStakingV3Filterer) FilterUpdateVoterAddress(opts *bind.FilterOpts, voterAddress []common.Address) (*CnStakingV3UpdateVoterAddressIterator, error) {

	var voterAddressRule []interface{}
	for _, voterAddressItem := range voterAddress {
		voterAddressRule = append(voterAddressRule, voterAddressItem)
	}

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "UpdateVoterAddress", voterAddressRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3UpdateVoterAddressIterator{contract: _CnStakingV3.contract, event: "UpdateVoterAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateVoterAddress is a free log subscription operation binding the contract event 0x61ee88e3c7513df1e6e214415e781030278cf98b7fbb9d6d53720ee8aeb654ee.
//
// Solidity: event UpdateVoterAddress(address indexed voterAddress)
func (_CnStakingV3 *CnStakingV3Filterer) WatchUpdateVoterAddress(opts *bind.WatchOpts, sink chan<- *CnStakingV3UpdateVoterAddress, voterAddress []common.Address) (event.Subscription, error) {

	var voterAddressRule []interface{}
	for _, voterAddressItem := range voterAddress {
		voterAddressRule = append(voterAddressRule, voterAddressItem)
	}

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "UpdateVoterAddress", voterAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3UpdateVoterAddress)
				if err := _CnStakingV3.contract.UnpackLog(event, "UpdateVoterAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateVoterAddress is a log parse operation binding the contract event 0x61ee88e3c7513df1e6e214415e781030278cf98b7fbb9d6d53720ee8aeb654ee.
//
// Solidity: event UpdateVoterAddress(address indexed voterAddress)
func (_CnStakingV3 *CnStakingV3Filterer) ParseUpdateVoterAddress(log types.Log) (*CnStakingV3UpdateVoterAddress, error) {
	event := new(CnStakingV3UpdateVoterAddress)
	if err := _CnStakingV3.contract.UnpackLog(event, "UpdateVoterAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3WithdrawApprovedStakingIterator is returned from FilterWithdrawApprovedStaking and is used to iterate over the raw logs and unpacked data for WithdrawApprovedStaking events raised by the CnStakingV3 contract.
type CnStakingV3WithdrawApprovedStakingIterator struct {
	Event *CnStakingV3WithdrawApprovedStaking // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3WithdrawApprovedStakingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3WithdrawApprovedStaking)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3WithdrawApprovedStaking)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3WithdrawApprovedStakingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3WithdrawApprovedStakingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3WithdrawApprovedStaking represents a WithdrawApprovedStaking event raised by the CnStakingV3 contract.
type CnStakingV3WithdrawApprovedStaking struct {
	ApprovedWithdrawalId *big.Int
	To                   common.Address
	Value                *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterWithdrawApprovedStaking is a free log retrieval operation binding the contract event 0x7a2d48d1df1249429730a253e5713a7d7a2024913de2fbccafdf36efdd32bf05.
//
// Solidity: event WithdrawApprovedStaking(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) FilterWithdrawApprovedStaking(opts *bind.FilterOpts, approvedWithdrawalId []*big.Int, to []common.Address) (*CnStakingV3WithdrawApprovedStakingIterator, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "WithdrawApprovedStaking", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3WithdrawApprovedStakingIterator{contract: _CnStakingV3.contract, event: "WithdrawApprovedStaking", logs: logs, sub: sub}, nil
}

// WatchWithdrawApprovedStaking is a free log subscription operation binding the contract event 0x7a2d48d1df1249429730a253e5713a7d7a2024913de2fbccafdf36efdd32bf05.
//
// Solidity: event WithdrawApprovedStaking(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) WatchWithdrawApprovedStaking(opts *bind.WatchOpts, sink chan<- *CnStakingV3WithdrawApprovedStaking, approvedWithdrawalId []*big.Int, to []common.Address) (event.Subscription, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "WithdrawApprovedStaking", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3WithdrawApprovedStaking)
				if err := _CnStakingV3.contract.UnpackLog(event, "WithdrawApprovedStaking", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawApprovedStaking is a log parse operation binding the contract event 0x7a2d48d1df1249429730a253e5713a7d7a2024913de2fbccafdf36efdd32bf05.
//
// Solidity: event WithdrawApprovedStaking(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) ParseWithdrawApprovedStaking(log types.Log) (*CnStakingV3WithdrawApprovedStaking, error) {
	event := new(CnStakingV3WithdrawApprovedStaking)
	if err := _CnStakingV3.contract.UnpackLog(event, "WithdrawApprovedStaking", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3WithdrawLockupStakingIterator is returned from FilterWithdrawLockupStaking and is used to iterate over the raw logs and unpacked data for WithdrawLockupStaking events raised by the CnStakingV3 contract.
type CnStakingV3WithdrawLockupStakingIterator struct {
	Event *CnStakingV3WithdrawLockupStaking // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3WithdrawLockupStakingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3WithdrawLockupStaking)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3WithdrawLockupStaking)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3WithdrawLockupStakingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3WithdrawLockupStakingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3WithdrawLockupStaking represents a WithdrawLockupStaking event raised by the CnStakingV3 contract.
type CnStakingV3WithdrawLockupStaking struct {
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWithdrawLockupStaking is a free log retrieval operation binding the contract event 0x2d9d65e4fcab96e158761a8d3cc0bd7fd76951ab5574667b07190da171777470.
//
// Solidity: event WithdrawLockupStaking(address indexed to, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) FilterWithdrawLockupStaking(opts *bind.FilterOpts, to []common.Address) (*CnStakingV3WithdrawLockupStakingIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3.contract.FilterLogs(opts, "WithdrawLockupStaking", toRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3WithdrawLockupStakingIterator{contract: _CnStakingV3.contract, event: "WithdrawLockupStaking", logs: logs, sub: sub}, nil
}

// WatchWithdrawLockupStaking is a free log subscription operation binding the contract event 0x2d9d65e4fcab96e158761a8d3cc0bd7fd76951ab5574667b07190da171777470.
//
// Solidity: event WithdrawLockupStaking(address indexed to, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) WatchWithdrawLockupStaking(opts *bind.WatchOpts, sink chan<- *CnStakingV3WithdrawLockupStaking, to []common.Address) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3.contract.WatchLogs(opts, "WithdrawLockupStaking", toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3WithdrawLockupStaking)
				if err := _CnStakingV3.contract.UnpackLog(event, "WithdrawLockupStaking", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawLockupStaking is a log parse operation binding the contract event 0x2d9d65e4fcab96e158761a8d3cc0bd7fd76951ab5574667b07190da171777470.
//
// Solidity: event WithdrawLockupStaking(address indexed to, uint256 value)
func (_CnStakingV3 *CnStakingV3Filterer) ParseWithdrawLockupStaking(log types.Log) (*CnStakingV3WithdrawLockupStaking, error) {
	event := new(CnStakingV3WithdrawLockupStaking)
	if err := _CnStakingV3.contract.UnpackLog(event, "WithdrawLockupStaking", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigMetaData contains all meta data concerning the CnStakingV3MultiSig contract.
var CnStakingV3MultiSigMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractValidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nodeId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_cnAdminlist\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_requirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_unlockTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_unlockAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"AcceptRewardAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"approvedWithdrawalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawableFrom\",\"type\":\"uint256\"}],\"name\":\"ApproveStakingWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"approvedWithdrawalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CancelApprovedStakingWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"}],\"name\":\"CancelRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ClearRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CompleteReviewInitialConditions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"confirmers\",\"type\":\"address[]\"}],\"name\":\"ConfirmRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DelegateKaia\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"DeleteAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contractType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nodeId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"unlockTime\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"unlockAmount\",\"type\":\"uint256[]\"}],\"name\":\"DeployCnStakingV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contractType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractValidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cnAdminList\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requirement\",\"type\":\"uint256\"}],\"name\":\"DeployCnStakingV3MultiSig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DepositLockupStakingAndInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"}],\"name\":\"ExecuteRequestFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"}],\"name\":\"ExecuteRequestSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevCnStakingV3\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetCnStakingV3\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"HandleRedelegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetCnStakingV3\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Redelegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"ReviewInitialConditions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"confirmers\",\"type\":\"address[]\"}],\"name\":\"RevokeConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"publicDelegation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"SetPublicDelegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"}],\"name\":\"SubmitRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRedelegationEnabled\",\"type\":\"bool\"}],\"name\":\"ToggleRedelegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gcId\",\"type\":\"uint256\"}],\"name\":\"UpdateGCId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requirement\",\"type\":\"uint256\"}],\"name\":\"UpdateRequirement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"UpdateRewardAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingTracker\",\"type\":\"address\"}],\"name\":\"UpdateStakingTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"UpdateVoterAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"approvedWithdrawalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawApprovedStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawLockupStaking\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_BOOK_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ADMIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_LOCKUP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKING_APPROVER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKING_CLAIMER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"acceptRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pos\",\"type\":\"uint256\"}],\"name\":\"adminList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveStakingWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancelApprovedStakingWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"_functionId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_firstArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_secondArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_thirdArg\",\"type\":\"bytes32\"}],\"name\":\"confirmRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"deleteAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLockupStakingAndInit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gcId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"enumICnStakingV3.WithdrawalStakingState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"getApprovedStakingWithdrawalIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getApprovedStakingWithdrawalInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableFrom\",\"type\":\"uint256\"},{\"internalType\":\"enumICnStakingV3.WithdrawalStakingState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockupStakingInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unlockTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unlockAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"initial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"enumICnStakingV3MultiSig.RequestState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"getRequestIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getRequestInfo\",\"outputs\":[{\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"confirmers\",\"type\":\"address[]\"},{\"internalType\":\"enumICnStakingV3MultiSig.RequestState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getRequestState\",\"outputs\":[{\"internalType\":\"enumICnStakingV3MultiSig.RequestState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReviewers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_contractValidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nodeId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_adminListArr\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_requirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_unlockTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_unlockAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_allReviewed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isInitialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"handleRedelegation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialLockupStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicDelegationEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRedelegationEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClearedId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastRedelegation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupConditions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allReviewed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reviewedCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicDelegation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetCnV3\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"redelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingLockupStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reviewInitialConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"_functionId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_firstArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_secondArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_thirdArg\",\"type\":\"bytes32\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gcId\",\"type\":\"uint256\"}],\"name\":\"setGCId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pdFactory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_pdArgs\",\"type\":\"bytes\"}],\"name\":\"setPublicDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tracker\",\"type\":\"address\"}],\"name\":\"setStakingTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"submitAddAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"submitApproveStakingWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"submitCancelApprovedStakingWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitClearRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"submitDeleteAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitToggleRedelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"submitUpdateRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"submitUpdateRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tracker\",\"type\":\"address\"}],\"name\":\"submitUpdateStakingTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"submitUpdateVoterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"submitWithdrawLockupStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRedelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"updateRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updateRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tracker\",\"type\":\"address\"}],\"name\":\"updateStakingTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updateVoterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawApprovedStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawLockupStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalRequestMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableFrom\",\"type\":\"uint256\"},{\"internalType\":\"enumICnStakingV3.WithdrawalStakingState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"f2f2f49b": "ADDRESS_BOOK_ADDRESS()",
		"75b238fc": "ADMIN_ROLE()",
		"4b6a94cc": "CONTRACT_TYPE()",
		"a217fddf": "DEFAULT_ADMIN_ROLE()",
		"58d65880": "MAX_ADMIN()",
		"8e6f6b77": "ONE_WEEK()",
		"f5b541a6": "OPERATOR_ROLE()",
		"3780b3ed": "STAKER_ROLE()",
		"96106ae4": "STAKE_LOCKUP()",
		"0c07d842": "UNSTAKING_APPROVER_ROLE()",
		"9c394c5d": "UNSTAKING_CLAIMER_ROLE()",
		"ffa1ad74": "VERSION()",
		"aa4058b9": "acceptRewardAddress(address)",
		"70480275": "addAdmin(address)",
		"11117fc8": "adminList(uint256)",
		"5df8b09a": "approveStakingWithdrawal(address,uint256)",
		"c804b115": "cancelApprovedStakingWithdrawal(uint256)",
		"4f97638f": "clearRequest()",
		"3b2d2aca": "confirmRequest(uint256,uint8,bytes32,bytes32,bytes32)",
		"7a5db068": "contractValidator()",
		"c89e4361": "delegate()",
		"27e1f7df": "deleteAdmin(address)",
		"6a27c206": "depositLockupStakingAndInit()",
		"6d2714db": "gcId()",
		"d2569eb9": "getApprovedStakingWithdrawalIds(uint256,uint256,uint8)",
		"725c0503": "getApprovedStakingWithdrawalInfo(uint256)",
		"5ecd75f2": "getLockupStakingInfo()",
		"0fd440ec": "getRequestIds(uint256,uint256,uint8)",
		"0b816045": "getRequestInfo(uint256)",
		"ed979dd6": "getRequestState(uint256)",
		"75a87643": "getReviewers()",
		"248a9ca3": "getRoleAdmin(bytes32)",
		"9010d07c": "getRoleMember(bytes32,uint256)",
		"ca15c873": "getRoleMemberCount(bytes32)",
		"1865c57d": "getState()",
		"2f2ff15d": "grantRole(bytes32,address)",
		"a006e90c": "handleRedelegation(address)",
		"91d14854": "hasRole(bytes32,address)",
		"06704222": "initialLockupStaking()",
		"24d7806c": "isAdmin(address)",
		"392e53cd": "isInitialized()",
		"bfc7e948": "isPublicDelegationEnabled()",
		"7a66c96b": "isRedelegationEnabled()",
		"e7abb98d": "lastClearedId()",
		"14d3ce10": "lastRedelegation(address)",
		"2429f8a9": "lockupConditions()",
		"139d7fed": "nodeId()",
		"8740568b": "pendingRewardAddress()",
		"e1a12d35": "publicDelegation()",
		"6bd8f804": "redelegate(address,address,uint256)",
		"7b5e0481": "remainingLockupStaking()",
		"36568abe": "renounceRole(bytes32,address)",
		"5badbe4c": "requestCount()",
		"b7563930": "requirement()",
		"702b9c9b": "reviewInitialConditions()",
		"164990f8": "revokeConfirmation(uint256,uint8,bytes32,bytes32,bytes32)",
		"d547741f": "revokeRole(bytes32,address)",
		"8cf57cb9": "rewardAddress()",
		"ff4634bc": "setGCId(uint256)",
		"2e5dc0f7": "setPublicDelegation(address,bytes)",
		"c336aa35": "setStakingTracker(address)",
		"4cf088d9": "staking()",
		"008c477a": "stakingTracker()",
		"863f5c0a": "submitAddAdmin(address)",
		"7818097c": "submitApproveStakingWithdrawal(address,uint256)",
		"06b35d31": "submitCancelApprovedStakingWithdrawal(uint256)",
		"87cd9feb": "submitClearRequest()",
		"791b5123": "submitDeleteAdmin(address)",
		"2f890b1d": "submitToggleRedelegation()",
		"e748357b": "submitUpdateRequirement(uint256)",
		"069135af": "submitUpdateRewardAddress(address)",
		"0df5975c": "submitUpdateStakingTracker(address)",
		"b756e6ff": "submitUpdateVoterAddress(address)",
		"4b8bc6f8": "submitWithdrawLockupStaking(address,uint256)",
		"01ffc9a7": "supportsInterface(bytes4)",
		"d75859ec": "toggleRedelegation()",
		"630b1146": "unstaking()",
		"c47afb3a": "updateRequirement(uint256)",
		"944dd5a2": "updateRewardAddress(address)",
		"5be6eacc": "updateStakingTracker(address)",
		"5784d18b": "updateVoterAddress(address)",
		"992ac9fa": "voterAddress()",
		"6e93df0d": "withdrawApprovedStaking(uint256)",
		"505ebed4": "withdrawLockupStaking(address,uint256)",
		"19e44e32": "withdrawalRequestCount()",
		"284fbedc": "withdrawalRequestMap(uint256)",
	},
	Bin: "",
}

// CnStakingV3MultiSigABI is the input ABI used to generate the binding from.
// Deprecated: Use CnStakingV3MultiSigMetaData.ABI instead.
var CnStakingV3MultiSigABI = CnStakingV3MultiSigMetaData.ABI

// CnStakingV3MultiSigBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const CnStakingV3MultiSigBinRuntime = `6080604052600436106104a7575f3560e01c8063702b9c9b11610262578063a006e90c1161014a578063d2569eb9116100be578063e7abb98d11610083578063e7abb98d14610ee2578063ed979dd614610ef7578063f2f2f49b14610f23578063f5b541a614610f38578063ff4634bc14610f58578063ffa1ad7414610f77575f80fd5b8063d2569eb914610e52578063d547741f14610e71578063d75859ec14610e90578063e1a12d3514610ea4578063e748357b14610ec3575f80fd5b8063bfc7e9481161010f578063bfc7e94814610d9b578063c336aa3514610dce578063c47afb3a14610ded578063c804b11514610e0c578063c89e436114610e2b578063ca15c87314610e33575f80fd5b8063a006e90c14610d22578063a217fddf14610d35578063aa4058b914610d48578063b756393014610d67578063b756e6ff14610d7c575f80fd5b8063863f5c0a116101e15780639010d07c116101a65780639010d07c14610c8657806391d1485414610ca5578063944dd5a214610cc457806396106ae414610c70578063992ac9fa14610ce35780639c394c5d14610d02575f80fd5b8063863f5c0a14610bff5780638740568b14610c1e57806387cd9feb14610c3d5780638cf57cb914610c515780638e6f6b7714610c70575f80fd5b80637818097c116102275780637818097c14610b74578063791b512314610b935780637a5db06814610bb25780637a66c96b14610bd15780637b5e048114610bea575f80fd5b8063702b9c9b14610ab25780637048027514610ac6578063725c050314610ae557806375a8764314610b3357806375b238fc14610b54575f80fd5b80632f2ff15d116103905780635784d18b116103045780635ecd75f2116102c95780635ecd75f214610a1d578063630b114614610a425780636a27c20614610a575780636bd8f80414610a5f5780636d2714db14610a7e5780636e93df0d14610a93575f80fd5b80635784d18b1461099757806358d65880146109b65780635badbe4c146109ca5780635be6eacc146109df5780635df8b09a146109fe575f80fd5b80633b2d2aca116103555780633b2d2aca146108c85780634b6a94cc146108e75780634b8bc6f8146109305780634cf088d91461094f5780634f97638f14610964578063505ebed414610978575f80fd5b80632f2ff15d1461083d5780632f890b1d1461085c57806336568abe146108705780633780b3ed1461088f578063392e53cd146108af575f80fd5b8063139d7fed116104275780632429f8a9116103ec5780632429f8a914610721578063248a9ca31461075557806324d7806c1461078357806327e1f7df146107a2578063284fbedc146107c15780632e5dc0f71461081e575f80fd5b8063139d7fed1461066657806314d3ce1014610699578063164990f8146106c45780631865c57d146106e357806319e44e321461070c575f80fd5b80630b8160451161046d5780630b816045146105aa5780630c07d842146105dc5780630df5975c146105fc5780630fd440ec1461061b57806311117fc814610647575f80fd5b80628c477a146104d957806301ffc9a71461051a5780630670422214610549578063069135af1461056c57806306b35d311461058b575f80fd5b366104d5576104b4610f8b565b5f805160206157008339815191526104cb81610fe4565b6104d3610ff1565b005b5f80fd5b3480156104e4575f80fd5b506017546104fd9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b348015610525575f80fd5b50610539610534366004614b65565b611079565b6040519015158152602001610511565b348015610554575f80fd5b5061055e60105481565b604051908152602001610511565b348015610577575f80fd5b506104d3610586366004614ba0565b6110a3565b348015610596575f80fd5b506104d36105a5366004614bbb565b611133565b3480156105b5575f80fd5b506105c96105c4366004614bbb565b611209565b6040516105119796959493929190614c4d565b3480156105e7575f80fd5b5061055e5f8051602061574083398151915281565b348015610607575f80fd5b506104d3610616366004614ba0565b611281565b348015610626575f80fd5b5061063a610635366004614ca7565b6113fc565b6040516105119190614d0f565b348015610652575f80fd5b506104fd610661366004614bbb565b6114e1565b348015610671575f80fd5b506104fd7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106a4575f80fd5b5061055e6106b3366004614ba0565b60086020525f908152604090205481565b3480156106cf575f80fd5b506104d36106de366004614d21565b6114f9565b3480156106ee575f80fd5b506106f76116ec565b60405161051199989796959493929190614d68565b348015610717575f80fd5b5061055e60155481565b34801561072c575f80fd5b50600d54600e5461073e9160ff169082565b604080519215158352602083019190915201610511565b348015610760575f80fd5b5061055e61076f366004614bbb565b5f9081526019602052604090206001015490565b34801561078e575f80fd5b5061053961079d366004614ba0565b611810565b3480156107ad575f80fd5b506104d36107bc366004614ba0565b611828565b3480156107cc575f80fd5b5061080e6107db366004614bbb565b60166020525f908152604090208054600182015460028301546003909301546001600160a01b0390921692909160ff1684565b6040516105119493929190614de9565b348015610829575f80fd5b506104d3610838366004614e92565b61193a565b348015610848575f80fd5b506104d3610857366004614f1f565b611ad4565b348015610867575f80fd5b506104d3611af8565b34801561087b575f80fd5b506104d361088a366004614f1f565b611b71565b34801561089a575f80fd5b5061055e5f8051602061570083398151915281565b3480156108ba575f80fd5b506012546105399060ff1681565b3480156108d3575f80fd5b506104d36108e2366004614d21565b611ba4565b3480156108f2575f80fd5b506109236040518060400160405280601181526020017010db94dd185ada5b99d0dbdb9d1c9858dd607a1b81525081565b6040516105119190614f7b565b34801561093b575f80fd5b506104d361094a366004614f8d565b611d12565b34801561095a575f80fd5b5061055e60135481565b34801561096f575f80fd5b506104d3611d9f565b348015610983575f80fd5b506104d3610992366004614f8d565b611de7565b3480156109a2575f80fd5b506104d36109b1366004614ba0565b611f5f565b3480156109c1575f80fd5b5061055e603281565b3480156109d5575f80fd5b5061055e60045481565b3480156109ea575f80fd5b506104d36109f9366004614ba0565b6120fd565b348015610a09575f80fd5b5061055e610a18366004614f8d565b61229d565b348015610a28575f80fd5b50610a316123fc565b604051610511959493929190614fb7565b348015610a4d575f80fd5b5061055e60145481565b6104d3612533565b348015610a6a575f80fd5b506104d3610a79366004614ff9565b612578565b348015610a89575f80fd5b5061055e60065481565b348015610a9e575f80fd5b506104d3610aad366004614bbb565b612817565b348015610abd575f80fd5b506104d3612ad5565b348015610ad1575f80fd5b506104d3610ae0366004614ba0565b612bfe565b348015610af0575f80fd5b5061080e610aff366004614bbb565b5f9081526016602052604090208054600182015460028301546003909301546001600160a01b039092169390929160ff1690565b348015610b3e575f80fd5b50610b47612d0f565b6040516105119190615037565b348015610b5f575f80fd5b5061055e5f8051602061572083398151915281565b348015610b7f575f80fd5b506104d3610b8e366004614f8d565b612e04565b348015610b9e575f80fd5b506104d3610bad366004614ba0565b612ece565b348015610bbd575f80fd5b506001546104fd906001600160a01b031681565b348015610bdc575f80fd5b506017546105399060ff1681565b348015610bf5575f80fd5b5061055e60115481565b348015610c0a575f80fd5b506104d3610c19366004614ba0565b612f6e565b348015610c29575f80fd5b50600a546104fd906001600160a01b031681565b348015610c48575f80fd5b506104d361300e565b348015610c5c575f80fd5b506009546104fd906001600160a01b031681565b348015610c7b575f80fd5b5061055e62093a8081565b348015610c91575f80fd5b506104fd610ca0366004615049565b61303b565b348015610cb0575f80fd5b50610539610cbf366004614f1f565b613059565b348015610ccf575f80fd5b506104d3610cde366004614ba0565b6130cb565b348015610cee575f80fd5b506018546104fd906001600160a01b031681565b348015610d0d575f80fd5b5061055e5f8051602061576083398151915281565b6104d3610d30366004614ba0565b61316a565b348015610d40575f80fd5b5061055e5f81565b348015610d53575f80fd5b506104d3610d62366004614ba0565b61337d565b348015610d72575f80fd5b5061055e60025481565b348015610d87575f80fd5b506104d3610d96366004614ba0565b6134ff565b348015610da6575f80fd5b506105397f000000000000000000000000000000000000000000000000000000000000000081565b348015610dd9575f80fd5b506104d3610de8366004614ba0565b613615565b348015610df8575f80fd5b506104d3610e07366004614bbb565b613664565b348015610e17575f80fd5b506104d3610e26366004614bbb565b6136e2565b6104d36137d7565b348015610e3e575f80fd5b5061055e610e4d366004614bbb565b6137fe565b348015610e5d575f80fd5b5061063a610e6c366004615069565b613814565b348015610e7c575f80fd5b506104d3610e8b366004614f1f565b6138f9565b348015610e9b575f80fd5b506104d361391d565b348015610eaf575f80fd5b506007546104fd906001600160a01b031681565b348015610ece575f80fd5b506104d3610edd366004614bbb565b6139bf565b348015610eed575f80fd5b5061055e60035481565b348015610f02575f80fd5b50610f16610f11366004614bbb565b613a2e565b6040516105119190615097565b348015610f2e575f80fd5b506104fd61040081565b348015610f43575f80fd5b5061055e5f805160206156e083398151915281565b348015610f63575f80fd5b506104d3610f72366004614bbb565b613a9b565b348015610f82575f80fd5b5061055e600381565b60125460ff16610fe25760405162461bcd60e51b815260206004820152601c60248201527f436f6e7472616374206973206e6f7420696e697469616c697a65642e0000000060448201526064015b60405180910390fd5b565b610fee8133613b34565b50565b5f34116110325760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b21030b6b7bab73a1760891b6044820152606401610fd9565b6013805434019055611042613b6d565b60405134815233907f8ecbcbd560048c1f474847748189e8c43f1fdee737fbd34523b04b5a9bbdffaa9060200160405180910390a2565b5f6001600160e01b03198216635a05180f60e01b148061109d575061109d82613bc5565b92915050565b6110ab610f8b565b5f805160206157208339815191526110c281610fe4565b816110cc81613bf9565b7f00000000000000000000000000000000000000000000000000000000000000001561110a5760405162461bcd60e51b8152600401610fd9906150a5565b5f61112260086001600160a01b0386165b5f80613c42565b905061112d81613d0e565b50505050565b61113b610f8b565b5f8051602061572083398151915261115281610fe4565b7f0000000000000000000000000000000000000000000000000000000000000000156111905760405162461bcd60e51b8152600401610fd9906150a5565b5f82815260166020526040902080546001600160a01b03166111c45760405162461bcd60e51b8152600401610fd9906150dc565b5f600382015460ff1660028111156111de576111de614bd2565b146111fb5760405162461bcd60e51b8152600401610fd99061511e565b5f6111226007858380613c42565b5f81815260056020819052604082208054600182015460028301546003840154600485015487968796879687966060968896939560ff909316949193909290916001600160a01b0390911690611260908701613d3d565b6112698f613a2e565b959f949e50929c50909a509850965090945092505050565b611289610f8b565b5f805160206157208339815191526112a081610fe4565b6112b46001600160a01b0383166001613d49565b6112d05760405162461bcd60e51b8152600401610fd990615146565b60175461010090046001600160a01b0316156113d757601754604051635605a4e560e01b81523060048201526101009091046001600160a01b031690635605a4e5906024015f604051808303815f87803b15801561132c575f80fd5b505af115801561133e573d5f803e3d5ffd5b50505050601760019054906101000a90046001600160a01b03166001600160a01b031663d4377d4d6040518163ffffffff1660e01b81526004015f60405180830381865afa158015611392573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526113b991908101906151a0565b51156113d75760405162461bcd60e51b8152600401610fd99061522c565b5f6113ec60096001600160a01b03851661111b565b90506113f781613d0e565b505050565b60605f83158061140e57506004548410155b611418578361141c565b6004545b90506114288582615296565b67ffffffffffffffff81111561144057611440614e26565b604051908082528060200260200182016040528015611469578160200160208202803683370190505b5091505f855b828110156114d65784600481111561148957611489614bd2565b61149282613a2e565b60048111156114a3576114a3614bd2565b036114ce57808483806001019450815181106114c1576114c16152a9565b6020026020010181815250505b60010161146f565b508252509392505050565b5f61109d5f805160206157208339815191528361303b565b8461150381613e77565b5f8051602061572083398151915261151a81610fe4565b6115248733613ee0565b6115705760405162461bcd60e51b815260206004820152601d60248201527f4d73672e73656e64657220686173206e6f7420636f6e6669726d65642e0000006044820152606401610fd9565b5f87815260056020526040902086600b81111561158f5761158f614bd2565b815460ff16600b8111156115a5576115a5614bd2565b1480156115b55750858160010154145b80156115c45750848160020154145b80156115d35750838160030154145b6115ef5760405162461bcd60e51b8152600401610fd9906152bd565b6004810154336001600160a01b039091160361166e5760078101805460ff19166004179055805460018201546002830154600384015460405133948d947f01011152a3b44da915f5831c5c63c3448b616dcc166c3543f289ed79645280c9946116619460ff9093169391929091615304565b60405180910390a36116e2565b61167b6005820133613efa565b50805460018201546002830154600384015433938c937fed38e5621fac2aa23736077187104abfe9c8aa1c5b4eb73015d8cfdf403fe0709360ff909216929091906116c860058901613d3d565b6040516116d995949392919061532d565b60405180910390a35b5050505050505050565b6001546009545f9182918291606091839183918291849182916001600160a01b03908116917f0000000000000000000000000000000000000000000000000000000000000000911661173c613f0e565b600254600d54601254600b8054604080516020808402820181019092528281529294600c9460ff91821694911692909186919083018282801561179c57602002820191905f5260205f20905b815481526020019060010190808311611788575b50505050509350828054806020026020016040519081016040528092919081815260200182805480156117ec57602002820191905f5260205f20905b8154815260200190600101908083116117d8575b50505050509250985098509850985098509850985098509850909192939495969798565b5f61109d5f8051602061572083398151915283613059565b5f805160206156e083398151915261183f81610fe4565b60016118575f805160206157208339815191526137fe565b6118619190615296565b60025461186e8282613fc6565b6118855f8051602061572083398151915285614030565b6118a15760405162461bcd60e51b8152600401610fd99061535e565b7f00000000000000000000000000000000000000000000000000000000000000006118f9576118dd5f8051602061576083398151915285614030565b6118f95760405162461bcd60e51b8152600401610fd99061535e565b611901611d9f565b6040516001600160a01b038516907f1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220905f90a250505050565b611942614063565b8161194c81613bf9565b5f8051602061572083398151915261196381610fe4565b7f00000000000000000000000000000000000000000000000000000000000000006119a05760405162461bcd60e51b8152600401610fd99061538d565b5f8351116119e05760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b21030b933b99760991b6044820152606401610fd9565b5f838060200190518101906119f59190615411565b604051631e1e087360e21b81529091506001600160a01b0386169063787821cc90611a249084906004016154bf565b6020604051808303815f875af1158015611a40573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a64919061550b565b600780546001600160a01b03199081166001600160a01b0393909316928317909155600980549091168217905560408051828152602081019290925233917f669ea85a3c8fdb578f28c81d130bb3cf68e5f3845d178688ae84abdba59c9030910160405180910390a25050505050565b5f82815260196020526040902060010154611aee81610fe4565b61112d83836140b6565b611b00610f8b565b5f80516020615720833981519152611b1781610fe4565b7f0000000000000000000000000000000000000000000000000000000000000000611b545760405162461bcd60e51b8152600401610fd99061538d565b5f611b62600b828080613c42565b9050611b6d81613d0e565b5050565b6001600160a01b0381163314611b9a5760405163334bd91960e11b815260040160405180910390fd5b6113f78282614030565b84611bae81613e77565b5f80516020615720833981519152611bc581610fe4565b611bcf8733613ee0565b15611c1c5760405162461bcd60e51b815260206004820152601d60248201527f4d73672e73656e64657220616c726561647920636f6e6669726d65642e0000006044820152606401610fd9565b5f87815260056020526040902086600b811115611c3b57611c3b614bd2565b815460ff16600b811115611c5157611c51614bd2565b148015611c615750858160010154145b8015611c705750848160020154145b8015611c7f5750838160030154145b611c9b5760405162461bcd60e51b8152600401610fd9906152bd565b611ca860058201336140dd565b5033887f658055f08cf63659025f616b2baf94baf8f4d2ee9c600c2ae722b4b7716cce4689898989611cdc60058901613d3d565b604051611ced95949392919061532d565b60405180910390a3600254611d04826005016140f1565b106116e2576116e2886140fa565b611d1a610f8b565b5f80516020615720833981519152611d3181610fe4565b82611d3b81613bf9565b5f611d446123fc565b9450505050505f84118015611d595750808411155b611d755760405162461bcd60e51b8152600401610fd990615526565b5f611d8c60056001600160a01b038816875f613c42565b9050611d9781613d0e565b505050505050565b5f805160206156e0833981519152611db681610fe4565b6004546003556040517f907527d30089abd16e30f06ddbbbc18480505176262f19bc16c1fbf9262f9c6b905f90a150565b5f805160206156e0833981519152611dfe81610fe4565b82611e0881613bf9565b5f611e116123fc565b9450505050505f84118015611e265750808411155b611e725760405162461bcd60e51b815260206004820152601a60248201527f56616c7565206973206e6f7420776974686472617761626c652e0000000000006044820152606401610fd9565b6011805485900390556040515f906001600160a01b0387169086908381818185875af1925050503d805f8114611ec3576040519150601f19603f3d011682016040523d82523d5f602084013e611ec8565b606091505b5050905080611f0c5760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b6044820152606401610fd9565b611f14613b6d565b856001600160a01b03167f2d9d65e4fcab96e158761a8d3cc0bd7fd76951ab5574667b07190da17177747086604051611f4f91815260200190565b60405180910390a2505050505050565b5f805160206156e0833981519152611f7681610fe4565b601880546001600160a01b0319166001600160a01b0384811691909117909155601754610100900416156120c6576001600160a01b03821615612069576017546040516327a38e0160e11b81526001600160a01b03848116600483015261010090920490911690634f471c0290602401602060405180830381865afa158015612001573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612025919061554e565b156120695760405162461bcd60e51b81526020600482015260146024820152732b37ba32b91030b63932b0b23c903a30b5b2b71760611b6044820152606401610fd9565b60175460405163aad8cb3f60e01b81523060048201526101009091046001600160a01b03169063aad8cb3f906024015f604051808303815f87803b1580156120af575f80fd5b505af11580156120c1573d5f803e3d5ffd5b505050505b6040516001600160a01b038316907f61ee88e3c7513df1e6e214415e781030278cf98b7fbb9d6d53720ee8aeb654ee905f90a25050565b5f805160206156e083398151915261211481610fe4565b6121286001600160a01b0383166001613d49565b6121445760405162461bcd60e51b8152600401610fd990615146565b60175461010090046001600160a01b03161561224b57601754604051635605a4e560e01b81523060048201526101009091046001600160a01b031690635605a4e5906024015f604051808303815f87803b1580156121a0575f80fd5b505af11580156121b2573d5f803e3d5ffd5b50505050601760019054906101000a90046001600160a01b03166001600160a01b031663d4377d4d6040518163ffffffff1660e01b81526004015f60405180830381865afa158015612206573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261222d91908101906151a0565b511561224b5760405162461bcd60e51b8152600401610fd99061522c565b60178054610100600160a81b0319166101006001600160a01b038516908102919091179091556040517fef25e066ac14a10491ae1ac89a8247282158e169968aaccbceb257d0878bdfd0905f90a25050565b5f826122a881613bf9565b5f805160206157408339815191526122bf81610fe4565b5f841180156122dd5750601354846014546122da9190615565565b11155b6122f95760405162461bcd60e51b8152600401610fd990615526565b601580546001808201909255604080516080810182526001600160a01b03898116825260208083018a81524262093a80018486018181525f60608701818152898252601690955296909620855181546001600160a01b031916951694909417845590518388015593516002808401919091559051600383018054969a509496939592949093909260ff191691849081111561239657612396614bd2565b0217905550506014805487019055506123ad613b6d565b60408051868152602081018390526001600160a01b0388169186917fdd0988b8c11a867814c87be652f93a86d35c6a235b92977e99d5394bd8580ced910160405180910390a350505092915050565b6060805f805f61240a610f8b565b5f805b600b5481101561247057600b80548290811061242b5761242b6152a9565b905f5260205f20015442111561245d57600c80548290811061244f5761244f6152a9565b905f5260205f200154820191505b601154601054038203925060010161240d565b50600b5f01600b60010160105460115485848054806020026020016040519081016040528092919081815260200182805480156124ca57602002820191905f5260205f20905b8154815260200190600101908083116124b6575b505050505094508380548060200260200160405190810160405280929190818152602001828054801561251a57602002820191905f5260205f20905b815481526020019060010190808311612506575b5050505050935095509550955095509550509091929394565b61253b614063565b60015461255f905f80516020615720833981519152906001600160a01b0316614030565b50600180546001600160a01b0319169055610fe2614296565b612580610f8b565b8261258a81613bf9565b60175460ff1680156125a657506007546001600160a01b031633145b6125eb5760405162461bcd60e51b81526020600482015260166024820152752932b232b632b3b0ba34b7b7103234b9b0b13632b21760511b6044820152606401610fd9565b306001600160a01b0384160361263b5760405162461bcd60e51b81526020600482015260156024820152742a30b933b2ba1031b0b713ba1031329039b2b6331760591b6044820152606401610fd9565b61264f6001600160a01b03841660036144ab565b6126925760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21021b729ba30b5b4b733ab199760611b6044820152606401610fd9565b5f821180156126b05750601354826014546126ad9190615565565b11155b6126cc5760405162461bcd60e51b8152600401610fd990615526565b6001600160a01b0384165f90815260086020526040902054158061271657506001600160a01b0384165f9081526008602052604090205442906127139062093a8090615565565b11155b61275a5760405162461bcd60e51b815260206004820152601560248201527421b0b713ba103932b232b632b3b0ba32903cb2ba1760591b6044820152606401610fd9565b601380548390039055604051632801ba4360e21b81526001600160a01b03858116600483015284169063a006e90c9084906024015f604051808303818588803b1580156127a5575f80fd5b505af11580156127b7573d5f803e3d5ffd5b50505050506127c4613b6d565b826001600160a01b0316846001600160a01b03167f4830c21a6eb4b2b3af6c4d24cfbd78ce437d5b690aac56ceec54df1d4d24e1a08460405161280991815260200190565b60405180910390a350505050565b5f8051602061576083398151915261282e81610fe4565b5f82815260166020526040902080546001600160a01b03166128625760405162461bcd60e51b8152600401610fd9906150dc565b5f600382015460ff16600281111561287c5761287c614bd2565b146128995760405162461bcd60e51b8152600401610fd99061511e565b601354816001015411156128ef5760405162461bcd60e51b815260206004820152601a60248201527f56616c7565206973206e6f7420776974686472617761626c652e0000000000006044820152606401610fd9565b428160020154111561293b5760405162461bcd60e51b81526020600482015260156024820152742737ba103bb4ba34323930bbb0b13632903cb2ba1760591b6044820152606401610fd9565b600281015462093a80014281116129bf5760038201805460ff19166002179055600182015460148054919091039055612972613b6d565b815460018301546040519081526001600160a01b039091169085907fcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df9060200160405180910390a361112d565b60038201805460ff191660019081179091558201805460138054919091039055805460148054919091039055825490546040515f926001600160a01b031691908381818185875af1925050503d805f8114612a35576040519150601f19603f3d011682016040523d82523d5f602084013e612a3a565b606091505b5050905080612a7e5760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b6044820152606401610fd9565b612a86613b6d565b825460018401546040519081526001600160a01b039091169086907f7a2d48d1df1249429730a253e5713a7d7a2024913de2fbccafdf36efdd32bf059060200160405180910390a35050505050565b612add614063565b5f80516020615720833981519152612af481610fe4565b335f818152600f602052604090205460ff1615612b535760405162461bcd60e51b815260206004820152601c60248201527f4d73672e73656e64657220616c72656164792072657669657765642e000000006044820152606401610fd9565b6001600160a01b0381165f818152600f6020526040808220805460ff19166001908117909155600e80549091019055517f65d287f4118b03f8cc979b433fd0b2246074200dd5da70c9daf204aaa0da1a2c9190a2612bbd5f805160206157208339815191526137fe565b600e5403611b6d57600d805460ff191660011790556040517f244ff9a3d72b1dc5a4bce7f05fb615395f2a8c7ad6ea525d2bac9030f75d7a9b905f90a15050565b5f805160206156e0833981519152612c1581610fe4565b612c2b5f805160206157208339815191526137fe565b612c36906001615565565b600254612c438282613fc6565b612c5a5f80516020615720833981519152856140b6565b612c765760405162461bcd60e51b8152600401610fd990615578565b7f0000000000000000000000000000000000000000000000000000000000000000612cce57612cb25f80516020615760833981519152856140b6565b612cce5760405162461bcd60e51b8152600401610fd990615578565b612cd6611d9f565b6040516001600160a01b038516907fad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba905f90a250505050565b6060612d19614063565b600e545f9067ffffffffffffffff811115612d3657612d36614e26565b604051908082528060200260200182016040528015612d5f578160200160208202803683370190505b5090505f805b612d7b5f805160206157208339815191526137fe565b811015612dfc575f612d9a5f805160206157208339815191528361303b565b6001600160a01b0381165f908152600f602052604090205490915060ff161515600103612df35780848481518110612dd457612dd46152a9565b6001600160a01b03909216602092830291909101909101526001909201915b50600101612d65565b509091505090565b612e0c610f8b565b5f80516020615720833981519152612e2381610fe4565b82612e2d81613bf9565b7f000000000000000000000000000000000000000000000000000000000000000015612e6b5760405162461bcd60e51b8152600401610fd9906150a5565b5f83118015612e89575060135483601454612e869190615565565b11155b612ea55760405162461bcd60e51b8152600401610fd990615526565b5f612ebc60066001600160a01b038716865f613c42565b9050612ec781613d0e565b5050505050565b612ed6610f8b565b5f80516020615720833981519152612eed81610fe4565b81612ef781613bf9565b6001612f0f5f805160206157208339815191526137fe565b612f199190615296565b600254612f268282613fc6565b612f3d5f8051602061572083398151915286613059565b612f595760405162461bcd60e51b8152600401610fd99061535e565b5f611d8c60026001600160a01b03881661111b565b612f76610f8b565b5f80516020615720833981519152612f8d81610fe4565b81612f9781613bf9565b612fad5f805160206157208339815191526137fe565b612fb8906001615565565b600254612fc58282613fc6565b612fdc5f8051602061572083398151915286613059565b15612ff95760405162461bcd60e51b8152600401610fd990615578565b5f611d8c60016001600160a01b03881661111b565b613016610f8b565b5f8051602061572083398151915261302d81610fe4565b5f611b626004828080613c42565b5f828152601a6020526040812061305290836146b9565b9392505050565b5f7f000000000000000000000000000000000000000000000000000000000000000015801561309457505f8051602061570083398151915283145b156130a15750600161109d565b5f8381526019602090815260408083206001600160a01b038616845290915290205460ff16613052565b5f805160206156e08339815191526130e281610fe4565b7f0000000000000000000000000000000000000000000000000000000000000000156131205760405162461bcd60e51b8152600401610fd9906150a5565b600a80546001600160a01b0319166001600160a01b0384169081179091556040517fbe1849831e6775a2022006aeebcc00f70d10bc4202c8187e215ad9e9911f2b06905f90a25050565b613172610f8b565b8061317c81613bf9565b60175460ff166131c75760405162461bcd60e51b81526020600482015260166024820152752932b232b632b3b0ba34b7b7103234b9b0b13632b21760511b6044820152606401610fd9565b6131d23360036144ab565b6132155760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21021b729ba30b5b4b733ab199760611b6044820152606401610fd9565b6001600160a01b038083165f908152600860209081526040808320429055600754815163228cb73360e01b81529151941693849263228cb73392600480820193918290030181865afa15801561326d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613291919061554e565b6040516325fb490360e11b81526001600160a01b0386811660048301524792909201925090831690634bf692069034906024015f604051808303818588803b1580156132db575f80fd5b505af11580156132ed573d5f803e3d5ffd5b50505050504781146133355760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b21039ba30b5b2a337b91760791b6044820152606401610fd9565b604051348152309033906001600160a01b038716907fcbbd772ac9792b90fb77aa3194b0279ec4dbea1880ecc3674ecd2f4bf39b0c909060200160405180910390a450505050565b6133856146c4565b6133e05760405162461bcd60e51b815260206004820152602660248201527f556e617574686f72697a656420746f2061636365707420726577617264206164604482015265323932b9b99760d11b6064820152608401610fd9565b600a546001600160a01b0382811691161461344f5760405162461bcd60e51b815260206004820152602960248201527f476976656e206164647265737320646f6573206e6f74206d6174636820746865604482015268103832b73234b7339760b91b6064820152608401610fd9565b600a5460405163832a2aad60e01b81526001600160a01b0390911660048201526104009063832a2aad906024015f604051808303815f87803b158015613493575f80fd5b505af11580156134a5573d5f803e3d5ffd5b5050600a8054600980546001600160a01b0383166001600160a01b031991821681179092559091169091556040519092507f36e0b58f785f850d6622cb742fa1e0750728da3c75816916830b50b747efb6b691505f90a250565b613507610f8b565b5f8051602061572083398151915261351e81610fe4565b60175461010090046001600160a01b03161580159061354557506001600160a01b03821615155b15613600576017546040516327a38e0160e11b81526001600160a01b03848116600483015261010090920490911690634f471c0290602401602060405180830381865afa158015613598573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906135bc919061554e565b156136005760405162461bcd60e51b81526020600482015260146024820152732b37ba32b91030b63932b0b23c903a30b5b2b71760611b6044820152606401610fd9565b5f6113ec600a6001600160a01b03851661111b565b61361d614063565b5f8051602061572083398151915261363481610fe4565b6136486001600160a01b0383166001613d49565b61224b5760405162461bcd60e51b8152600401610fd990615146565b5f805160206156e083398151915261367b81610fe4565b6136915f805160206157208339815191526137fe565b8261369c8282613fc6565b60028490556136a9611d9f565b6040518481527f8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f9060200160405180910390a150505050565b5f805160206157408339815191526136f981610fe4565b5f82815260166020526040902080546001600160a01b031661372d5760405162461bcd60e51b8152600401610fd9906150dc565b5f600382015460ff16600281111561374757613747614bd2565b146137645760405162461bcd60e51b8152600401610fd99061511e565b60038101805460ff1916600217905560018101546014805491909103905561378a613b6d565b805460018201546040519081526001600160a01b039091169084907fcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df9060200160405180910390a3505050565b6137df610f8b565b5f805160206157008339815191526137f681610fe4565b610fee610ff1565b5f818152601a6020526040812061109d906140f1565b60605f83158061382657506015548410155b6138305783613834565b6015545b90506138408582615296565b67ffffffffffffffff81111561385857613858614e26565b604051908082528060200260200182016040528015613881578160200160208202803683370190505b5091505f855b828110156114d6578460028111156138a1576138a1614bd2565b5f8281526016602052604090206003015460ff1660028111156138c6576138c6614bd2565b036138f157808483806001019450815181106138e4576138e46152a9565b6020026020010181815250505b600101613887565b5f8281526019602052604090206001015461391381610fe4565b61112d8383614030565b5f805160206156e083398151915261393481610fe4565b7f00000000000000000000000000000000000000000000000000000000000000006139715760405162461bcd60e51b8152600401610fd99061538d565b6017805460ff8082161560ff1990921682179092556040519116151581527f02efa9113845c402ffbbc237400eeba75de99c23f054459573f88caa5a9418989060200160405180910390a150565b6139c7610f8b565b5f805160206157208339815191526139de81610fe4565b6139f45f805160206157208339815191526137fe565b826139ff8282613fc6565b6002548403613a205760405162461bcd60e51b8152600401610fd990615526565b5f612ebc6003868380613c42565b5f6004548210613a3f57505f919050565b60015f8381526005602052604090206007015460ff166004811115613a6657613a66614bd2565b14613a8357505f9081526005602052604090206007015460ff1690565b6003548210613a9357600161109d565b600492915050565b613aa3614063565b5f80516020615720833981519152613aba81610fe4565b815f03613b015760405162461bcd60e51b815260206004820152601560248201527423a19024a21031b0b73737ba103132903d32b9379760591b6044820152606401610fd9565b600682905560405182907f469cb2f3ce5d5e879269af625b54571651feb0ede6e83ee89b9c888648af514f905f90a25050565b613b3e8282613059565b611b6d5760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610fd9565b601754604051635605a4e560e01b81523060048201526101009091046001600160a01b031690635605a4e5906024015f604051808303815f87803b158015613bb3575f80fd5b505af115801561112d573d5f803e3d5ffd5b5f6001600160e01b03198216637965db0b60e01b148061109d57506301ffc9a760e01b6001600160e01b031983161461109d565b6001600160a01b038116610fee5760405162461bcd60e51b815260206004820152601060248201526f20b2323932b9b99034b990373ab6361760811b6044820152606401610fd9565b6004805460018082019092555f8181526005602052604081208054919390918891839160ff19169083600b811115613c7c57613c7c614bd2565b0217905550600180820187905560028201869055600382018590556004820180546001600160a01b0319163317905560078201805460ff191682800217905550336001600160a01b0316827fdd9ce6d431d4ac3e8bea81bc2d7760b97d30c4e54252d8c8c59054849b8f61b589898989604051613cfc9493929190615304565b60405180910390a35095945050505050565b5f818152600560205260409020805460018201546002830154600390930154610fee93859360ff169291611ba4565b60605f6130528361479c565b5f826001600160a01b03163b5f03613d6257505f61109d565b5f839050806001600160a01b0316634b6a94cc6040518163ffffffff1660e01b81526004015f60405180830381865afa158015613da1573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052613dc891908101906155a7565b805190602001207fccfe28814eb3e9d0e6cfd45eb754f27c5eb4399dac6379181362ebd8b6a865c314613dfe575f91505061109d565b82816001600160a01b031663ffa1ad746040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e3b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613e5f919061554e565b14613e6d575f91505061109d565b5060019392505050565b6001613e8282613a2e565b6004811115613e9357613e93614bd2565b14610fee5760405162461bcd60e51b815260206004820152601f60248201527f4d757374206265206174206e6f742d636f6e6669726d65642073746174652e006044820152606401610fd9565b5f82815260056020819052604082206130529101836147f5565b5f613052836001600160a01b038416614816565b60605f613f275f805160206157208339815191526137fe565b90508067ffffffffffffffff811115613f4257613f42614e26565b604051908082528060200260200182016040528015613f6b578160200160208202803683370190505b5091505f5b81811015613fc157613f8f5f805160206157208339815191528261303b565b838281518110613fa157613fa16152a9565b6001600160a01b0390921660209283029190910190910152600101613f70565b505090565b60328211158015613fd75750818111155b8015613fe257508015155b8015613fed57508115155b611b6d5760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b2103932b8bab4b932b6b2b73a1760611b6044820152606401610fd9565b5f8061403c84846148f9565b90508015613052575f848152601a6020526040902061405b9084613efa565b509392505050565b60125460ff1615610fe25760405162461bcd60e51b815260206004820152601e60248201527f436f6e747261637420686173206265656e20696e697469616c697a65642e00006044820152606401610fd9565b5f806140c2848461496b565b90508015613052575f848152601a6020526040902061405b90845b5f613052836001600160a01b0384166149f5565b5f61109d825490565b5f818152600560205260408120805460018201546002830154600384015460ff9093169285808086600b81111561413357614133614bd2565b600b81111561414457614144614bd2565b8152602081019190915260409081015f2054905160248101869052604481018590526064810184905260e09190911b9060840160408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905190915030906141bb9083906155d9565b5f604051808303815f865af19150503d805f81146141f4576040519150601f19603f3d011682016040523d82523d5f602084013e6141f9565b606091505b5090975050861561424d5760078601805460ff19166002179055604051339089907f48f16d9e6ab6f19798a7c7f307ecea3def480049fa0a09280e2a3fa45aaa842690611661908990899089908990615304565b60078601805460ff19166003179055604051339089907fbd3ad69fc5a8e233118506c67ebe892bef493fcf2eb9e6986f6d6c3f2adf0e8a906116d9908990899089908990615304565b61429e614063565b600654158015906142be575060175461010090046001600160a01b031615155b801561433a57507f0000000000000000000000000000000000000000000000000000000000000000158061433a57507f0000000000000000000000000000000000000000000000000000000000000000801561432457506007546001600160a01b031615155b801561433a57506009546001600160a01b031615155b61437d5760405162461bcd60e51b81526020600482015260146024820152732737ba1039b2ba103ab810383937b832b9363c9760611b6044820152606401610fd9565b600d5460ff1615156001146143cc5760405162461bcd60e51b81526020600482015260156024820152742932bb34b2bbb9903737ba103334b734b9b432b21760591b6044820152606401610fd9565b5f805b600c5481101561440557600c8054829081106143ed576143ed6152a9565b5f9182526020909120015491909101906001016143cf565b5080341461444d5760405162461bcd60e51b81526020600482015260156024820152742b30b63ab2903237b2b9903737ba1036b0ba31b41760591b6044820152606401610fd9565b6010819055601181905561445f614a3a565b6012805460ff1916600117905560405133907f2b3c5e8e58d7d1e42ccd071c6f749d53f9ee506020a81fad9ff98140ccccde69906144a09034815260200190565b60405180910390a250565b5f826001600160a01b03163b5f036144c457505f61109d565b5f839050806001600160a01b0316634b6a94cc6040518163ffffffff1660e01b81526004015f60405180830381865afa158015614503573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261452a91908101906155a7565b805190602001207fa2f5d64a9f0bcdeed97e196203f5a8c1a5c8293988b625b7925686d30805508214614560575f91505061109d565b82816001600160a01b031663ffa1ad746040518163ffffffff1660e01b8152600401602060405180830381865afa15801561459d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906145c1919061554e565b146145cf575f91505061109d565b5f816001600160a01b031663139d7fed6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561460c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190614630919061550b565b604051630aabaead60e11b81526001600160a01b03821660048201529091505f90610400906315575d5a90602401606060405180830381865afa158015614679573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061469d91906155ef565b506001600160a01b039081169088161494505050505092915050565b5f6130528383614b3f565b600a545f906001600160a01b031633036146de5750600190565b5f6104006001600160a01b0316631865c57d6040518163ffffffff1660e01b81526004015f60405180830381865afa15801561471c573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052614743919081019061562e565b5090505f5b815181101561479457818181518110614763576147636152a9565b60200260200101516001600160a01b0316336001600160a01b03160361478c5760019250505090565b600101614748565b505f91505090565b6060815f018054806020026020016040519081016040528092919081815260200182805480156147e957602002820191905f5260205f20905b8154815260200190600101908083116147d5575b50505050509050919050565b6001600160a01b0381165f9081526001830160205260408120541515613052565b5f81815260018301602052604081205480156148f0575f614838600183615296565b85549091505f9061484b90600190615296565b90508082146148aa575f865f018281548110614869576148696152a9565b905f5260205f200154905080875f018481548110614889576148896152a9565b5f918252602080832090910192909255918252600188019052604090208390555b85548690806148bb576148bb6156cb565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f90556001935050505061109d565b5f91505061109d565b5f6149048383613059565b15614964575f8381526019602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161109d565b505f61109d565b5f6149768383613059565b614964575f8381526019602090815260408083206001600160a01b03861684529091529020805460ff191660011790556149ad3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161109d565b5f81815260018301602052604081205461496457508154600181810184555f84815260208082209093018490558454848252828601909352604090209190915561109d565b7f0000000000000000000000000000000000000000000000000000000000000000614ad157614a765f80516020615740833981519152306140b6565b505f5b614a8f5f805160206157208339815191526137fe565b811015610fee575f614aae5f805160206157208339815191528361303b565b9050614ac75f80516020615760833981519152826140b6565b5050600101614a79565b600754614af5905f80516020615700833981519152906001600160a01b03166140b6565b50600754614b1a905f80516020615740833981519152906001600160a01b03166140b6565b50600754610fee905f80516020615760833981519152906001600160a01b03166140b6565b5f825f018281548110614b5457614b546152a9565b905f5260205f200154905092915050565b5f60208284031215614b75575f80fd5b81356001600160e01b031981168114613052575f80fd5b6001600160a01b0381168114610fee575f80fd5b5f60208284031215614bb0575f80fd5b813561305281614b8c565b5f60208284031215614bcb575f80fd5b5035919050565b634e487b7160e01b5f52602160045260245ffd5b600c8110614bf657614bf6614bd2565b9052565b5f815180845260208085019450602084015f5b83811015614c325781516001600160a01b031687529582019590820190600101614c0d565b509495945050505050565b60058110614bf657614bf6614bd2565b614c578189614be6565b86602082015285604082015284606082015260018060a01b038416608082015260e060a08201525f614c8c60e0830185614bfa565b9050614c9b60c0830184614c3d565b98975050505050505050565b5f805f60608486031215614cb9575f80fd5b8335925060208401359150604084013560058110614cd5575f80fd5b809150509250925092565b5f815180845260208085019450602084015f5b83811015614c3257815187529582019590820190600101614cf3565b602081525f6130526020830184614ce0565b5f805f805f60a08688031215614d35575f80fd5b853594506020860135600c8110614d4a575f80fd5b94979496505050506040830135926060810135926080909101359150565b6001600160a01b038a81168252898116602083015288166040820152610120606082018190525f90614d9c8382018a614bfa565b905087608084015282810360a0840152614db68188614ce0565b905082810360c0840152614dca8187614ce0565b94151560e0840152505090151561010090910152979650505050505050565b6001600160a01b038516815260208101849052604081018390526080810160038310614e1757614e17614bd2565b82606083015295945050505050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614e6357614e63614e26565b604052919050565b5f67ffffffffffffffff821115614e8457614e84614e26565b50601f01601f191660200190565b5f8060408385031215614ea3575f80fd5b8235614eae81614b8c565b9150602083013567ffffffffffffffff811115614ec9575f80fd5b8301601f81018513614ed9575f80fd5b8035614eec614ee782614e6b565b614e3a565b818152866020838501011115614f00575f80fd5b816020840160208301375f602083830101528093505050509250929050565b5f8060408385031215614f30575f80fd5b823591506020830135614f4281614b8c565b809150509250929050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6130526020830184614f4d565b5f8060408385031215614f9e575f80fd5b8235614fa981614b8c565b946020939093013593505050565b60a081525f614fc960a0830188614ce0565b8281036020840152614fdb8188614ce0565b60408401969096525050606081019290925260809091015292915050565b5f805f6060848603121561500b575f80fd5b833561501681614b8c565b9250602084013561502681614b8c565b929592945050506040919091013590565b602081525f6130526020830184614bfa565b5f806040838503121561505a575f80fd5b50508035926020909101359150565b5f805f6060848603121561507b575f80fd5b8335925060208401359150604084013560038110614cd5575f80fd5b6020810161109d8284614c3d565b6020808252601a908201527f5075626c69632064656c65676174696f6e20656e61626c65642e000000000000604082015260600190565b60208082526022908201527f5769746864726177616c207265717565737420646f6573206e6f7420657869736040820152613a1760f11b606082015260800190565b6020808252600e908201526d24b73b30b634b21039ba30ba329760911b604082015260600190565b60208082526017908201527f496e76616c6964205374616b696e67547261636b65722e000000000000000000604082015260600190565b5f67ffffffffffffffff82111561519657615196614e26565b5060051b60200190565b5f60208083850312156151b1575f80fd5b825167ffffffffffffffff8111156151c7575f80fd5b8301601f810185136151d7575f80fd5b80516151e5614ee78261517d565b81815260059190911b82018301908381019087831115615203575f80fd5b928401925b8284101561522157835182529284019290840190615208565b979650505050505050565b60208082526036908201527f43616e6e6f742075706461746520747261636b6572207768656e2074686572656040820152751034b99030b71030b1ba34bb32903a3930b1b5b2b91760511b606082015260800190565b634e487b7160e01b5f52601160045260245ffd5b8181038181111561109d5761109d615282565b634e487b7160e01b5f52603260045260245ffd5b60208082526027908201527f46756e6374696f6e20696420616e6420617267756d656e747320646f206e6f746040820152661036b0ba31b41760c91b606082015260800190565b608081016153128287614be6565b84602083015283604083015282606083015295945050505050565b6153378187614be6565b84602082015283604082015282606082015260a060808201525f61522160a0830184614bfa565b60208082526015908201527420b236b4b7103237b2b9903737ba1032bc34b9ba1760591b604082015260600190565b6020808252601b908201527f5075626c69632064656c65676174696f6e2064697361626c65642e0000000000604082015260600190565b5f82601f8301126153d3575f80fd5b81516153e1614ee782614e6b565b8181528460208386010111156153f5575f80fd5b8160208501602083015e5f918101602001919091529392505050565b5f60208284031215615421575f80fd5b815167ffffffffffffffff80821115615438575f80fd5b908301906080828603121561544b575f80fd5b60405160808101818110838211171561546657615466614e26565b604052825161547481614b8c565b8152602083015161548481614b8c565b6020820152604083810151908201526060830151828111156154a4575f80fd5b6154b0878286016153c4565b60608301525095945050505050565b602081525f60018060a01b038084511660208401528060208501511660408401525060408301516060830152606083015160808084015261550360a0840182614f4d565b949350505050565b5f6020828403121561551b575f80fd5b815161305281614b8c565b6020808252600e908201526d24b73b30b634b2103b30b63ab29760911b604082015260600190565b5f6020828403121561555e575f80fd5b5051919050565b8082018082111561109d5761109d615282565b60208082526015908201527420b236b4b71030b63932b0b23c9032bc34b9ba399760591b604082015260600190565b5f602082840312156155b7575f80fd5b815167ffffffffffffffff8111156155cd575f80fd5b615503848285016153c4565b5f82518060208501845e5f920191825250919050565b5f805f60608486031215615601575f80fd5b835161560c81614b8c565b602085015190935061561d81614b8c565b6040850151909250614cd581614b8c565b5f806040838503121561563f575f80fd5b825167ffffffffffffffff811115615655575f80fd5b8301601f81018513615665575f80fd5b80516020615675614ee78361517d565b82815260059290921b83018101918181019088841115615693575f80fd5b938201935b838510156156ba5784516156ab81614b8c565b82529382019390820190615698565b969091015195979596505050505050565b634e487b7160e01b5f52603160045260245ffdfe97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929b9e206fa2af7ee1331b72ce58b6d938ac810ce9b5cdb65d35ab723fd67badf9ea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756bbd235a04f337cdf14b2f1846017b33479fad2c3ae66d711584f13463a2170adb8f45a81765d409768c063c845ce4a132a06990e9ba80f54a39553a43ea2c34a26469706673582212209434cc753cf05deaf9294b9776b315bae0a2add2f6edcbb7b68c242d2f88251d64736f6c63430008190033`

// Deprecated: Use CnStakingV3MultiSigMetaData.Sigs instead.
// CnStakingV3MultiSigFuncSigs maps the 4-byte function signature to its string representation.
var CnStakingV3MultiSigFuncSigs = CnStakingV3MultiSigMetaData.Sigs

// CnStakingV3MultiSigBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CnStakingV3MultiSigMetaData.Bin instead.
var CnStakingV3MultiSigBin = CnStakingV3MultiSigMetaData.Bin

// DeployCnStakingV3MultiSig deploys a new Kaia contract, binding an instance of CnStakingV3MultiSig to it.
func DeployCnStakingV3MultiSig(auth *bind.TransactOpts, backend bind.ContractBackend, _contractValidator common.Address, _nodeId common.Address, _rewardAddress common.Address, _cnAdminlist []common.Address, _requirement *big.Int, _unlockTime []*big.Int, _unlockAmount []*big.Int) (common.Address, *types.Transaction, *CnStakingV3MultiSig, error) {
	parsed, err := CnStakingV3MultiSigMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CnStakingV3MultiSigBin), backend, _contractValidator, _nodeId, _rewardAddress, _cnAdminlist, _requirement, _unlockTime, _unlockAmount)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CnStakingV3MultiSig{CnStakingV3MultiSigCaller: CnStakingV3MultiSigCaller{contract: contract}, CnStakingV3MultiSigTransactor: CnStakingV3MultiSigTransactor{contract: contract}, CnStakingV3MultiSigFilterer: CnStakingV3MultiSigFilterer{contract: contract}}, nil
}

// CnStakingV3MultiSig is an auto generated Go binding around a Kaia contract.
type CnStakingV3MultiSig struct {
	CnStakingV3MultiSigCaller     // Read-only binding to the contract
	CnStakingV3MultiSigTransactor // Write-only binding to the contract
	CnStakingV3MultiSigFilterer   // Log filterer for contract events
}

// CnStakingV3MultiSigCaller is an auto generated read-only Go binding around a Kaia contract.
type CnStakingV3MultiSigCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CnStakingV3MultiSigTransactor is an auto generated write-only Go binding around a Kaia contract.
type CnStakingV3MultiSigTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CnStakingV3MultiSigFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type CnStakingV3MultiSigFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CnStakingV3MultiSigSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type CnStakingV3MultiSigSession struct {
	Contract     *CnStakingV3MultiSig // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// CnStakingV3MultiSigCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type CnStakingV3MultiSigCallerSession struct {
	Contract *CnStakingV3MultiSigCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// CnStakingV3MultiSigTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type CnStakingV3MultiSigTransactorSession struct {
	Contract     *CnStakingV3MultiSigTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// CnStakingV3MultiSigRaw is an auto generated low-level Go binding around a Kaia contract.
type CnStakingV3MultiSigRaw struct {
	Contract *CnStakingV3MultiSig // Generic contract binding to access the raw methods on
}

// CnStakingV3MultiSigCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type CnStakingV3MultiSigCallerRaw struct {
	Contract *CnStakingV3MultiSigCaller // Generic read-only contract binding to access the raw methods on
}

// CnStakingV3MultiSigTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type CnStakingV3MultiSigTransactorRaw struct {
	Contract *CnStakingV3MultiSigTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCnStakingV3MultiSig creates a new instance of CnStakingV3MultiSig, bound to a specific deployed contract.
func NewCnStakingV3MultiSig(address common.Address, backend bind.ContractBackend) (*CnStakingV3MultiSig, error) {
	contract, err := bindCnStakingV3MultiSig(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSig{CnStakingV3MultiSigCaller: CnStakingV3MultiSigCaller{contract: contract}, CnStakingV3MultiSigTransactor: CnStakingV3MultiSigTransactor{contract: contract}, CnStakingV3MultiSigFilterer: CnStakingV3MultiSigFilterer{contract: contract}}, nil
}

// NewCnStakingV3MultiSigCaller creates a new read-only instance of CnStakingV3MultiSig, bound to a specific deployed contract.
func NewCnStakingV3MultiSigCaller(address common.Address, caller bind.ContractCaller) (*CnStakingV3MultiSigCaller, error) {
	contract, err := bindCnStakingV3MultiSig(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigCaller{contract: contract}, nil
}

// NewCnStakingV3MultiSigTransactor creates a new write-only instance of CnStakingV3MultiSig, bound to a specific deployed contract.
func NewCnStakingV3MultiSigTransactor(address common.Address, transactor bind.ContractTransactor) (*CnStakingV3MultiSigTransactor, error) {
	contract, err := bindCnStakingV3MultiSig(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigTransactor{contract: contract}, nil
}

// NewCnStakingV3MultiSigFilterer creates a new log filterer instance of CnStakingV3MultiSig, bound to a specific deployed contract.
func NewCnStakingV3MultiSigFilterer(address common.Address, filterer bind.ContractFilterer) (*CnStakingV3MultiSigFilterer, error) {
	contract, err := bindCnStakingV3MultiSig(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigFilterer{contract: contract}, nil
}

// bindCnStakingV3MultiSig binds a generic wrapper to an already deployed contract.
func bindCnStakingV3MultiSig(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CnStakingV3MultiSigMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CnStakingV3MultiSig *CnStakingV3MultiSigRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CnStakingV3MultiSig.Contract.CnStakingV3MultiSigCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CnStakingV3MultiSig *CnStakingV3MultiSigRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.CnStakingV3MultiSigTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CnStakingV3MultiSig *CnStakingV3MultiSigRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.CnStakingV3MultiSigTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CnStakingV3MultiSig.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.contract.Transact(opts, method, params...)
}

// ADDRESSBOOKADDRESS is a free data retrieval call binding the contract method 0xf2f2f49b.
//
// Solidity: function ADDRESS_BOOK_ADDRESS() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) ADDRESSBOOKADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "ADDRESS_BOOK_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ADDRESSBOOKADDRESS is a free data retrieval call binding the contract method 0xf2f2f49b.
//
// Solidity: function ADDRESS_BOOK_ADDRESS() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) ADDRESSBOOKADDRESS() (common.Address, error) {
	return _CnStakingV3MultiSig.Contract.ADDRESSBOOKADDRESS(&_CnStakingV3MultiSig.CallOpts)
}

// ADDRESSBOOKADDRESS is a free data retrieval call binding the contract method 0xf2f2f49b.
//
// Solidity: function ADDRESS_BOOK_ADDRESS() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) ADDRESSBOOKADDRESS() (common.Address, error) {
	return _CnStakingV3MultiSig.Contract.ADDRESSBOOKADDRESS(&_CnStakingV3MultiSig.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) ADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) ADMINROLE() ([32]byte, error) {
	return _CnStakingV3MultiSig.Contract.ADMINROLE(&_CnStakingV3MultiSig.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) ADMINROLE() ([32]byte, error) {
	return _CnStakingV3MultiSig.Contract.ADMINROLE(&_CnStakingV3MultiSig.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) CONTRACTTYPE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "CONTRACT_TYPE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) CONTRACTTYPE() (string, error) {
	return _CnStakingV3MultiSig.Contract.CONTRACTTYPE(&_CnStakingV3MultiSig.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) CONTRACTTYPE() (string, error) {
	return _CnStakingV3MultiSig.Contract.CONTRACTTYPE(&_CnStakingV3MultiSig.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CnStakingV3MultiSig.Contract.DEFAULTADMINROLE(&_CnStakingV3MultiSig.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CnStakingV3MultiSig.Contract.DEFAULTADMINROLE(&_CnStakingV3MultiSig.CallOpts)
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) MAXADMIN(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "MAX_ADMIN")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) MAXADMIN() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.MAXADMIN(&_CnStakingV3MultiSig.CallOpts)
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) MAXADMIN() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.MAXADMIN(&_CnStakingV3MultiSig.CallOpts)
}

// ONEWEEK is a free data retrieval call binding the contract method 0x8e6f6b77.
//
// Solidity: function ONE_WEEK() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) ONEWEEK(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "ONE_WEEK")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ONEWEEK is a free data retrieval call binding the contract method 0x8e6f6b77.
//
// Solidity: function ONE_WEEK() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) ONEWEEK() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.ONEWEEK(&_CnStakingV3MultiSig.CallOpts)
}

// ONEWEEK is a free data retrieval call binding the contract method 0x8e6f6b77.
//
// Solidity: function ONE_WEEK() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) ONEWEEK() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.ONEWEEK(&_CnStakingV3MultiSig.CallOpts)
}

// OPERATORROLE is a free data retrieval call binding the contract method 0xf5b541a6.
//
// Solidity: function OPERATOR_ROLE() view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) OPERATORROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "OPERATOR_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// OPERATORROLE is a free data retrieval call binding the contract method 0xf5b541a6.
//
// Solidity: function OPERATOR_ROLE() view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) OPERATORROLE() ([32]byte, error) {
	return _CnStakingV3MultiSig.Contract.OPERATORROLE(&_CnStakingV3MultiSig.CallOpts)
}

// OPERATORROLE is a free data retrieval call binding the contract method 0xf5b541a6.
//
// Solidity: function OPERATOR_ROLE() view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) OPERATORROLE() ([32]byte, error) {
	return _CnStakingV3MultiSig.Contract.OPERATORROLE(&_CnStakingV3MultiSig.CallOpts)
}

// STAKERROLE is a free data retrieval call binding the contract method 0x3780b3ed.
//
// Solidity: function STAKER_ROLE() view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) STAKERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "STAKER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// STAKERROLE is a free data retrieval call binding the contract method 0x3780b3ed.
//
// Solidity: function STAKER_ROLE() view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) STAKERROLE() ([32]byte, error) {
	return _CnStakingV3MultiSig.Contract.STAKERROLE(&_CnStakingV3MultiSig.CallOpts)
}

// STAKERROLE is a free data retrieval call binding the contract method 0x3780b3ed.
//
// Solidity: function STAKER_ROLE() view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) STAKERROLE() ([32]byte, error) {
	return _CnStakingV3MultiSig.Contract.STAKERROLE(&_CnStakingV3MultiSig.CallOpts)
}

// STAKELOCKUP is a free data retrieval call binding the contract method 0x96106ae4.
//
// Solidity: function STAKE_LOCKUP() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) STAKELOCKUP(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "STAKE_LOCKUP")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// STAKELOCKUP is a free data retrieval call binding the contract method 0x96106ae4.
//
// Solidity: function STAKE_LOCKUP() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) STAKELOCKUP() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.STAKELOCKUP(&_CnStakingV3MultiSig.CallOpts)
}

// STAKELOCKUP is a free data retrieval call binding the contract method 0x96106ae4.
//
// Solidity: function STAKE_LOCKUP() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) STAKELOCKUP() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.STAKELOCKUP(&_CnStakingV3MultiSig.CallOpts)
}

// UNSTAKINGAPPROVERROLE is a free data retrieval call binding the contract method 0x0c07d842.
//
// Solidity: function UNSTAKING_APPROVER_ROLE() view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) UNSTAKINGAPPROVERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "UNSTAKING_APPROVER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// UNSTAKINGAPPROVERROLE is a free data retrieval call binding the contract method 0x0c07d842.
//
// Solidity: function UNSTAKING_APPROVER_ROLE() view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) UNSTAKINGAPPROVERROLE() ([32]byte, error) {
	return _CnStakingV3MultiSig.Contract.UNSTAKINGAPPROVERROLE(&_CnStakingV3MultiSig.CallOpts)
}

// UNSTAKINGAPPROVERROLE is a free data retrieval call binding the contract method 0x0c07d842.
//
// Solidity: function UNSTAKING_APPROVER_ROLE() view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) UNSTAKINGAPPROVERROLE() ([32]byte, error) {
	return _CnStakingV3MultiSig.Contract.UNSTAKINGAPPROVERROLE(&_CnStakingV3MultiSig.CallOpts)
}

// UNSTAKINGCLAIMERROLE is a free data retrieval call binding the contract method 0x9c394c5d.
//
// Solidity: function UNSTAKING_CLAIMER_ROLE() view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) UNSTAKINGCLAIMERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "UNSTAKING_CLAIMER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// UNSTAKINGCLAIMERROLE is a free data retrieval call binding the contract method 0x9c394c5d.
//
// Solidity: function UNSTAKING_CLAIMER_ROLE() view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) UNSTAKINGCLAIMERROLE() ([32]byte, error) {
	return _CnStakingV3MultiSig.Contract.UNSTAKINGCLAIMERROLE(&_CnStakingV3MultiSig.CallOpts)
}

// UNSTAKINGCLAIMERROLE is a free data retrieval call binding the contract method 0x9c394c5d.
//
// Solidity: function UNSTAKING_CLAIMER_ROLE() view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) UNSTAKINGCLAIMERROLE() ([32]byte, error) {
	return _CnStakingV3MultiSig.Contract.UNSTAKINGCLAIMERROLE(&_CnStakingV3MultiSig.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) VERSION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) VERSION() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.VERSION(&_CnStakingV3MultiSig.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) VERSION() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.VERSION(&_CnStakingV3MultiSig.CallOpts)
}

// AdminList is a free data retrieval call binding the contract method 0x11117fc8.
//
// Solidity: function adminList(uint256 _pos) view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) AdminList(opts *bind.CallOpts, _pos *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "adminList", _pos)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AdminList is a free data retrieval call binding the contract method 0x11117fc8.
//
// Solidity: function adminList(uint256 _pos) view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) AdminList(_pos *big.Int) (common.Address, error) {
	return _CnStakingV3MultiSig.Contract.AdminList(&_CnStakingV3MultiSig.CallOpts, _pos)
}

// AdminList is a free data retrieval call binding the contract method 0x11117fc8.
//
// Solidity: function adminList(uint256 _pos) view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) AdminList(_pos *big.Int) (common.Address, error) {
	return _CnStakingV3MultiSig.Contract.AdminList(&_CnStakingV3MultiSig.CallOpts, _pos)
}

// ContractValidator is a free data retrieval call binding the contract method 0x7a5db068.
//
// Solidity: function contractValidator() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) ContractValidator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "contractValidator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContractValidator is a free data retrieval call binding the contract method 0x7a5db068.
//
// Solidity: function contractValidator() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) ContractValidator() (common.Address, error) {
	return _CnStakingV3MultiSig.Contract.ContractValidator(&_CnStakingV3MultiSig.CallOpts)
}

// ContractValidator is a free data retrieval call binding the contract method 0x7a5db068.
//
// Solidity: function contractValidator() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) ContractValidator() (common.Address, error) {
	return _CnStakingV3MultiSig.Contract.ContractValidator(&_CnStakingV3MultiSig.CallOpts)
}

// GcId is a free data retrieval call binding the contract method 0x6d2714db.
//
// Solidity: function gcId() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) GcId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "gcId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GcId is a free data retrieval call binding the contract method 0x6d2714db.
//
// Solidity: function gcId() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) GcId() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.GcId(&_CnStakingV3MultiSig.CallOpts)
}

// GcId is a free data retrieval call binding the contract method 0x6d2714db.
//
// Solidity: function gcId() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) GcId() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.GcId(&_CnStakingV3MultiSig.CallOpts)
}

// GetApprovedStakingWithdrawalIds is a free data retrieval call binding the contract method 0xd2569eb9.
//
// Solidity: function getApprovedStakingWithdrawalIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) GetApprovedStakingWithdrawalIds(opts *bind.CallOpts, _from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "getApprovedStakingWithdrawalIds", _from, _to, _state)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetApprovedStakingWithdrawalIds is a free data retrieval call binding the contract method 0xd2569eb9.
//
// Solidity: function getApprovedStakingWithdrawalIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) GetApprovedStakingWithdrawalIds(_from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.GetApprovedStakingWithdrawalIds(&_CnStakingV3MultiSig.CallOpts, _from, _to, _state)
}

// GetApprovedStakingWithdrawalIds is a free data retrieval call binding the contract method 0xd2569eb9.
//
// Solidity: function getApprovedStakingWithdrawalIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) GetApprovedStakingWithdrawalIds(_from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.GetApprovedStakingWithdrawalIds(&_CnStakingV3MultiSig.CallOpts, _from, _to, _state)
}

// GetApprovedStakingWithdrawalInfo is a free data retrieval call binding the contract method 0x725c0503.
//
// Solidity: function getApprovedStakingWithdrawalInfo(uint256 _index) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) GetApprovedStakingWithdrawalInfo(opts *bind.CallOpts, _index *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "getApprovedStakingWithdrawalInfo", _index)

	outstruct := new(struct {
		To               common.Address
		Value            *big.Int
		WithdrawableFrom *big.Int
		State            uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.To = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Value = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.WithdrawableFrom = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.State = *abi.ConvertType(out[3], new(uint8)).(*uint8)

	return *outstruct, err

}

// GetApprovedStakingWithdrawalInfo is a free data retrieval call binding the contract method 0x725c0503.
//
// Solidity: function getApprovedStakingWithdrawalInfo(uint256 _index) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) GetApprovedStakingWithdrawalInfo(_index *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	return _CnStakingV3MultiSig.Contract.GetApprovedStakingWithdrawalInfo(&_CnStakingV3MultiSig.CallOpts, _index)
}

// GetApprovedStakingWithdrawalInfo is a free data retrieval call binding the contract method 0x725c0503.
//
// Solidity: function getApprovedStakingWithdrawalInfo(uint256 _index) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) GetApprovedStakingWithdrawalInfo(_index *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	return _CnStakingV3MultiSig.Contract.GetApprovedStakingWithdrawalInfo(&_CnStakingV3MultiSig.CallOpts, _index)
}

// GetLockupStakingInfo is a free data retrieval call binding the contract method 0x5ecd75f2.
//
// Solidity: function getLockupStakingInfo() view returns(uint256[] unlockTime, uint256[] unlockAmount, uint256 initial, uint256 remaining, uint256 withdrawable)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) GetLockupStakingInfo(opts *bind.CallOpts) (struct {
	UnlockTime   []*big.Int
	UnlockAmount []*big.Int
	Initial      *big.Int
	Remaining    *big.Int
	Withdrawable *big.Int
}, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "getLockupStakingInfo")

	outstruct := new(struct {
		UnlockTime   []*big.Int
		UnlockAmount []*big.Int
		Initial      *big.Int
		Remaining    *big.Int
		Withdrawable *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.UnlockTime = *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
	outstruct.UnlockAmount = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)
	outstruct.Initial = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Remaining = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Withdrawable = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetLockupStakingInfo is a free data retrieval call binding the contract method 0x5ecd75f2.
//
// Solidity: function getLockupStakingInfo() view returns(uint256[] unlockTime, uint256[] unlockAmount, uint256 initial, uint256 remaining, uint256 withdrawable)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) GetLockupStakingInfo() (struct {
	UnlockTime   []*big.Int
	UnlockAmount []*big.Int
	Initial      *big.Int
	Remaining    *big.Int
	Withdrawable *big.Int
}, error) {
	return _CnStakingV3MultiSig.Contract.GetLockupStakingInfo(&_CnStakingV3MultiSig.CallOpts)
}

// GetLockupStakingInfo is a free data retrieval call binding the contract method 0x5ecd75f2.
//
// Solidity: function getLockupStakingInfo() view returns(uint256[] unlockTime, uint256[] unlockAmount, uint256 initial, uint256 remaining, uint256 withdrawable)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) GetLockupStakingInfo() (struct {
	UnlockTime   []*big.Int
	UnlockAmount []*big.Int
	Initial      *big.Int
	Remaining    *big.Int
	Withdrawable *big.Int
}, error) {
	return _CnStakingV3MultiSig.Contract.GetLockupStakingInfo(&_CnStakingV3MultiSig.CallOpts)
}

// GetRequestIds is a free data retrieval call binding the contract method 0x0fd440ec.
//
// Solidity: function getRequestIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) GetRequestIds(opts *bind.CallOpts, _from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "getRequestIds", _from, _to, _state)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetRequestIds is a free data retrieval call binding the contract method 0x0fd440ec.
//
// Solidity: function getRequestIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) GetRequestIds(_from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.GetRequestIds(&_CnStakingV3MultiSig.CallOpts, _from, _to, _state)
}

// GetRequestIds is a free data retrieval call binding the contract method 0x0fd440ec.
//
// Solidity: function getRequestIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) GetRequestIds(_from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.GetRequestIds(&_CnStakingV3MultiSig.CallOpts, _from, _to, _state)
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(uint256 _id) view returns(uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address proposer, address[] confirmers, uint8 state)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) GetRequestInfo(opts *bind.CallOpts, _id *big.Int) (struct {
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Proposer   common.Address
	Confirmers []common.Address
	State      uint8
}, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "getRequestInfo", _id)

	outstruct := new(struct {
		FunctionId uint8
		FirstArg   [32]byte
		SecondArg  [32]byte
		ThirdArg   [32]byte
		Proposer   common.Address
		Confirmers []common.Address
		State      uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.FunctionId = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.FirstArg = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.SecondArg = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)
	outstruct.ThirdArg = *abi.ConvertType(out[3], new([32]byte)).(*[32]byte)
	outstruct.Proposer = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Confirmers = *abi.ConvertType(out[5], new([]common.Address)).(*[]common.Address)
	outstruct.State = *abi.ConvertType(out[6], new(uint8)).(*uint8)

	return *outstruct, err

}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(uint256 _id) view returns(uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address proposer, address[] confirmers, uint8 state)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) GetRequestInfo(_id *big.Int) (struct {
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Proposer   common.Address
	Confirmers []common.Address
	State      uint8
}, error) {
	return _CnStakingV3MultiSig.Contract.GetRequestInfo(&_CnStakingV3MultiSig.CallOpts, _id)
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(uint256 _id) view returns(uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address proposer, address[] confirmers, uint8 state)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) GetRequestInfo(_id *big.Int) (struct {
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Proposer   common.Address
	Confirmers []common.Address
	State      uint8
}, error) {
	return _CnStakingV3MultiSig.Contract.GetRequestInfo(&_CnStakingV3MultiSig.CallOpts, _id)
}

// GetRequestState is a free data retrieval call binding the contract method 0xed979dd6.
//
// Solidity: function getRequestState(uint256 _id) view returns(uint8)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) GetRequestState(opts *bind.CallOpts, _id *big.Int) (uint8, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "getRequestState", _id)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetRequestState is a free data retrieval call binding the contract method 0xed979dd6.
//
// Solidity: function getRequestState(uint256 _id) view returns(uint8)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) GetRequestState(_id *big.Int) (uint8, error) {
	return _CnStakingV3MultiSig.Contract.GetRequestState(&_CnStakingV3MultiSig.CallOpts, _id)
}

// GetRequestState is a free data retrieval call binding the contract method 0xed979dd6.
//
// Solidity: function getRequestState(uint256 _id) view returns(uint8)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) GetRequestState(_id *big.Int) (uint8, error) {
	return _CnStakingV3MultiSig.Contract.GetRequestState(&_CnStakingV3MultiSig.CallOpts, _id)
}

// GetReviewers is a free data retrieval call binding the contract method 0x75a87643.
//
// Solidity: function getReviewers() view returns(address[])
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) GetReviewers(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "getReviewers")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetReviewers is a free data retrieval call binding the contract method 0x75a87643.
//
// Solidity: function getReviewers() view returns(address[])
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) GetReviewers() ([]common.Address, error) {
	return _CnStakingV3MultiSig.Contract.GetReviewers(&_CnStakingV3MultiSig.CallOpts)
}

// GetReviewers is a free data retrieval call binding the contract method 0x75a87643.
//
// Solidity: function getReviewers() view returns(address[])
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) GetReviewers() ([]common.Address, error) {
	return _CnStakingV3MultiSig.Contract.GetReviewers(&_CnStakingV3MultiSig.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CnStakingV3MultiSig.Contract.GetRoleAdmin(&_CnStakingV3MultiSig.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CnStakingV3MultiSig.Contract.GetRoleAdmin(&_CnStakingV3MultiSig.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _CnStakingV3MultiSig.Contract.GetRoleMember(&_CnStakingV3MultiSig.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _CnStakingV3MultiSig.Contract.GetRoleMember(&_CnStakingV3MultiSig.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.GetRoleMemberCount(&_CnStakingV3MultiSig.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.GetRoleMemberCount(&_CnStakingV3MultiSig.CallOpts, role)
}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address _contractValidator, address _nodeId, address _rewardAddress, address[] _adminListArr, uint256 _requirement, uint256[] _unlockTime, uint256[] _unlockAmount, bool _allReviewed, bool _isInitialized)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) GetState(opts *bind.CallOpts) (struct {
	ContractValidator common.Address
	NodeId            common.Address
	RewardAddress     common.Address
	AdminListArr      []common.Address
	Requirement       *big.Int
	UnlockTime        []*big.Int
	UnlockAmount      []*big.Int
	AllReviewed       bool
	IsInitialized     bool
}, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "getState")

	outstruct := new(struct {
		ContractValidator common.Address
		NodeId            common.Address
		RewardAddress     common.Address
		AdminListArr      []common.Address
		Requirement       *big.Int
		UnlockTime        []*big.Int
		UnlockAmount      []*big.Int
		AllReviewed       bool
		IsInitialized     bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ContractValidator = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.NodeId = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.RewardAddress = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.AdminListArr = *abi.ConvertType(out[3], new([]common.Address)).(*[]common.Address)
	outstruct.Requirement = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.UnlockTime = *abi.ConvertType(out[5], new([]*big.Int)).(*[]*big.Int)
	outstruct.UnlockAmount = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)
	outstruct.AllReviewed = *abi.ConvertType(out[7], new(bool)).(*bool)
	outstruct.IsInitialized = *abi.ConvertType(out[8], new(bool)).(*bool)

	return *outstruct, err

}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address _contractValidator, address _nodeId, address _rewardAddress, address[] _adminListArr, uint256 _requirement, uint256[] _unlockTime, uint256[] _unlockAmount, bool _allReviewed, bool _isInitialized)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) GetState() (struct {
	ContractValidator common.Address
	NodeId            common.Address
	RewardAddress     common.Address
	AdminListArr      []common.Address
	Requirement       *big.Int
	UnlockTime        []*big.Int
	UnlockAmount      []*big.Int
	AllReviewed       bool
	IsInitialized     bool
}, error) {
	return _CnStakingV3MultiSig.Contract.GetState(&_CnStakingV3MultiSig.CallOpts)
}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address _contractValidator, address _nodeId, address _rewardAddress, address[] _adminListArr, uint256 _requirement, uint256[] _unlockTime, uint256[] _unlockAmount, bool _allReviewed, bool _isInitialized)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) GetState() (struct {
	ContractValidator common.Address
	NodeId            common.Address
	RewardAddress     common.Address
	AdminListArr      []common.Address
	Requirement       *big.Int
	UnlockTime        []*big.Int
	UnlockAmount      []*big.Int
	AllReviewed       bool
	IsInitialized     bool
}, error) {
	return _CnStakingV3MultiSig.Contract.GetState(&_CnStakingV3MultiSig.CallOpts)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CnStakingV3MultiSig.Contract.HasRole(&_CnStakingV3MultiSig.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CnStakingV3MultiSig.Contract.HasRole(&_CnStakingV3MultiSig.CallOpts, role, account)
}

// InitialLockupStaking is a free data retrieval call binding the contract method 0x06704222.
//
// Solidity: function initialLockupStaking() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) InitialLockupStaking(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "initialLockupStaking")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InitialLockupStaking is a free data retrieval call binding the contract method 0x06704222.
//
// Solidity: function initialLockupStaking() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) InitialLockupStaking() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.InitialLockupStaking(&_CnStakingV3MultiSig.CallOpts)
}

// InitialLockupStaking is a free data retrieval call binding the contract method 0x06704222.
//
// Solidity: function initialLockupStaking() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) InitialLockupStaking() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.InitialLockupStaking(&_CnStakingV3MultiSig.CallOpts)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _admin) view returns(bool)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) IsAdmin(opts *bind.CallOpts, _admin common.Address) (bool, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "isAdmin", _admin)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _admin) view returns(bool)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) IsAdmin(_admin common.Address) (bool, error) {
	return _CnStakingV3MultiSig.Contract.IsAdmin(&_CnStakingV3MultiSig.CallOpts, _admin)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _admin) view returns(bool)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) IsAdmin(_admin common.Address) (bool, error) {
	return _CnStakingV3MultiSig.Contract.IsAdmin(&_CnStakingV3MultiSig.CallOpts, _admin)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) IsInitialized(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "isInitialized")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) IsInitialized() (bool, error) {
	return _CnStakingV3MultiSig.Contract.IsInitialized(&_CnStakingV3MultiSig.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) IsInitialized() (bool, error) {
	return _CnStakingV3MultiSig.Contract.IsInitialized(&_CnStakingV3MultiSig.CallOpts)
}

// IsPublicDelegationEnabled is a free data retrieval call binding the contract method 0xbfc7e948.
//
// Solidity: function isPublicDelegationEnabled() view returns(bool)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) IsPublicDelegationEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "isPublicDelegationEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPublicDelegationEnabled is a free data retrieval call binding the contract method 0xbfc7e948.
//
// Solidity: function isPublicDelegationEnabled() view returns(bool)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) IsPublicDelegationEnabled() (bool, error) {
	return _CnStakingV3MultiSig.Contract.IsPublicDelegationEnabled(&_CnStakingV3MultiSig.CallOpts)
}

// IsPublicDelegationEnabled is a free data retrieval call binding the contract method 0xbfc7e948.
//
// Solidity: function isPublicDelegationEnabled() view returns(bool)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) IsPublicDelegationEnabled() (bool, error) {
	return _CnStakingV3MultiSig.Contract.IsPublicDelegationEnabled(&_CnStakingV3MultiSig.CallOpts)
}

// IsRedelegationEnabled is a free data retrieval call binding the contract method 0x7a66c96b.
//
// Solidity: function isRedelegationEnabled() view returns(bool)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) IsRedelegationEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "isRedelegationEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRedelegationEnabled is a free data retrieval call binding the contract method 0x7a66c96b.
//
// Solidity: function isRedelegationEnabled() view returns(bool)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) IsRedelegationEnabled() (bool, error) {
	return _CnStakingV3MultiSig.Contract.IsRedelegationEnabled(&_CnStakingV3MultiSig.CallOpts)
}

// IsRedelegationEnabled is a free data retrieval call binding the contract method 0x7a66c96b.
//
// Solidity: function isRedelegationEnabled() view returns(bool)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) IsRedelegationEnabled() (bool, error) {
	return _CnStakingV3MultiSig.Contract.IsRedelegationEnabled(&_CnStakingV3MultiSig.CallOpts)
}

// LastClearedId is a free data retrieval call binding the contract method 0xe7abb98d.
//
// Solidity: function lastClearedId() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) LastClearedId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "lastClearedId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastClearedId is a free data retrieval call binding the contract method 0xe7abb98d.
//
// Solidity: function lastClearedId() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) LastClearedId() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.LastClearedId(&_CnStakingV3MultiSig.CallOpts)
}

// LastClearedId is a free data retrieval call binding the contract method 0xe7abb98d.
//
// Solidity: function lastClearedId() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) LastClearedId() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.LastClearedId(&_CnStakingV3MultiSig.CallOpts)
}

// LastRedelegation is a free data retrieval call binding the contract method 0x14d3ce10.
//
// Solidity: function lastRedelegation(address ) view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) LastRedelegation(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "lastRedelegation", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastRedelegation is a free data retrieval call binding the contract method 0x14d3ce10.
//
// Solidity: function lastRedelegation(address ) view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) LastRedelegation(arg0 common.Address) (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.LastRedelegation(&_CnStakingV3MultiSig.CallOpts, arg0)
}

// LastRedelegation is a free data retrieval call binding the contract method 0x14d3ce10.
//
// Solidity: function lastRedelegation(address ) view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) LastRedelegation(arg0 common.Address) (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.LastRedelegation(&_CnStakingV3MultiSig.CallOpts, arg0)
}

// LockupConditions is a free data retrieval call binding the contract method 0x2429f8a9.
//
// Solidity: function lockupConditions() view returns(bool allReviewed, uint256 reviewedCount)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) LockupConditions(opts *bind.CallOpts) (struct {
	AllReviewed   bool
	ReviewedCount *big.Int
}, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "lockupConditions")

	outstruct := new(struct {
		AllReviewed   bool
		ReviewedCount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AllReviewed = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ReviewedCount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// LockupConditions is a free data retrieval call binding the contract method 0x2429f8a9.
//
// Solidity: function lockupConditions() view returns(bool allReviewed, uint256 reviewedCount)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) LockupConditions() (struct {
	AllReviewed   bool
	ReviewedCount *big.Int
}, error) {
	return _CnStakingV3MultiSig.Contract.LockupConditions(&_CnStakingV3MultiSig.CallOpts)
}

// LockupConditions is a free data retrieval call binding the contract method 0x2429f8a9.
//
// Solidity: function lockupConditions() view returns(bool allReviewed, uint256 reviewedCount)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) LockupConditions() (struct {
	AllReviewed   bool
	ReviewedCount *big.Int
}, error) {
	return _CnStakingV3MultiSig.Contract.LockupConditions(&_CnStakingV3MultiSig.CallOpts)
}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) NodeId(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "nodeId")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) NodeId() (common.Address, error) {
	return _CnStakingV3MultiSig.Contract.NodeId(&_CnStakingV3MultiSig.CallOpts)
}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) NodeId() (common.Address, error) {
	return _CnStakingV3MultiSig.Contract.NodeId(&_CnStakingV3MultiSig.CallOpts)
}

// PendingRewardAddress is a free data retrieval call binding the contract method 0x8740568b.
//
// Solidity: function pendingRewardAddress() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) PendingRewardAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "pendingRewardAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingRewardAddress is a free data retrieval call binding the contract method 0x8740568b.
//
// Solidity: function pendingRewardAddress() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) PendingRewardAddress() (common.Address, error) {
	return _CnStakingV3MultiSig.Contract.PendingRewardAddress(&_CnStakingV3MultiSig.CallOpts)
}

// PendingRewardAddress is a free data retrieval call binding the contract method 0x8740568b.
//
// Solidity: function pendingRewardAddress() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) PendingRewardAddress() (common.Address, error) {
	return _CnStakingV3MultiSig.Contract.PendingRewardAddress(&_CnStakingV3MultiSig.CallOpts)
}

// PublicDelegation is a free data retrieval call binding the contract method 0xe1a12d35.
//
// Solidity: function publicDelegation() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) PublicDelegation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "publicDelegation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PublicDelegation is a free data retrieval call binding the contract method 0xe1a12d35.
//
// Solidity: function publicDelegation() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) PublicDelegation() (common.Address, error) {
	return _CnStakingV3MultiSig.Contract.PublicDelegation(&_CnStakingV3MultiSig.CallOpts)
}

// PublicDelegation is a free data retrieval call binding the contract method 0xe1a12d35.
//
// Solidity: function publicDelegation() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) PublicDelegation() (common.Address, error) {
	return _CnStakingV3MultiSig.Contract.PublicDelegation(&_CnStakingV3MultiSig.CallOpts)
}

// RemainingLockupStaking is a free data retrieval call binding the contract method 0x7b5e0481.
//
// Solidity: function remainingLockupStaking() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) RemainingLockupStaking(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "remainingLockupStaking")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RemainingLockupStaking is a free data retrieval call binding the contract method 0x7b5e0481.
//
// Solidity: function remainingLockupStaking() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) RemainingLockupStaking() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.RemainingLockupStaking(&_CnStakingV3MultiSig.CallOpts)
}

// RemainingLockupStaking is a free data retrieval call binding the contract method 0x7b5e0481.
//
// Solidity: function remainingLockupStaking() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) RemainingLockupStaking() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.RemainingLockupStaking(&_CnStakingV3MultiSig.CallOpts)
}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) RequestCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "requestCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) RequestCount() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.RequestCount(&_CnStakingV3MultiSig.CallOpts)
}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) RequestCount() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.RequestCount(&_CnStakingV3MultiSig.CallOpts)
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) Requirement(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "requirement")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) Requirement() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.Requirement(&_CnStakingV3MultiSig.CallOpts)
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) Requirement() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.Requirement(&_CnStakingV3MultiSig.CallOpts)
}

// RewardAddress is a free data retrieval call binding the contract method 0x8cf57cb9.
//
// Solidity: function rewardAddress() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) RewardAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "rewardAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RewardAddress is a free data retrieval call binding the contract method 0x8cf57cb9.
//
// Solidity: function rewardAddress() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) RewardAddress() (common.Address, error) {
	return _CnStakingV3MultiSig.Contract.RewardAddress(&_CnStakingV3MultiSig.CallOpts)
}

// RewardAddress is a free data retrieval call binding the contract method 0x8cf57cb9.
//
// Solidity: function rewardAddress() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) RewardAddress() (common.Address, error) {
	return _CnStakingV3MultiSig.Contract.RewardAddress(&_CnStakingV3MultiSig.CallOpts)
}

// Staking is a free data retrieval call binding the contract method 0x4cf088d9.
//
// Solidity: function staking() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) Staking(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "staking")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Staking is a free data retrieval call binding the contract method 0x4cf088d9.
//
// Solidity: function staking() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) Staking() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.Staking(&_CnStakingV3MultiSig.CallOpts)
}

// Staking is a free data retrieval call binding the contract method 0x4cf088d9.
//
// Solidity: function staking() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) Staking() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.Staking(&_CnStakingV3MultiSig.CallOpts)
}

// StakingTracker is a free data retrieval call binding the contract method 0x008c477a.
//
// Solidity: function stakingTracker() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) StakingTracker(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "stakingTracker")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakingTracker is a free data retrieval call binding the contract method 0x008c477a.
//
// Solidity: function stakingTracker() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) StakingTracker() (common.Address, error) {
	return _CnStakingV3MultiSig.Contract.StakingTracker(&_CnStakingV3MultiSig.CallOpts)
}

// StakingTracker is a free data retrieval call binding the contract method 0x008c477a.
//
// Solidity: function stakingTracker() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) StakingTracker() (common.Address, error) {
	return _CnStakingV3MultiSig.Contract.StakingTracker(&_CnStakingV3MultiSig.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CnStakingV3MultiSig.Contract.SupportsInterface(&_CnStakingV3MultiSig.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CnStakingV3MultiSig.Contract.SupportsInterface(&_CnStakingV3MultiSig.CallOpts, interfaceId)
}

// Unstaking is a free data retrieval call binding the contract method 0x630b1146.
//
// Solidity: function unstaking() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) Unstaking(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "unstaking")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Unstaking is a free data retrieval call binding the contract method 0x630b1146.
//
// Solidity: function unstaking() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) Unstaking() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.Unstaking(&_CnStakingV3MultiSig.CallOpts)
}

// Unstaking is a free data retrieval call binding the contract method 0x630b1146.
//
// Solidity: function unstaking() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) Unstaking() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.Unstaking(&_CnStakingV3MultiSig.CallOpts)
}

// VoterAddress is a free data retrieval call binding the contract method 0x992ac9fa.
//
// Solidity: function voterAddress() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) VoterAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "voterAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VoterAddress is a free data retrieval call binding the contract method 0x992ac9fa.
//
// Solidity: function voterAddress() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) VoterAddress() (common.Address, error) {
	return _CnStakingV3MultiSig.Contract.VoterAddress(&_CnStakingV3MultiSig.CallOpts)
}

// VoterAddress is a free data retrieval call binding the contract method 0x992ac9fa.
//
// Solidity: function voterAddress() view returns(address)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) VoterAddress() (common.Address, error) {
	return _CnStakingV3MultiSig.Contract.VoterAddress(&_CnStakingV3MultiSig.CallOpts)
}

// WithdrawalRequestCount is a free data retrieval call binding the contract method 0x19e44e32.
//
// Solidity: function withdrawalRequestCount() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) WithdrawalRequestCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "withdrawalRequestCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawalRequestCount is a free data retrieval call binding the contract method 0x19e44e32.
//
// Solidity: function withdrawalRequestCount() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) WithdrawalRequestCount() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.WithdrawalRequestCount(&_CnStakingV3MultiSig.CallOpts)
}

// WithdrawalRequestCount is a free data retrieval call binding the contract method 0x19e44e32.
//
// Solidity: function withdrawalRequestCount() view returns(uint256)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) WithdrawalRequestCount() (*big.Int, error) {
	return _CnStakingV3MultiSig.Contract.WithdrawalRequestCount(&_CnStakingV3MultiSig.CallOpts)
}

// WithdrawalRequestMap is a free data retrieval call binding the contract method 0x284fbedc.
//
// Solidity: function withdrawalRequestMap(uint256 ) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCaller) WithdrawalRequestMap(opts *bind.CallOpts, arg0 *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	var out []interface{}
	err := _CnStakingV3MultiSig.contract.Call(opts, &out, "withdrawalRequestMap", arg0)

	outstruct := new(struct {
		To               common.Address
		Value            *big.Int
		WithdrawableFrom *big.Int
		State            uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.To = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Value = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.WithdrawableFrom = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.State = *abi.ConvertType(out[3], new(uint8)).(*uint8)

	return *outstruct, err

}

// WithdrawalRequestMap is a free data retrieval call binding the contract method 0x284fbedc.
//
// Solidity: function withdrawalRequestMap(uint256 ) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) WithdrawalRequestMap(arg0 *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	return _CnStakingV3MultiSig.Contract.WithdrawalRequestMap(&_CnStakingV3MultiSig.CallOpts, arg0)
}

// WithdrawalRequestMap is a free data retrieval call binding the contract method 0x284fbedc.
//
// Solidity: function withdrawalRequestMap(uint256 ) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigCallerSession) WithdrawalRequestMap(arg0 *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	return _CnStakingV3MultiSig.Contract.WithdrawalRequestMap(&_CnStakingV3MultiSig.CallOpts, arg0)
}

// AcceptRewardAddress is a paid mutator transaction binding the contract method 0xaa4058b9.
//
// Solidity: function acceptRewardAddress(address _addr) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) AcceptRewardAddress(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "acceptRewardAddress", _addr)
}

// AcceptRewardAddress is a paid mutator transaction binding the contract method 0xaa4058b9.
//
// Solidity: function acceptRewardAddress(address _addr) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) AcceptRewardAddress(_addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.AcceptRewardAddress(&_CnStakingV3MultiSig.TransactOpts, _addr)
}

// AcceptRewardAddress is a paid mutator transaction binding the contract method 0xaa4058b9.
//
// Solidity: function acceptRewardAddress(address _addr) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) AcceptRewardAddress(_addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.AcceptRewardAddress(&_CnStakingV3MultiSig.TransactOpts, _addr)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address _admin) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) AddAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "addAdmin", _admin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address _admin) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) AddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.AddAdmin(&_CnStakingV3MultiSig.TransactOpts, _admin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address _admin) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) AddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.AddAdmin(&_CnStakingV3MultiSig.TransactOpts, _admin)
}

// ApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x5df8b09a.
//
// Solidity: function approveStakingWithdrawal(address _to, uint256 _value) returns(uint256 id)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) ApproveStakingWithdrawal(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "approveStakingWithdrawal", _to, _value)
}

// ApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x5df8b09a.
//
// Solidity: function approveStakingWithdrawal(address _to, uint256 _value) returns(uint256 id)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) ApproveStakingWithdrawal(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.ApproveStakingWithdrawal(&_CnStakingV3MultiSig.TransactOpts, _to, _value)
}

// ApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x5df8b09a.
//
// Solidity: function approveStakingWithdrawal(address _to, uint256 _value) returns(uint256 id)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) ApproveStakingWithdrawal(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.ApproveStakingWithdrawal(&_CnStakingV3MultiSig.TransactOpts, _to, _value)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _id) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) CancelApprovedStakingWithdrawal(opts *bind.TransactOpts, _id *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "cancelApprovedStakingWithdrawal", _id)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _id) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) CancelApprovedStakingWithdrawal(_id *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.CancelApprovedStakingWithdrawal(&_CnStakingV3MultiSig.TransactOpts, _id)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _id) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) CancelApprovedStakingWithdrawal(_id *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.CancelApprovedStakingWithdrawal(&_CnStakingV3MultiSig.TransactOpts, _id)
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) ClearRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "clearRequest")
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) ClearRequest() (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.ClearRequest(&_CnStakingV3MultiSig.TransactOpts)
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) ClearRequest() (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.ClearRequest(&_CnStakingV3MultiSig.TransactOpts)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0x3b2d2aca.
//
// Solidity: function confirmRequest(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) ConfirmRequest(opts *bind.TransactOpts, _id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "confirmRequest", _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0x3b2d2aca.
//
// Solidity: function confirmRequest(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) ConfirmRequest(_id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.ConfirmRequest(&_CnStakingV3MultiSig.TransactOpts, _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0x3b2d2aca.
//
// Solidity: function confirmRequest(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) ConfirmRequest(_id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.ConfirmRequest(&_CnStakingV3MultiSig.TransactOpts, _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// Delegate is a paid mutator transaction binding the contract method 0xc89e4361.
//
// Solidity: function delegate() payable returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) Delegate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "delegate")
}

// Delegate is a paid mutator transaction binding the contract method 0xc89e4361.
//
// Solidity: function delegate() payable returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) Delegate() (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.Delegate(&_CnStakingV3MultiSig.TransactOpts)
}

// Delegate is a paid mutator transaction binding the contract method 0xc89e4361.
//
// Solidity: function delegate() payable returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) Delegate() (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.Delegate(&_CnStakingV3MultiSig.TransactOpts)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(address _admin) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) DeleteAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "deleteAdmin", _admin)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(address _admin) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) DeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.DeleteAdmin(&_CnStakingV3MultiSig.TransactOpts, _admin)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(address _admin) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) DeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.DeleteAdmin(&_CnStakingV3MultiSig.TransactOpts, _admin)
}

// DepositLockupStakingAndInit is a paid mutator transaction binding the contract method 0x6a27c206.
//
// Solidity: function depositLockupStakingAndInit() payable returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) DepositLockupStakingAndInit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "depositLockupStakingAndInit")
}

// DepositLockupStakingAndInit is a paid mutator transaction binding the contract method 0x6a27c206.
//
// Solidity: function depositLockupStakingAndInit() payable returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) DepositLockupStakingAndInit() (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.DepositLockupStakingAndInit(&_CnStakingV3MultiSig.TransactOpts)
}

// DepositLockupStakingAndInit is a paid mutator transaction binding the contract method 0x6a27c206.
//
// Solidity: function depositLockupStakingAndInit() payable returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) DepositLockupStakingAndInit() (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.DepositLockupStakingAndInit(&_CnStakingV3MultiSig.TransactOpts)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.GrantRole(&_CnStakingV3MultiSig.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.GrantRole(&_CnStakingV3MultiSig.TransactOpts, role, account)
}

// HandleRedelegation is a paid mutator transaction binding the contract method 0xa006e90c.
//
// Solidity: function handleRedelegation(address _user) payable returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) HandleRedelegation(opts *bind.TransactOpts, _user common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "handleRedelegation", _user)
}

// HandleRedelegation is a paid mutator transaction binding the contract method 0xa006e90c.
//
// Solidity: function handleRedelegation(address _user) payable returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) HandleRedelegation(_user common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.HandleRedelegation(&_CnStakingV3MultiSig.TransactOpts, _user)
}

// HandleRedelegation is a paid mutator transaction binding the contract method 0xa006e90c.
//
// Solidity: function handleRedelegation(address _user) payable returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) HandleRedelegation(_user common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.HandleRedelegation(&_CnStakingV3MultiSig.TransactOpts, _user)
}

// Redelegate is a paid mutator transaction binding the contract method 0x6bd8f804.
//
// Solidity: function redelegate(address _user, address _targetCnV3, uint256 _value) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) Redelegate(opts *bind.TransactOpts, _user common.Address, _targetCnV3 common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "redelegate", _user, _targetCnV3, _value)
}

// Redelegate is a paid mutator transaction binding the contract method 0x6bd8f804.
//
// Solidity: function redelegate(address _user, address _targetCnV3, uint256 _value) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) Redelegate(_user common.Address, _targetCnV3 common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.Redelegate(&_CnStakingV3MultiSig.TransactOpts, _user, _targetCnV3, _value)
}

// Redelegate is a paid mutator transaction binding the contract method 0x6bd8f804.
//
// Solidity: function redelegate(address _user, address _targetCnV3, uint256 _value) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) Redelegate(_user common.Address, _targetCnV3 common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.Redelegate(&_CnStakingV3MultiSig.TransactOpts, _user, _targetCnV3, _value)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "renounceRole", role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.RenounceRole(&_CnStakingV3MultiSig.TransactOpts, role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.RenounceRole(&_CnStakingV3MultiSig.TransactOpts, role, callerConfirmation)
}

// ReviewInitialConditions is a paid mutator transaction binding the contract method 0x702b9c9b.
//
// Solidity: function reviewInitialConditions() returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) ReviewInitialConditions(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "reviewInitialConditions")
}

// ReviewInitialConditions is a paid mutator transaction binding the contract method 0x702b9c9b.
//
// Solidity: function reviewInitialConditions() returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) ReviewInitialConditions() (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.ReviewInitialConditions(&_CnStakingV3MultiSig.TransactOpts)
}

// ReviewInitialConditions is a paid mutator transaction binding the contract method 0x702b9c9b.
//
// Solidity: function reviewInitialConditions() returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) ReviewInitialConditions() (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.ReviewInitialConditions(&_CnStakingV3MultiSig.TransactOpts)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x164990f8.
//
// Solidity: function revokeConfirmation(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) RevokeConfirmation(opts *bind.TransactOpts, _id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "revokeConfirmation", _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x164990f8.
//
// Solidity: function revokeConfirmation(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) RevokeConfirmation(_id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.RevokeConfirmation(&_CnStakingV3MultiSig.TransactOpts, _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x164990f8.
//
// Solidity: function revokeConfirmation(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) RevokeConfirmation(_id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.RevokeConfirmation(&_CnStakingV3MultiSig.TransactOpts, _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.RevokeRole(&_CnStakingV3MultiSig.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.RevokeRole(&_CnStakingV3MultiSig.TransactOpts, role, account)
}

// SetGCId is a paid mutator transaction binding the contract method 0xff4634bc.
//
// Solidity: function setGCId(uint256 _gcId) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) SetGCId(opts *bind.TransactOpts, _gcId *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "setGCId", _gcId)
}

// SetGCId is a paid mutator transaction binding the contract method 0xff4634bc.
//
// Solidity: function setGCId(uint256 _gcId) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) SetGCId(_gcId *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SetGCId(&_CnStakingV3MultiSig.TransactOpts, _gcId)
}

// SetGCId is a paid mutator transaction binding the contract method 0xff4634bc.
//
// Solidity: function setGCId(uint256 _gcId) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) SetGCId(_gcId *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SetGCId(&_CnStakingV3MultiSig.TransactOpts, _gcId)
}

// SetPublicDelegation is a paid mutator transaction binding the contract method 0x2e5dc0f7.
//
// Solidity: function setPublicDelegation(address _pdFactory, bytes _pdArgs) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) SetPublicDelegation(opts *bind.TransactOpts, _pdFactory common.Address, _pdArgs []byte) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "setPublicDelegation", _pdFactory, _pdArgs)
}

// SetPublicDelegation is a paid mutator transaction binding the contract method 0x2e5dc0f7.
//
// Solidity: function setPublicDelegation(address _pdFactory, bytes _pdArgs) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) SetPublicDelegation(_pdFactory common.Address, _pdArgs []byte) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SetPublicDelegation(&_CnStakingV3MultiSig.TransactOpts, _pdFactory, _pdArgs)
}

// SetPublicDelegation is a paid mutator transaction binding the contract method 0x2e5dc0f7.
//
// Solidity: function setPublicDelegation(address _pdFactory, bytes _pdArgs) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) SetPublicDelegation(_pdFactory common.Address, _pdArgs []byte) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SetPublicDelegation(&_CnStakingV3MultiSig.TransactOpts, _pdFactory, _pdArgs)
}

// SetStakingTracker is a paid mutator transaction binding the contract method 0xc336aa35.
//
// Solidity: function setStakingTracker(address _tracker) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) SetStakingTracker(opts *bind.TransactOpts, _tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "setStakingTracker", _tracker)
}

// SetStakingTracker is a paid mutator transaction binding the contract method 0xc336aa35.
//
// Solidity: function setStakingTracker(address _tracker) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) SetStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SetStakingTracker(&_CnStakingV3MultiSig.TransactOpts, _tracker)
}

// SetStakingTracker is a paid mutator transaction binding the contract method 0xc336aa35.
//
// Solidity: function setStakingTracker(address _tracker) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) SetStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SetStakingTracker(&_CnStakingV3MultiSig.TransactOpts, _tracker)
}

// SubmitAddAdmin is a paid mutator transaction binding the contract method 0x863f5c0a.
//
// Solidity: function submitAddAdmin(address _admin) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) SubmitAddAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "submitAddAdmin", _admin)
}

// SubmitAddAdmin is a paid mutator transaction binding the contract method 0x863f5c0a.
//
// Solidity: function submitAddAdmin(address _admin) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) SubmitAddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitAddAdmin(&_CnStakingV3MultiSig.TransactOpts, _admin)
}

// SubmitAddAdmin is a paid mutator transaction binding the contract method 0x863f5c0a.
//
// Solidity: function submitAddAdmin(address _admin) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) SubmitAddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitAddAdmin(&_CnStakingV3MultiSig.TransactOpts, _admin)
}

// SubmitApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x7818097c.
//
// Solidity: function submitApproveStakingWithdrawal(address _to, uint256 _value) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) SubmitApproveStakingWithdrawal(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "submitApproveStakingWithdrawal", _to, _value)
}

// SubmitApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x7818097c.
//
// Solidity: function submitApproveStakingWithdrawal(address _to, uint256 _value) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) SubmitApproveStakingWithdrawal(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitApproveStakingWithdrawal(&_CnStakingV3MultiSig.TransactOpts, _to, _value)
}

// SubmitApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x7818097c.
//
// Solidity: function submitApproveStakingWithdrawal(address _to, uint256 _value) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) SubmitApproveStakingWithdrawal(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitApproveStakingWithdrawal(&_CnStakingV3MultiSig.TransactOpts, _to, _value)
}

// SubmitCancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0x06b35d31.
//
// Solidity: function submitCancelApprovedStakingWithdrawal(uint256 _id) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) SubmitCancelApprovedStakingWithdrawal(opts *bind.TransactOpts, _id *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "submitCancelApprovedStakingWithdrawal", _id)
}

// SubmitCancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0x06b35d31.
//
// Solidity: function submitCancelApprovedStakingWithdrawal(uint256 _id) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) SubmitCancelApprovedStakingWithdrawal(_id *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitCancelApprovedStakingWithdrawal(&_CnStakingV3MultiSig.TransactOpts, _id)
}

// SubmitCancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0x06b35d31.
//
// Solidity: function submitCancelApprovedStakingWithdrawal(uint256 _id) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) SubmitCancelApprovedStakingWithdrawal(_id *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitCancelApprovedStakingWithdrawal(&_CnStakingV3MultiSig.TransactOpts, _id)
}

// SubmitClearRequest is a paid mutator transaction binding the contract method 0x87cd9feb.
//
// Solidity: function submitClearRequest() returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) SubmitClearRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "submitClearRequest")
}

// SubmitClearRequest is a paid mutator transaction binding the contract method 0x87cd9feb.
//
// Solidity: function submitClearRequest() returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) SubmitClearRequest() (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitClearRequest(&_CnStakingV3MultiSig.TransactOpts)
}

// SubmitClearRequest is a paid mutator transaction binding the contract method 0x87cd9feb.
//
// Solidity: function submitClearRequest() returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) SubmitClearRequest() (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitClearRequest(&_CnStakingV3MultiSig.TransactOpts)
}

// SubmitDeleteAdmin is a paid mutator transaction binding the contract method 0x791b5123.
//
// Solidity: function submitDeleteAdmin(address _admin) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) SubmitDeleteAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "submitDeleteAdmin", _admin)
}

// SubmitDeleteAdmin is a paid mutator transaction binding the contract method 0x791b5123.
//
// Solidity: function submitDeleteAdmin(address _admin) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) SubmitDeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitDeleteAdmin(&_CnStakingV3MultiSig.TransactOpts, _admin)
}

// SubmitDeleteAdmin is a paid mutator transaction binding the contract method 0x791b5123.
//
// Solidity: function submitDeleteAdmin(address _admin) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) SubmitDeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitDeleteAdmin(&_CnStakingV3MultiSig.TransactOpts, _admin)
}

// SubmitToggleRedelegation is a paid mutator transaction binding the contract method 0x2f890b1d.
//
// Solidity: function submitToggleRedelegation() returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) SubmitToggleRedelegation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "submitToggleRedelegation")
}

// SubmitToggleRedelegation is a paid mutator transaction binding the contract method 0x2f890b1d.
//
// Solidity: function submitToggleRedelegation() returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) SubmitToggleRedelegation() (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitToggleRedelegation(&_CnStakingV3MultiSig.TransactOpts)
}

// SubmitToggleRedelegation is a paid mutator transaction binding the contract method 0x2f890b1d.
//
// Solidity: function submitToggleRedelegation() returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) SubmitToggleRedelegation() (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitToggleRedelegation(&_CnStakingV3MultiSig.TransactOpts)
}

// SubmitUpdateRequirement is a paid mutator transaction binding the contract method 0xe748357b.
//
// Solidity: function submitUpdateRequirement(uint256 _requirement) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) SubmitUpdateRequirement(opts *bind.TransactOpts, _requirement *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "submitUpdateRequirement", _requirement)
}

// SubmitUpdateRequirement is a paid mutator transaction binding the contract method 0xe748357b.
//
// Solidity: function submitUpdateRequirement(uint256 _requirement) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) SubmitUpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitUpdateRequirement(&_CnStakingV3MultiSig.TransactOpts, _requirement)
}

// SubmitUpdateRequirement is a paid mutator transaction binding the contract method 0xe748357b.
//
// Solidity: function submitUpdateRequirement(uint256 _requirement) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) SubmitUpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitUpdateRequirement(&_CnStakingV3MultiSig.TransactOpts, _requirement)
}

// SubmitUpdateRewardAddress is a paid mutator transaction binding the contract method 0x069135af.
//
// Solidity: function submitUpdateRewardAddress(address _addr) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) SubmitUpdateRewardAddress(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "submitUpdateRewardAddress", _addr)
}

// SubmitUpdateRewardAddress is a paid mutator transaction binding the contract method 0x069135af.
//
// Solidity: function submitUpdateRewardAddress(address _addr) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) SubmitUpdateRewardAddress(_addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitUpdateRewardAddress(&_CnStakingV3MultiSig.TransactOpts, _addr)
}

// SubmitUpdateRewardAddress is a paid mutator transaction binding the contract method 0x069135af.
//
// Solidity: function submitUpdateRewardAddress(address _addr) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) SubmitUpdateRewardAddress(_addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitUpdateRewardAddress(&_CnStakingV3MultiSig.TransactOpts, _addr)
}

// SubmitUpdateStakingTracker is a paid mutator transaction binding the contract method 0x0df5975c.
//
// Solidity: function submitUpdateStakingTracker(address _tracker) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) SubmitUpdateStakingTracker(opts *bind.TransactOpts, _tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "submitUpdateStakingTracker", _tracker)
}

// SubmitUpdateStakingTracker is a paid mutator transaction binding the contract method 0x0df5975c.
//
// Solidity: function submitUpdateStakingTracker(address _tracker) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) SubmitUpdateStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitUpdateStakingTracker(&_CnStakingV3MultiSig.TransactOpts, _tracker)
}

// SubmitUpdateStakingTracker is a paid mutator transaction binding the contract method 0x0df5975c.
//
// Solidity: function submitUpdateStakingTracker(address _tracker) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) SubmitUpdateStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitUpdateStakingTracker(&_CnStakingV3MultiSig.TransactOpts, _tracker)
}

// SubmitUpdateVoterAddress is a paid mutator transaction binding the contract method 0xb756e6ff.
//
// Solidity: function submitUpdateVoterAddress(address _addr) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) SubmitUpdateVoterAddress(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "submitUpdateVoterAddress", _addr)
}

// SubmitUpdateVoterAddress is a paid mutator transaction binding the contract method 0xb756e6ff.
//
// Solidity: function submitUpdateVoterAddress(address _addr) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) SubmitUpdateVoterAddress(_addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitUpdateVoterAddress(&_CnStakingV3MultiSig.TransactOpts, _addr)
}

// SubmitUpdateVoterAddress is a paid mutator transaction binding the contract method 0xb756e6ff.
//
// Solidity: function submitUpdateVoterAddress(address _addr) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) SubmitUpdateVoterAddress(_addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitUpdateVoterAddress(&_CnStakingV3MultiSig.TransactOpts, _addr)
}

// SubmitWithdrawLockupStaking is a paid mutator transaction binding the contract method 0x4b8bc6f8.
//
// Solidity: function submitWithdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) SubmitWithdrawLockupStaking(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "submitWithdrawLockupStaking", _to, _value)
}

// SubmitWithdrawLockupStaking is a paid mutator transaction binding the contract method 0x4b8bc6f8.
//
// Solidity: function submitWithdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) SubmitWithdrawLockupStaking(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitWithdrawLockupStaking(&_CnStakingV3MultiSig.TransactOpts, _to, _value)
}

// SubmitWithdrawLockupStaking is a paid mutator transaction binding the contract method 0x4b8bc6f8.
//
// Solidity: function submitWithdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) SubmitWithdrawLockupStaking(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.SubmitWithdrawLockupStaking(&_CnStakingV3MultiSig.TransactOpts, _to, _value)
}

// ToggleRedelegation is a paid mutator transaction binding the contract method 0xd75859ec.
//
// Solidity: function toggleRedelegation() returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) ToggleRedelegation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "toggleRedelegation")
}

// ToggleRedelegation is a paid mutator transaction binding the contract method 0xd75859ec.
//
// Solidity: function toggleRedelegation() returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) ToggleRedelegation() (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.ToggleRedelegation(&_CnStakingV3MultiSig.TransactOpts)
}

// ToggleRedelegation is a paid mutator transaction binding the contract method 0xd75859ec.
//
// Solidity: function toggleRedelegation() returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) ToggleRedelegation() (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.ToggleRedelegation(&_CnStakingV3MultiSig.TransactOpts)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(uint256 _requirement) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) UpdateRequirement(opts *bind.TransactOpts, _requirement *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "updateRequirement", _requirement)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(uint256 _requirement) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) UpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.UpdateRequirement(&_CnStakingV3MultiSig.TransactOpts, _requirement)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(uint256 _requirement) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) UpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.UpdateRequirement(&_CnStakingV3MultiSig.TransactOpts, _requirement)
}

// UpdateRewardAddress is a paid mutator transaction binding the contract method 0x944dd5a2.
//
// Solidity: function updateRewardAddress(address _addr) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) UpdateRewardAddress(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "updateRewardAddress", _addr)
}

// UpdateRewardAddress is a paid mutator transaction binding the contract method 0x944dd5a2.
//
// Solidity: function updateRewardAddress(address _addr) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) UpdateRewardAddress(_addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.UpdateRewardAddress(&_CnStakingV3MultiSig.TransactOpts, _addr)
}

// UpdateRewardAddress is a paid mutator transaction binding the contract method 0x944dd5a2.
//
// Solidity: function updateRewardAddress(address _addr) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) UpdateRewardAddress(_addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.UpdateRewardAddress(&_CnStakingV3MultiSig.TransactOpts, _addr)
}

// UpdateStakingTracker is a paid mutator transaction binding the contract method 0x5be6eacc.
//
// Solidity: function updateStakingTracker(address _tracker) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) UpdateStakingTracker(opts *bind.TransactOpts, _tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "updateStakingTracker", _tracker)
}

// UpdateStakingTracker is a paid mutator transaction binding the contract method 0x5be6eacc.
//
// Solidity: function updateStakingTracker(address _tracker) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) UpdateStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.UpdateStakingTracker(&_CnStakingV3MultiSig.TransactOpts, _tracker)
}

// UpdateStakingTracker is a paid mutator transaction binding the contract method 0x5be6eacc.
//
// Solidity: function updateStakingTracker(address _tracker) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) UpdateStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.UpdateStakingTracker(&_CnStakingV3MultiSig.TransactOpts, _tracker)
}

// UpdateVoterAddress is a paid mutator transaction binding the contract method 0x5784d18b.
//
// Solidity: function updateVoterAddress(address _addr) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) UpdateVoterAddress(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "updateVoterAddress", _addr)
}

// UpdateVoterAddress is a paid mutator transaction binding the contract method 0x5784d18b.
//
// Solidity: function updateVoterAddress(address _addr) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) UpdateVoterAddress(_addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.UpdateVoterAddress(&_CnStakingV3MultiSig.TransactOpts, _addr)
}

// UpdateVoterAddress is a paid mutator transaction binding the contract method 0x5784d18b.
//
// Solidity: function updateVoterAddress(address _addr) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) UpdateVoterAddress(_addr common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.UpdateVoterAddress(&_CnStakingV3MultiSig.TransactOpts, _addr)
}

// WithdrawApprovedStaking is a paid mutator transaction binding the contract method 0x6e93df0d.
//
// Solidity: function withdrawApprovedStaking(uint256 _id) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) WithdrawApprovedStaking(opts *bind.TransactOpts, _id *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "withdrawApprovedStaking", _id)
}

// WithdrawApprovedStaking is a paid mutator transaction binding the contract method 0x6e93df0d.
//
// Solidity: function withdrawApprovedStaking(uint256 _id) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) WithdrawApprovedStaking(_id *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.WithdrawApprovedStaking(&_CnStakingV3MultiSig.TransactOpts, _id)
}

// WithdrawApprovedStaking is a paid mutator transaction binding the contract method 0x6e93df0d.
//
// Solidity: function withdrawApprovedStaking(uint256 _id) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) WithdrawApprovedStaking(_id *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.WithdrawApprovedStaking(&_CnStakingV3MultiSig.TransactOpts, _id)
}

// WithdrawLockupStaking is a paid mutator transaction binding the contract method 0x505ebed4.
//
// Solidity: function withdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) WithdrawLockupStaking(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.Transact(opts, "withdrawLockupStaking", _to, _value)
}

// WithdrawLockupStaking is a paid mutator transaction binding the contract method 0x505ebed4.
//
// Solidity: function withdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) WithdrawLockupStaking(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.WithdrawLockupStaking(&_CnStakingV3MultiSig.TransactOpts, _to, _value)
}

// WithdrawLockupStaking is a paid mutator transaction binding the contract method 0x505ebed4.
//
// Solidity: function withdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) WithdrawLockupStaking(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.WithdrawLockupStaking(&_CnStakingV3MultiSig.TransactOpts, _to, _value)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3MultiSig.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigSession) Receive() (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.Receive(&_CnStakingV3MultiSig.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigTransactorSession) Receive() (*types.Transaction, error) {
	return _CnStakingV3MultiSig.Contract.Receive(&_CnStakingV3MultiSig.TransactOpts)
}

// CnStakingV3MultiSigAcceptRewardAddressIterator is returned from FilterAcceptRewardAddress and is used to iterate over the raw logs and unpacked data for AcceptRewardAddress events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigAcceptRewardAddressIterator struct {
	Event *CnStakingV3MultiSigAcceptRewardAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigAcceptRewardAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigAcceptRewardAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigAcceptRewardAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigAcceptRewardAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigAcceptRewardAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigAcceptRewardAddress represents a AcceptRewardAddress event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigAcceptRewardAddress struct {
	RewardAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAcceptRewardAddress is a free log retrieval operation binding the contract event 0x36e0b58f785f850d6622cb742fa1e0750728da3c75816916830b50b747efb6b6.
//
// Solidity: event AcceptRewardAddress(address indexed rewardAddress)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterAcceptRewardAddress(opts *bind.FilterOpts, rewardAddress []common.Address) (*CnStakingV3MultiSigAcceptRewardAddressIterator, error) {

	var rewardAddressRule []interface{}
	for _, rewardAddressItem := range rewardAddress {
		rewardAddressRule = append(rewardAddressRule, rewardAddressItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "AcceptRewardAddress", rewardAddressRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigAcceptRewardAddressIterator{contract: _CnStakingV3MultiSig.contract, event: "AcceptRewardAddress", logs: logs, sub: sub}, nil
}

// WatchAcceptRewardAddress is a free log subscription operation binding the contract event 0x36e0b58f785f850d6622cb742fa1e0750728da3c75816916830b50b747efb6b6.
//
// Solidity: event AcceptRewardAddress(address indexed rewardAddress)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchAcceptRewardAddress(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigAcceptRewardAddress, rewardAddress []common.Address) (event.Subscription, error) {

	var rewardAddressRule []interface{}
	for _, rewardAddressItem := range rewardAddress {
		rewardAddressRule = append(rewardAddressRule, rewardAddressItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "AcceptRewardAddress", rewardAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigAcceptRewardAddress)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "AcceptRewardAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAcceptRewardAddress is a log parse operation binding the contract event 0x36e0b58f785f850d6622cb742fa1e0750728da3c75816916830b50b747efb6b6.
//
// Solidity: event AcceptRewardAddress(address indexed rewardAddress)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseAcceptRewardAddress(log types.Log) (*CnStakingV3MultiSigAcceptRewardAddress, error) {
	event := new(CnStakingV3MultiSigAcceptRewardAddress)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "AcceptRewardAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigAddAdminIterator is returned from FilterAddAdmin and is used to iterate over the raw logs and unpacked data for AddAdmin events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigAddAdminIterator struct {
	Event *CnStakingV3MultiSigAddAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigAddAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigAddAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigAddAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigAddAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigAddAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigAddAdmin represents a AddAdmin event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigAddAdmin struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAddAdmin is a free log retrieval operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: event AddAdmin(address indexed admin)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterAddAdmin(opts *bind.FilterOpts, admin []common.Address) (*CnStakingV3MultiSigAddAdminIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "AddAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigAddAdminIterator{contract: _CnStakingV3MultiSig.contract, event: "AddAdmin", logs: logs, sub: sub}, nil
}

// WatchAddAdmin is a free log subscription operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: event AddAdmin(address indexed admin)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchAddAdmin(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigAddAdmin, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "AddAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigAddAdmin)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "AddAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddAdmin is a log parse operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: event AddAdmin(address indexed admin)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseAddAdmin(log types.Log) (*CnStakingV3MultiSigAddAdmin, error) {
	event := new(CnStakingV3MultiSigAddAdmin)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "AddAdmin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigApproveStakingWithdrawalIterator is returned from FilterApproveStakingWithdrawal and is used to iterate over the raw logs and unpacked data for ApproveStakingWithdrawal events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigApproveStakingWithdrawalIterator struct {
	Event *CnStakingV3MultiSigApproveStakingWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigApproveStakingWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigApproveStakingWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigApproveStakingWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigApproveStakingWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigApproveStakingWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigApproveStakingWithdrawal represents a ApproveStakingWithdrawal event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigApproveStakingWithdrawal struct {
	ApprovedWithdrawalId *big.Int
	To                   common.Address
	Value                *big.Int
	WithdrawableFrom     *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterApproveStakingWithdrawal is a free log retrieval operation binding the contract event 0xdd0988b8c11a867814c87be652f93a86d35c6a235b92977e99d5394bd8580ced.
//
// Solidity: event ApproveStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value, uint256 withdrawableFrom)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterApproveStakingWithdrawal(opts *bind.FilterOpts, approvedWithdrawalId []*big.Int, to []common.Address) (*CnStakingV3MultiSigApproveStakingWithdrawalIterator, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "ApproveStakingWithdrawal", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigApproveStakingWithdrawalIterator{contract: _CnStakingV3MultiSig.contract, event: "ApproveStakingWithdrawal", logs: logs, sub: sub}, nil
}

// WatchApproveStakingWithdrawal is a free log subscription operation binding the contract event 0xdd0988b8c11a867814c87be652f93a86d35c6a235b92977e99d5394bd8580ced.
//
// Solidity: event ApproveStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value, uint256 withdrawableFrom)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchApproveStakingWithdrawal(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigApproveStakingWithdrawal, approvedWithdrawalId []*big.Int, to []common.Address) (event.Subscription, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "ApproveStakingWithdrawal", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigApproveStakingWithdrawal)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "ApproveStakingWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproveStakingWithdrawal is a log parse operation binding the contract event 0xdd0988b8c11a867814c87be652f93a86d35c6a235b92977e99d5394bd8580ced.
//
// Solidity: event ApproveStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value, uint256 withdrawableFrom)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseApproveStakingWithdrawal(log types.Log) (*CnStakingV3MultiSigApproveStakingWithdrawal, error) {
	event := new(CnStakingV3MultiSigApproveStakingWithdrawal)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "ApproveStakingWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigCancelApprovedStakingWithdrawalIterator is returned from FilterCancelApprovedStakingWithdrawal and is used to iterate over the raw logs and unpacked data for CancelApprovedStakingWithdrawal events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigCancelApprovedStakingWithdrawalIterator struct {
	Event *CnStakingV3MultiSigCancelApprovedStakingWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigCancelApprovedStakingWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigCancelApprovedStakingWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigCancelApprovedStakingWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigCancelApprovedStakingWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigCancelApprovedStakingWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigCancelApprovedStakingWithdrawal represents a CancelApprovedStakingWithdrawal event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigCancelApprovedStakingWithdrawal struct {
	ApprovedWithdrawalId *big.Int
	To                   common.Address
	Value                *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterCancelApprovedStakingWithdrawal is a free log retrieval operation binding the contract event 0xcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df.
//
// Solidity: event CancelApprovedStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterCancelApprovedStakingWithdrawal(opts *bind.FilterOpts, approvedWithdrawalId []*big.Int, to []common.Address) (*CnStakingV3MultiSigCancelApprovedStakingWithdrawalIterator, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "CancelApprovedStakingWithdrawal", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigCancelApprovedStakingWithdrawalIterator{contract: _CnStakingV3MultiSig.contract, event: "CancelApprovedStakingWithdrawal", logs: logs, sub: sub}, nil
}

// WatchCancelApprovedStakingWithdrawal is a free log subscription operation binding the contract event 0xcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df.
//
// Solidity: event CancelApprovedStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchCancelApprovedStakingWithdrawal(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigCancelApprovedStakingWithdrawal, approvedWithdrawalId []*big.Int, to []common.Address) (event.Subscription, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "CancelApprovedStakingWithdrawal", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigCancelApprovedStakingWithdrawal)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "CancelApprovedStakingWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancelApprovedStakingWithdrawal is a log parse operation binding the contract event 0xcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df.
//
// Solidity: event CancelApprovedStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseCancelApprovedStakingWithdrawal(log types.Log) (*CnStakingV3MultiSigCancelApprovedStakingWithdrawal, error) {
	event := new(CnStakingV3MultiSigCancelApprovedStakingWithdrawal)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "CancelApprovedStakingWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigCancelRequestIterator is returned from FilterCancelRequest and is used to iterate over the raw logs and unpacked data for CancelRequest events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigCancelRequestIterator struct {
	Event *CnStakingV3MultiSigCancelRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigCancelRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigCancelRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigCancelRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigCancelRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigCancelRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigCancelRequest represents a CancelRequest event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigCancelRequest struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCancelRequest is a free log retrieval operation binding the contract event 0x01011152a3b44da915f5831c5c63c3448b616dcc166c3543f289ed79645280c9.
//
// Solidity: event CancelRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterCancelRequest(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*CnStakingV3MultiSigCancelRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "CancelRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigCancelRequestIterator{contract: _CnStakingV3MultiSig.contract, event: "CancelRequest", logs: logs, sub: sub}, nil
}

// WatchCancelRequest is a free log subscription operation binding the contract event 0x01011152a3b44da915f5831c5c63c3448b616dcc166c3543f289ed79645280c9.
//
// Solidity: event CancelRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchCancelRequest(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigCancelRequest, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "CancelRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigCancelRequest)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "CancelRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancelRequest is a log parse operation binding the contract event 0x01011152a3b44da915f5831c5c63c3448b616dcc166c3543f289ed79645280c9.
//
// Solidity: event CancelRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseCancelRequest(log types.Log) (*CnStakingV3MultiSigCancelRequest, error) {
	event := new(CnStakingV3MultiSigCancelRequest)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "CancelRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigClearRequestIterator is returned from FilterClearRequest and is used to iterate over the raw logs and unpacked data for ClearRequest events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigClearRequestIterator struct {
	Event *CnStakingV3MultiSigClearRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigClearRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigClearRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigClearRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigClearRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigClearRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigClearRequest represents a ClearRequest event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigClearRequest struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterClearRequest is a free log retrieval operation binding the contract event 0x907527d30089abd16e30f06ddbbbc18480505176262f19bc16c1fbf9262f9c6b.
//
// Solidity: event ClearRequest()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterClearRequest(opts *bind.FilterOpts) (*CnStakingV3MultiSigClearRequestIterator, error) {

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "ClearRequest")
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigClearRequestIterator{contract: _CnStakingV3MultiSig.contract, event: "ClearRequest", logs: logs, sub: sub}, nil
}

// WatchClearRequest is a free log subscription operation binding the contract event 0x907527d30089abd16e30f06ddbbbc18480505176262f19bc16c1fbf9262f9c6b.
//
// Solidity: event ClearRequest()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchClearRequest(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigClearRequest) (event.Subscription, error) {

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "ClearRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigClearRequest)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "ClearRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClearRequest is a log parse operation binding the contract event 0x907527d30089abd16e30f06ddbbbc18480505176262f19bc16c1fbf9262f9c6b.
//
// Solidity: event ClearRequest()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseClearRequest(log types.Log) (*CnStakingV3MultiSigClearRequest, error) {
	event := new(CnStakingV3MultiSigClearRequest)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "ClearRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigCompleteReviewInitialConditionsIterator is returned from FilterCompleteReviewInitialConditions and is used to iterate over the raw logs and unpacked data for CompleteReviewInitialConditions events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigCompleteReviewInitialConditionsIterator struct {
	Event *CnStakingV3MultiSigCompleteReviewInitialConditions // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigCompleteReviewInitialConditionsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigCompleteReviewInitialConditions)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigCompleteReviewInitialConditions)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigCompleteReviewInitialConditionsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigCompleteReviewInitialConditionsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigCompleteReviewInitialConditions represents a CompleteReviewInitialConditions event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigCompleteReviewInitialConditions struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterCompleteReviewInitialConditions is a free log retrieval operation binding the contract event 0x244ff9a3d72b1dc5a4bce7f05fb615395f2a8c7ad6ea525d2bac9030f75d7a9b.
//
// Solidity: event CompleteReviewInitialConditions()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterCompleteReviewInitialConditions(opts *bind.FilterOpts) (*CnStakingV3MultiSigCompleteReviewInitialConditionsIterator, error) {

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "CompleteReviewInitialConditions")
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigCompleteReviewInitialConditionsIterator{contract: _CnStakingV3MultiSig.contract, event: "CompleteReviewInitialConditions", logs: logs, sub: sub}, nil
}

// WatchCompleteReviewInitialConditions is a free log subscription operation binding the contract event 0x244ff9a3d72b1dc5a4bce7f05fb615395f2a8c7ad6ea525d2bac9030f75d7a9b.
//
// Solidity: event CompleteReviewInitialConditions()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchCompleteReviewInitialConditions(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigCompleteReviewInitialConditions) (event.Subscription, error) {

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "CompleteReviewInitialConditions")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigCompleteReviewInitialConditions)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "CompleteReviewInitialConditions", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCompleteReviewInitialConditions is a log parse operation binding the contract event 0x244ff9a3d72b1dc5a4bce7f05fb615395f2a8c7ad6ea525d2bac9030f75d7a9b.
//
// Solidity: event CompleteReviewInitialConditions()
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseCompleteReviewInitialConditions(log types.Log) (*CnStakingV3MultiSigCompleteReviewInitialConditions, error) {
	event := new(CnStakingV3MultiSigCompleteReviewInitialConditions)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "CompleteReviewInitialConditions", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigConfirmRequestIterator is returned from FilterConfirmRequest and is used to iterate over the raw logs and unpacked data for ConfirmRequest events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigConfirmRequestIterator struct {
	Event *CnStakingV3MultiSigConfirmRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigConfirmRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigConfirmRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigConfirmRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigConfirmRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigConfirmRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigConfirmRequest represents a ConfirmRequest event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigConfirmRequest struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Confirmers []common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterConfirmRequest is a free log retrieval operation binding the contract event 0x658055f08cf63659025f616b2baf94baf8f4d2ee9c600c2ae722b4b7716cce46.
//
// Solidity: event ConfirmRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterConfirmRequest(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*CnStakingV3MultiSigConfirmRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "ConfirmRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigConfirmRequestIterator{contract: _CnStakingV3MultiSig.contract, event: "ConfirmRequest", logs: logs, sub: sub}, nil
}

// WatchConfirmRequest is a free log subscription operation binding the contract event 0x658055f08cf63659025f616b2baf94baf8f4d2ee9c600c2ae722b4b7716cce46.
//
// Solidity: event ConfirmRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchConfirmRequest(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigConfirmRequest, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "ConfirmRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigConfirmRequest)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "ConfirmRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfirmRequest is a log parse operation binding the contract event 0x658055f08cf63659025f616b2baf94baf8f4d2ee9c600c2ae722b4b7716cce46.
//
// Solidity: event ConfirmRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseConfirmRequest(log types.Log) (*CnStakingV3MultiSigConfirmRequest, error) {
	event := new(CnStakingV3MultiSigConfirmRequest)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "ConfirmRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigDelegateKaiaIterator is returned from FilterDelegateKaia and is used to iterate over the raw logs and unpacked data for DelegateKaia events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigDelegateKaiaIterator struct {
	Event *CnStakingV3MultiSigDelegateKaia // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigDelegateKaiaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigDelegateKaia)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigDelegateKaia)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigDelegateKaiaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigDelegateKaiaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigDelegateKaia represents a DelegateKaia event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigDelegateKaia struct {
	From  common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDelegateKaia is a free log retrieval operation binding the contract event 0x8ecbcbd560048c1f474847748189e8c43f1fdee737fbd34523b04b5a9bbdffaa.
//
// Solidity: event DelegateKaia(address indexed from, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterDelegateKaia(opts *bind.FilterOpts, from []common.Address) (*CnStakingV3MultiSigDelegateKaiaIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "DelegateKaia", fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigDelegateKaiaIterator{contract: _CnStakingV3MultiSig.contract, event: "DelegateKaia", logs: logs, sub: sub}, nil
}

// WatchDelegateKaia is a free log subscription operation binding the contract event 0x8ecbcbd560048c1f474847748189e8c43f1fdee737fbd34523b04b5a9bbdffaa.
//
// Solidity: event DelegateKaia(address indexed from, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchDelegateKaia(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigDelegateKaia, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "DelegateKaia", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigDelegateKaia)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "DelegateKaia", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateKaia is a log parse operation binding the contract event 0x8ecbcbd560048c1f474847748189e8c43f1fdee737fbd34523b04b5a9bbdffaa.
//
// Solidity: event DelegateKaia(address indexed from, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseDelegateKaia(log types.Log) (*CnStakingV3MultiSigDelegateKaia, error) {
	event := new(CnStakingV3MultiSigDelegateKaia)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "DelegateKaia", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigDeleteAdminIterator is returned from FilterDeleteAdmin and is used to iterate over the raw logs and unpacked data for DeleteAdmin events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigDeleteAdminIterator struct {
	Event *CnStakingV3MultiSigDeleteAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigDeleteAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigDeleteAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigDeleteAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigDeleteAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigDeleteAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigDeleteAdmin represents a DeleteAdmin event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigDeleteAdmin struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDeleteAdmin is a free log retrieval operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: event DeleteAdmin(address indexed admin)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterDeleteAdmin(opts *bind.FilterOpts, admin []common.Address) (*CnStakingV3MultiSigDeleteAdminIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "DeleteAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigDeleteAdminIterator{contract: _CnStakingV3MultiSig.contract, event: "DeleteAdmin", logs: logs, sub: sub}, nil
}

// WatchDeleteAdmin is a free log subscription operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: event DeleteAdmin(address indexed admin)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchDeleteAdmin(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigDeleteAdmin, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "DeleteAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigDeleteAdmin)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "DeleteAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeleteAdmin is a log parse operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: event DeleteAdmin(address indexed admin)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseDeleteAdmin(log types.Log) (*CnStakingV3MultiSigDeleteAdmin, error) {
	event := new(CnStakingV3MultiSigDeleteAdmin)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "DeleteAdmin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigDeployCnStakingV3Iterator is returned from FilterDeployCnStakingV3 and is used to iterate over the raw logs and unpacked data for DeployCnStakingV3 events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigDeployCnStakingV3Iterator struct {
	Event *CnStakingV3MultiSigDeployCnStakingV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigDeployCnStakingV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigDeployCnStakingV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigDeployCnStakingV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigDeployCnStakingV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigDeployCnStakingV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigDeployCnStakingV3 represents a DeployCnStakingV3 event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigDeployCnStakingV3 struct {
	ContractType  string
	NodeId        common.Address
	RewardAddress common.Address
	UnlockTime    []*big.Int
	UnlockAmount  []*big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterDeployCnStakingV3 is a free log retrieval operation binding the contract event 0x8ceb5a03da525381440f64ae9f54fa4cb32a6299f0521f5261edd8839a0f3265.
//
// Solidity: event DeployCnStakingV3(string contractType, address nodeId, address rewardAddress, uint256[] unlockTime, uint256[] unlockAmount)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterDeployCnStakingV3(opts *bind.FilterOpts) (*CnStakingV3MultiSigDeployCnStakingV3Iterator, error) {

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "DeployCnStakingV3")
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigDeployCnStakingV3Iterator{contract: _CnStakingV3MultiSig.contract, event: "DeployCnStakingV3", logs: logs, sub: sub}, nil
}

// WatchDeployCnStakingV3 is a free log subscription operation binding the contract event 0x8ceb5a03da525381440f64ae9f54fa4cb32a6299f0521f5261edd8839a0f3265.
//
// Solidity: event DeployCnStakingV3(string contractType, address nodeId, address rewardAddress, uint256[] unlockTime, uint256[] unlockAmount)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchDeployCnStakingV3(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigDeployCnStakingV3) (event.Subscription, error) {

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "DeployCnStakingV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigDeployCnStakingV3)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "DeployCnStakingV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployCnStakingV3 is a log parse operation binding the contract event 0x8ceb5a03da525381440f64ae9f54fa4cb32a6299f0521f5261edd8839a0f3265.
//
// Solidity: event DeployCnStakingV3(string contractType, address nodeId, address rewardAddress, uint256[] unlockTime, uint256[] unlockAmount)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseDeployCnStakingV3(log types.Log) (*CnStakingV3MultiSigDeployCnStakingV3, error) {
	event := new(CnStakingV3MultiSigDeployCnStakingV3)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "DeployCnStakingV3", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigDeployCnStakingV3MultiSigIterator is returned from FilterDeployCnStakingV3MultiSig and is used to iterate over the raw logs and unpacked data for DeployCnStakingV3MultiSig events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigDeployCnStakingV3MultiSigIterator struct {
	Event *CnStakingV3MultiSigDeployCnStakingV3MultiSig // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigDeployCnStakingV3MultiSigIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigDeployCnStakingV3MultiSig)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigDeployCnStakingV3MultiSig)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigDeployCnStakingV3MultiSigIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigDeployCnStakingV3MultiSigIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigDeployCnStakingV3MultiSig represents a DeployCnStakingV3MultiSig event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigDeployCnStakingV3MultiSig struct {
	ContractType      string
	ContractValidator common.Address
	CnAdminList       []common.Address
	Requirement       *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterDeployCnStakingV3MultiSig is a free log retrieval operation binding the contract event 0x66f82b55f642c6d1ad96892e17a269b2f7f5e3ec3d46acf2a9d239b43fe035e3.
//
// Solidity: event DeployCnStakingV3MultiSig(string contractType, address contractValidator, address[] cnAdminList, uint256 requirement)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterDeployCnStakingV3MultiSig(opts *bind.FilterOpts) (*CnStakingV3MultiSigDeployCnStakingV3MultiSigIterator, error) {

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "DeployCnStakingV3MultiSig")
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigDeployCnStakingV3MultiSigIterator{contract: _CnStakingV3MultiSig.contract, event: "DeployCnStakingV3MultiSig", logs: logs, sub: sub}, nil
}

// WatchDeployCnStakingV3MultiSig is a free log subscription operation binding the contract event 0x66f82b55f642c6d1ad96892e17a269b2f7f5e3ec3d46acf2a9d239b43fe035e3.
//
// Solidity: event DeployCnStakingV3MultiSig(string contractType, address contractValidator, address[] cnAdminList, uint256 requirement)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchDeployCnStakingV3MultiSig(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigDeployCnStakingV3MultiSig) (event.Subscription, error) {

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "DeployCnStakingV3MultiSig")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigDeployCnStakingV3MultiSig)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "DeployCnStakingV3MultiSig", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployCnStakingV3MultiSig is a log parse operation binding the contract event 0x66f82b55f642c6d1ad96892e17a269b2f7f5e3ec3d46acf2a9d239b43fe035e3.
//
// Solidity: event DeployCnStakingV3MultiSig(string contractType, address contractValidator, address[] cnAdminList, uint256 requirement)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseDeployCnStakingV3MultiSig(log types.Log) (*CnStakingV3MultiSigDeployCnStakingV3MultiSig, error) {
	event := new(CnStakingV3MultiSigDeployCnStakingV3MultiSig)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "DeployCnStakingV3MultiSig", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigDepositLockupStakingAndInitIterator is returned from FilterDepositLockupStakingAndInit and is used to iterate over the raw logs and unpacked data for DepositLockupStakingAndInit events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigDepositLockupStakingAndInitIterator struct {
	Event *CnStakingV3MultiSigDepositLockupStakingAndInit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigDepositLockupStakingAndInitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigDepositLockupStakingAndInit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigDepositLockupStakingAndInit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigDepositLockupStakingAndInitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigDepositLockupStakingAndInitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigDepositLockupStakingAndInit represents a DepositLockupStakingAndInit event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigDepositLockupStakingAndInit struct {
	From  common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDepositLockupStakingAndInit is a free log retrieval operation binding the contract event 0x2b3c5e8e58d7d1e42ccd071c6f749d53f9ee506020a81fad9ff98140ccccde69.
//
// Solidity: event DepositLockupStakingAndInit(address indexed from, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterDepositLockupStakingAndInit(opts *bind.FilterOpts, from []common.Address) (*CnStakingV3MultiSigDepositLockupStakingAndInitIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "DepositLockupStakingAndInit", fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigDepositLockupStakingAndInitIterator{contract: _CnStakingV3MultiSig.contract, event: "DepositLockupStakingAndInit", logs: logs, sub: sub}, nil
}

// WatchDepositLockupStakingAndInit is a free log subscription operation binding the contract event 0x2b3c5e8e58d7d1e42ccd071c6f749d53f9ee506020a81fad9ff98140ccccde69.
//
// Solidity: event DepositLockupStakingAndInit(address indexed from, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchDepositLockupStakingAndInit(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigDepositLockupStakingAndInit, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "DepositLockupStakingAndInit", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigDepositLockupStakingAndInit)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "DepositLockupStakingAndInit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositLockupStakingAndInit is a log parse operation binding the contract event 0x2b3c5e8e58d7d1e42ccd071c6f749d53f9ee506020a81fad9ff98140ccccde69.
//
// Solidity: event DepositLockupStakingAndInit(address indexed from, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseDepositLockupStakingAndInit(log types.Log) (*CnStakingV3MultiSigDepositLockupStakingAndInit, error) {
	event := new(CnStakingV3MultiSigDepositLockupStakingAndInit)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "DepositLockupStakingAndInit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigExecuteRequestFailureIterator is returned from FilterExecuteRequestFailure and is used to iterate over the raw logs and unpacked data for ExecuteRequestFailure events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigExecuteRequestFailureIterator struct {
	Event *CnStakingV3MultiSigExecuteRequestFailure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigExecuteRequestFailureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigExecuteRequestFailure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigExecuteRequestFailure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigExecuteRequestFailureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigExecuteRequestFailureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigExecuteRequestFailure represents a ExecuteRequestFailure event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigExecuteRequestFailure struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterExecuteRequestFailure is a free log retrieval operation binding the contract event 0xbd3ad69fc5a8e233118506c67ebe892bef493fcf2eb9e6986f6d6c3f2adf0e8a.
//
// Solidity: event ExecuteRequestFailure(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterExecuteRequestFailure(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*CnStakingV3MultiSigExecuteRequestFailureIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "ExecuteRequestFailure", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigExecuteRequestFailureIterator{contract: _CnStakingV3MultiSig.contract, event: "ExecuteRequestFailure", logs: logs, sub: sub}, nil
}

// WatchExecuteRequestFailure is a free log subscription operation binding the contract event 0xbd3ad69fc5a8e233118506c67ebe892bef493fcf2eb9e6986f6d6c3f2adf0e8a.
//
// Solidity: event ExecuteRequestFailure(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchExecuteRequestFailure(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigExecuteRequestFailure, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "ExecuteRequestFailure", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigExecuteRequestFailure)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "ExecuteRequestFailure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecuteRequestFailure is a log parse operation binding the contract event 0xbd3ad69fc5a8e233118506c67ebe892bef493fcf2eb9e6986f6d6c3f2adf0e8a.
//
// Solidity: event ExecuteRequestFailure(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseExecuteRequestFailure(log types.Log) (*CnStakingV3MultiSigExecuteRequestFailure, error) {
	event := new(CnStakingV3MultiSigExecuteRequestFailure)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "ExecuteRequestFailure", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigExecuteRequestSuccessIterator is returned from FilterExecuteRequestSuccess and is used to iterate over the raw logs and unpacked data for ExecuteRequestSuccess events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigExecuteRequestSuccessIterator struct {
	Event *CnStakingV3MultiSigExecuteRequestSuccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigExecuteRequestSuccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigExecuteRequestSuccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigExecuteRequestSuccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigExecuteRequestSuccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigExecuteRequestSuccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigExecuteRequestSuccess represents a ExecuteRequestSuccess event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigExecuteRequestSuccess struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterExecuteRequestSuccess is a free log retrieval operation binding the contract event 0x48f16d9e6ab6f19798a7c7f307ecea3def480049fa0a09280e2a3fa45aaa8426.
//
// Solidity: event ExecuteRequestSuccess(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterExecuteRequestSuccess(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*CnStakingV3MultiSigExecuteRequestSuccessIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "ExecuteRequestSuccess", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigExecuteRequestSuccessIterator{contract: _CnStakingV3MultiSig.contract, event: "ExecuteRequestSuccess", logs: logs, sub: sub}, nil
}

// WatchExecuteRequestSuccess is a free log subscription operation binding the contract event 0x48f16d9e6ab6f19798a7c7f307ecea3def480049fa0a09280e2a3fa45aaa8426.
//
// Solidity: event ExecuteRequestSuccess(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchExecuteRequestSuccess(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigExecuteRequestSuccess, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "ExecuteRequestSuccess", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigExecuteRequestSuccess)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "ExecuteRequestSuccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecuteRequestSuccess is a log parse operation binding the contract event 0x48f16d9e6ab6f19798a7c7f307ecea3def480049fa0a09280e2a3fa45aaa8426.
//
// Solidity: event ExecuteRequestSuccess(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseExecuteRequestSuccess(log types.Log) (*CnStakingV3MultiSigExecuteRequestSuccess, error) {
	event := new(CnStakingV3MultiSigExecuteRequestSuccess)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "ExecuteRequestSuccess", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigHandleRedelegationIterator is returned from FilterHandleRedelegation and is used to iterate over the raw logs and unpacked data for HandleRedelegation events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigHandleRedelegationIterator struct {
	Event *CnStakingV3MultiSigHandleRedelegation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigHandleRedelegationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigHandleRedelegation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigHandleRedelegation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigHandleRedelegationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigHandleRedelegationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigHandleRedelegation represents a HandleRedelegation event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigHandleRedelegation struct {
	User              common.Address
	PrevCnStakingV3   common.Address
	TargetCnStakingV3 common.Address
	Value             *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterHandleRedelegation is a free log retrieval operation binding the contract event 0xcbbd772ac9792b90fb77aa3194b0279ec4dbea1880ecc3674ecd2f4bf39b0c90.
//
// Solidity: event HandleRedelegation(address indexed user, address indexed prevCnStakingV3, address indexed targetCnStakingV3, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterHandleRedelegation(opts *bind.FilterOpts, user []common.Address, prevCnStakingV3 []common.Address, targetCnStakingV3 []common.Address) (*CnStakingV3MultiSigHandleRedelegationIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var prevCnStakingV3Rule []interface{}
	for _, prevCnStakingV3Item := range prevCnStakingV3 {
		prevCnStakingV3Rule = append(prevCnStakingV3Rule, prevCnStakingV3Item)
	}
	var targetCnStakingV3Rule []interface{}
	for _, targetCnStakingV3Item := range targetCnStakingV3 {
		targetCnStakingV3Rule = append(targetCnStakingV3Rule, targetCnStakingV3Item)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "HandleRedelegation", userRule, prevCnStakingV3Rule, targetCnStakingV3Rule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigHandleRedelegationIterator{contract: _CnStakingV3MultiSig.contract, event: "HandleRedelegation", logs: logs, sub: sub}, nil
}

// WatchHandleRedelegation is a free log subscription operation binding the contract event 0xcbbd772ac9792b90fb77aa3194b0279ec4dbea1880ecc3674ecd2f4bf39b0c90.
//
// Solidity: event HandleRedelegation(address indexed user, address indexed prevCnStakingV3, address indexed targetCnStakingV3, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchHandleRedelegation(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigHandleRedelegation, user []common.Address, prevCnStakingV3 []common.Address, targetCnStakingV3 []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var prevCnStakingV3Rule []interface{}
	for _, prevCnStakingV3Item := range prevCnStakingV3 {
		prevCnStakingV3Rule = append(prevCnStakingV3Rule, prevCnStakingV3Item)
	}
	var targetCnStakingV3Rule []interface{}
	for _, targetCnStakingV3Item := range targetCnStakingV3 {
		targetCnStakingV3Rule = append(targetCnStakingV3Rule, targetCnStakingV3Item)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "HandleRedelegation", userRule, prevCnStakingV3Rule, targetCnStakingV3Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigHandleRedelegation)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "HandleRedelegation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHandleRedelegation is a log parse operation binding the contract event 0xcbbd772ac9792b90fb77aa3194b0279ec4dbea1880ecc3674ecd2f4bf39b0c90.
//
// Solidity: event HandleRedelegation(address indexed user, address indexed prevCnStakingV3, address indexed targetCnStakingV3, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseHandleRedelegation(log types.Log) (*CnStakingV3MultiSigHandleRedelegation, error) {
	event := new(CnStakingV3MultiSigHandleRedelegation)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "HandleRedelegation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigRedelegationIterator is returned from FilterRedelegation and is used to iterate over the raw logs and unpacked data for Redelegation events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigRedelegationIterator struct {
	Event *CnStakingV3MultiSigRedelegation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigRedelegationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigRedelegation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigRedelegation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigRedelegationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigRedelegationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigRedelegation represents a Redelegation event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigRedelegation struct {
	User              common.Address
	TargetCnStakingV3 common.Address
	Value             *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRedelegation is a free log retrieval operation binding the contract event 0x4830c21a6eb4b2b3af6c4d24cfbd78ce437d5b690aac56ceec54df1d4d24e1a0.
//
// Solidity: event Redelegation(address indexed user, address indexed targetCnStakingV3, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterRedelegation(opts *bind.FilterOpts, user []common.Address, targetCnStakingV3 []common.Address) (*CnStakingV3MultiSigRedelegationIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var targetCnStakingV3Rule []interface{}
	for _, targetCnStakingV3Item := range targetCnStakingV3 {
		targetCnStakingV3Rule = append(targetCnStakingV3Rule, targetCnStakingV3Item)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "Redelegation", userRule, targetCnStakingV3Rule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigRedelegationIterator{contract: _CnStakingV3MultiSig.contract, event: "Redelegation", logs: logs, sub: sub}, nil
}

// WatchRedelegation is a free log subscription operation binding the contract event 0x4830c21a6eb4b2b3af6c4d24cfbd78ce437d5b690aac56ceec54df1d4d24e1a0.
//
// Solidity: event Redelegation(address indexed user, address indexed targetCnStakingV3, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchRedelegation(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigRedelegation, user []common.Address, targetCnStakingV3 []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var targetCnStakingV3Rule []interface{}
	for _, targetCnStakingV3Item := range targetCnStakingV3 {
		targetCnStakingV3Rule = append(targetCnStakingV3Rule, targetCnStakingV3Item)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "Redelegation", userRule, targetCnStakingV3Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigRedelegation)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "Redelegation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedelegation is a log parse operation binding the contract event 0x4830c21a6eb4b2b3af6c4d24cfbd78ce437d5b690aac56ceec54df1d4d24e1a0.
//
// Solidity: event Redelegation(address indexed user, address indexed targetCnStakingV3, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseRedelegation(log types.Log) (*CnStakingV3MultiSigRedelegation, error) {
	event := new(CnStakingV3MultiSigRedelegation)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "Redelegation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigReviewInitialConditionsIterator is returned from FilterReviewInitialConditions and is used to iterate over the raw logs and unpacked data for ReviewInitialConditions events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigReviewInitialConditionsIterator struct {
	Event *CnStakingV3MultiSigReviewInitialConditions // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigReviewInitialConditionsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigReviewInitialConditions)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigReviewInitialConditions)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigReviewInitialConditionsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigReviewInitialConditionsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigReviewInitialConditions represents a ReviewInitialConditions event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigReviewInitialConditions struct {
	From common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterReviewInitialConditions is a free log retrieval operation binding the contract event 0x65d287f4118b03f8cc979b433fd0b2246074200dd5da70c9daf204aaa0da1a2c.
//
// Solidity: event ReviewInitialConditions(address indexed from)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterReviewInitialConditions(opts *bind.FilterOpts, from []common.Address) (*CnStakingV3MultiSigReviewInitialConditionsIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "ReviewInitialConditions", fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigReviewInitialConditionsIterator{contract: _CnStakingV3MultiSig.contract, event: "ReviewInitialConditions", logs: logs, sub: sub}, nil
}

// WatchReviewInitialConditions is a free log subscription operation binding the contract event 0x65d287f4118b03f8cc979b433fd0b2246074200dd5da70c9daf204aaa0da1a2c.
//
// Solidity: event ReviewInitialConditions(address indexed from)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchReviewInitialConditions(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigReviewInitialConditions, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "ReviewInitialConditions", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigReviewInitialConditions)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "ReviewInitialConditions", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReviewInitialConditions is a log parse operation binding the contract event 0x65d287f4118b03f8cc979b433fd0b2246074200dd5da70c9daf204aaa0da1a2c.
//
// Solidity: event ReviewInitialConditions(address indexed from)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseReviewInitialConditions(log types.Log) (*CnStakingV3MultiSigReviewInitialConditions, error) {
	event := new(CnStakingV3MultiSigReviewInitialConditions)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "ReviewInitialConditions", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigRevokeConfirmationIterator is returned from FilterRevokeConfirmation and is used to iterate over the raw logs and unpacked data for RevokeConfirmation events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigRevokeConfirmationIterator struct {
	Event *CnStakingV3MultiSigRevokeConfirmation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigRevokeConfirmationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigRevokeConfirmation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigRevokeConfirmation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigRevokeConfirmationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigRevokeConfirmationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigRevokeConfirmation represents a RevokeConfirmation event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigRevokeConfirmation struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Confirmers []common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRevokeConfirmation is a free log retrieval operation binding the contract event 0xed38e5621fac2aa23736077187104abfe9c8aa1c5b4eb73015d8cfdf403fe070.
//
// Solidity: event RevokeConfirmation(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterRevokeConfirmation(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*CnStakingV3MultiSigRevokeConfirmationIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "RevokeConfirmation", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigRevokeConfirmationIterator{contract: _CnStakingV3MultiSig.contract, event: "RevokeConfirmation", logs: logs, sub: sub}, nil
}

// WatchRevokeConfirmation is a free log subscription operation binding the contract event 0xed38e5621fac2aa23736077187104abfe9c8aa1c5b4eb73015d8cfdf403fe070.
//
// Solidity: event RevokeConfirmation(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchRevokeConfirmation(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigRevokeConfirmation, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "RevokeConfirmation", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigRevokeConfirmation)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "RevokeConfirmation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevokeConfirmation is a log parse operation binding the contract event 0xed38e5621fac2aa23736077187104abfe9c8aa1c5b4eb73015d8cfdf403fe070.
//
// Solidity: event RevokeConfirmation(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseRevokeConfirmation(log types.Log) (*CnStakingV3MultiSigRevokeConfirmation, error) {
	event := new(CnStakingV3MultiSigRevokeConfirmation)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "RevokeConfirmation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigRoleAdminChangedIterator struct {
	Event *CnStakingV3MultiSigRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigRoleAdminChanged represents a RoleAdminChanged event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*CnStakingV3MultiSigRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigRoleAdminChangedIterator{contract: _CnStakingV3MultiSig.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigRoleAdminChanged)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseRoleAdminChanged(log types.Log) (*CnStakingV3MultiSigRoleAdminChanged, error) {
	event := new(CnStakingV3MultiSigRoleAdminChanged)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigRoleGrantedIterator struct {
	Event *CnStakingV3MultiSigRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigRoleGranted represents a RoleGranted event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CnStakingV3MultiSigRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigRoleGrantedIterator{contract: _CnStakingV3MultiSig.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigRoleGranted)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseRoleGranted(log types.Log) (*CnStakingV3MultiSigRoleGranted, error) {
	event := new(CnStakingV3MultiSigRoleGranted)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigRoleRevokedIterator struct {
	Event *CnStakingV3MultiSigRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigRoleRevoked represents a RoleRevoked event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CnStakingV3MultiSigRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigRoleRevokedIterator{contract: _CnStakingV3MultiSig.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigRoleRevoked)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseRoleRevoked(log types.Log) (*CnStakingV3MultiSigRoleRevoked, error) {
	event := new(CnStakingV3MultiSigRoleRevoked)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigSetPublicDelegationIterator is returned from FilterSetPublicDelegation and is used to iterate over the raw logs and unpacked data for SetPublicDelegation events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigSetPublicDelegationIterator struct {
	Event *CnStakingV3MultiSigSetPublicDelegation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigSetPublicDelegationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigSetPublicDelegation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigSetPublicDelegation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigSetPublicDelegationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigSetPublicDelegationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigSetPublicDelegation represents a SetPublicDelegation event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigSetPublicDelegation struct {
	From             common.Address
	PublicDelegation common.Address
	RewardAddress    common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterSetPublicDelegation is a free log retrieval operation binding the contract event 0x669ea85a3c8fdb578f28c81d130bb3cf68e5f3845d178688ae84abdba59c9030.
//
// Solidity: event SetPublicDelegation(address indexed from, address publicDelegation, address rewardAddress)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterSetPublicDelegation(opts *bind.FilterOpts, from []common.Address) (*CnStakingV3MultiSigSetPublicDelegationIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "SetPublicDelegation", fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigSetPublicDelegationIterator{contract: _CnStakingV3MultiSig.contract, event: "SetPublicDelegation", logs: logs, sub: sub}, nil
}

// WatchSetPublicDelegation is a free log subscription operation binding the contract event 0x669ea85a3c8fdb578f28c81d130bb3cf68e5f3845d178688ae84abdba59c9030.
//
// Solidity: event SetPublicDelegation(address indexed from, address publicDelegation, address rewardAddress)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchSetPublicDelegation(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigSetPublicDelegation, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "SetPublicDelegation", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigSetPublicDelegation)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "SetPublicDelegation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetPublicDelegation is a log parse operation binding the contract event 0x669ea85a3c8fdb578f28c81d130bb3cf68e5f3845d178688ae84abdba59c9030.
//
// Solidity: event SetPublicDelegation(address indexed from, address publicDelegation, address rewardAddress)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseSetPublicDelegation(log types.Log) (*CnStakingV3MultiSigSetPublicDelegation, error) {
	event := new(CnStakingV3MultiSigSetPublicDelegation)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "SetPublicDelegation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigSubmitRequestIterator is returned from FilterSubmitRequest and is used to iterate over the raw logs and unpacked data for SubmitRequest events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigSubmitRequestIterator struct {
	Event *CnStakingV3MultiSigSubmitRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigSubmitRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigSubmitRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigSubmitRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigSubmitRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigSubmitRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigSubmitRequest represents a SubmitRequest event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigSubmitRequest struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSubmitRequest is a free log retrieval operation binding the contract event 0xdd9ce6d431d4ac3e8bea81bc2d7760b97d30c4e54252d8c8c59054849b8f61b5.
//
// Solidity: event SubmitRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterSubmitRequest(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*CnStakingV3MultiSigSubmitRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "SubmitRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigSubmitRequestIterator{contract: _CnStakingV3MultiSig.contract, event: "SubmitRequest", logs: logs, sub: sub}, nil
}

// WatchSubmitRequest is a free log subscription operation binding the contract event 0xdd9ce6d431d4ac3e8bea81bc2d7760b97d30c4e54252d8c8c59054849b8f61b5.
//
// Solidity: event SubmitRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchSubmitRequest(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigSubmitRequest, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "SubmitRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigSubmitRequest)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "SubmitRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmitRequest is a log parse operation binding the contract event 0xdd9ce6d431d4ac3e8bea81bc2d7760b97d30c4e54252d8c8c59054849b8f61b5.
//
// Solidity: event SubmitRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseSubmitRequest(log types.Log) (*CnStakingV3MultiSigSubmitRequest, error) {
	event := new(CnStakingV3MultiSigSubmitRequest)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "SubmitRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigToggleRedelegationIterator is returned from FilterToggleRedelegation and is used to iterate over the raw logs and unpacked data for ToggleRedelegation events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigToggleRedelegationIterator struct {
	Event *CnStakingV3MultiSigToggleRedelegation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigToggleRedelegationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigToggleRedelegation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigToggleRedelegation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigToggleRedelegationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigToggleRedelegationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigToggleRedelegation represents a ToggleRedelegation event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigToggleRedelegation struct {
	IsRedelegationEnabled bool
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterToggleRedelegation is a free log retrieval operation binding the contract event 0x02efa9113845c402ffbbc237400eeba75de99c23f054459573f88caa5a941898.
//
// Solidity: event ToggleRedelegation(bool isRedelegationEnabled)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterToggleRedelegation(opts *bind.FilterOpts) (*CnStakingV3MultiSigToggleRedelegationIterator, error) {

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "ToggleRedelegation")
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigToggleRedelegationIterator{contract: _CnStakingV3MultiSig.contract, event: "ToggleRedelegation", logs: logs, sub: sub}, nil
}

// WatchToggleRedelegation is a free log subscription operation binding the contract event 0x02efa9113845c402ffbbc237400eeba75de99c23f054459573f88caa5a941898.
//
// Solidity: event ToggleRedelegation(bool isRedelegationEnabled)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchToggleRedelegation(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigToggleRedelegation) (event.Subscription, error) {

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "ToggleRedelegation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigToggleRedelegation)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "ToggleRedelegation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseToggleRedelegation is a log parse operation binding the contract event 0x02efa9113845c402ffbbc237400eeba75de99c23f054459573f88caa5a941898.
//
// Solidity: event ToggleRedelegation(bool isRedelegationEnabled)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseToggleRedelegation(log types.Log) (*CnStakingV3MultiSigToggleRedelegation, error) {
	event := new(CnStakingV3MultiSigToggleRedelegation)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "ToggleRedelegation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigUpdateGCIdIterator is returned from FilterUpdateGCId and is used to iterate over the raw logs and unpacked data for UpdateGCId events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigUpdateGCIdIterator struct {
	Event *CnStakingV3MultiSigUpdateGCId // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigUpdateGCIdIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigUpdateGCId)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigUpdateGCId)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigUpdateGCIdIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigUpdateGCIdIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigUpdateGCId represents a UpdateGCId event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigUpdateGCId struct {
	GcId *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterUpdateGCId is a free log retrieval operation binding the contract event 0x469cb2f3ce5d5e879269af625b54571651feb0ede6e83ee89b9c888648af514f.
//
// Solidity: event UpdateGCId(uint256 indexed gcId)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterUpdateGCId(opts *bind.FilterOpts, gcId []*big.Int) (*CnStakingV3MultiSigUpdateGCIdIterator, error) {

	var gcIdRule []interface{}
	for _, gcIdItem := range gcId {
		gcIdRule = append(gcIdRule, gcIdItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "UpdateGCId", gcIdRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigUpdateGCIdIterator{contract: _CnStakingV3MultiSig.contract, event: "UpdateGCId", logs: logs, sub: sub}, nil
}

// WatchUpdateGCId is a free log subscription operation binding the contract event 0x469cb2f3ce5d5e879269af625b54571651feb0ede6e83ee89b9c888648af514f.
//
// Solidity: event UpdateGCId(uint256 indexed gcId)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchUpdateGCId(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigUpdateGCId, gcId []*big.Int) (event.Subscription, error) {

	var gcIdRule []interface{}
	for _, gcIdItem := range gcId {
		gcIdRule = append(gcIdRule, gcIdItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "UpdateGCId", gcIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigUpdateGCId)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "UpdateGCId", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateGCId is a log parse operation binding the contract event 0x469cb2f3ce5d5e879269af625b54571651feb0ede6e83ee89b9c888648af514f.
//
// Solidity: event UpdateGCId(uint256 indexed gcId)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseUpdateGCId(log types.Log) (*CnStakingV3MultiSigUpdateGCId, error) {
	event := new(CnStakingV3MultiSigUpdateGCId)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "UpdateGCId", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigUpdateRequirementIterator is returned from FilterUpdateRequirement and is used to iterate over the raw logs and unpacked data for UpdateRequirement events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigUpdateRequirementIterator struct {
	Event *CnStakingV3MultiSigUpdateRequirement // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigUpdateRequirementIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigUpdateRequirement)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigUpdateRequirement)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigUpdateRequirementIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigUpdateRequirementIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigUpdateRequirement represents a UpdateRequirement event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigUpdateRequirement struct {
	Requirement *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequirement is a free log retrieval operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: event UpdateRequirement(uint256 requirement)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterUpdateRequirement(opts *bind.FilterOpts) (*CnStakingV3MultiSigUpdateRequirementIterator, error) {

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "UpdateRequirement")
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigUpdateRequirementIterator{contract: _CnStakingV3MultiSig.contract, event: "UpdateRequirement", logs: logs, sub: sub}, nil
}

// WatchUpdateRequirement is a free log subscription operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: event UpdateRequirement(uint256 requirement)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchUpdateRequirement(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigUpdateRequirement) (event.Subscription, error) {

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "UpdateRequirement")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigUpdateRequirement)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "UpdateRequirement", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequirement is a log parse operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: event UpdateRequirement(uint256 requirement)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseUpdateRequirement(log types.Log) (*CnStakingV3MultiSigUpdateRequirement, error) {
	event := new(CnStakingV3MultiSigUpdateRequirement)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "UpdateRequirement", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigUpdateRewardAddressIterator is returned from FilterUpdateRewardAddress and is used to iterate over the raw logs and unpacked data for UpdateRewardAddress events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigUpdateRewardAddressIterator struct {
	Event *CnStakingV3MultiSigUpdateRewardAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigUpdateRewardAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigUpdateRewardAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigUpdateRewardAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigUpdateRewardAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigUpdateRewardAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigUpdateRewardAddress represents a UpdateRewardAddress event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigUpdateRewardAddress struct {
	RewardAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterUpdateRewardAddress is a free log retrieval operation binding the contract event 0xbe1849831e6775a2022006aeebcc00f70d10bc4202c8187e215ad9e9911f2b06.
//
// Solidity: event UpdateRewardAddress(address indexed rewardAddress)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterUpdateRewardAddress(opts *bind.FilterOpts, rewardAddress []common.Address) (*CnStakingV3MultiSigUpdateRewardAddressIterator, error) {

	var rewardAddressRule []interface{}
	for _, rewardAddressItem := range rewardAddress {
		rewardAddressRule = append(rewardAddressRule, rewardAddressItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "UpdateRewardAddress", rewardAddressRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigUpdateRewardAddressIterator{contract: _CnStakingV3MultiSig.contract, event: "UpdateRewardAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateRewardAddress is a free log subscription operation binding the contract event 0xbe1849831e6775a2022006aeebcc00f70d10bc4202c8187e215ad9e9911f2b06.
//
// Solidity: event UpdateRewardAddress(address indexed rewardAddress)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchUpdateRewardAddress(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigUpdateRewardAddress, rewardAddress []common.Address) (event.Subscription, error) {

	var rewardAddressRule []interface{}
	for _, rewardAddressItem := range rewardAddress {
		rewardAddressRule = append(rewardAddressRule, rewardAddressItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "UpdateRewardAddress", rewardAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigUpdateRewardAddress)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "UpdateRewardAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRewardAddress is a log parse operation binding the contract event 0xbe1849831e6775a2022006aeebcc00f70d10bc4202c8187e215ad9e9911f2b06.
//
// Solidity: event UpdateRewardAddress(address indexed rewardAddress)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseUpdateRewardAddress(log types.Log) (*CnStakingV3MultiSigUpdateRewardAddress, error) {
	event := new(CnStakingV3MultiSigUpdateRewardAddress)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "UpdateRewardAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigUpdateStakingTrackerIterator is returned from FilterUpdateStakingTracker and is used to iterate over the raw logs and unpacked data for UpdateStakingTracker events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigUpdateStakingTrackerIterator struct {
	Event *CnStakingV3MultiSigUpdateStakingTracker // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigUpdateStakingTrackerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigUpdateStakingTracker)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigUpdateStakingTracker)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigUpdateStakingTrackerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigUpdateStakingTrackerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigUpdateStakingTracker represents a UpdateStakingTracker event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigUpdateStakingTracker struct {
	StakingTracker common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpdateStakingTracker is a free log retrieval operation binding the contract event 0xef25e066ac14a10491ae1ac89a8247282158e169968aaccbceb257d0878bdfd0.
//
// Solidity: event UpdateStakingTracker(address indexed stakingTracker)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterUpdateStakingTracker(opts *bind.FilterOpts, stakingTracker []common.Address) (*CnStakingV3MultiSigUpdateStakingTrackerIterator, error) {

	var stakingTrackerRule []interface{}
	for _, stakingTrackerItem := range stakingTracker {
		stakingTrackerRule = append(stakingTrackerRule, stakingTrackerItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "UpdateStakingTracker", stakingTrackerRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigUpdateStakingTrackerIterator{contract: _CnStakingV3MultiSig.contract, event: "UpdateStakingTracker", logs: logs, sub: sub}, nil
}

// WatchUpdateStakingTracker is a free log subscription operation binding the contract event 0xef25e066ac14a10491ae1ac89a8247282158e169968aaccbceb257d0878bdfd0.
//
// Solidity: event UpdateStakingTracker(address indexed stakingTracker)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchUpdateStakingTracker(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigUpdateStakingTracker, stakingTracker []common.Address) (event.Subscription, error) {

	var stakingTrackerRule []interface{}
	for _, stakingTrackerItem := range stakingTracker {
		stakingTrackerRule = append(stakingTrackerRule, stakingTrackerItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "UpdateStakingTracker", stakingTrackerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigUpdateStakingTracker)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "UpdateStakingTracker", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateStakingTracker is a log parse operation binding the contract event 0xef25e066ac14a10491ae1ac89a8247282158e169968aaccbceb257d0878bdfd0.
//
// Solidity: event UpdateStakingTracker(address indexed stakingTracker)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseUpdateStakingTracker(log types.Log) (*CnStakingV3MultiSigUpdateStakingTracker, error) {
	event := new(CnStakingV3MultiSigUpdateStakingTracker)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "UpdateStakingTracker", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigUpdateVoterAddressIterator is returned from FilterUpdateVoterAddress and is used to iterate over the raw logs and unpacked data for UpdateVoterAddress events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigUpdateVoterAddressIterator struct {
	Event *CnStakingV3MultiSigUpdateVoterAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigUpdateVoterAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigUpdateVoterAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigUpdateVoterAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigUpdateVoterAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigUpdateVoterAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigUpdateVoterAddress represents a UpdateVoterAddress event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigUpdateVoterAddress struct {
	VoterAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterUpdateVoterAddress is a free log retrieval operation binding the contract event 0x61ee88e3c7513df1e6e214415e781030278cf98b7fbb9d6d53720ee8aeb654ee.
//
// Solidity: event UpdateVoterAddress(address indexed voterAddress)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterUpdateVoterAddress(opts *bind.FilterOpts, voterAddress []common.Address) (*CnStakingV3MultiSigUpdateVoterAddressIterator, error) {

	var voterAddressRule []interface{}
	for _, voterAddressItem := range voterAddress {
		voterAddressRule = append(voterAddressRule, voterAddressItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "UpdateVoterAddress", voterAddressRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigUpdateVoterAddressIterator{contract: _CnStakingV3MultiSig.contract, event: "UpdateVoterAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateVoterAddress is a free log subscription operation binding the contract event 0x61ee88e3c7513df1e6e214415e781030278cf98b7fbb9d6d53720ee8aeb654ee.
//
// Solidity: event UpdateVoterAddress(address indexed voterAddress)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchUpdateVoterAddress(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigUpdateVoterAddress, voterAddress []common.Address) (event.Subscription, error) {

	var voterAddressRule []interface{}
	for _, voterAddressItem := range voterAddress {
		voterAddressRule = append(voterAddressRule, voterAddressItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "UpdateVoterAddress", voterAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigUpdateVoterAddress)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "UpdateVoterAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateVoterAddress is a log parse operation binding the contract event 0x61ee88e3c7513df1e6e214415e781030278cf98b7fbb9d6d53720ee8aeb654ee.
//
// Solidity: event UpdateVoterAddress(address indexed voterAddress)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseUpdateVoterAddress(log types.Log) (*CnStakingV3MultiSigUpdateVoterAddress, error) {
	event := new(CnStakingV3MultiSigUpdateVoterAddress)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "UpdateVoterAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigWithdrawApprovedStakingIterator is returned from FilterWithdrawApprovedStaking and is used to iterate over the raw logs and unpacked data for WithdrawApprovedStaking events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigWithdrawApprovedStakingIterator struct {
	Event *CnStakingV3MultiSigWithdrawApprovedStaking // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigWithdrawApprovedStakingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigWithdrawApprovedStaking)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigWithdrawApprovedStaking)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigWithdrawApprovedStakingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigWithdrawApprovedStakingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigWithdrawApprovedStaking represents a WithdrawApprovedStaking event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigWithdrawApprovedStaking struct {
	ApprovedWithdrawalId *big.Int
	To                   common.Address
	Value                *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterWithdrawApprovedStaking is a free log retrieval operation binding the contract event 0x7a2d48d1df1249429730a253e5713a7d7a2024913de2fbccafdf36efdd32bf05.
//
// Solidity: event WithdrawApprovedStaking(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterWithdrawApprovedStaking(opts *bind.FilterOpts, approvedWithdrawalId []*big.Int, to []common.Address) (*CnStakingV3MultiSigWithdrawApprovedStakingIterator, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "WithdrawApprovedStaking", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigWithdrawApprovedStakingIterator{contract: _CnStakingV3MultiSig.contract, event: "WithdrawApprovedStaking", logs: logs, sub: sub}, nil
}

// WatchWithdrawApprovedStaking is a free log subscription operation binding the contract event 0x7a2d48d1df1249429730a253e5713a7d7a2024913de2fbccafdf36efdd32bf05.
//
// Solidity: event WithdrawApprovedStaking(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchWithdrawApprovedStaking(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigWithdrawApprovedStaking, approvedWithdrawalId []*big.Int, to []common.Address) (event.Subscription, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "WithdrawApprovedStaking", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigWithdrawApprovedStaking)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "WithdrawApprovedStaking", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawApprovedStaking is a log parse operation binding the contract event 0x7a2d48d1df1249429730a253e5713a7d7a2024913de2fbccafdf36efdd32bf05.
//
// Solidity: event WithdrawApprovedStaking(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseWithdrawApprovedStaking(log types.Log) (*CnStakingV3MultiSigWithdrawApprovedStaking, error) {
	event := new(CnStakingV3MultiSigWithdrawApprovedStaking)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "WithdrawApprovedStaking", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigWithdrawLockupStakingIterator is returned from FilterWithdrawLockupStaking and is used to iterate over the raw logs and unpacked data for WithdrawLockupStaking events raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigWithdrawLockupStakingIterator struct {
	Event *CnStakingV3MultiSigWithdrawLockupStaking // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigWithdrawLockupStakingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigWithdrawLockupStaking)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigWithdrawLockupStaking)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigWithdrawLockupStakingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigWithdrawLockupStakingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigWithdrawLockupStaking represents a WithdrawLockupStaking event raised by the CnStakingV3MultiSig contract.
type CnStakingV3MultiSigWithdrawLockupStaking struct {
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWithdrawLockupStaking is a free log retrieval operation binding the contract event 0x2d9d65e4fcab96e158761a8d3cc0bd7fd76951ab5574667b07190da171777470.
//
// Solidity: event WithdrawLockupStaking(address indexed to, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) FilterWithdrawLockupStaking(opts *bind.FilterOpts, to []common.Address) (*CnStakingV3MultiSigWithdrawLockupStakingIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.FilterLogs(opts, "WithdrawLockupStaking", toRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigWithdrawLockupStakingIterator{contract: _CnStakingV3MultiSig.contract, event: "WithdrawLockupStaking", logs: logs, sub: sub}, nil
}

// WatchWithdrawLockupStaking is a free log subscription operation binding the contract event 0x2d9d65e4fcab96e158761a8d3cc0bd7fd76951ab5574667b07190da171777470.
//
// Solidity: event WithdrawLockupStaking(address indexed to, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) WatchWithdrawLockupStaking(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigWithdrawLockupStaking, to []common.Address) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3MultiSig.contract.WatchLogs(opts, "WithdrawLockupStaking", toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigWithdrawLockupStaking)
				if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "WithdrawLockupStaking", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawLockupStaking is a log parse operation binding the contract event 0x2d9d65e4fcab96e158761a8d3cc0bd7fd76951ab5574667b07190da171777470.
//
// Solidity: event WithdrawLockupStaking(address indexed to, uint256 value)
func (_CnStakingV3MultiSig *CnStakingV3MultiSigFilterer) ParseWithdrawLockupStaking(log types.Log) (*CnStakingV3MultiSigWithdrawLockupStaking, error) {
	event := new(CnStakingV3MultiSigWithdrawLockupStaking)
	if err := _CnStakingV3MultiSig.contract.UnpackLog(event, "WithdrawLockupStaking", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigStorageMetaData contains all meta data concerning the CnStakingV3MultiSigStorage contract.
var CnStakingV3MultiSigStorageMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"}],\"name\":\"CancelRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ClearRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"confirmers\",\"type\":\"address[]\"}],\"name\":\"ConfirmRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"DeleteAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contractType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractValidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cnAdminList\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requirement\",\"type\":\"uint256\"}],\"name\":\"DeployCnStakingV3MultiSig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"}],\"name\":\"ExecuteRequestFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"}],\"name\":\"ExecuteRequestSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"confirmers\",\"type\":\"address[]\"}],\"name\":\"RevokeConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"}],\"name\":\"SubmitRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requirement\",\"type\":\"uint256\"}],\"name\":\"UpdateRequirement\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ADMIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pos\",\"type\":\"uint256\"}],\"name\":\"adminList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"_functionId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_firstArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_secondArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_thirdArg\",\"type\":\"bytes32\"}],\"name\":\"confirmRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"deleteAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"enumICnStakingV3MultiSig.RequestState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"getRequestIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getRequestInfo\",\"outputs\":[{\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"confirmers\",\"type\":\"address[]\"},{\"internalType\":\"enumICnStakingV3MultiSig.RequestState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getRequestState\",\"outputs\":[{\"internalType\":\"enumICnStakingV3MultiSig.RequestState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReviewers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"reviewers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractValidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"adminListArr\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"requirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"unlockTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unlockAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"allReviewed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInitialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClearedId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"_functionId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_firstArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_secondArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_thirdArg\",\"type\":\"bytes32\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"submitAddAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"submitApproveStakingWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_approvedWithdrawalId\",\"type\":\"uint256\"}],\"name\":\"submitCancelApprovedStakingWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitClearRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"submitDeleteAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitToggleRedelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"submitUpdateRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"submitUpdateRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tracker\",\"type\":\"address\"}],\"name\":\"submitUpdateStakingTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voterAddress\",\"type\":\"address\"}],\"name\":\"submitUpdateVoterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"submitWithdrawLockupStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"updateRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"58d65880": "MAX_ADMIN()",
		"70480275": "addAdmin(address)",
		"11117fc8": "adminList(uint256)",
		"4f97638f": "clearRequest()",
		"3b2d2aca": "confirmRequest(uint256,uint8,bytes32,bytes32,bytes32)",
		"7a5db068": "contractValidator()",
		"27e1f7df": "deleteAdmin(address)",
		"0fd440ec": "getRequestIds(uint256,uint256,uint8)",
		"0b816045": "getRequestInfo(uint256)",
		"ed979dd6": "getRequestState(uint256)",
		"75a87643": "getReviewers()",
		"1865c57d": "getState()",
		"24d7806c": "isAdmin(address)",
		"e7abb98d": "lastClearedId()",
		"5badbe4c": "requestCount()",
		"b7563930": "requirement()",
		"164990f8": "revokeConfirmation(uint256,uint8,bytes32,bytes32,bytes32)",
		"863f5c0a": "submitAddAdmin(address)",
		"7818097c": "submitApproveStakingWithdrawal(address,uint256)",
		"06b35d31": "submitCancelApprovedStakingWithdrawal(uint256)",
		"87cd9feb": "submitClearRequest()",
		"791b5123": "submitDeleteAdmin(address)",
		"2f890b1d": "submitToggleRedelegation()",
		"e748357b": "submitUpdateRequirement(uint256)",
		"069135af": "submitUpdateRewardAddress(address)",
		"0df5975c": "submitUpdateStakingTracker(address)",
		"b756e6ff": "submitUpdateVoterAddress(address)",
		"4b8bc6f8": "submitWithdrawLockupStaking(address,uint256)",
		"c47afb3a": "updateRequirement(uint256)",
	},
}

// CnStakingV3MultiSigStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use CnStakingV3MultiSigStorageMetaData.ABI instead.
var CnStakingV3MultiSigStorageABI = CnStakingV3MultiSigStorageMetaData.ABI

// CnStakingV3MultiSigStorageBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const CnStakingV3MultiSigStorageBinRuntime = ``

// Deprecated: Use CnStakingV3MultiSigStorageMetaData.Sigs instead.
// CnStakingV3MultiSigStorageFuncSigs maps the 4-byte function signature to its string representation.
var CnStakingV3MultiSigStorageFuncSigs = CnStakingV3MultiSigStorageMetaData.Sigs

// CnStakingV3MultiSigStorage is an auto generated Go binding around a Kaia contract.
type CnStakingV3MultiSigStorage struct {
	CnStakingV3MultiSigStorageCaller     // Read-only binding to the contract
	CnStakingV3MultiSigStorageTransactor // Write-only binding to the contract
	CnStakingV3MultiSigStorageFilterer   // Log filterer for contract events
}

// CnStakingV3MultiSigStorageCaller is an auto generated read-only Go binding around a Kaia contract.
type CnStakingV3MultiSigStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CnStakingV3MultiSigStorageTransactor is an auto generated write-only Go binding around a Kaia contract.
type CnStakingV3MultiSigStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CnStakingV3MultiSigStorageFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type CnStakingV3MultiSigStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CnStakingV3MultiSigStorageSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type CnStakingV3MultiSigStorageSession struct {
	Contract     *CnStakingV3MultiSigStorage // Generic contract binding to set the session for
	CallOpts     bind.CallOpts               // Call options to use throughout this session
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// CnStakingV3MultiSigStorageCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type CnStakingV3MultiSigStorageCallerSession struct {
	Contract *CnStakingV3MultiSigStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                     // Call options to use throughout this session
}

// CnStakingV3MultiSigStorageTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type CnStakingV3MultiSigStorageTransactorSession struct {
	Contract     *CnStakingV3MultiSigStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                     // Transaction auth options to use throughout this session
}

// CnStakingV3MultiSigStorageRaw is an auto generated low-level Go binding around a Kaia contract.
type CnStakingV3MultiSigStorageRaw struct {
	Contract *CnStakingV3MultiSigStorage // Generic contract binding to access the raw methods on
}

// CnStakingV3MultiSigStorageCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type CnStakingV3MultiSigStorageCallerRaw struct {
	Contract *CnStakingV3MultiSigStorageCaller // Generic read-only contract binding to access the raw methods on
}

// CnStakingV3MultiSigStorageTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type CnStakingV3MultiSigStorageTransactorRaw struct {
	Contract *CnStakingV3MultiSigStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCnStakingV3MultiSigStorage creates a new instance of CnStakingV3MultiSigStorage, bound to a specific deployed contract.
func NewCnStakingV3MultiSigStorage(address common.Address, backend bind.ContractBackend) (*CnStakingV3MultiSigStorage, error) {
	contract, err := bindCnStakingV3MultiSigStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigStorage{CnStakingV3MultiSigStorageCaller: CnStakingV3MultiSigStorageCaller{contract: contract}, CnStakingV3MultiSigStorageTransactor: CnStakingV3MultiSigStorageTransactor{contract: contract}, CnStakingV3MultiSigStorageFilterer: CnStakingV3MultiSigStorageFilterer{contract: contract}}, nil
}

// NewCnStakingV3MultiSigStorageCaller creates a new read-only instance of CnStakingV3MultiSigStorage, bound to a specific deployed contract.
func NewCnStakingV3MultiSigStorageCaller(address common.Address, caller bind.ContractCaller) (*CnStakingV3MultiSigStorageCaller, error) {
	contract, err := bindCnStakingV3MultiSigStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigStorageCaller{contract: contract}, nil
}

// NewCnStakingV3MultiSigStorageTransactor creates a new write-only instance of CnStakingV3MultiSigStorage, bound to a specific deployed contract.
func NewCnStakingV3MultiSigStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*CnStakingV3MultiSigStorageTransactor, error) {
	contract, err := bindCnStakingV3MultiSigStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigStorageTransactor{contract: contract}, nil
}

// NewCnStakingV3MultiSigStorageFilterer creates a new log filterer instance of CnStakingV3MultiSigStorage, bound to a specific deployed contract.
func NewCnStakingV3MultiSigStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*CnStakingV3MultiSigStorageFilterer, error) {
	contract, err := bindCnStakingV3MultiSigStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigStorageFilterer{contract: contract}, nil
}

// bindCnStakingV3MultiSigStorage binds a generic wrapper to an already deployed contract.
func bindCnStakingV3MultiSigStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CnStakingV3MultiSigStorageMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CnStakingV3MultiSigStorage.Contract.CnStakingV3MultiSigStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.CnStakingV3MultiSigStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.CnStakingV3MultiSigStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CnStakingV3MultiSigStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.contract.Transact(opts, method, params...)
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() view returns(uint256)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCaller) MAXADMIN(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSigStorage.contract.Call(opts, &out, "MAX_ADMIN")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() view returns(uint256)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) MAXADMIN() (*big.Int, error) {
	return _CnStakingV3MultiSigStorage.Contract.MAXADMIN(&_CnStakingV3MultiSigStorage.CallOpts)
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() view returns(uint256)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCallerSession) MAXADMIN() (*big.Int, error) {
	return _CnStakingV3MultiSigStorage.Contract.MAXADMIN(&_CnStakingV3MultiSigStorage.CallOpts)
}

// AdminList is a free data retrieval call binding the contract method 0x11117fc8.
//
// Solidity: function adminList(uint256 _pos) view returns(address)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCaller) AdminList(opts *bind.CallOpts, _pos *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3MultiSigStorage.contract.Call(opts, &out, "adminList", _pos)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AdminList is a free data retrieval call binding the contract method 0x11117fc8.
//
// Solidity: function adminList(uint256 _pos) view returns(address)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) AdminList(_pos *big.Int) (common.Address, error) {
	return _CnStakingV3MultiSigStorage.Contract.AdminList(&_CnStakingV3MultiSigStorage.CallOpts, _pos)
}

// AdminList is a free data retrieval call binding the contract method 0x11117fc8.
//
// Solidity: function adminList(uint256 _pos) view returns(address)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCallerSession) AdminList(_pos *big.Int) (common.Address, error) {
	return _CnStakingV3MultiSigStorage.Contract.AdminList(&_CnStakingV3MultiSigStorage.CallOpts, _pos)
}

// ContractValidator is a free data retrieval call binding the contract method 0x7a5db068.
//
// Solidity: function contractValidator() view returns(address)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCaller) ContractValidator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3MultiSigStorage.contract.Call(opts, &out, "contractValidator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContractValidator is a free data retrieval call binding the contract method 0x7a5db068.
//
// Solidity: function contractValidator() view returns(address)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) ContractValidator() (common.Address, error) {
	return _CnStakingV3MultiSigStorage.Contract.ContractValidator(&_CnStakingV3MultiSigStorage.CallOpts)
}

// ContractValidator is a free data retrieval call binding the contract method 0x7a5db068.
//
// Solidity: function contractValidator() view returns(address)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCallerSession) ContractValidator() (common.Address, error) {
	return _CnStakingV3MultiSigStorage.Contract.ContractValidator(&_CnStakingV3MultiSigStorage.CallOpts)
}

// GetRequestIds is a free data retrieval call binding the contract method 0x0fd440ec.
//
// Solidity: function getRequestIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCaller) GetRequestIds(opts *bind.CallOpts, _from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSigStorage.contract.Call(opts, &out, "getRequestIds", _from, _to, _state)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetRequestIds is a free data retrieval call binding the contract method 0x0fd440ec.
//
// Solidity: function getRequestIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) GetRequestIds(_from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	return _CnStakingV3MultiSigStorage.Contract.GetRequestIds(&_CnStakingV3MultiSigStorage.CallOpts, _from, _to, _state)
}

// GetRequestIds is a free data retrieval call binding the contract method 0x0fd440ec.
//
// Solidity: function getRequestIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCallerSession) GetRequestIds(_from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	return _CnStakingV3MultiSigStorage.Contract.GetRequestIds(&_CnStakingV3MultiSigStorage.CallOpts, _from, _to, _state)
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(uint256 _id) view returns(uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address proposer, address[] confirmers, uint8 state)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCaller) GetRequestInfo(opts *bind.CallOpts, _id *big.Int) (struct {
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Proposer   common.Address
	Confirmers []common.Address
	State      uint8
}, error) {
	var out []interface{}
	err := _CnStakingV3MultiSigStorage.contract.Call(opts, &out, "getRequestInfo", _id)

	outstruct := new(struct {
		FunctionId uint8
		FirstArg   [32]byte
		SecondArg  [32]byte
		ThirdArg   [32]byte
		Proposer   common.Address
		Confirmers []common.Address
		State      uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.FunctionId = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.FirstArg = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.SecondArg = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)
	outstruct.ThirdArg = *abi.ConvertType(out[3], new([32]byte)).(*[32]byte)
	outstruct.Proposer = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Confirmers = *abi.ConvertType(out[5], new([]common.Address)).(*[]common.Address)
	outstruct.State = *abi.ConvertType(out[6], new(uint8)).(*uint8)

	return *outstruct, err

}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(uint256 _id) view returns(uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address proposer, address[] confirmers, uint8 state)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) GetRequestInfo(_id *big.Int) (struct {
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Proposer   common.Address
	Confirmers []common.Address
	State      uint8
}, error) {
	return _CnStakingV3MultiSigStorage.Contract.GetRequestInfo(&_CnStakingV3MultiSigStorage.CallOpts, _id)
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(uint256 _id) view returns(uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address proposer, address[] confirmers, uint8 state)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCallerSession) GetRequestInfo(_id *big.Int) (struct {
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Proposer   common.Address
	Confirmers []common.Address
	State      uint8
}, error) {
	return _CnStakingV3MultiSigStorage.Contract.GetRequestInfo(&_CnStakingV3MultiSigStorage.CallOpts, _id)
}

// GetRequestState is a free data retrieval call binding the contract method 0xed979dd6.
//
// Solidity: function getRequestState(uint256 _id) view returns(uint8)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCaller) GetRequestState(opts *bind.CallOpts, _id *big.Int) (uint8, error) {
	var out []interface{}
	err := _CnStakingV3MultiSigStorage.contract.Call(opts, &out, "getRequestState", _id)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetRequestState is a free data retrieval call binding the contract method 0xed979dd6.
//
// Solidity: function getRequestState(uint256 _id) view returns(uint8)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) GetRequestState(_id *big.Int) (uint8, error) {
	return _CnStakingV3MultiSigStorage.Contract.GetRequestState(&_CnStakingV3MultiSigStorage.CallOpts, _id)
}

// GetRequestState is a free data retrieval call binding the contract method 0xed979dd6.
//
// Solidity: function getRequestState(uint256 _id) view returns(uint8)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCallerSession) GetRequestState(_id *big.Int) (uint8, error) {
	return _CnStakingV3MultiSigStorage.Contract.GetRequestState(&_CnStakingV3MultiSigStorage.CallOpts, _id)
}

// GetReviewers is a free data retrieval call binding the contract method 0x75a87643.
//
// Solidity: function getReviewers() view returns(address[] reviewers)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCaller) GetReviewers(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _CnStakingV3MultiSigStorage.contract.Call(opts, &out, "getReviewers")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetReviewers is a free data retrieval call binding the contract method 0x75a87643.
//
// Solidity: function getReviewers() view returns(address[] reviewers)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) GetReviewers() ([]common.Address, error) {
	return _CnStakingV3MultiSigStorage.Contract.GetReviewers(&_CnStakingV3MultiSigStorage.CallOpts)
}

// GetReviewers is a free data retrieval call binding the contract method 0x75a87643.
//
// Solidity: function getReviewers() view returns(address[] reviewers)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCallerSession) GetReviewers() ([]common.Address, error) {
	return _CnStakingV3MultiSigStorage.Contract.GetReviewers(&_CnStakingV3MultiSigStorage.CallOpts)
}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address contractValidator, address nodeId, address rewardAddress, address[] adminListArr, uint256 requirement, uint256[] unlockTime, uint256[] unlockAmount, bool allReviewed, bool isInitialized)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCaller) GetState(opts *bind.CallOpts) (struct {
	ContractValidator common.Address
	NodeId            common.Address
	RewardAddress     common.Address
	AdminListArr      []common.Address
	Requirement       *big.Int
	UnlockTime        []*big.Int
	UnlockAmount      []*big.Int
	AllReviewed       bool
	IsInitialized     bool
}, error) {
	var out []interface{}
	err := _CnStakingV3MultiSigStorage.contract.Call(opts, &out, "getState")

	outstruct := new(struct {
		ContractValidator common.Address
		NodeId            common.Address
		RewardAddress     common.Address
		AdminListArr      []common.Address
		Requirement       *big.Int
		UnlockTime        []*big.Int
		UnlockAmount      []*big.Int
		AllReviewed       bool
		IsInitialized     bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ContractValidator = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.NodeId = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.RewardAddress = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.AdminListArr = *abi.ConvertType(out[3], new([]common.Address)).(*[]common.Address)
	outstruct.Requirement = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.UnlockTime = *abi.ConvertType(out[5], new([]*big.Int)).(*[]*big.Int)
	outstruct.UnlockAmount = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)
	outstruct.AllReviewed = *abi.ConvertType(out[7], new(bool)).(*bool)
	outstruct.IsInitialized = *abi.ConvertType(out[8], new(bool)).(*bool)

	return *outstruct, err

}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address contractValidator, address nodeId, address rewardAddress, address[] adminListArr, uint256 requirement, uint256[] unlockTime, uint256[] unlockAmount, bool allReviewed, bool isInitialized)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) GetState() (struct {
	ContractValidator common.Address
	NodeId            common.Address
	RewardAddress     common.Address
	AdminListArr      []common.Address
	Requirement       *big.Int
	UnlockTime        []*big.Int
	UnlockAmount      []*big.Int
	AllReviewed       bool
	IsInitialized     bool
}, error) {
	return _CnStakingV3MultiSigStorage.Contract.GetState(&_CnStakingV3MultiSigStorage.CallOpts)
}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address contractValidator, address nodeId, address rewardAddress, address[] adminListArr, uint256 requirement, uint256[] unlockTime, uint256[] unlockAmount, bool allReviewed, bool isInitialized)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCallerSession) GetState() (struct {
	ContractValidator common.Address
	NodeId            common.Address
	RewardAddress     common.Address
	AdminListArr      []common.Address
	Requirement       *big.Int
	UnlockTime        []*big.Int
	UnlockAmount      []*big.Int
	AllReviewed       bool
	IsInitialized     bool
}, error) {
	return _CnStakingV3MultiSigStorage.Contract.GetState(&_CnStakingV3MultiSigStorage.CallOpts)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _admin) view returns(bool)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCaller) IsAdmin(opts *bind.CallOpts, _admin common.Address) (bool, error) {
	var out []interface{}
	err := _CnStakingV3MultiSigStorage.contract.Call(opts, &out, "isAdmin", _admin)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _admin) view returns(bool)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) IsAdmin(_admin common.Address) (bool, error) {
	return _CnStakingV3MultiSigStorage.Contract.IsAdmin(&_CnStakingV3MultiSigStorage.CallOpts, _admin)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _admin) view returns(bool)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCallerSession) IsAdmin(_admin common.Address) (bool, error) {
	return _CnStakingV3MultiSigStorage.Contract.IsAdmin(&_CnStakingV3MultiSigStorage.CallOpts, _admin)
}

// LastClearedId is a free data retrieval call binding the contract method 0xe7abb98d.
//
// Solidity: function lastClearedId() view returns(uint256)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCaller) LastClearedId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSigStorage.contract.Call(opts, &out, "lastClearedId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastClearedId is a free data retrieval call binding the contract method 0xe7abb98d.
//
// Solidity: function lastClearedId() view returns(uint256)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) LastClearedId() (*big.Int, error) {
	return _CnStakingV3MultiSigStorage.Contract.LastClearedId(&_CnStakingV3MultiSigStorage.CallOpts)
}

// LastClearedId is a free data retrieval call binding the contract method 0xe7abb98d.
//
// Solidity: function lastClearedId() view returns(uint256)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCallerSession) LastClearedId() (*big.Int, error) {
	return _CnStakingV3MultiSigStorage.Contract.LastClearedId(&_CnStakingV3MultiSigStorage.CallOpts)
}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() view returns(uint256)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCaller) RequestCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSigStorage.contract.Call(opts, &out, "requestCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() view returns(uint256)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) RequestCount() (*big.Int, error) {
	return _CnStakingV3MultiSigStorage.Contract.RequestCount(&_CnStakingV3MultiSigStorage.CallOpts)
}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() view returns(uint256)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCallerSession) RequestCount() (*big.Int, error) {
	return _CnStakingV3MultiSigStorage.Contract.RequestCount(&_CnStakingV3MultiSigStorage.CallOpts)
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() view returns(uint256)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCaller) Requirement(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3MultiSigStorage.contract.Call(opts, &out, "requirement")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() view returns(uint256)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) Requirement() (*big.Int, error) {
	return _CnStakingV3MultiSigStorage.Contract.Requirement(&_CnStakingV3MultiSigStorage.CallOpts)
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() view returns(uint256)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageCallerSession) Requirement() (*big.Int, error) {
	return _CnStakingV3MultiSigStorage.Contract.Requirement(&_CnStakingV3MultiSigStorage.CallOpts)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address _admin) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactor) AddAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.contract.Transact(opts, "addAdmin", _admin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address _admin) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) AddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.AddAdmin(&_CnStakingV3MultiSigStorage.TransactOpts, _admin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address _admin) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactorSession) AddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.AddAdmin(&_CnStakingV3MultiSigStorage.TransactOpts, _admin)
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactor) ClearRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.contract.Transact(opts, "clearRequest")
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) ClearRequest() (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.ClearRequest(&_CnStakingV3MultiSigStorage.TransactOpts)
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactorSession) ClearRequest() (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.ClearRequest(&_CnStakingV3MultiSigStorage.TransactOpts)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0x3b2d2aca.
//
// Solidity: function confirmRequest(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactor) ConfirmRequest(opts *bind.TransactOpts, _id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.contract.Transact(opts, "confirmRequest", _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0x3b2d2aca.
//
// Solidity: function confirmRequest(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) ConfirmRequest(_id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.ConfirmRequest(&_CnStakingV3MultiSigStorage.TransactOpts, _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0x3b2d2aca.
//
// Solidity: function confirmRequest(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactorSession) ConfirmRequest(_id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.ConfirmRequest(&_CnStakingV3MultiSigStorage.TransactOpts, _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(address _admin) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactor) DeleteAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.contract.Transact(opts, "deleteAdmin", _admin)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(address _admin) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) DeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.DeleteAdmin(&_CnStakingV3MultiSigStorage.TransactOpts, _admin)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(address _admin) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactorSession) DeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.DeleteAdmin(&_CnStakingV3MultiSigStorage.TransactOpts, _admin)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x164990f8.
//
// Solidity: function revokeConfirmation(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactor) RevokeConfirmation(opts *bind.TransactOpts, _id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.contract.Transact(opts, "revokeConfirmation", _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x164990f8.
//
// Solidity: function revokeConfirmation(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) RevokeConfirmation(_id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.RevokeConfirmation(&_CnStakingV3MultiSigStorage.TransactOpts, _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x164990f8.
//
// Solidity: function revokeConfirmation(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactorSession) RevokeConfirmation(_id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.RevokeConfirmation(&_CnStakingV3MultiSigStorage.TransactOpts, _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// SubmitAddAdmin is a paid mutator transaction binding the contract method 0x863f5c0a.
//
// Solidity: function submitAddAdmin(address _admin) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactor) SubmitAddAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.contract.Transact(opts, "submitAddAdmin", _admin)
}

// SubmitAddAdmin is a paid mutator transaction binding the contract method 0x863f5c0a.
//
// Solidity: function submitAddAdmin(address _admin) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) SubmitAddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitAddAdmin(&_CnStakingV3MultiSigStorage.TransactOpts, _admin)
}

// SubmitAddAdmin is a paid mutator transaction binding the contract method 0x863f5c0a.
//
// Solidity: function submitAddAdmin(address _admin) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactorSession) SubmitAddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitAddAdmin(&_CnStakingV3MultiSigStorage.TransactOpts, _admin)
}

// SubmitApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x7818097c.
//
// Solidity: function submitApproveStakingWithdrawal(address _to, uint256 _value) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactor) SubmitApproveStakingWithdrawal(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.contract.Transact(opts, "submitApproveStakingWithdrawal", _to, _value)
}

// SubmitApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x7818097c.
//
// Solidity: function submitApproveStakingWithdrawal(address _to, uint256 _value) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) SubmitApproveStakingWithdrawal(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitApproveStakingWithdrawal(&_CnStakingV3MultiSigStorage.TransactOpts, _to, _value)
}

// SubmitApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x7818097c.
//
// Solidity: function submitApproveStakingWithdrawal(address _to, uint256 _value) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactorSession) SubmitApproveStakingWithdrawal(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitApproveStakingWithdrawal(&_CnStakingV3MultiSigStorage.TransactOpts, _to, _value)
}

// SubmitCancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0x06b35d31.
//
// Solidity: function submitCancelApprovedStakingWithdrawal(uint256 _approvedWithdrawalId) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactor) SubmitCancelApprovedStakingWithdrawal(opts *bind.TransactOpts, _approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.contract.Transact(opts, "submitCancelApprovedStakingWithdrawal", _approvedWithdrawalId)
}

// SubmitCancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0x06b35d31.
//
// Solidity: function submitCancelApprovedStakingWithdrawal(uint256 _approvedWithdrawalId) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) SubmitCancelApprovedStakingWithdrawal(_approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitCancelApprovedStakingWithdrawal(&_CnStakingV3MultiSigStorage.TransactOpts, _approvedWithdrawalId)
}

// SubmitCancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0x06b35d31.
//
// Solidity: function submitCancelApprovedStakingWithdrawal(uint256 _approvedWithdrawalId) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactorSession) SubmitCancelApprovedStakingWithdrawal(_approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitCancelApprovedStakingWithdrawal(&_CnStakingV3MultiSigStorage.TransactOpts, _approvedWithdrawalId)
}

// SubmitClearRequest is a paid mutator transaction binding the contract method 0x87cd9feb.
//
// Solidity: function submitClearRequest() returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactor) SubmitClearRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.contract.Transact(opts, "submitClearRequest")
}

// SubmitClearRequest is a paid mutator transaction binding the contract method 0x87cd9feb.
//
// Solidity: function submitClearRequest() returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) SubmitClearRequest() (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitClearRequest(&_CnStakingV3MultiSigStorage.TransactOpts)
}

// SubmitClearRequest is a paid mutator transaction binding the contract method 0x87cd9feb.
//
// Solidity: function submitClearRequest() returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactorSession) SubmitClearRequest() (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitClearRequest(&_CnStakingV3MultiSigStorage.TransactOpts)
}

// SubmitDeleteAdmin is a paid mutator transaction binding the contract method 0x791b5123.
//
// Solidity: function submitDeleteAdmin(address _admin) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactor) SubmitDeleteAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.contract.Transact(opts, "submitDeleteAdmin", _admin)
}

// SubmitDeleteAdmin is a paid mutator transaction binding the contract method 0x791b5123.
//
// Solidity: function submitDeleteAdmin(address _admin) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) SubmitDeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitDeleteAdmin(&_CnStakingV3MultiSigStorage.TransactOpts, _admin)
}

// SubmitDeleteAdmin is a paid mutator transaction binding the contract method 0x791b5123.
//
// Solidity: function submitDeleteAdmin(address _admin) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactorSession) SubmitDeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitDeleteAdmin(&_CnStakingV3MultiSigStorage.TransactOpts, _admin)
}

// SubmitToggleRedelegation is a paid mutator transaction binding the contract method 0x2f890b1d.
//
// Solidity: function submitToggleRedelegation() returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactor) SubmitToggleRedelegation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.contract.Transact(opts, "submitToggleRedelegation")
}

// SubmitToggleRedelegation is a paid mutator transaction binding the contract method 0x2f890b1d.
//
// Solidity: function submitToggleRedelegation() returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) SubmitToggleRedelegation() (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitToggleRedelegation(&_CnStakingV3MultiSigStorage.TransactOpts)
}

// SubmitToggleRedelegation is a paid mutator transaction binding the contract method 0x2f890b1d.
//
// Solidity: function submitToggleRedelegation() returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactorSession) SubmitToggleRedelegation() (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitToggleRedelegation(&_CnStakingV3MultiSigStorage.TransactOpts)
}

// SubmitUpdateRequirement is a paid mutator transaction binding the contract method 0xe748357b.
//
// Solidity: function submitUpdateRequirement(uint256 _requirement) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactor) SubmitUpdateRequirement(opts *bind.TransactOpts, _requirement *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.contract.Transact(opts, "submitUpdateRequirement", _requirement)
}

// SubmitUpdateRequirement is a paid mutator transaction binding the contract method 0xe748357b.
//
// Solidity: function submitUpdateRequirement(uint256 _requirement) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) SubmitUpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitUpdateRequirement(&_CnStakingV3MultiSigStorage.TransactOpts, _requirement)
}

// SubmitUpdateRequirement is a paid mutator transaction binding the contract method 0xe748357b.
//
// Solidity: function submitUpdateRequirement(uint256 _requirement) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactorSession) SubmitUpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitUpdateRequirement(&_CnStakingV3MultiSigStorage.TransactOpts, _requirement)
}

// SubmitUpdateRewardAddress is a paid mutator transaction binding the contract method 0x069135af.
//
// Solidity: function submitUpdateRewardAddress(address _rewardAddress) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactor) SubmitUpdateRewardAddress(opts *bind.TransactOpts, _rewardAddress common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.contract.Transact(opts, "submitUpdateRewardAddress", _rewardAddress)
}

// SubmitUpdateRewardAddress is a paid mutator transaction binding the contract method 0x069135af.
//
// Solidity: function submitUpdateRewardAddress(address _rewardAddress) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) SubmitUpdateRewardAddress(_rewardAddress common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitUpdateRewardAddress(&_CnStakingV3MultiSigStorage.TransactOpts, _rewardAddress)
}

// SubmitUpdateRewardAddress is a paid mutator transaction binding the contract method 0x069135af.
//
// Solidity: function submitUpdateRewardAddress(address _rewardAddress) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactorSession) SubmitUpdateRewardAddress(_rewardAddress common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitUpdateRewardAddress(&_CnStakingV3MultiSigStorage.TransactOpts, _rewardAddress)
}

// SubmitUpdateStakingTracker is a paid mutator transaction binding the contract method 0x0df5975c.
//
// Solidity: function submitUpdateStakingTracker(address _tracker) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactor) SubmitUpdateStakingTracker(opts *bind.TransactOpts, _tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.contract.Transact(opts, "submitUpdateStakingTracker", _tracker)
}

// SubmitUpdateStakingTracker is a paid mutator transaction binding the contract method 0x0df5975c.
//
// Solidity: function submitUpdateStakingTracker(address _tracker) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) SubmitUpdateStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitUpdateStakingTracker(&_CnStakingV3MultiSigStorage.TransactOpts, _tracker)
}

// SubmitUpdateStakingTracker is a paid mutator transaction binding the contract method 0x0df5975c.
//
// Solidity: function submitUpdateStakingTracker(address _tracker) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactorSession) SubmitUpdateStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitUpdateStakingTracker(&_CnStakingV3MultiSigStorage.TransactOpts, _tracker)
}

// SubmitUpdateVoterAddress is a paid mutator transaction binding the contract method 0xb756e6ff.
//
// Solidity: function submitUpdateVoterAddress(address _voterAddress) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactor) SubmitUpdateVoterAddress(opts *bind.TransactOpts, _voterAddress common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.contract.Transact(opts, "submitUpdateVoterAddress", _voterAddress)
}

// SubmitUpdateVoterAddress is a paid mutator transaction binding the contract method 0xb756e6ff.
//
// Solidity: function submitUpdateVoterAddress(address _voterAddress) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) SubmitUpdateVoterAddress(_voterAddress common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitUpdateVoterAddress(&_CnStakingV3MultiSigStorage.TransactOpts, _voterAddress)
}

// SubmitUpdateVoterAddress is a paid mutator transaction binding the contract method 0xb756e6ff.
//
// Solidity: function submitUpdateVoterAddress(address _voterAddress) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactorSession) SubmitUpdateVoterAddress(_voterAddress common.Address) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitUpdateVoterAddress(&_CnStakingV3MultiSigStorage.TransactOpts, _voterAddress)
}

// SubmitWithdrawLockupStaking is a paid mutator transaction binding the contract method 0x4b8bc6f8.
//
// Solidity: function submitWithdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactor) SubmitWithdrawLockupStaking(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.contract.Transact(opts, "submitWithdrawLockupStaking", _to, _value)
}

// SubmitWithdrawLockupStaking is a paid mutator transaction binding the contract method 0x4b8bc6f8.
//
// Solidity: function submitWithdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) SubmitWithdrawLockupStaking(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitWithdrawLockupStaking(&_CnStakingV3MultiSigStorage.TransactOpts, _to, _value)
}

// SubmitWithdrawLockupStaking is a paid mutator transaction binding the contract method 0x4b8bc6f8.
//
// Solidity: function submitWithdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactorSession) SubmitWithdrawLockupStaking(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.SubmitWithdrawLockupStaking(&_CnStakingV3MultiSigStorage.TransactOpts, _to, _value)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(uint256 _requirement) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactor) UpdateRequirement(opts *bind.TransactOpts, _requirement *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.contract.Transact(opts, "updateRequirement", _requirement)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(uint256 _requirement) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageSession) UpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.UpdateRequirement(&_CnStakingV3MultiSigStorage.TransactOpts, _requirement)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(uint256 _requirement) returns()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageTransactorSession) UpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _CnStakingV3MultiSigStorage.Contract.UpdateRequirement(&_CnStakingV3MultiSigStorage.TransactOpts, _requirement)
}

// CnStakingV3MultiSigStorageAddAdminIterator is returned from FilterAddAdmin and is used to iterate over the raw logs and unpacked data for AddAdmin events raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageAddAdminIterator struct {
	Event *CnStakingV3MultiSigStorageAddAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigStorageAddAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigStorageAddAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigStorageAddAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigStorageAddAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigStorageAddAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigStorageAddAdmin represents a AddAdmin event raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageAddAdmin struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAddAdmin is a free log retrieval operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: event AddAdmin(address indexed admin)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) FilterAddAdmin(opts *bind.FilterOpts, admin []common.Address) (*CnStakingV3MultiSigStorageAddAdminIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.FilterLogs(opts, "AddAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigStorageAddAdminIterator{contract: _CnStakingV3MultiSigStorage.contract, event: "AddAdmin", logs: logs, sub: sub}, nil
}

// WatchAddAdmin is a free log subscription operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: event AddAdmin(address indexed admin)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) WatchAddAdmin(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigStorageAddAdmin, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.WatchLogs(opts, "AddAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigStorageAddAdmin)
				if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "AddAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddAdmin is a log parse operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: event AddAdmin(address indexed admin)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) ParseAddAdmin(log types.Log) (*CnStakingV3MultiSigStorageAddAdmin, error) {
	event := new(CnStakingV3MultiSigStorageAddAdmin)
	if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "AddAdmin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigStorageCancelRequestIterator is returned from FilterCancelRequest and is used to iterate over the raw logs and unpacked data for CancelRequest events raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageCancelRequestIterator struct {
	Event *CnStakingV3MultiSigStorageCancelRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigStorageCancelRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigStorageCancelRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigStorageCancelRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigStorageCancelRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigStorageCancelRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigStorageCancelRequest represents a CancelRequest event raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageCancelRequest struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCancelRequest is a free log retrieval operation binding the contract event 0x01011152a3b44da915f5831c5c63c3448b616dcc166c3543f289ed79645280c9.
//
// Solidity: event CancelRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) FilterCancelRequest(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*CnStakingV3MultiSigStorageCancelRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.FilterLogs(opts, "CancelRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigStorageCancelRequestIterator{contract: _CnStakingV3MultiSigStorage.contract, event: "CancelRequest", logs: logs, sub: sub}, nil
}

// WatchCancelRequest is a free log subscription operation binding the contract event 0x01011152a3b44da915f5831c5c63c3448b616dcc166c3543f289ed79645280c9.
//
// Solidity: event CancelRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) WatchCancelRequest(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigStorageCancelRequest, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.WatchLogs(opts, "CancelRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigStorageCancelRequest)
				if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "CancelRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancelRequest is a log parse operation binding the contract event 0x01011152a3b44da915f5831c5c63c3448b616dcc166c3543f289ed79645280c9.
//
// Solidity: event CancelRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) ParseCancelRequest(log types.Log) (*CnStakingV3MultiSigStorageCancelRequest, error) {
	event := new(CnStakingV3MultiSigStorageCancelRequest)
	if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "CancelRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigStorageClearRequestIterator is returned from FilterClearRequest and is used to iterate over the raw logs and unpacked data for ClearRequest events raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageClearRequestIterator struct {
	Event *CnStakingV3MultiSigStorageClearRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigStorageClearRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigStorageClearRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigStorageClearRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigStorageClearRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigStorageClearRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigStorageClearRequest represents a ClearRequest event raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageClearRequest struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterClearRequest is a free log retrieval operation binding the contract event 0x907527d30089abd16e30f06ddbbbc18480505176262f19bc16c1fbf9262f9c6b.
//
// Solidity: event ClearRequest()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) FilterClearRequest(opts *bind.FilterOpts) (*CnStakingV3MultiSigStorageClearRequestIterator, error) {

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.FilterLogs(opts, "ClearRequest")
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigStorageClearRequestIterator{contract: _CnStakingV3MultiSigStorage.contract, event: "ClearRequest", logs: logs, sub: sub}, nil
}

// WatchClearRequest is a free log subscription operation binding the contract event 0x907527d30089abd16e30f06ddbbbc18480505176262f19bc16c1fbf9262f9c6b.
//
// Solidity: event ClearRequest()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) WatchClearRequest(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigStorageClearRequest) (event.Subscription, error) {

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.WatchLogs(opts, "ClearRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigStorageClearRequest)
				if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "ClearRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClearRequest is a log parse operation binding the contract event 0x907527d30089abd16e30f06ddbbbc18480505176262f19bc16c1fbf9262f9c6b.
//
// Solidity: event ClearRequest()
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) ParseClearRequest(log types.Log) (*CnStakingV3MultiSigStorageClearRequest, error) {
	event := new(CnStakingV3MultiSigStorageClearRequest)
	if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "ClearRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigStorageConfirmRequestIterator is returned from FilterConfirmRequest and is used to iterate over the raw logs and unpacked data for ConfirmRequest events raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageConfirmRequestIterator struct {
	Event *CnStakingV3MultiSigStorageConfirmRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigStorageConfirmRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigStorageConfirmRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigStorageConfirmRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigStorageConfirmRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigStorageConfirmRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigStorageConfirmRequest represents a ConfirmRequest event raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageConfirmRequest struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Confirmers []common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterConfirmRequest is a free log retrieval operation binding the contract event 0x658055f08cf63659025f616b2baf94baf8f4d2ee9c600c2ae722b4b7716cce46.
//
// Solidity: event ConfirmRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) FilterConfirmRequest(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*CnStakingV3MultiSigStorageConfirmRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.FilterLogs(opts, "ConfirmRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigStorageConfirmRequestIterator{contract: _CnStakingV3MultiSigStorage.contract, event: "ConfirmRequest", logs: logs, sub: sub}, nil
}

// WatchConfirmRequest is a free log subscription operation binding the contract event 0x658055f08cf63659025f616b2baf94baf8f4d2ee9c600c2ae722b4b7716cce46.
//
// Solidity: event ConfirmRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) WatchConfirmRequest(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigStorageConfirmRequest, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.WatchLogs(opts, "ConfirmRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigStorageConfirmRequest)
				if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "ConfirmRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfirmRequest is a log parse operation binding the contract event 0x658055f08cf63659025f616b2baf94baf8f4d2ee9c600c2ae722b4b7716cce46.
//
// Solidity: event ConfirmRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) ParseConfirmRequest(log types.Log) (*CnStakingV3MultiSigStorageConfirmRequest, error) {
	event := new(CnStakingV3MultiSigStorageConfirmRequest)
	if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "ConfirmRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigStorageDeleteAdminIterator is returned from FilterDeleteAdmin and is used to iterate over the raw logs and unpacked data for DeleteAdmin events raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageDeleteAdminIterator struct {
	Event *CnStakingV3MultiSigStorageDeleteAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigStorageDeleteAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigStorageDeleteAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigStorageDeleteAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigStorageDeleteAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigStorageDeleteAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigStorageDeleteAdmin represents a DeleteAdmin event raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageDeleteAdmin struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDeleteAdmin is a free log retrieval operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: event DeleteAdmin(address indexed admin)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) FilterDeleteAdmin(opts *bind.FilterOpts, admin []common.Address) (*CnStakingV3MultiSigStorageDeleteAdminIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.FilterLogs(opts, "DeleteAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigStorageDeleteAdminIterator{contract: _CnStakingV3MultiSigStorage.contract, event: "DeleteAdmin", logs: logs, sub: sub}, nil
}

// WatchDeleteAdmin is a free log subscription operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: event DeleteAdmin(address indexed admin)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) WatchDeleteAdmin(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigStorageDeleteAdmin, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.WatchLogs(opts, "DeleteAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigStorageDeleteAdmin)
				if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "DeleteAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeleteAdmin is a log parse operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: event DeleteAdmin(address indexed admin)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) ParseDeleteAdmin(log types.Log) (*CnStakingV3MultiSigStorageDeleteAdmin, error) {
	event := new(CnStakingV3MultiSigStorageDeleteAdmin)
	if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "DeleteAdmin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigStorageDeployCnStakingV3MultiSigIterator is returned from FilterDeployCnStakingV3MultiSig and is used to iterate over the raw logs and unpacked data for DeployCnStakingV3MultiSig events raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageDeployCnStakingV3MultiSigIterator struct {
	Event *CnStakingV3MultiSigStorageDeployCnStakingV3MultiSig // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigStorageDeployCnStakingV3MultiSigIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigStorageDeployCnStakingV3MultiSig)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigStorageDeployCnStakingV3MultiSig)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigStorageDeployCnStakingV3MultiSigIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigStorageDeployCnStakingV3MultiSigIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigStorageDeployCnStakingV3MultiSig represents a DeployCnStakingV3MultiSig event raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageDeployCnStakingV3MultiSig struct {
	ContractType      string
	ContractValidator common.Address
	CnAdminList       []common.Address
	Requirement       *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterDeployCnStakingV3MultiSig is a free log retrieval operation binding the contract event 0x66f82b55f642c6d1ad96892e17a269b2f7f5e3ec3d46acf2a9d239b43fe035e3.
//
// Solidity: event DeployCnStakingV3MultiSig(string contractType, address contractValidator, address[] cnAdminList, uint256 requirement)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) FilterDeployCnStakingV3MultiSig(opts *bind.FilterOpts) (*CnStakingV3MultiSigStorageDeployCnStakingV3MultiSigIterator, error) {

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.FilterLogs(opts, "DeployCnStakingV3MultiSig")
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigStorageDeployCnStakingV3MultiSigIterator{contract: _CnStakingV3MultiSigStorage.contract, event: "DeployCnStakingV3MultiSig", logs: logs, sub: sub}, nil
}

// WatchDeployCnStakingV3MultiSig is a free log subscription operation binding the contract event 0x66f82b55f642c6d1ad96892e17a269b2f7f5e3ec3d46acf2a9d239b43fe035e3.
//
// Solidity: event DeployCnStakingV3MultiSig(string contractType, address contractValidator, address[] cnAdminList, uint256 requirement)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) WatchDeployCnStakingV3MultiSig(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigStorageDeployCnStakingV3MultiSig) (event.Subscription, error) {

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.WatchLogs(opts, "DeployCnStakingV3MultiSig")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigStorageDeployCnStakingV3MultiSig)
				if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "DeployCnStakingV3MultiSig", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployCnStakingV3MultiSig is a log parse operation binding the contract event 0x66f82b55f642c6d1ad96892e17a269b2f7f5e3ec3d46acf2a9d239b43fe035e3.
//
// Solidity: event DeployCnStakingV3MultiSig(string contractType, address contractValidator, address[] cnAdminList, uint256 requirement)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) ParseDeployCnStakingV3MultiSig(log types.Log) (*CnStakingV3MultiSigStorageDeployCnStakingV3MultiSig, error) {
	event := new(CnStakingV3MultiSigStorageDeployCnStakingV3MultiSig)
	if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "DeployCnStakingV3MultiSig", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigStorageExecuteRequestFailureIterator is returned from FilterExecuteRequestFailure and is used to iterate over the raw logs and unpacked data for ExecuteRequestFailure events raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageExecuteRequestFailureIterator struct {
	Event *CnStakingV3MultiSigStorageExecuteRequestFailure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigStorageExecuteRequestFailureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigStorageExecuteRequestFailure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigStorageExecuteRequestFailure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigStorageExecuteRequestFailureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigStorageExecuteRequestFailureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigStorageExecuteRequestFailure represents a ExecuteRequestFailure event raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageExecuteRequestFailure struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterExecuteRequestFailure is a free log retrieval operation binding the contract event 0xbd3ad69fc5a8e233118506c67ebe892bef493fcf2eb9e6986f6d6c3f2adf0e8a.
//
// Solidity: event ExecuteRequestFailure(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) FilterExecuteRequestFailure(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*CnStakingV3MultiSigStorageExecuteRequestFailureIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.FilterLogs(opts, "ExecuteRequestFailure", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigStorageExecuteRequestFailureIterator{contract: _CnStakingV3MultiSigStorage.contract, event: "ExecuteRequestFailure", logs: logs, sub: sub}, nil
}

// WatchExecuteRequestFailure is a free log subscription operation binding the contract event 0xbd3ad69fc5a8e233118506c67ebe892bef493fcf2eb9e6986f6d6c3f2adf0e8a.
//
// Solidity: event ExecuteRequestFailure(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) WatchExecuteRequestFailure(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigStorageExecuteRequestFailure, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.WatchLogs(opts, "ExecuteRequestFailure", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigStorageExecuteRequestFailure)
				if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "ExecuteRequestFailure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecuteRequestFailure is a log parse operation binding the contract event 0xbd3ad69fc5a8e233118506c67ebe892bef493fcf2eb9e6986f6d6c3f2adf0e8a.
//
// Solidity: event ExecuteRequestFailure(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) ParseExecuteRequestFailure(log types.Log) (*CnStakingV3MultiSigStorageExecuteRequestFailure, error) {
	event := new(CnStakingV3MultiSigStorageExecuteRequestFailure)
	if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "ExecuteRequestFailure", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigStorageExecuteRequestSuccessIterator is returned from FilterExecuteRequestSuccess and is used to iterate over the raw logs and unpacked data for ExecuteRequestSuccess events raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageExecuteRequestSuccessIterator struct {
	Event *CnStakingV3MultiSigStorageExecuteRequestSuccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigStorageExecuteRequestSuccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigStorageExecuteRequestSuccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigStorageExecuteRequestSuccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigStorageExecuteRequestSuccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigStorageExecuteRequestSuccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigStorageExecuteRequestSuccess represents a ExecuteRequestSuccess event raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageExecuteRequestSuccess struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterExecuteRequestSuccess is a free log retrieval operation binding the contract event 0x48f16d9e6ab6f19798a7c7f307ecea3def480049fa0a09280e2a3fa45aaa8426.
//
// Solidity: event ExecuteRequestSuccess(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) FilterExecuteRequestSuccess(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*CnStakingV3MultiSigStorageExecuteRequestSuccessIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.FilterLogs(opts, "ExecuteRequestSuccess", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigStorageExecuteRequestSuccessIterator{contract: _CnStakingV3MultiSigStorage.contract, event: "ExecuteRequestSuccess", logs: logs, sub: sub}, nil
}

// WatchExecuteRequestSuccess is a free log subscription operation binding the contract event 0x48f16d9e6ab6f19798a7c7f307ecea3def480049fa0a09280e2a3fa45aaa8426.
//
// Solidity: event ExecuteRequestSuccess(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) WatchExecuteRequestSuccess(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigStorageExecuteRequestSuccess, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.WatchLogs(opts, "ExecuteRequestSuccess", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigStorageExecuteRequestSuccess)
				if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "ExecuteRequestSuccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecuteRequestSuccess is a log parse operation binding the contract event 0x48f16d9e6ab6f19798a7c7f307ecea3def480049fa0a09280e2a3fa45aaa8426.
//
// Solidity: event ExecuteRequestSuccess(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) ParseExecuteRequestSuccess(log types.Log) (*CnStakingV3MultiSigStorageExecuteRequestSuccess, error) {
	event := new(CnStakingV3MultiSigStorageExecuteRequestSuccess)
	if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "ExecuteRequestSuccess", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigStorageRevokeConfirmationIterator is returned from FilterRevokeConfirmation and is used to iterate over the raw logs and unpacked data for RevokeConfirmation events raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageRevokeConfirmationIterator struct {
	Event *CnStakingV3MultiSigStorageRevokeConfirmation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigStorageRevokeConfirmationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigStorageRevokeConfirmation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigStorageRevokeConfirmation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigStorageRevokeConfirmationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigStorageRevokeConfirmationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigStorageRevokeConfirmation represents a RevokeConfirmation event raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageRevokeConfirmation struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Confirmers []common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRevokeConfirmation is a free log retrieval operation binding the contract event 0xed38e5621fac2aa23736077187104abfe9c8aa1c5b4eb73015d8cfdf403fe070.
//
// Solidity: event RevokeConfirmation(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) FilterRevokeConfirmation(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*CnStakingV3MultiSigStorageRevokeConfirmationIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.FilterLogs(opts, "RevokeConfirmation", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigStorageRevokeConfirmationIterator{contract: _CnStakingV3MultiSigStorage.contract, event: "RevokeConfirmation", logs: logs, sub: sub}, nil
}

// WatchRevokeConfirmation is a free log subscription operation binding the contract event 0xed38e5621fac2aa23736077187104abfe9c8aa1c5b4eb73015d8cfdf403fe070.
//
// Solidity: event RevokeConfirmation(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) WatchRevokeConfirmation(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigStorageRevokeConfirmation, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.WatchLogs(opts, "RevokeConfirmation", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigStorageRevokeConfirmation)
				if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "RevokeConfirmation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevokeConfirmation is a log parse operation binding the contract event 0xed38e5621fac2aa23736077187104abfe9c8aa1c5b4eb73015d8cfdf403fe070.
//
// Solidity: event RevokeConfirmation(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) ParseRevokeConfirmation(log types.Log) (*CnStakingV3MultiSigStorageRevokeConfirmation, error) {
	event := new(CnStakingV3MultiSigStorageRevokeConfirmation)
	if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "RevokeConfirmation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigStorageSubmitRequestIterator is returned from FilterSubmitRequest and is used to iterate over the raw logs and unpacked data for SubmitRequest events raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageSubmitRequestIterator struct {
	Event *CnStakingV3MultiSigStorageSubmitRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigStorageSubmitRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigStorageSubmitRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigStorageSubmitRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigStorageSubmitRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigStorageSubmitRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigStorageSubmitRequest represents a SubmitRequest event raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageSubmitRequest struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSubmitRequest is a free log retrieval operation binding the contract event 0xdd9ce6d431d4ac3e8bea81bc2d7760b97d30c4e54252d8c8c59054849b8f61b5.
//
// Solidity: event SubmitRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) FilterSubmitRequest(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*CnStakingV3MultiSigStorageSubmitRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.FilterLogs(opts, "SubmitRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigStorageSubmitRequestIterator{contract: _CnStakingV3MultiSigStorage.contract, event: "SubmitRequest", logs: logs, sub: sub}, nil
}

// WatchSubmitRequest is a free log subscription operation binding the contract event 0xdd9ce6d431d4ac3e8bea81bc2d7760b97d30c4e54252d8c8c59054849b8f61b5.
//
// Solidity: event SubmitRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) WatchSubmitRequest(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigStorageSubmitRequest, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.WatchLogs(opts, "SubmitRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigStorageSubmitRequest)
				if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "SubmitRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmitRequest is a log parse operation binding the contract event 0xdd9ce6d431d4ac3e8bea81bc2d7760b97d30c4e54252d8c8c59054849b8f61b5.
//
// Solidity: event SubmitRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) ParseSubmitRequest(log types.Log) (*CnStakingV3MultiSigStorageSubmitRequest, error) {
	event := new(CnStakingV3MultiSigStorageSubmitRequest)
	if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "SubmitRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3MultiSigStorageUpdateRequirementIterator is returned from FilterUpdateRequirement and is used to iterate over the raw logs and unpacked data for UpdateRequirement events raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageUpdateRequirementIterator struct {
	Event *CnStakingV3MultiSigStorageUpdateRequirement // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3MultiSigStorageUpdateRequirementIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3MultiSigStorageUpdateRequirement)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3MultiSigStorageUpdateRequirement)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3MultiSigStorageUpdateRequirementIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3MultiSigStorageUpdateRequirementIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3MultiSigStorageUpdateRequirement represents a UpdateRequirement event raised by the CnStakingV3MultiSigStorage contract.
type CnStakingV3MultiSigStorageUpdateRequirement struct {
	Requirement *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequirement is a free log retrieval operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: event UpdateRequirement(uint256 requirement)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) FilterUpdateRequirement(opts *bind.FilterOpts) (*CnStakingV3MultiSigStorageUpdateRequirementIterator, error) {

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.FilterLogs(opts, "UpdateRequirement")
	if err != nil {
		return nil, err
	}
	return &CnStakingV3MultiSigStorageUpdateRequirementIterator{contract: _CnStakingV3MultiSigStorage.contract, event: "UpdateRequirement", logs: logs, sub: sub}, nil
}

// WatchUpdateRequirement is a free log subscription operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: event UpdateRequirement(uint256 requirement)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) WatchUpdateRequirement(opts *bind.WatchOpts, sink chan<- *CnStakingV3MultiSigStorageUpdateRequirement) (event.Subscription, error) {

	logs, sub, err := _CnStakingV3MultiSigStorage.contract.WatchLogs(opts, "UpdateRequirement")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3MultiSigStorageUpdateRequirement)
				if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "UpdateRequirement", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequirement is a log parse operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: event UpdateRequirement(uint256 requirement)
func (_CnStakingV3MultiSigStorage *CnStakingV3MultiSigStorageFilterer) ParseUpdateRequirement(log types.Log) (*CnStakingV3MultiSigStorageUpdateRequirement, error) {
	event := new(CnStakingV3MultiSigStorageUpdateRequirement)
	if err := _CnStakingV3MultiSigStorage.contract.UnpackLog(event, "UpdateRequirement", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3StorageMetaData contains all meta data concerning the CnStakingV3Storage contract.
var CnStakingV3StorageMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"AcceptRewardAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"approvedWithdrawalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawableFrom\",\"type\":\"uint256\"}],\"name\":\"ApproveStakingWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"approvedWithdrawalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CancelApprovedStakingWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CompleteReviewInitialConditions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DelegateKaia\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contractType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nodeId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"unlockTime\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"unlockAmount\",\"type\":\"uint256[]\"}],\"name\":\"DeployCnStakingV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DepositLockupStakingAndInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevCnStakingV3\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetCnStakingV3\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"HandleRedelegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetCnStakingV3\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Redelegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"ReviewInitialConditions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"publicDelegation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"SetPublicDelegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRedelegationEnabled\",\"type\":\"bool\"}],\"name\":\"ToggleRedelegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gcId\",\"type\":\"uint256\"}],\"name\":\"UpdateGCId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"UpdateRewardAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingTracker\",\"type\":\"address\"}],\"name\":\"UpdateStakingTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"UpdateVoterAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"approvedWithdrawalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawApprovedStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawLockupStaking\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_BOOK_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_LOCKUP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKING_APPROVER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKING_CLAIMER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"acceptRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveStakingWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_approvedWithdrawalId\",\"type\":\"uint256\"}],\"name\":\"cancelApprovedStakingWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLockupStakingAndInit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gcId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"enumICnStakingV3.WithdrawalStakingState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"getApprovedStakingWithdrawalIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getApprovedStakingWithdrawalInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableFrom\",\"type\":\"uint256\"},{\"internalType\":\"enumICnStakingV3.WithdrawalStakingState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockupStakingInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unlockTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unlockAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"initial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"handleRedelegation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialLockupStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicDelegationEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRedelegationEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastRedelegation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupConditions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allReviewed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reviewedCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicDelegation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetCnV3\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"redelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingLockupStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reviewInitialConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gcId\",\"type\":\"uint256\"}],\"name\":\"setGCId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pdFactory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_pdArgs\",\"type\":\"bytes\"}],\"name\":\"setPublicDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tracker\",\"type\":\"address\"}],\"name\":\"setStakingTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRedelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"updateRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tracker\",\"type\":\"address\"}],\"name\":\"updateStakingTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voterAddress\",\"type\":\"address\"}],\"name\":\"updateVoterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_approvedWithdrawalId\",\"type\":\"uint256\"}],\"name\":\"withdrawApprovedStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawLockupStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalRequestMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableFrom\",\"type\":\"uint256\"},{\"internalType\":\"enumICnStakingV3.WithdrawalStakingState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"f2f2f49b": "ADDRESS_BOOK_ADDRESS()",
		"75b238fc": "ADMIN_ROLE()",
		"4b6a94cc": "CONTRACT_TYPE()",
		"8e6f6b77": "ONE_WEEK()",
		"f5b541a6": "OPERATOR_ROLE()",
		"3780b3ed": "STAKER_ROLE()",
		"96106ae4": "STAKE_LOCKUP()",
		"0c07d842": "UNSTAKING_APPROVER_ROLE()",
		"9c394c5d": "UNSTAKING_CLAIMER_ROLE()",
		"ffa1ad74": "VERSION()",
		"aa4058b9": "acceptRewardAddress(address)",
		"5df8b09a": "approveStakingWithdrawal(address,uint256)",
		"c804b115": "cancelApprovedStakingWithdrawal(uint256)",
		"c89e4361": "delegate()",
		"6a27c206": "depositLockupStakingAndInit()",
		"6d2714db": "gcId()",
		"d2569eb9": "getApprovedStakingWithdrawalIds(uint256,uint256,uint8)",
		"725c0503": "getApprovedStakingWithdrawalInfo(uint256)",
		"5ecd75f2": "getLockupStakingInfo()",
		"a006e90c": "handleRedelegation(address)",
		"06704222": "initialLockupStaking()",
		"392e53cd": "isInitialized()",
		"bfc7e948": "isPublicDelegationEnabled()",
		"7a66c96b": "isRedelegationEnabled()",
		"14d3ce10": "lastRedelegation(address)",
		"2429f8a9": "lockupConditions()",
		"139d7fed": "nodeId()",
		"8740568b": "pendingRewardAddress()",
		"e1a12d35": "publicDelegation()",
		"6bd8f804": "redelegate(address,address,uint256)",
		"7b5e0481": "remainingLockupStaking()",
		"702b9c9b": "reviewInitialConditions()",
		"8cf57cb9": "rewardAddress()",
		"ff4634bc": "setGCId(uint256)",
		"2e5dc0f7": "setPublicDelegation(address,bytes)",
		"c336aa35": "setStakingTracker(address)",
		"4cf088d9": "staking()",
		"008c477a": "stakingTracker()",
		"d75859ec": "toggleRedelegation()",
		"630b1146": "unstaking()",
		"944dd5a2": "updateRewardAddress(address)",
		"5be6eacc": "updateStakingTracker(address)",
		"5784d18b": "updateVoterAddress(address)",
		"992ac9fa": "voterAddress()",
		"6e93df0d": "withdrawApprovedStaking(uint256)",
		"505ebed4": "withdrawLockupStaking(address,uint256)",
		"19e44e32": "withdrawalRequestCount()",
		"284fbedc": "withdrawalRequestMap(uint256)",
	},
}

// CnStakingV3StorageABI is the input ABI used to generate the binding from.
// Deprecated: Use CnStakingV3StorageMetaData.ABI instead.
var CnStakingV3StorageABI = CnStakingV3StorageMetaData.ABI

// CnStakingV3StorageBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const CnStakingV3StorageBinRuntime = ``

// Deprecated: Use CnStakingV3StorageMetaData.Sigs instead.
// CnStakingV3StorageFuncSigs maps the 4-byte function signature to its string representation.
var CnStakingV3StorageFuncSigs = CnStakingV3StorageMetaData.Sigs

// CnStakingV3Storage is an auto generated Go binding around a Kaia contract.
type CnStakingV3Storage struct {
	CnStakingV3StorageCaller     // Read-only binding to the contract
	CnStakingV3StorageTransactor // Write-only binding to the contract
	CnStakingV3StorageFilterer   // Log filterer for contract events
}

// CnStakingV3StorageCaller is an auto generated read-only Go binding around a Kaia contract.
type CnStakingV3StorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CnStakingV3StorageTransactor is an auto generated write-only Go binding around a Kaia contract.
type CnStakingV3StorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CnStakingV3StorageFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type CnStakingV3StorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CnStakingV3StorageSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type CnStakingV3StorageSession struct {
	Contract     *CnStakingV3Storage // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// CnStakingV3StorageCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type CnStakingV3StorageCallerSession struct {
	Contract *CnStakingV3StorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// CnStakingV3StorageTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type CnStakingV3StorageTransactorSession struct {
	Contract     *CnStakingV3StorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// CnStakingV3StorageRaw is an auto generated low-level Go binding around a Kaia contract.
type CnStakingV3StorageRaw struct {
	Contract *CnStakingV3Storage // Generic contract binding to access the raw methods on
}

// CnStakingV3StorageCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type CnStakingV3StorageCallerRaw struct {
	Contract *CnStakingV3StorageCaller // Generic read-only contract binding to access the raw methods on
}

// CnStakingV3StorageTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type CnStakingV3StorageTransactorRaw struct {
	Contract *CnStakingV3StorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCnStakingV3Storage creates a new instance of CnStakingV3Storage, bound to a specific deployed contract.
func NewCnStakingV3Storage(address common.Address, backend bind.ContractBackend) (*CnStakingV3Storage, error) {
	contract, err := bindCnStakingV3Storage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3Storage{CnStakingV3StorageCaller: CnStakingV3StorageCaller{contract: contract}, CnStakingV3StorageTransactor: CnStakingV3StorageTransactor{contract: contract}, CnStakingV3StorageFilterer: CnStakingV3StorageFilterer{contract: contract}}, nil
}

// NewCnStakingV3StorageCaller creates a new read-only instance of CnStakingV3Storage, bound to a specific deployed contract.
func NewCnStakingV3StorageCaller(address common.Address, caller bind.ContractCaller) (*CnStakingV3StorageCaller, error) {
	contract, err := bindCnStakingV3Storage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageCaller{contract: contract}, nil
}

// NewCnStakingV3StorageTransactor creates a new write-only instance of CnStakingV3Storage, bound to a specific deployed contract.
func NewCnStakingV3StorageTransactor(address common.Address, transactor bind.ContractTransactor) (*CnStakingV3StorageTransactor, error) {
	contract, err := bindCnStakingV3Storage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageTransactor{contract: contract}, nil
}

// NewCnStakingV3StorageFilterer creates a new log filterer instance of CnStakingV3Storage, bound to a specific deployed contract.
func NewCnStakingV3StorageFilterer(address common.Address, filterer bind.ContractFilterer) (*CnStakingV3StorageFilterer, error) {
	contract, err := bindCnStakingV3Storage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageFilterer{contract: contract}, nil
}

// bindCnStakingV3Storage binds a generic wrapper to an already deployed contract.
func bindCnStakingV3Storage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CnStakingV3StorageMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CnStakingV3Storage *CnStakingV3StorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CnStakingV3Storage.Contract.CnStakingV3StorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CnStakingV3Storage *CnStakingV3StorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.CnStakingV3StorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CnStakingV3Storage *CnStakingV3StorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.CnStakingV3StorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CnStakingV3Storage *CnStakingV3StorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CnStakingV3Storage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CnStakingV3Storage *CnStakingV3StorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CnStakingV3Storage *CnStakingV3StorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.contract.Transact(opts, method, params...)
}

// ADDRESSBOOKADDRESS is a free data retrieval call binding the contract method 0xf2f2f49b.
//
// Solidity: function ADDRESS_BOOK_ADDRESS() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) ADDRESSBOOKADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "ADDRESS_BOOK_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ADDRESSBOOKADDRESS is a free data retrieval call binding the contract method 0xf2f2f49b.
//
// Solidity: function ADDRESS_BOOK_ADDRESS() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageSession) ADDRESSBOOKADDRESS() (common.Address, error) {
	return _CnStakingV3Storage.Contract.ADDRESSBOOKADDRESS(&_CnStakingV3Storage.CallOpts)
}

// ADDRESSBOOKADDRESS is a free data retrieval call binding the contract method 0xf2f2f49b.
//
// Solidity: function ADDRESS_BOOK_ADDRESS() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) ADDRESSBOOKADDRESS() (common.Address, error) {
	return _CnStakingV3Storage.Contract.ADDRESSBOOKADDRESS(&_CnStakingV3Storage.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) ADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_CnStakingV3Storage *CnStakingV3StorageSession) ADMINROLE() ([32]byte, error) {
	return _CnStakingV3Storage.Contract.ADMINROLE(&_CnStakingV3Storage.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) ADMINROLE() ([32]byte, error) {
	return _CnStakingV3Storage.Contract.ADMINROLE(&_CnStakingV3Storage.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) CONTRACTTYPE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "CONTRACT_TYPE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_CnStakingV3Storage *CnStakingV3StorageSession) CONTRACTTYPE() (string, error) {
	return _CnStakingV3Storage.Contract.CONTRACTTYPE(&_CnStakingV3Storage.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) CONTRACTTYPE() (string, error) {
	return _CnStakingV3Storage.Contract.CONTRACTTYPE(&_CnStakingV3Storage.CallOpts)
}

// ONEWEEK is a free data retrieval call binding the contract method 0x8e6f6b77.
//
// Solidity: function ONE_WEEK() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) ONEWEEK(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "ONE_WEEK")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ONEWEEK is a free data retrieval call binding the contract method 0x8e6f6b77.
//
// Solidity: function ONE_WEEK() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageSession) ONEWEEK() (*big.Int, error) {
	return _CnStakingV3Storage.Contract.ONEWEEK(&_CnStakingV3Storage.CallOpts)
}

// ONEWEEK is a free data retrieval call binding the contract method 0x8e6f6b77.
//
// Solidity: function ONE_WEEK() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) ONEWEEK() (*big.Int, error) {
	return _CnStakingV3Storage.Contract.ONEWEEK(&_CnStakingV3Storage.CallOpts)
}

// OPERATORROLE is a free data retrieval call binding the contract method 0xf5b541a6.
//
// Solidity: function OPERATOR_ROLE() view returns(bytes32)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) OPERATORROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "OPERATOR_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// OPERATORROLE is a free data retrieval call binding the contract method 0xf5b541a6.
//
// Solidity: function OPERATOR_ROLE() view returns(bytes32)
func (_CnStakingV3Storage *CnStakingV3StorageSession) OPERATORROLE() ([32]byte, error) {
	return _CnStakingV3Storage.Contract.OPERATORROLE(&_CnStakingV3Storage.CallOpts)
}

// OPERATORROLE is a free data retrieval call binding the contract method 0xf5b541a6.
//
// Solidity: function OPERATOR_ROLE() view returns(bytes32)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) OPERATORROLE() ([32]byte, error) {
	return _CnStakingV3Storage.Contract.OPERATORROLE(&_CnStakingV3Storage.CallOpts)
}

// STAKERROLE is a free data retrieval call binding the contract method 0x3780b3ed.
//
// Solidity: function STAKER_ROLE() view returns(bytes32)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) STAKERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "STAKER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// STAKERROLE is a free data retrieval call binding the contract method 0x3780b3ed.
//
// Solidity: function STAKER_ROLE() view returns(bytes32)
func (_CnStakingV3Storage *CnStakingV3StorageSession) STAKERROLE() ([32]byte, error) {
	return _CnStakingV3Storage.Contract.STAKERROLE(&_CnStakingV3Storage.CallOpts)
}

// STAKERROLE is a free data retrieval call binding the contract method 0x3780b3ed.
//
// Solidity: function STAKER_ROLE() view returns(bytes32)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) STAKERROLE() ([32]byte, error) {
	return _CnStakingV3Storage.Contract.STAKERROLE(&_CnStakingV3Storage.CallOpts)
}

// STAKELOCKUP is a free data retrieval call binding the contract method 0x96106ae4.
//
// Solidity: function STAKE_LOCKUP() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) STAKELOCKUP(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "STAKE_LOCKUP")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// STAKELOCKUP is a free data retrieval call binding the contract method 0x96106ae4.
//
// Solidity: function STAKE_LOCKUP() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageSession) STAKELOCKUP() (*big.Int, error) {
	return _CnStakingV3Storage.Contract.STAKELOCKUP(&_CnStakingV3Storage.CallOpts)
}

// STAKELOCKUP is a free data retrieval call binding the contract method 0x96106ae4.
//
// Solidity: function STAKE_LOCKUP() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) STAKELOCKUP() (*big.Int, error) {
	return _CnStakingV3Storage.Contract.STAKELOCKUP(&_CnStakingV3Storage.CallOpts)
}

// UNSTAKINGAPPROVERROLE is a free data retrieval call binding the contract method 0x0c07d842.
//
// Solidity: function UNSTAKING_APPROVER_ROLE() view returns(bytes32)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) UNSTAKINGAPPROVERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "UNSTAKING_APPROVER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// UNSTAKINGAPPROVERROLE is a free data retrieval call binding the contract method 0x0c07d842.
//
// Solidity: function UNSTAKING_APPROVER_ROLE() view returns(bytes32)
func (_CnStakingV3Storage *CnStakingV3StorageSession) UNSTAKINGAPPROVERROLE() ([32]byte, error) {
	return _CnStakingV3Storage.Contract.UNSTAKINGAPPROVERROLE(&_CnStakingV3Storage.CallOpts)
}

// UNSTAKINGAPPROVERROLE is a free data retrieval call binding the contract method 0x0c07d842.
//
// Solidity: function UNSTAKING_APPROVER_ROLE() view returns(bytes32)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) UNSTAKINGAPPROVERROLE() ([32]byte, error) {
	return _CnStakingV3Storage.Contract.UNSTAKINGAPPROVERROLE(&_CnStakingV3Storage.CallOpts)
}

// UNSTAKINGCLAIMERROLE is a free data retrieval call binding the contract method 0x9c394c5d.
//
// Solidity: function UNSTAKING_CLAIMER_ROLE() view returns(bytes32)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) UNSTAKINGCLAIMERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "UNSTAKING_CLAIMER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// UNSTAKINGCLAIMERROLE is a free data retrieval call binding the contract method 0x9c394c5d.
//
// Solidity: function UNSTAKING_CLAIMER_ROLE() view returns(bytes32)
func (_CnStakingV3Storage *CnStakingV3StorageSession) UNSTAKINGCLAIMERROLE() ([32]byte, error) {
	return _CnStakingV3Storage.Contract.UNSTAKINGCLAIMERROLE(&_CnStakingV3Storage.CallOpts)
}

// UNSTAKINGCLAIMERROLE is a free data retrieval call binding the contract method 0x9c394c5d.
//
// Solidity: function UNSTAKING_CLAIMER_ROLE() view returns(bytes32)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) UNSTAKINGCLAIMERROLE() ([32]byte, error) {
	return _CnStakingV3Storage.Contract.UNSTAKINGCLAIMERROLE(&_CnStakingV3Storage.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) VERSION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageSession) VERSION() (*big.Int, error) {
	return _CnStakingV3Storage.Contract.VERSION(&_CnStakingV3Storage.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) VERSION() (*big.Int, error) {
	return _CnStakingV3Storage.Contract.VERSION(&_CnStakingV3Storage.CallOpts)
}

// GcId is a free data retrieval call binding the contract method 0x6d2714db.
//
// Solidity: function gcId() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) GcId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "gcId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GcId is a free data retrieval call binding the contract method 0x6d2714db.
//
// Solidity: function gcId() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageSession) GcId() (*big.Int, error) {
	return _CnStakingV3Storage.Contract.GcId(&_CnStakingV3Storage.CallOpts)
}

// GcId is a free data retrieval call binding the contract method 0x6d2714db.
//
// Solidity: function gcId() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) GcId() (*big.Int, error) {
	return _CnStakingV3Storage.Contract.GcId(&_CnStakingV3Storage.CallOpts)
}

// GetApprovedStakingWithdrawalIds is a free data retrieval call binding the contract method 0xd2569eb9.
//
// Solidity: function getApprovedStakingWithdrawalIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) GetApprovedStakingWithdrawalIds(opts *bind.CallOpts, _from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "getApprovedStakingWithdrawalIds", _from, _to, _state)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetApprovedStakingWithdrawalIds is a free data retrieval call binding the contract method 0xd2569eb9.
//
// Solidity: function getApprovedStakingWithdrawalIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_CnStakingV3Storage *CnStakingV3StorageSession) GetApprovedStakingWithdrawalIds(_from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	return _CnStakingV3Storage.Contract.GetApprovedStakingWithdrawalIds(&_CnStakingV3Storage.CallOpts, _from, _to, _state)
}

// GetApprovedStakingWithdrawalIds is a free data retrieval call binding the contract method 0xd2569eb9.
//
// Solidity: function getApprovedStakingWithdrawalIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) GetApprovedStakingWithdrawalIds(_from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	return _CnStakingV3Storage.Contract.GetApprovedStakingWithdrawalIds(&_CnStakingV3Storage.CallOpts, _from, _to, _state)
}

// GetApprovedStakingWithdrawalInfo is a free data retrieval call binding the contract method 0x725c0503.
//
// Solidity: function getApprovedStakingWithdrawalInfo(uint256 _index) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) GetApprovedStakingWithdrawalInfo(opts *bind.CallOpts, _index *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "getApprovedStakingWithdrawalInfo", _index)

	outstruct := new(struct {
		To               common.Address
		Value            *big.Int
		WithdrawableFrom *big.Int
		State            uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.To = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Value = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.WithdrawableFrom = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.State = *abi.ConvertType(out[3], new(uint8)).(*uint8)

	return *outstruct, err

}

// GetApprovedStakingWithdrawalInfo is a free data retrieval call binding the contract method 0x725c0503.
//
// Solidity: function getApprovedStakingWithdrawalInfo(uint256 _index) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_CnStakingV3Storage *CnStakingV3StorageSession) GetApprovedStakingWithdrawalInfo(_index *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	return _CnStakingV3Storage.Contract.GetApprovedStakingWithdrawalInfo(&_CnStakingV3Storage.CallOpts, _index)
}

// GetApprovedStakingWithdrawalInfo is a free data retrieval call binding the contract method 0x725c0503.
//
// Solidity: function getApprovedStakingWithdrawalInfo(uint256 _index) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) GetApprovedStakingWithdrawalInfo(_index *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	return _CnStakingV3Storage.Contract.GetApprovedStakingWithdrawalInfo(&_CnStakingV3Storage.CallOpts, _index)
}

// GetLockupStakingInfo is a free data retrieval call binding the contract method 0x5ecd75f2.
//
// Solidity: function getLockupStakingInfo() view returns(uint256[] unlockTime, uint256[] unlockAmount, uint256 initial, uint256 remaining, uint256 withdrawable)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) GetLockupStakingInfo(opts *bind.CallOpts) (struct {
	UnlockTime   []*big.Int
	UnlockAmount []*big.Int
	Initial      *big.Int
	Remaining    *big.Int
	Withdrawable *big.Int
}, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "getLockupStakingInfo")

	outstruct := new(struct {
		UnlockTime   []*big.Int
		UnlockAmount []*big.Int
		Initial      *big.Int
		Remaining    *big.Int
		Withdrawable *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.UnlockTime = *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
	outstruct.UnlockAmount = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)
	outstruct.Initial = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Remaining = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Withdrawable = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetLockupStakingInfo is a free data retrieval call binding the contract method 0x5ecd75f2.
//
// Solidity: function getLockupStakingInfo() view returns(uint256[] unlockTime, uint256[] unlockAmount, uint256 initial, uint256 remaining, uint256 withdrawable)
func (_CnStakingV3Storage *CnStakingV3StorageSession) GetLockupStakingInfo() (struct {
	UnlockTime   []*big.Int
	UnlockAmount []*big.Int
	Initial      *big.Int
	Remaining    *big.Int
	Withdrawable *big.Int
}, error) {
	return _CnStakingV3Storage.Contract.GetLockupStakingInfo(&_CnStakingV3Storage.CallOpts)
}

// GetLockupStakingInfo is a free data retrieval call binding the contract method 0x5ecd75f2.
//
// Solidity: function getLockupStakingInfo() view returns(uint256[] unlockTime, uint256[] unlockAmount, uint256 initial, uint256 remaining, uint256 withdrawable)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) GetLockupStakingInfo() (struct {
	UnlockTime   []*big.Int
	UnlockAmount []*big.Int
	Initial      *big.Int
	Remaining    *big.Int
	Withdrawable *big.Int
}, error) {
	return _CnStakingV3Storage.Contract.GetLockupStakingInfo(&_CnStakingV3Storage.CallOpts)
}

// InitialLockupStaking is a free data retrieval call binding the contract method 0x06704222.
//
// Solidity: function initialLockupStaking() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) InitialLockupStaking(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "initialLockupStaking")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InitialLockupStaking is a free data retrieval call binding the contract method 0x06704222.
//
// Solidity: function initialLockupStaking() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageSession) InitialLockupStaking() (*big.Int, error) {
	return _CnStakingV3Storage.Contract.InitialLockupStaking(&_CnStakingV3Storage.CallOpts)
}

// InitialLockupStaking is a free data retrieval call binding the contract method 0x06704222.
//
// Solidity: function initialLockupStaking() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) InitialLockupStaking() (*big.Int, error) {
	return _CnStakingV3Storage.Contract.InitialLockupStaking(&_CnStakingV3Storage.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) IsInitialized(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "isInitialized")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_CnStakingV3Storage *CnStakingV3StorageSession) IsInitialized() (bool, error) {
	return _CnStakingV3Storage.Contract.IsInitialized(&_CnStakingV3Storage.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) IsInitialized() (bool, error) {
	return _CnStakingV3Storage.Contract.IsInitialized(&_CnStakingV3Storage.CallOpts)
}

// IsPublicDelegationEnabled is a free data retrieval call binding the contract method 0xbfc7e948.
//
// Solidity: function isPublicDelegationEnabled() view returns(bool)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) IsPublicDelegationEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "isPublicDelegationEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPublicDelegationEnabled is a free data retrieval call binding the contract method 0xbfc7e948.
//
// Solidity: function isPublicDelegationEnabled() view returns(bool)
func (_CnStakingV3Storage *CnStakingV3StorageSession) IsPublicDelegationEnabled() (bool, error) {
	return _CnStakingV3Storage.Contract.IsPublicDelegationEnabled(&_CnStakingV3Storage.CallOpts)
}

// IsPublicDelegationEnabled is a free data retrieval call binding the contract method 0xbfc7e948.
//
// Solidity: function isPublicDelegationEnabled() view returns(bool)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) IsPublicDelegationEnabled() (bool, error) {
	return _CnStakingV3Storage.Contract.IsPublicDelegationEnabled(&_CnStakingV3Storage.CallOpts)
}

// IsRedelegationEnabled is a free data retrieval call binding the contract method 0x7a66c96b.
//
// Solidity: function isRedelegationEnabled() view returns(bool)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) IsRedelegationEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "isRedelegationEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRedelegationEnabled is a free data retrieval call binding the contract method 0x7a66c96b.
//
// Solidity: function isRedelegationEnabled() view returns(bool)
func (_CnStakingV3Storage *CnStakingV3StorageSession) IsRedelegationEnabled() (bool, error) {
	return _CnStakingV3Storage.Contract.IsRedelegationEnabled(&_CnStakingV3Storage.CallOpts)
}

// IsRedelegationEnabled is a free data retrieval call binding the contract method 0x7a66c96b.
//
// Solidity: function isRedelegationEnabled() view returns(bool)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) IsRedelegationEnabled() (bool, error) {
	return _CnStakingV3Storage.Contract.IsRedelegationEnabled(&_CnStakingV3Storage.CallOpts)
}

// LastRedelegation is a free data retrieval call binding the contract method 0x14d3ce10.
//
// Solidity: function lastRedelegation(address ) view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) LastRedelegation(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "lastRedelegation", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastRedelegation is a free data retrieval call binding the contract method 0x14d3ce10.
//
// Solidity: function lastRedelegation(address ) view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageSession) LastRedelegation(arg0 common.Address) (*big.Int, error) {
	return _CnStakingV3Storage.Contract.LastRedelegation(&_CnStakingV3Storage.CallOpts, arg0)
}

// LastRedelegation is a free data retrieval call binding the contract method 0x14d3ce10.
//
// Solidity: function lastRedelegation(address ) view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) LastRedelegation(arg0 common.Address) (*big.Int, error) {
	return _CnStakingV3Storage.Contract.LastRedelegation(&_CnStakingV3Storage.CallOpts, arg0)
}

// LockupConditions is a free data retrieval call binding the contract method 0x2429f8a9.
//
// Solidity: function lockupConditions() view returns(bool allReviewed, uint256 reviewedCount)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) LockupConditions(opts *bind.CallOpts) (struct {
	AllReviewed   bool
	ReviewedCount *big.Int
}, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "lockupConditions")

	outstruct := new(struct {
		AllReviewed   bool
		ReviewedCount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AllReviewed = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ReviewedCount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// LockupConditions is a free data retrieval call binding the contract method 0x2429f8a9.
//
// Solidity: function lockupConditions() view returns(bool allReviewed, uint256 reviewedCount)
func (_CnStakingV3Storage *CnStakingV3StorageSession) LockupConditions() (struct {
	AllReviewed   bool
	ReviewedCount *big.Int
}, error) {
	return _CnStakingV3Storage.Contract.LockupConditions(&_CnStakingV3Storage.CallOpts)
}

// LockupConditions is a free data retrieval call binding the contract method 0x2429f8a9.
//
// Solidity: function lockupConditions() view returns(bool allReviewed, uint256 reviewedCount)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) LockupConditions() (struct {
	AllReviewed   bool
	ReviewedCount *big.Int
}, error) {
	return _CnStakingV3Storage.Contract.LockupConditions(&_CnStakingV3Storage.CallOpts)
}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) NodeId(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "nodeId")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageSession) NodeId() (common.Address, error) {
	return _CnStakingV3Storage.Contract.NodeId(&_CnStakingV3Storage.CallOpts)
}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) NodeId() (common.Address, error) {
	return _CnStakingV3Storage.Contract.NodeId(&_CnStakingV3Storage.CallOpts)
}

// PendingRewardAddress is a free data retrieval call binding the contract method 0x8740568b.
//
// Solidity: function pendingRewardAddress() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) PendingRewardAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "pendingRewardAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingRewardAddress is a free data retrieval call binding the contract method 0x8740568b.
//
// Solidity: function pendingRewardAddress() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageSession) PendingRewardAddress() (common.Address, error) {
	return _CnStakingV3Storage.Contract.PendingRewardAddress(&_CnStakingV3Storage.CallOpts)
}

// PendingRewardAddress is a free data retrieval call binding the contract method 0x8740568b.
//
// Solidity: function pendingRewardAddress() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) PendingRewardAddress() (common.Address, error) {
	return _CnStakingV3Storage.Contract.PendingRewardAddress(&_CnStakingV3Storage.CallOpts)
}

// PublicDelegation is a free data retrieval call binding the contract method 0xe1a12d35.
//
// Solidity: function publicDelegation() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) PublicDelegation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "publicDelegation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PublicDelegation is a free data retrieval call binding the contract method 0xe1a12d35.
//
// Solidity: function publicDelegation() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageSession) PublicDelegation() (common.Address, error) {
	return _CnStakingV3Storage.Contract.PublicDelegation(&_CnStakingV3Storage.CallOpts)
}

// PublicDelegation is a free data retrieval call binding the contract method 0xe1a12d35.
//
// Solidity: function publicDelegation() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) PublicDelegation() (common.Address, error) {
	return _CnStakingV3Storage.Contract.PublicDelegation(&_CnStakingV3Storage.CallOpts)
}

// RemainingLockupStaking is a free data retrieval call binding the contract method 0x7b5e0481.
//
// Solidity: function remainingLockupStaking() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) RemainingLockupStaking(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "remainingLockupStaking")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RemainingLockupStaking is a free data retrieval call binding the contract method 0x7b5e0481.
//
// Solidity: function remainingLockupStaking() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageSession) RemainingLockupStaking() (*big.Int, error) {
	return _CnStakingV3Storage.Contract.RemainingLockupStaking(&_CnStakingV3Storage.CallOpts)
}

// RemainingLockupStaking is a free data retrieval call binding the contract method 0x7b5e0481.
//
// Solidity: function remainingLockupStaking() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) RemainingLockupStaking() (*big.Int, error) {
	return _CnStakingV3Storage.Contract.RemainingLockupStaking(&_CnStakingV3Storage.CallOpts)
}

// RewardAddress is a free data retrieval call binding the contract method 0x8cf57cb9.
//
// Solidity: function rewardAddress() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) RewardAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "rewardAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RewardAddress is a free data retrieval call binding the contract method 0x8cf57cb9.
//
// Solidity: function rewardAddress() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageSession) RewardAddress() (common.Address, error) {
	return _CnStakingV3Storage.Contract.RewardAddress(&_CnStakingV3Storage.CallOpts)
}

// RewardAddress is a free data retrieval call binding the contract method 0x8cf57cb9.
//
// Solidity: function rewardAddress() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) RewardAddress() (common.Address, error) {
	return _CnStakingV3Storage.Contract.RewardAddress(&_CnStakingV3Storage.CallOpts)
}

// Staking is a free data retrieval call binding the contract method 0x4cf088d9.
//
// Solidity: function staking() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) Staking(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "staking")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Staking is a free data retrieval call binding the contract method 0x4cf088d9.
//
// Solidity: function staking() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageSession) Staking() (*big.Int, error) {
	return _CnStakingV3Storage.Contract.Staking(&_CnStakingV3Storage.CallOpts)
}

// Staking is a free data retrieval call binding the contract method 0x4cf088d9.
//
// Solidity: function staking() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) Staking() (*big.Int, error) {
	return _CnStakingV3Storage.Contract.Staking(&_CnStakingV3Storage.CallOpts)
}

// StakingTracker is a free data retrieval call binding the contract method 0x008c477a.
//
// Solidity: function stakingTracker() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) StakingTracker(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "stakingTracker")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakingTracker is a free data retrieval call binding the contract method 0x008c477a.
//
// Solidity: function stakingTracker() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageSession) StakingTracker() (common.Address, error) {
	return _CnStakingV3Storage.Contract.StakingTracker(&_CnStakingV3Storage.CallOpts)
}

// StakingTracker is a free data retrieval call binding the contract method 0x008c477a.
//
// Solidity: function stakingTracker() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) StakingTracker() (common.Address, error) {
	return _CnStakingV3Storage.Contract.StakingTracker(&_CnStakingV3Storage.CallOpts)
}

// Unstaking is a free data retrieval call binding the contract method 0x630b1146.
//
// Solidity: function unstaking() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) Unstaking(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "unstaking")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Unstaking is a free data retrieval call binding the contract method 0x630b1146.
//
// Solidity: function unstaking() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageSession) Unstaking() (*big.Int, error) {
	return _CnStakingV3Storage.Contract.Unstaking(&_CnStakingV3Storage.CallOpts)
}

// Unstaking is a free data retrieval call binding the contract method 0x630b1146.
//
// Solidity: function unstaking() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) Unstaking() (*big.Int, error) {
	return _CnStakingV3Storage.Contract.Unstaking(&_CnStakingV3Storage.CallOpts)
}

// VoterAddress is a free data retrieval call binding the contract method 0x992ac9fa.
//
// Solidity: function voterAddress() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) VoterAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "voterAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VoterAddress is a free data retrieval call binding the contract method 0x992ac9fa.
//
// Solidity: function voterAddress() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageSession) VoterAddress() (common.Address, error) {
	return _CnStakingV3Storage.Contract.VoterAddress(&_CnStakingV3Storage.CallOpts)
}

// VoterAddress is a free data retrieval call binding the contract method 0x992ac9fa.
//
// Solidity: function voterAddress() view returns(address)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) VoterAddress() (common.Address, error) {
	return _CnStakingV3Storage.Contract.VoterAddress(&_CnStakingV3Storage.CallOpts)
}

// WithdrawalRequestCount is a free data retrieval call binding the contract method 0x19e44e32.
//
// Solidity: function withdrawalRequestCount() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) WithdrawalRequestCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "withdrawalRequestCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawalRequestCount is a free data retrieval call binding the contract method 0x19e44e32.
//
// Solidity: function withdrawalRequestCount() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageSession) WithdrawalRequestCount() (*big.Int, error) {
	return _CnStakingV3Storage.Contract.WithdrawalRequestCount(&_CnStakingV3Storage.CallOpts)
}

// WithdrawalRequestCount is a free data retrieval call binding the contract method 0x19e44e32.
//
// Solidity: function withdrawalRequestCount() view returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) WithdrawalRequestCount() (*big.Int, error) {
	return _CnStakingV3Storage.Contract.WithdrawalRequestCount(&_CnStakingV3Storage.CallOpts)
}

// WithdrawalRequestMap is a free data retrieval call binding the contract method 0x284fbedc.
//
// Solidity: function withdrawalRequestMap(uint256 ) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_CnStakingV3Storage *CnStakingV3StorageCaller) WithdrawalRequestMap(opts *bind.CallOpts, arg0 *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	var out []interface{}
	err := _CnStakingV3Storage.contract.Call(opts, &out, "withdrawalRequestMap", arg0)

	outstruct := new(struct {
		To               common.Address
		Value            *big.Int
		WithdrawableFrom *big.Int
		State            uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.To = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Value = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.WithdrawableFrom = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.State = *abi.ConvertType(out[3], new(uint8)).(*uint8)

	return *outstruct, err

}

// WithdrawalRequestMap is a free data retrieval call binding the contract method 0x284fbedc.
//
// Solidity: function withdrawalRequestMap(uint256 ) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_CnStakingV3Storage *CnStakingV3StorageSession) WithdrawalRequestMap(arg0 *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	return _CnStakingV3Storage.Contract.WithdrawalRequestMap(&_CnStakingV3Storage.CallOpts, arg0)
}

// WithdrawalRequestMap is a free data retrieval call binding the contract method 0x284fbedc.
//
// Solidity: function withdrawalRequestMap(uint256 ) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_CnStakingV3Storage *CnStakingV3StorageCallerSession) WithdrawalRequestMap(arg0 *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	return _CnStakingV3Storage.Contract.WithdrawalRequestMap(&_CnStakingV3Storage.CallOpts, arg0)
}

// AcceptRewardAddress is a paid mutator transaction binding the contract method 0xaa4058b9.
//
// Solidity: function acceptRewardAddress(address _rewardAddress) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactor) AcceptRewardAddress(opts *bind.TransactOpts, _rewardAddress common.Address) (*types.Transaction, error) {
	return _CnStakingV3Storage.contract.Transact(opts, "acceptRewardAddress", _rewardAddress)
}

// AcceptRewardAddress is a paid mutator transaction binding the contract method 0xaa4058b9.
//
// Solidity: function acceptRewardAddress(address _rewardAddress) returns()
func (_CnStakingV3Storage *CnStakingV3StorageSession) AcceptRewardAddress(_rewardAddress common.Address) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.AcceptRewardAddress(&_CnStakingV3Storage.TransactOpts, _rewardAddress)
}

// AcceptRewardAddress is a paid mutator transaction binding the contract method 0xaa4058b9.
//
// Solidity: function acceptRewardAddress(address _rewardAddress) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactorSession) AcceptRewardAddress(_rewardAddress common.Address) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.AcceptRewardAddress(&_CnStakingV3Storage.TransactOpts, _rewardAddress)
}

// ApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x5df8b09a.
//
// Solidity: function approveStakingWithdrawal(address _to, uint256 _value) returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageTransactor) ApproveStakingWithdrawal(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3Storage.contract.Transact(opts, "approveStakingWithdrawal", _to, _value)
}

// ApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x5df8b09a.
//
// Solidity: function approveStakingWithdrawal(address _to, uint256 _value) returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageSession) ApproveStakingWithdrawal(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.ApproveStakingWithdrawal(&_CnStakingV3Storage.TransactOpts, _to, _value)
}

// ApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x5df8b09a.
//
// Solidity: function approveStakingWithdrawal(address _to, uint256 _value) returns(uint256)
func (_CnStakingV3Storage *CnStakingV3StorageTransactorSession) ApproveStakingWithdrawal(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.ApproveStakingWithdrawal(&_CnStakingV3Storage.TransactOpts, _to, _value)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _approvedWithdrawalId) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactor) CancelApprovedStakingWithdrawal(opts *bind.TransactOpts, _approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _CnStakingV3Storage.contract.Transact(opts, "cancelApprovedStakingWithdrawal", _approvedWithdrawalId)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _approvedWithdrawalId) returns()
func (_CnStakingV3Storage *CnStakingV3StorageSession) CancelApprovedStakingWithdrawal(_approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.CancelApprovedStakingWithdrawal(&_CnStakingV3Storage.TransactOpts, _approvedWithdrawalId)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _approvedWithdrawalId) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactorSession) CancelApprovedStakingWithdrawal(_approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.CancelApprovedStakingWithdrawal(&_CnStakingV3Storage.TransactOpts, _approvedWithdrawalId)
}

// Delegate is a paid mutator transaction binding the contract method 0xc89e4361.
//
// Solidity: function delegate() payable returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactor) Delegate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3Storage.contract.Transact(opts, "delegate")
}

// Delegate is a paid mutator transaction binding the contract method 0xc89e4361.
//
// Solidity: function delegate() payable returns()
func (_CnStakingV3Storage *CnStakingV3StorageSession) Delegate() (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.Delegate(&_CnStakingV3Storage.TransactOpts)
}

// Delegate is a paid mutator transaction binding the contract method 0xc89e4361.
//
// Solidity: function delegate() payable returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactorSession) Delegate() (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.Delegate(&_CnStakingV3Storage.TransactOpts)
}

// DepositLockupStakingAndInit is a paid mutator transaction binding the contract method 0x6a27c206.
//
// Solidity: function depositLockupStakingAndInit() payable returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactor) DepositLockupStakingAndInit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3Storage.contract.Transact(opts, "depositLockupStakingAndInit")
}

// DepositLockupStakingAndInit is a paid mutator transaction binding the contract method 0x6a27c206.
//
// Solidity: function depositLockupStakingAndInit() payable returns()
func (_CnStakingV3Storage *CnStakingV3StorageSession) DepositLockupStakingAndInit() (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.DepositLockupStakingAndInit(&_CnStakingV3Storage.TransactOpts)
}

// DepositLockupStakingAndInit is a paid mutator transaction binding the contract method 0x6a27c206.
//
// Solidity: function depositLockupStakingAndInit() payable returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactorSession) DepositLockupStakingAndInit() (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.DepositLockupStakingAndInit(&_CnStakingV3Storage.TransactOpts)
}

// HandleRedelegation is a paid mutator transaction binding the contract method 0xa006e90c.
//
// Solidity: function handleRedelegation(address _user) payable returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactor) HandleRedelegation(opts *bind.TransactOpts, _user common.Address) (*types.Transaction, error) {
	return _CnStakingV3Storage.contract.Transact(opts, "handleRedelegation", _user)
}

// HandleRedelegation is a paid mutator transaction binding the contract method 0xa006e90c.
//
// Solidity: function handleRedelegation(address _user) payable returns()
func (_CnStakingV3Storage *CnStakingV3StorageSession) HandleRedelegation(_user common.Address) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.HandleRedelegation(&_CnStakingV3Storage.TransactOpts, _user)
}

// HandleRedelegation is a paid mutator transaction binding the contract method 0xa006e90c.
//
// Solidity: function handleRedelegation(address _user) payable returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactorSession) HandleRedelegation(_user common.Address) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.HandleRedelegation(&_CnStakingV3Storage.TransactOpts, _user)
}

// Redelegate is a paid mutator transaction binding the contract method 0x6bd8f804.
//
// Solidity: function redelegate(address _user, address _targetCnV3, uint256 _value) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactor) Redelegate(opts *bind.TransactOpts, _user common.Address, _targetCnV3 common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3Storage.contract.Transact(opts, "redelegate", _user, _targetCnV3, _value)
}

// Redelegate is a paid mutator transaction binding the contract method 0x6bd8f804.
//
// Solidity: function redelegate(address _user, address _targetCnV3, uint256 _value) returns()
func (_CnStakingV3Storage *CnStakingV3StorageSession) Redelegate(_user common.Address, _targetCnV3 common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.Redelegate(&_CnStakingV3Storage.TransactOpts, _user, _targetCnV3, _value)
}

// Redelegate is a paid mutator transaction binding the contract method 0x6bd8f804.
//
// Solidity: function redelegate(address _user, address _targetCnV3, uint256 _value) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactorSession) Redelegate(_user common.Address, _targetCnV3 common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.Redelegate(&_CnStakingV3Storage.TransactOpts, _user, _targetCnV3, _value)
}

// ReviewInitialConditions is a paid mutator transaction binding the contract method 0x702b9c9b.
//
// Solidity: function reviewInitialConditions() returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactor) ReviewInitialConditions(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3Storage.contract.Transact(opts, "reviewInitialConditions")
}

// ReviewInitialConditions is a paid mutator transaction binding the contract method 0x702b9c9b.
//
// Solidity: function reviewInitialConditions() returns()
func (_CnStakingV3Storage *CnStakingV3StorageSession) ReviewInitialConditions() (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.ReviewInitialConditions(&_CnStakingV3Storage.TransactOpts)
}

// ReviewInitialConditions is a paid mutator transaction binding the contract method 0x702b9c9b.
//
// Solidity: function reviewInitialConditions() returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactorSession) ReviewInitialConditions() (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.ReviewInitialConditions(&_CnStakingV3Storage.TransactOpts)
}

// SetGCId is a paid mutator transaction binding the contract method 0xff4634bc.
//
// Solidity: function setGCId(uint256 _gcId) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactor) SetGCId(opts *bind.TransactOpts, _gcId *big.Int) (*types.Transaction, error) {
	return _CnStakingV3Storage.contract.Transact(opts, "setGCId", _gcId)
}

// SetGCId is a paid mutator transaction binding the contract method 0xff4634bc.
//
// Solidity: function setGCId(uint256 _gcId) returns()
func (_CnStakingV3Storage *CnStakingV3StorageSession) SetGCId(_gcId *big.Int) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.SetGCId(&_CnStakingV3Storage.TransactOpts, _gcId)
}

// SetGCId is a paid mutator transaction binding the contract method 0xff4634bc.
//
// Solidity: function setGCId(uint256 _gcId) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactorSession) SetGCId(_gcId *big.Int) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.SetGCId(&_CnStakingV3Storage.TransactOpts, _gcId)
}

// SetPublicDelegation is a paid mutator transaction binding the contract method 0x2e5dc0f7.
//
// Solidity: function setPublicDelegation(address _pdFactory, bytes _pdArgs) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactor) SetPublicDelegation(opts *bind.TransactOpts, _pdFactory common.Address, _pdArgs []byte) (*types.Transaction, error) {
	return _CnStakingV3Storage.contract.Transact(opts, "setPublicDelegation", _pdFactory, _pdArgs)
}

// SetPublicDelegation is a paid mutator transaction binding the contract method 0x2e5dc0f7.
//
// Solidity: function setPublicDelegation(address _pdFactory, bytes _pdArgs) returns()
func (_CnStakingV3Storage *CnStakingV3StorageSession) SetPublicDelegation(_pdFactory common.Address, _pdArgs []byte) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.SetPublicDelegation(&_CnStakingV3Storage.TransactOpts, _pdFactory, _pdArgs)
}

// SetPublicDelegation is a paid mutator transaction binding the contract method 0x2e5dc0f7.
//
// Solidity: function setPublicDelegation(address _pdFactory, bytes _pdArgs) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactorSession) SetPublicDelegation(_pdFactory common.Address, _pdArgs []byte) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.SetPublicDelegation(&_CnStakingV3Storage.TransactOpts, _pdFactory, _pdArgs)
}

// SetStakingTracker is a paid mutator transaction binding the contract method 0xc336aa35.
//
// Solidity: function setStakingTracker(address _tracker) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactor) SetStakingTracker(opts *bind.TransactOpts, _tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3Storage.contract.Transact(opts, "setStakingTracker", _tracker)
}

// SetStakingTracker is a paid mutator transaction binding the contract method 0xc336aa35.
//
// Solidity: function setStakingTracker(address _tracker) returns()
func (_CnStakingV3Storage *CnStakingV3StorageSession) SetStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.SetStakingTracker(&_CnStakingV3Storage.TransactOpts, _tracker)
}

// SetStakingTracker is a paid mutator transaction binding the contract method 0xc336aa35.
//
// Solidity: function setStakingTracker(address _tracker) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactorSession) SetStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.SetStakingTracker(&_CnStakingV3Storage.TransactOpts, _tracker)
}

// ToggleRedelegation is a paid mutator transaction binding the contract method 0xd75859ec.
//
// Solidity: function toggleRedelegation() returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactor) ToggleRedelegation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3Storage.contract.Transact(opts, "toggleRedelegation")
}

// ToggleRedelegation is a paid mutator transaction binding the contract method 0xd75859ec.
//
// Solidity: function toggleRedelegation() returns()
func (_CnStakingV3Storage *CnStakingV3StorageSession) ToggleRedelegation() (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.ToggleRedelegation(&_CnStakingV3Storage.TransactOpts)
}

// ToggleRedelegation is a paid mutator transaction binding the contract method 0xd75859ec.
//
// Solidity: function toggleRedelegation() returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactorSession) ToggleRedelegation() (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.ToggleRedelegation(&_CnStakingV3Storage.TransactOpts)
}

// UpdateRewardAddress is a paid mutator transaction binding the contract method 0x944dd5a2.
//
// Solidity: function updateRewardAddress(address _rewardAddress) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactor) UpdateRewardAddress(opts *bind.TransactOpts, _rewardAddress common.Address) (*types.Transaction, error) {
	return _CnStakingV3Storage.contract.Transact(opts, "updateRewardAddress", _rewardAddress)
}

// UpdateRewardAddress is a paid mutator transaction binding the contract method 0x944dd5a2.
//
// Solidity: function updateRewardAddress(address _rewardAddress) returns()
func (_CnStakingV3Storage *CnStakingV3StorageSession) UpdateRewardAddress(_rewardAddress common.Address) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.UpdateRewardAddress(&_CnStakingV3Storage.TransactOpts, _rewardAddress)
}

// UpdateRewardAddress is a paid mutator transaction binding the contract method 0x944dd5a2.
//
// Solidity: function updateRewardAddress(address _rewardAddress) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactorSession) UpdateRewardAddress(_rewardAddress common.Address) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.UpdateRewardAddress(&_CnStakingV3Storage.TransactOpts, _rewardAddress)
}

// UpdateStakingTracker is a paid mutator transaction binding the contract method 0x5be6eacc.
//
// Solidity: function updateStakingTracker(address _tracker) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactor) UpdateStakingTracker(opts *bind.TransactOpts, _tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3Storage.contract.Transact(opts, "updateStakingTracker", _tracker)
}

// UpdateStakingTracker is a paid mutator transaction binding the contract method 0x5be6eacc.
//
// Solidity: function updateStakingTracker(address _tracker) returns()
func (_CnStakingV3Storage *CnStakingV3StorageSession) UpdateStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.UpdateStakingTracker(&_CnStakingV3Storage.TransactOpts, _tracker)
}

// UpdateStakingTracker is a paid mutator transaction binding the contract method 0x5be6eacc.
//
// Solidity: function updateStakingTracker(address _tracker) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactorSession) UpdateStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.UpdateStakingTracker(&_CnStakingV3Storage.TransactOpts, _tracker)
}

// UpdateVoterAddress is a paid mutator transaction binding the contract method 0x5784d18b.
//
// Solidity: function updateVoterAddress(address _voterAddress) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactor) UpdateVoterAddress(opts *bind.TransactOpts, _voterAddress common.Address) (*types.Transaction, error) {
	return _CnStakingV3Storage.contract.Transact(opts, "updateVoterAddress", _voterAddress)
}

// UpdateVoterAddress is a paid mutator transaction binding the contract method 0x5784d18b.
//
// Solidity: function updateVoterAddress(address _voterAddress) returns()
func (_CnStakingV3Storage *CnStakingV3StorageSession) UpdateVoterAddress(_voterAddress common.Address) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.UpdateVoterAddress(&_CnStakingV3Storage.TransactOpts, _voterAddress)
}

// UpdateVoterAddress is a paid mutator transaction binding the contract method 0x5784d18b.
//
// Solidity: function updateVoterAddress(address _voterAddress) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactorSession) UpdateVoterAddress(_voterAddress common.Address) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.UpdateVoterAddress(&_CnStakingV3Storage.TransactOpts, _voterAddress)
}

// WithdrawApprovedStaking is a paid mutator transaction binding the contract method 0x6e93df0d.
//
// Solidity: function withdrawApprovedStaking(uint256 _approvedWithdrawalId) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactor) WithdrawApprovedStaking(opts *bind.TransactOpts, _approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _CnStakingV3Storage.contract.Transact(opts, "withdrawApprovedStaking", _approvedWithdrawalId)
}

// WithdrawApprovedStaking is a paid mutator transaction binding the contract method 0x6e93df0d.
//
// Solidity: function withdrawApprovedStaking(uint256 _approvedWithdrawalId) returns()
func (_CnStakingV3Storage *CnStakingV3StorageSession) WithdrawApprovedStaking(_approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.WithdrawApprovedStaking(&_CnStakingV3Storage.TransactOpts, _approvedWithdrawalId)
}

// WithdrawApprovedStaking is a paid mutator transaction binding the contract method 0x6e93df0d.
//
// Solidity: function withdrawApprovedStaking(uint256 _approvedWithdrawalId) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactorSession) WithdrawApprovedStaking(_approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.WithdrawApprovedStaking(&_CnStakingV3Storage.TransactOpts, _approvedWithdrawalId)
}

// WithdrawLockupStaking is a paid mutator transaction binding the contract method 0x505ebed4.
//
// Solidity: function withdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactor) WithdrawLockupStaking(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3Storage.contract.Transact(opts, "withdrawLockupStaking", _to, _value)
}

// WithdrawLockupStaking is a paid mutator transaction binding the contract method 0x505ebed4.
//
// Solidity: function withdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingV3Storage *CnStakingV3StorageSession) WithdrawLockupStaking(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.WithdrawLockupStaking(&_CnStakingV3Storage.TransactOpts, _to, _value)
}

// WithdrawLockupStaking is a paid mutator transaction binding the contract method 0x505ebed4.
//
// Solidity: function withdrawLockupStaking(address _to, uint256 _value) returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactorSession) WithdrawLockupStaking(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.WithdrawLockupStaking(&_CnStakingV3Storage.TransactOpts, _to, _value)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CnStakingV3Storage.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_CnStakingV3Storage *CnStakingV3StorageSession) Receive() (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.Receive(&_CnStakingV3Storage.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_CnStakingV3Storage *CnStakingV3StorageTransactorSession) Receive() (*types.Transaction, error) {
	return _CnStakingV3Storage.Contract.Receive(&_CnStakingV3Storage.TransactOpts)
}

// CnStakingV3StorageAcceptRewardAddressIterator is returned from FilterAcceptRewardAddress and is used to iterate over the raw logs and unpacked data for AcceptRewardAddress events raised by the CnStakingV3Storage contract.
type CnStakingV3StorageAcceptRewardAddressIterator struct {
	Event *CnStakingV3StorageAcceptRewardAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3StorageAcceptRewardAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3StorageAcceptRewardAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3StorageAcceptRewardAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3StorageAcceptRewardAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3StorageAcceptRewardAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3StorageAcceptRewardAddress represents a AcceptRewardAddress event raised by the CnStakingV3Storage contract.
type CnStakingV3StorageAcceptRewardAddress struct {
	RewardAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAcceptRewardAddress is a free log retrieval operation binding the contract event 0x36e0b58f785f850d6622cb742fa1e0750728da3c75816916830b50b747efb6b6.
//
// Solidity: event AcceptRewardAddress(address indexed rewardAddress)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) FilterAcceptRewardAddress(opts *bind.FilterOpts, rewardAddress []common.Address) (*CnStakingV3StorageAcceptRewardAddressIterator, error) {

	var rewardAddressRule []interface{}
	for _, rewardAddressItem := range rewardAddress {
		rewardAddressRule = append(rewardAddressRule, rewardAddressItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.FilterLogs(opts, "AcceptRewardAddress", rewardAddressRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageAcceptRewardAddressIterator{contract: _CnStakingV3Storage.contract, event: "AcceptRewardAddress", logs: logs, sub: sub}, nil
}

// WatchAcceptRewardAddress is a free log subscription operation binding the contract event 0x36e0b58f785f850d6622cb742fa1e0750728da3c75816916830b50b747efb6b6.
//
// Solidity: event AcceptRewardAddress(address indexed rewardAddress)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) WatchAcceptRewardAddress(opts *bind.WatchOpts, sink chan<- *CnStakingV3StorageAcceptRewardAddress, rewardAddress []common.Address) (event.Subscription, error) {

	var rewardAddressRule []interface{}
	for _, rewardAddressItem := range rewardAddress {
		rewardAddressRule = append(rewardAddressRule, rewardAddressItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.WatchLogs(opts, "AcceptRewardAddress", rewardAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3StorageAcceptRewardAddress)
				if err := _CnStakingV3Storage.contract.UnpackLog(event, "AcceptRewardAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAcceptRewardAddress is a log parse operation binding the contract event 0x36e0b58f785f850d6622cb742fa1e0750728da3c75816916830b50b747efb6b6.
//
// Solidity: event AcceptRewardAddress(address indexed rewardAddress)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) ParseAcceptRewardAddress(log types.Log) (*CnStakingV3StorageAcceptRewardAddress, error) {
	event := new(CnStakingV3StorageAcceptRewardAddress)
	if err := _CnStakingV3Storage.contract.UnpackLog(event, "AcceptRewardAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3StorageApproveStakingWithdrawalIterator is returned from FilterApproveStakingWithdrawal and is used to iterate over the raw logs and unpacked data for ApproveStakingWithdrawal events raised by the CnStakingV3Storage contract.
type CnStakingV3StorageApproveStakingWithdrawalIterator struct {
	Event *CnStakingV3StorageApproveStakingWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3StorageApproveStakingWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3StorageApproveStakingWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3StorageApproveStakingWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3StorageApproveStakingWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3StorageApproveStakingWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3StorageApproveStakingWithdrawal represents a ApproveStakingWithdrawal event raised by the CnStakingV3Storage contract.
type CnStakingV3StorageApproveStakingWithdrawal struct {
	ApprovedWithdrawalId *big.Int
	To                   common.Address
	Value                *big.Int
	WithdrawableFrom     *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterApproveStakingWithdrawal is a free log retrieval operation binding the contract event 0xdd0988b8c11a867814c87be652f93a86d35c6a235b92977e99d5394bd8580ced.
//
// Solidity: event ApproveStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value, uint256 withdrawableFrom)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) FilterApproveStakingWithdrawal(opts *bind.FilterOpts, approvedWithdrawalId []*big.Int, to []common.Address) (*CnStakingV3StorageApproveStakingWithdrawalIterator, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.FilterLogs(opts, "ApproveStakingWithdrawal", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageApproveStakingWithdrawalIterator{contract: _CnStakingV3Storage.contract, event: "ApproveStakingWithdrawal", logs: logs, sub: sub}, nil
}

// WatchApproveStakingWithdrawal is a free log subscription operation binding the contract event 0xdd0988b8c11a867814c87be652f93a86d35c6a235b92977e99d5394bd8580ced.
//
// Solidity: event ApproveStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value, uint256 withdrawableFrom)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) WatchApproveStakingWithdrawal(opts *bind.WatchOpts, sink chan<- *CnStakingV3StorageApproveStakingWithdrawal, approvedWithdrawalId []*big.Int, to []common.Address) (event.Subscription, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.WatchLogs(opts, "ApproveStakingWithdrawal", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3StorageApproveStakingWithdrawal)
				if err := _CnStakingV3Storage.contract.UnpackLog(event, "ApproveStakingWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproveStakingWithdrawal is a log parse operation binding the contract event 0xdd0988b8c11a867814c87be652f93a86d35c6a235b92977e99d5394bd8580ced.
//
// Solidity: event ApproveStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value, uint256 withdrawableFrom)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) ParseApproveStakingWithdrawal(log types.Log) (*CnStakingV3StorageApproveStakingWithdrawal, error) {
	event := new(CnStakingV3StorageApproveStakingWithdrawal)
	if err := _CnStakingV3Storage.contract.UnpackLog(event, "ApproveStakingWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3StorageCancelApprovedStakingWithdrawalIterator is returned from FilterCancelApprovedStakingWithdrawal and is used to iterate over the raw logs and unpacked data for CancelApprovedStakingWithdrawal events raised by the CnStakingV3Storage contract.
type CnStakingV3StorageCancelApprovedStakingWithdrawalIterator struct {
	Event *CnStakingV3StorageCancelApprovedStakingWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3StorageCancelApprovedStakingWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3StorageCancelApprovedStakingWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3StorageCancelApprovedStakingWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3StorageCancelApprovedStakingWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3StorageCancelApprovedStakingWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3StorageCancelApprovedStakingWithdrawal represents a CancelApprovedStakingWithdrawal event raised by the CnStakingV3Storage contract.
type CnStakingV3StorageCancelApprovedStakingWithdrawal struct {
	ApprovedWithdrawalId *big.Int
	To                   common.Address
	Value                *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterCancelApprovedStakingWithdrawal is a free log retrieval operation binding the contract event 0xcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df.
//
// Solidity: event CancelApprovedStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) FilterCancelApprovedStakingWithdrawal(opts *bind.FilterOpts, approvedWithdrawalId []*big.Int, to []common.Address) (*CnStakingV3StorageCancelApprovedStakingWithdrawalIterator, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.FilterLogs(opts, "CancelApprovedStakingWithdrawal", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageCancelApprovedStakingWithdrawalIterator{contract: _CnStakingV3Storage.contract, event: "CancelApprovedStakingWithdrawal", logs: logs, sub: sub}, nil
}

// WatchCancelApprovedStakingWithdrawal is a free log subscription operation binding the contract event 0xcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df.
//
// Solidity: event CancelApprovedStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) WatchCancelApprovedStakingWithdrawal(opts *bind.WatchOpts, sink chan<- *CnStakingV3StorageCancelApprovedStakingWithdrawal, approvedWithdrawalId []*big.Int, to []common.Address) (event.Subscription, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.WatchLogs(opts, "CancelApprovedStakingWithdrawal", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3StorageCancelApprovedStakingWithdrawal)
				if err := _CnStakingV3Storage.contract.UnpackLog(event, "CancelApprovedStakingWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancelApprovedStakingWithdrawal is a log parse operation binding the contract event 0xcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df.
//
// Solidity: event CancelApprovedStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) ParseCancelApprovedStakingWithdrawal(log types.Log) (*CnStakingV3StorageCancelApprovedStakingWithdrawal, error) {
	event := new(CnStakingV3StorageCancelApprovedStakingWithdrawal)
	if err := _CnStakingV3Storage.contract.UnpackLog(event, "CancelApprovedStakingWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3StorageCompleteReviewInitialConditionsIterator is returned from FilterCompleteReviewInitialConditions and is used to iterate over the raw logs and unpacked data for CompleteReviewInitialConditions events raised by the CnStakingV3Storage contract.
type CnStakingV3StorageCompleteReviewInitialConditionsIterator struct {
	Event *CnStakingV3StorageCompleteReviewInitialConditions // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3StorageCompleteReviewInitialConditionsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3StorageCompleteReviewInitialConditions)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3StorageCompleteReviewInitialConditions)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3StorageCompleteReviewInitialConditionsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3StorageCompleteReviewInitialConditionsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3StorageCompleteReviewInitialConditions represents a CompleteReviewInitialConditions event raised by the CnStakingV3Storage contract.
type CnStakingV3StorageCompleteReviewInitialConditions struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterCompleteReviewInitialConditions is a free log retrieval operation binding the contract event 0x244ff9a3d72b1dc5a4bce7f05fb615395f2a8c7ad6ea525d2bac9030f75d7a9b.
//
// Solidity: event CompleteReviewInitialConditions()
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) FilterCompleteReviewInitialConditions(opts *bind.FilterOpts) (*CnStakingV3StorageCompleteReviewInitialConditionsIterator, error) {

	logs, sub, err := _CnStakingV3Storage.contract.FilterLogs(opts, "CompleteReviewInitialConditions")
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageCompleteReviewInitialConditionsIterator{contract: _CnStakingV3Storage.contract, event: "CompleteReviewInitialConditions", logs: logs, sub: sub}, nil
}

// WatchCompleteReviewInitialConditions is a free log subscription operation binding the contract event 0x244ff9a3d72b1dc5a4bce7f05fb615395f2a8c7ad6ea525d2bac9030f75d7a9b.
//
// Solidity: event CompleteReviewInitialConditions()
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) WatchCompleteReviewInitialConditions(opts *bind.WatchOpts, sink chan<- *CnStakingV3StorageCompleteReviewInitialConditions) (event.Subscription, error) {

	logs, sub, err := _CnStakingV3Storage.contract.WatchLogs(opts, "CompleteReviewInitialConditions")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3StorageCompleteReviewInitialConditions)
				if err := _CnStakingV3Storage.contract.UnpackLog(event, "CompleteReviewInitialConditions", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCompleteReviewInitialConditions is a log parse operation binding the contract event 0x244ff9a3d72b1dc5a4bce7f05fb615395f2a8c7ad6ea525d2bac9030f75d7a9b.
//
// Solidity: event CompleteReviewInitialConditions()
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) ParseCompleteReviewInitialConditions(log types.Log) (*CnStakingV3StorageCompleteReviewInitialConditions, error) {
	event := new(CnStakingV3StorageCompleteReviewInitialConditions)
	if err := _CnStakingV3Storage.contract.UnpackLog(event, "CompleteReviewInitialConditions", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3StorageDelegateKaiaIterator is returned from FilterDelegateKaia and is used to iterate over the raw logs and unpacked data for DelegateKaia events raised by the CnStakingV3Storage contract.
type CnStakingV3StorageDelegateKaiaIterator struct {
	Event *CnStakingV3StorageDelegateKaia // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3StorageDelegateKaiaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3StorageDelegateKaia)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3StorageDelegateKaia)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3StorageDelegateKaiaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3StorageDelegateKaiaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3StorageDelegateKaia represents a DelegateKaia event raised by the CnStakingV3Storage contract.
type CnStakingV3StorageDelegateKaia struct {
	From  common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDelegateKaia is a free log retrieval operation binding the contract event 0x8ecbcbd560048c1f474847748189e8c43f1fdee737fbd34523b04b5a9bbdffaa.
//
// Solidity: event DelegateKaia(address indexed from, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) FilterDelegateKaia(opts *bind.FilterOpts, from []common.Address) (*CnStakingV3StorageDelegateKaiaIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.FilterLogs(opts, "DelegateKaia", fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageDelegateKaiaIterator{contract: _CnStakingV3Storage.contract, event: "DelegateKaia", logs: logs, sub: sub}, nil
}

// WatchDelegateKaia is a free log subscription operation binding the contract event 0x8ecbcbd560048c1f474847748189e8c43f1fdee737fbd34523b04b5a9bbdffaa.
//
// Solidity: event DelegateKaia(address indexed from, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) WatchDelegateKaia(opts *bind.WatchOpts, sink chan<- *CnStakingV3StorageDelegateKaia, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.WatchLogs(opts, "DelegateKaia", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3StorageDelegateKaia)
				if err := _CnStakingV3Storage.contract.UnpackLog(event, "DelegateKaia", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateKaia is a log parse operation binding the contract event 0x8ecbcbd560048c1f474847748189e8c43f1fdee737fbd34523b04b5a9bbdffaa.
//
// Solidity: event DelegateKaia(address indexed from, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) ParseDelegateKaia(log types.Log) (*CnStakingV3StorageDelegateKaia, error) {
	event := new(CnStakingV3StorageDelegateKaia)
	if err := _CnStakingV3Storage.contract.UnpackLog(event, "DelegateKaia", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3StorageDeployCnStakingV3Iterator is returned from FilterDeployCnStakingV3 and is used to iterate over the raw logs and unpacked data for DeployCnStakingV3 events raised by the CnStakingV3Storage contract.
type CnStakingV3StorageDeployCnStakingV3Iterator struct {
	Event *CnStakingV3StorageDeployCnStakingV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3StorageDeployCnStakingV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3StorageDeployCnStakingV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3StorageDeployCnStakingV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3StorageDeployCnStakingV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3StorageDeployCnStakingV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3StorageDeployCnStakingV3 represents a DeployCnStakingV3 event raised by the CnStakingV3Storage contract.
type CnStakingV3StorageDeployCnStakingV3 struct {
	ContractType  string
	NodeId        common.Address
	RewardAddress common.Address
	UnlockTime    []*big.Int
	UnlockAmount  []*big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterDeployCnStakingV3 is a free log retrieval operation binding the contract event 0x8ceb5a03da525381440f64ae9f54fa4cb32a6299f0521f5261edd8839a0f3265.
//
// Solidity: event DeployCnStakingV3(string contractType, address nodeId, address rewardAddress, uint256[] unlockTime, uint256[] unlockAmount)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) FilterDeployCnStakingV3(opts *bind.FilterOpts) (*CnStakingV3StorageDeployCnStakingV3Iterator, error) {

	logs, sub, err := _CnStakingV3Storage.contract.FilterLogs(opts, "DeployCnStakingV3")
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageDeployCnStakingV3Iterator{contract: _CnStakingV3Storage.contract, event: "DeployCnStakingV3", logs: logs, sub: sub}, nil
}

// WatchDeployCnStakingV3 is a free log subscription operation binding the contract event 0x8ceb5a03da525381440f64ae9f54fa4cb32a6299f0521f5261edd8839a0f3265.
//
// Solidity: event DeployCnStakingV3(string contractType, address nodeId, address rewardAddress, uint256[] unlockTime, uint256[] unlockAmount)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) WatchDeployCnStakingV3(opts *bind.WatchOpts, sink chan<- *CnStakingV3StorageDeployCnStakingV3) (event.Subscription, error) {

	logs, sub, err := _CnStakingV3Storage.contract.WatchLogs(opts, "DeployCnStakingV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3StorageDeployCnStakingV3)
				if err := _CnStakingV3Storage.contract.UnpackLog(event, "DeployCnStakingV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployCnStakingV3 is a log parse operation binding the contract event 0x8ceb5a03da525381440f64ae9f54fa4cb32a6299f0521f5261edd8839a0f3265.
//
// Solidity: event DeployCnStakingV3(string contractType, address nodeId, address rewardAddress, uint256[] unlockTime, uint256[] unlockAmount)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) ParseDeployCnStakingV3(log types.Log) (*CnStakingV3StorageDeployCnStakingV3, error) {
	event := new(CnStakingV3StorageDeployCnStakingV3)
	if err := _CnStakingV3Storage.contract.UnpackLog(event, "DeployCnStakingV3", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3StorageDepositLockupStakingAndInitIterator is returned from FilterDepositLockupStakingAndInit and is used to iterate over the raw logs and unpacked data for DepositLockupStakingAndInit events raised by the CnStakingV3Storage contract.
type CnStakingV3StorageDepositLockupStakingAndInitIterator struct {
	Event *CnStakingV3StorageDepositLockupStakingAndInit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3StorageDepositLockupStakingAndInitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3StorageDepositLockupStakingAndInit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3StorageDepositLockupStakingAndInit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3StorageDepositLockupStakingAndInitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3StorageDepositLockupStakingAndInitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3StorageDepositLockupStakingAndInit represents a DepositLockupStakingAndInit event raised by the CnStakingV3Storage contract.
type CnStakingV3StorageDepositLockupStakingAndInit struct {
	From  common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDepositLockupStakingAndInit is a free log retrieval operation binding the contract event 0x2b3c5e8e58d7d1e42ccd071c6f749d53f9ee506020a81fad9ff98140ccccde69.
//
// Solidity: event DepositLockupStakingAndInit(address indexed from, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) FilterDepositLockupStakingAndInit(opts *bind.FilterOpts, from []common.Address) (*CnStakingV3StorageDepositLockupStakingAndInitIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.FilterLogs(opts, "DepositLockupStakingAndInit", fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageDepositLockupStakingAndInitIterator{contract: _CnStakingV3Storage.contract, event: "DepositLockupStakingAndInit", logs: logs, sub: sub}, nil
}

// WatchDepositLockupStakingAndInit is a free log subscription operation binding the contract event 0x2b3c5e8e58d7d1e42ccd071c6f749d53f9ee506020a81fad9ff98140ccccde69.
//
// Solidity: event DepositLockupStakingAndInit(address indexed from, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) WatchDepositLockupStakingAndInit(opts *bind.WatchOpts, sink chan<- *CnStakingV3StorageDepositLockupStakingAndInit, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.WatchLogs(opts, "DepositLockupStakingAndInit", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3StorageDepositLockupStakingAndInit)
				if err := _CnStakingV3Storage.contract.UnpackLog(event, "DepositLockupStakingAndInit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositLockupStakingAndInit is a log parse operation binding the contract event 0x2b3c5e8e58d7d1e42ccd071c6f749d53f9ee506020a81fad9ff98140ccccde69.
//
// Solidity: event DepositLockupStakingAndInit(address indexed from, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) ParseDepositLockupStakingAndInit(log types.Log) (*CnStakingV3StorageDepositLockupStakingAndInit, error) {
	event := new(CnStakingV3StorageDepositLockupStakingAndInit)
	if err := _CnStakingV3Storage.contract.UnpackLog(event, "DepositLockupStakingAndInit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3StorageHandleRedelegationIterator is returned from FilterHandleRedelegation and is used to iterate over the raw logs and unpacked data for HandleRedelegation events raised by the CnStakingV3Storage contract.
type CnStakingV3StorageHandleRedelegationIterator struct {
	Event *CnStakingV3StorageHandleRedelegation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3StorageHandleRedelegationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3StorageHandleRedelegation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3StorageHandleRedelegation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3StorageHandleRedelegationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3StorageHandleRedelegationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3StorageHandleRedelegation represents a HandleRedelegation event raised by the CnStakingV3Storage contract.
type CnStakingV3StorageHandleRedelegation struct {
	User              common.Address
	PrevCnStakingV3   common.Address
	TargetCnStakingV3 common.Address
	Value             *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterHandleRedelegation is a free log retrieval operation binding the contract event 0xcbbd772ac9792b90fb77aa3194b0279ec4dbea1880ecc3674ecd2f4bf39b0c90.
//
// Solidity: event HandleRedelegation(address indexed user, address indexed prevCnStakingV3, address indexed targetCnStakingV3, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) FilterHandleRedelegation(opts *bind.FilterOpts, user []common.Address, prevCnStakingV3 []common.Address, targetCnStakingV3 []common.Address) (*CnStakingV3StorageHandleRedelegationIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var prevCnStakingV3Rule []interface{}
	for _, prevCnStakingV3Item := range prevCnStakingV3 {
		prevCnStakingV3Rule = append(prevCnStakingV3Rule, prevCnStakingV3Item)
	}
	var targetCnStakingV3Rule []interface{}
	for _, targetCnStakingV3Item := range targetCnStakingV3 {
		targetCnStakingV3Rule = append(targetCnStakingV3Rule, targetCnStakingV3Item)
	}

	logs, sub, err := _CnStakingV3Storage.contract.FilterLogs(opts, "HandleRedelegation", userRule, prevCnStakingV3Rule, targetCnStakingV3Rule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageHandleRedelegationIterator{contract: _CnStakingV3Storage.contract, event: "HandleRedelegation", logs: logs, sub: sub}, nil
}

// WatchHandleRedelegation is a free log subscription operation binding the contract event 0xcbbd772ac9792b90fb77aa3194b0279ec4dbea1880ecc3674ecd2f4bf39b0c90.
//
// Solidity: event HandleRedelegation(address indexed user, address indexed prevCnStakingV3, address indexed targetCnStakingV3, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) WatchHandleRedelegation(opts *bind.WatchOpts, sink chan<- *CnStakingV3StorageHandleRedelegation, user []common.Address, prevCnStakingV3 []common.Address, targetCnStakingV3 []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var prevCnStakingV3Rule []interface{}
	for _, prevCnStakingV3Item := range prevCnStakingV3 {
		prevCnStakingV3Rule = append(prevCnStakingV3Rule, prevCnStakingV3Item)
	}
	var targetCnStakingV3Rule []interface{}
	for _, targetCnStakingV3Item := range targetCnStakingV3 {
		targetCnStakingV3Rule = append(targetCnStakingV3Rule, targetCnStakingV3Item)
	}

	logs, sub, err := _CnStakingV3Storage.contract.WatchLogs(opts, "HandleRedelegation", userRule, prevCnStakingV3Rule, targetCnStakingV3Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3StorageHandleRedelegation)
				if err := _CnStakingV3Storage.contract.UnpackLog(event, "HandleRedelegation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHandleRedelegation is a log parse operation binding the contract event 0xcbbd772ac9792b90fb77aa3194b0279ec4dbea1880ecc3674ecd2f4bf39b0c90.
//
// Solidity: event HandleRedelegation(address indexed user, address indexed prevCnStakingV3, address indexed targetCnStakingV3, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) ParseHandleRedelegation(log types.Log) (*CnStakingV3StorageHandleRedelegation, error) {
	event := new(CnStakingV3StorageHandleRedelegation)
	if err := _CnStakingV3Storage.contract.UnpackLog(event, "HandleRedelegation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3StorageRedelegationIterator is returned from FilterRedelegation and is used to iterate over the raw logs and unpacked data for Redelegation events raised by the CnStakingV3Storage contract.
type CnStakingV3StorageRedelegationIterator struct {
	Event *CnStakingV3StorageRedelegation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3StorageRedelegationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3StorageRedelegation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3StorageRedelegation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3StorageRedelegationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3StorageRedelegationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3StorageRedelegation represents a Redelegation event raised by the CnStakingV3Storage contract.
type CnStakingV3StorageRedelegation struct {
	User              common.Address
	TargetCnStakingV3 common.Address
	Value             *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRedelegation is a free log retrieval operation binding the contract event 0x4830c21a6eb4b2b3af6c4d24cfbd78ce437d5b690aac56ceec54df1d4d24e1a0.
//
// Solidity: event Redelegation(address indexed user, address indexed targetCnStakingV3, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) FilterRedelegation(opts *bind.FilterOpts, user []common.Address, targetCnStakingV3 []common.Address) (*CnStakingV3StorageRedelegationIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var targetCnStakingV3Rule []interface{}
	for _, targetCnStakingV3Item := range targetCnStakingV3 {
		targetCnStakingV3Rule = append(targetCnStakingV3Rule, targetCnStakingV3Item)
	}

	logs, sub, err := _CnStakingV3Storage.contract.FilterLogs(opts, "Redelegation", userRule, targetCnStakingV3Rule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageRedelegationIterator{contract: _CnStakingV3Storage.contract, event: "Redelegation", logs: logs, sub: sub}, nil
}

// WatchRedelegation is a free log subscription operation binding the contract event 0x4830c21a6eb4b2b3af6c4d24cfbd78ce437d5b690aac56ceec54df1d4d24e1a0.
//
// Solidity: event Redelegation(address indexed user, address indexed targetCnStakingV3, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) WatchRedelegation(opts *bind.WatchOpts, sink chan<- *CnStakingV3StorageRedelegation, user []common.Address, targetCnStakingV3 []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var targetCnStakingV3Rule []interface{}
	for _, targetCnStakingV3Item := range targetCnStakingV3 {
		targetCnStakingV3Rule = append(targetCnStakingV3Rule, targetCnStakingV3Item)
	}

	logs, sub, err := _CnStakingV3Storage.contract.WatchLogs(opts, "Redelegation", userRule, targetCnStakingV3Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3StorageRedelegation)
				if err := _CnStakingV3Storage.contract.UnpackLog(event, "Redelegation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedelegation is a log parse operation binding the contract event 0x4830c21a6eb4b2b3af6c4d24cfbd78ce437d5b690aac56ceec54df1d4d24e1a0.
//
// Solidity: event Redelegation(address indexed user, address indexed targetCnStakingV3, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) ParseRedelegation(log types.Log) (*CnStakingV3StorageRedelegation, error) {
	event := new(CnStakingV3StorageRedelegation)
	if err := _CnStakingV3Storage.contract.UnpackLog(event, "Redelegation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3StorageReviewInitialConditionsIterator is returned from FilterReviewInitialConditions and is used to iterate over the raw logs and unpacked data for ReviewInitialConditions events raised by the CnStakingV3Storage contract.
type CnStakingV3StorageReviewInitialConditionsIterator struct {
	Event *CnStakingV3StorageReviewInitialConditions // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3StorageReviewInitialConditionsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3StorageReviewInitialConditions)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3StorageReviewInitialConditions)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3StorageReviewInitialConditionsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3StorageReviewInitialConditionsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3StorageReviewInitialConditions represents a ReviewInitialConditions event raised by the CnStakingV3Storage contract.
type CnStakingV3StorageReviewInitialConditions struct {
	From common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterReviewInitialConditions is a free log retrieval operation binding the contract event 0x65d287f4118b03f8cc979b433fd0b2246074200dd5da70c9daf204aaa0da1a2c.
//
// Solidity: event ReviewInitialConditions(address indexed from)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) FilterReviewInitialConditions(opts *bind.FilterOpts, from []common.Address) (*CnStakingV3StorageReviewInitialConditionsIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.FilterLogs(opts, "ReviewInitialConditions", fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageReviewInitialConditionsIterator{contract: _CnStakingV3Storage.contract, event: "ReviewInitialConditions", logs: logs, sub: sub}, nil
}

// WatchReviewInitialConditions is a free log subscription operation binding the contract event 0x65d287f4118b03f8cc979b433fd0b2246074200dd5da70c9daf204aaa0da1a2c.
//
// Solidity: event ReviewInitialConditions(address indexed from)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) WatchReviewInitialConditions(opts *bind.WatchOpts, sink chan<- *CnStakingV3StorageReviewInitialConditions, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.WatchLogs(opts, "ReviewInitialConditions", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3StorageReviewInitialConditions)
				if err := _CnStakingV3Storage.contract.UnpackLog(event, "ReviewInitialConditions", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReviewInitialConditions is a log parse operation binding the contract event 0x65d287f4118b03f8cc979b433fd0b2246074200dd5da70c9daf204aaa0da1a2c.
//
// Solidity: event ReviewInitialConditions(address indexed from)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) ParseReviewInitialConditions(log types.Log) (*CnStakingV3StorageReviewInitialConditions, error) {
	event := new(CnStakingV3StorageReviewInitialConditions)
	if err := _CnStakingV3Storage.contract.UnpackLog(event, "ReviewInitialConditions", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3StorageSetPublicDelegationIterator is returned from FilterSetPublicDelegation and is used to iterate over the raw logs and unpacked data for SetPublicDelegation events raised by the CnStakingV3Storage contract.
type CnStakingV3StorageSetPublicDelegationIterator struct {
	Event *CnStakingV3StorageSetPublicDelegation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3StorageSetPublicDelegationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3StorageSetPublicDelegation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3StorageSetPublicDelegation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3StorageSetPublicDelegationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3StorageSetPublicDelegationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3StorageSetPublicDelegation represents a SetPublicDelegation event raised by the CnStakingV3Storage contract.
type CnStakingV3StorageSetPublicDelegation struct {
	From             common.Address
	PublicDelegation common.Address
	RewardAddress    common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterSetPublicDelegation is a free log retrieval operation binding the contract event 0x669ea85a3c8fdb578f28c81d130bb3cf68e5f3845d178688ae84abdba59c9030.
//
// Solidity: event SetPublicDelegation(address indexed from, address publicDelegation, address rewardAddress)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) FilterSetPublicDelegation(opts *bind.FilterOpts, from []common.Address) (*CnStakingV3StorageSetPublicDelegationIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.FilterLogs(opts, "SetPublicDelegation", fromRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageSetPublicDelegationIterator{contract: _CnStakingV3Storage.contract, event: "SetPublicDelegation", logs: logs, sub: sub}, nil
}

// WatchSetPublicDelegation is a free log subscription operation binding the contract event 0x669ea85a3c8fdb578f28c81d130bb3cf68e5f3845d178688ae84abdba59c9030.
//
// Solidity: event SetPublicDelegation(address indexed from, address publicDelegation, address rewardAddress)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) WatchSetPublicDelegation(opts *bind.WatchOpts, sink chan<- *CnStakingV3StorageSetPublicDelegation, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.WatchLogs(opts, "SetPublicDelegation", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3StorageSetPublicDelegation)
				if err := _CnStakingV3Storage.contract.UnpackLog(event, "SetPublicDelegation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetPublicDelegation is a log parse operation binding the contract event 0x669ea85a3c8fdb578f28c81d130bb3cf68e5f3845d178688ae84abdba59c9030.
//
// Solidity: event SetPublicDelegation(address indexed from, address publicDelegation, address rewardAddress)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) ParseSetPublicDelegation(log types.Log) (*CnStakingV3StorageSetPublicDelegation, error) {
	event := new(CnStakingV3StorageSetPublicDelegation)
	if err := _CnStakingV3Storage.contract.UnpackLog(event, "SetPublicDelegation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3StorageToggleRedelegationIterator is returned from FilterToggleRedelegation and is used to iterate over the raw logs and unpacked data for ToggleRedelegation events raised by the CnStakingV3Storage contract.
type CnStakingV3StorageToggleRedelegationIterator struct {
	Event *CnStakingV3StorageToggleRedelegation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3StorageToggleRedelegationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3StorageToggleRedelegation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3StorageToggleRedelegation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3StorageToggleRedelegationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3StorageToggleRedelegationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3StorageToggleRedelegation represents a ToggleRedelegation event raised by the CnStakingV3Storage contract.
type CnStakingV3StorageToggleRedelegation struct {
	IsRedelegationEnabled bool
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterToggleRedelegation is a free log retrieval operation binding the contract event 0x02efa9113845c402ffbbc237400eeba75de99c23f054459573f88caa5a941898.
//
// Solidity: event ToggleRedelegation(bool isRedelegationEnabled)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) FilterToggleRedelegation(opts *bind.FilterOpts) (*CnStakingV3StorageToggleRedelegationIterator, error) {

	logs, sub, err := _CnStakingV3Storage.contract.FilterLogs(opts, "ToggleRedelegation")
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageToggleRedelegationIterator{contract: _CnStakingV3Storage.contract, event: "ToggleRedelegation", logs: logs, sub: sub}, nil
}

// WatchToggleRedelegation is a free log subscription operation binding the contract event 0x02efa9113845c402ffbbc237400eeba75de99c23f054459573f88caa5a941898.
//
// Solidity: event ToggleRedelegation(bool isRedelegationEnabled)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) WatchToggleRedelegation(opts *bind.WatchOpts, sink chan<- *CnStakingV3StorageToggleRedelegation) (event.Subscription, error) {

	logs, sub, err := _CnStakingV3Storage.contract.WatchLogs(opts, "ToggleRedelegation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3StorageToggleRedelegation)
				if err := _CnStakingV3Storage.contract.UnpackLog(event, "ToggleRedelegation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseToggleRedelegation is a log parse operation binding the contract event 0x02efa9113845c402ffbbc237400eeba75de99c23f054459573f88caa5a941898.
//
// Solidity: event ToggleRedelegation(bool isRedelegationEnabled)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) ParseToggleRedelegation(log types.Log) (*CnStakingV3StorageToggleRedelegation, error) {
	event := new(CnStakingV3StorageToggleRedelegation)
	if err := _CnStakingV3Storage.contract.UnpackLog(event, "ToggleRedelegation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3StorageUpdateGCIdIterator is returned from FilterUpdateGCId and is used to iterate over the raw logs and unpacked data for UpdateGCId events raised by the CnStakingV3Storage contract.
type CnStakingV3StorageUpdateGCIdIterator struct {
	Event *CnStakingV3StorageUpdateGCId // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3StorageUpdateGCIdIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3StorageUpdateGCId)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3StorageUpdateGCId)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3StorageUpdateGCIdIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3StorageUpdateGCIdIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3StorageUpdateGCId represents a UpdateGCId event raised by the CnStakingV3Storage contract.
type CnStakingV3StorageUpdateGCId struct {
	GcId *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterUpdateGCId is a free log retrieval operation binding the contract event 0x469cb2f3ce5d5e879269af625b54571651feb0ede6e83ee89b9c888648af514f.
//
// Solidity: event UpdateGCId(uint256 indexed gcId)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) FilterUpdateGCId(opts *bind.FilterOpts, gcId []*big.Int) (*CnStakingV3StorageUpdateGCIdIterator, error) {

	var gcIdRule []interface{}
	for _, gcIdItem := range gcId {
		gcIdRule = append(gcIdRule, gcIdItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.FilterLogs(opts, "UpdateGCId", gcIdRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageUpdateGCIdIterator{contract: _CnStakingV3Storage.contract, event: "UpdateGCId", logs: logs, sub: sub}, nil
}

// WatchUpdateGCId is a free log subscription operation binding the contract event 0x469cb2f3ce5d5e879269af625b54571651feb0ede6e83ee89b9c888648af514f.
//
// Solidity: event UpdateGCId(uint256 indexed gcId)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) WatchUpdateGCId(opts *bind.WatchOpts, sink chan<- *CnStakingV3StorageUpdateGCId, gcId []*big.Int) (event.Subscription, error) {

	var gcIdRule []interface{}
	for _, gcIdItem := range gcId {
		gcIdRule = append(gcIdRule, gcIdItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.WatchLogs(opts, "UpdateGCId", gcIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3StorageUpdateGCId)
				if err := _CnStakingV3Storage.contract.UnpackLog(event, "UpdateGCId", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateGCId is a log parse operation binding the contract event 0x469cb2f3ce5d5e879269af625b54571651feb0ede6e83ee89b9c888648af514f.
//
// Solidity: event UpdateGCId(uint256 indexed gcId)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) ParseUpdateGCId(log types.Log) (*CnStakingV3StorageUpdateGCId, error) {
	event := new(CnStakingV3StorageUpdateGCId)
	if err := _CnStakingV3Storage.contract.UnpackLog(event, "UpdateGCId", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3StorageUpdateRewardAddressIterator is returned from FilterUpdateRewardAddress and is used to iterate over the raw logs and unpacked data for UpdateRewardAddress events raised by the CnStakingV3Storage contract.
type CnStakingV3StorageUpdateRewardAddressIterator struct {
	Event *CnStakingV3StorageUpdateRewardAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3StorageUpdateRewardAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3StorageUpdateRewardAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3StorageUpdateRewardAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3StorageUpdateRewardAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3StorageUpdateRewardAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3StorageUpdateRewardAddress represents a UpdateRewardAddress event raised by the CnStakingV3Storage contract.
type CnStakingV3StorageUpdateRewardAddress struct {
	RewardAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterUpdateRewardAddress is a free log retrieval operation binding the contract event 0xbe1849831e6775a2022006aeebcc00f70d10bc4202c8187e215ad9e9911f2b06.
//
// Solidity: event UpdateRewardAddress(address indexed rewardAddress)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) FilterUpdateRewardAddress(opts *bind.FilterOpts, rewardAddress []common.Address) (*CnStakingV3StorageUpdateRewardAddressIterator, error) {

	var rewardAddressRule []interface{}
	for _, rewardAddressItem := range rewardAddress {
		rewardAddressRule = append(rewardAddressRule, rewardAddressItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.FilterLogs(opts, "UpdateRewardAddress", rewardAddressRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageUpdateRewardAddressIterator{contract: _CnStakingV3Storage.contract, event: "UpdateRewardAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateRewardAddress is a free log subscription operation binding the contract event 0xbe1849831e6775a2022006aeebcc00f70d10bc4202c8187e215ad9e9911f2b06.
//
// Solidity: event UpdateRewardAddress(address indexed rewardAddress)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) WatchUpdateRewardAddress(opts *bind.WatchOpts, sink chan<- *CnStakingV3StorageUpdateRewardAddress, rewardAddress []common.Address) (event.Subscription, error) {

	var rewardAddressRule []interface{}
	for _, rewardAddressItem := range rewardAddress {
		rewardAddressRule = append(rewardAddressRule, rewardAddressItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.WatchLogs(opts, "UpdateRewardAddress", rewardAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3StorageUpdateRewardAddress)
				if err := _CnStakingV3Storage.contract.UnpackLog(event, "UpdateRewardAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRewardAddress is a log parse operation binding the contract event 0xbe1849831e6775a2022006aeebcc00f70d10bc4202c8187e215ad9e9911f2b06.
//
// Solidity: event UpdateRewardAddress(address indexed rewardAddress)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) ParseUpdateRewardAddress(log types.Log) (*CnStakingV3StorageUpdateRewardAddress, error) {
	event := new(CnStakingV3StorageUpdateRewardAddress)
	if err := _CnStakingV3Storage.contract.UnpackLog(event, "UpdateRewardAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3StorageUpdateStakingTrackerIterator is returned from FilterUpdateStakingTracker and is used to iterate over the raw logs and unpacked data for UpdateStakingTracker events raised by the CnStakingV3Storage contract.
type CnStakingV3StorageUpdateStakingTrackerIterator struct {
	Event *CnStakingV3StorageUpdateStakingTracker // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3StorageUpdateStakingTrackerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3StorageUpdateStakingTracker)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3StorageUpdateStakingTracker)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3StorageUpdateStakingTrackerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3StorageUpdateStakingTrackerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3StorageUpdateStakingTracker represents a UpdateStakingTracker event raised by the CnStakingV3Storage contract.
type CnStakingV3StorageUpdateStakingTracker struct {
	StakingTracker common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpdateStakingTracker is a free log retrieval operation binding the contract event 0xef25e066ac14a10491ae1ac89a8247282158e169968aaccbceb257d0878bdfd0.
//
// Solidity: event UpdateStakingTracker(address indexed stakingTracker)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) FilterUpdateStakingTracker(opts *bind.FilterOpts, stakingTracker []common.Address) (*CnStakingV3StorageUpdateStakingTrackerIterator, error) {

	var stakingTrackerRule []interface{}
	for _, stakingTrackerItem := range stakingTracker {
		stakingTrackerRule = append(stakingTrackerRule, stakingTrackerItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.FilterLogs(opts, "UpdateStakingTracker", stakingTrackerRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageUpdateStakingTrackerIterator{contract: _CnStakingV3Storage.contract, event: "UpdateStakingTracker", logs: logs, sub: sub}, nil
}

// WatchUpdateStakingTracker is a free log subscription operation binding the contract event 0xef25e066ac14a10491ae1ac89a8247282158e169968aaccbceb257d0878bdfd0.
//
// Solidity: event UpdateStakingTracker(address indexed stakingTracker)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) WatchUpdateStakingTracker(opts *bind.WatchOpts, sink chan<- *CnStakingV3StorageUpdateStakingTracker, stakingTracker []common.Address) (event.Subscription, error) {

	var stakingTrackerRule []interface{}
	for _, stakingTrackerItem := range stakingTracker {
		stakingTrackerRule = append(stakingTrackerRule, stakingTrackerItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.WatchLogs(opts, "UpdateStakingTracker", stakingTrackerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3StorageUpdateStakingTracker)
				if err := _CnStakingV3Storage.contract.UnpackLog(event, "UpdateStakingTracker", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateStakingTracker is a log parse operation binding the contract event 0xef25e066ac14a10491ae1ac89a8247282158e169968aaccbceb257d0878bdfd0.
//
// Solidity: event UpdateStakingTracker(address indexed stakingTracker)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) ParseUpdateStakingTracker(log types.Log) (*CnStakingV3StorageUpdateStakingTracker, error) {
	event := new(CnStakingV3StorageUpdateStakingTracker)
	if err := _CnStakingV3Storage.contract.UnpackLog(event, "UpdateStakingTracker", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3StorageUpdateVoterAddressIterator is returned from FilterUpdateVoterAddress and is used to iterate over the raw logs and unpacked data for UpdateVoterAddress events raised by the CnStakingV3Storage contract.
type CnStakingV3StorageUpdateVoterAddressIterator struct {
	Event *CnStakingV3StorageUpdateVoterAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3StorageUpdateVoterAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3StorageUpdateVoterAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3StorageUpdateVoterAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3StorageUpdateVoterAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3StorageUpdateVoterAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3StorageUpdateVoterAddress represents a UpdateVoterAddress event raised by the CnStakingV3Storage contract.
type CnStakingV3StorageUpdateVoterAddress struct {
	VoterAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterUpdateVoterAddress is a free log retrieval operation binding the contract event 0x61ee88e3c7513df1e6e214415e781030278cf98b7fbb9d6d53720ee8aeb654ee.
//
// Solidity: event UpdateVoterAddress(address indexed voterAddress)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) FilterUpdateVoterAddress(opts *bind.FilterOpts, voterAddress []common.Address) (*CnStakingV3StorageUpdateVoterAddressIterator, error) {

	var voterAddressRule []interface{}
	for _, voterAddressItem := range voterAddress {
		voterAddressRule = append(voterAddressRule, voterAddressItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.FilterLogs(opts, "UpdateVoterAddress", voterAddressRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageUpdateVoterAddressIterator{contract: _CnStakingV3Storage.contract, event: "UpdateVoterAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateVoterAddress is a free log subscription operation binding the contract event 0x61ee88e3c7513df1e6e214415e781030278cf98b7fbb9d6d53720ee8aeb654ee.
//
// Solidity: event UpdateVoterAddress(address indexed voterAddress)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) WatchUpdateVoterAddress(opts *bind.WatchOpts, sink chan<- *CnStakingV3StorageUpdateVoterAddress, voterAddress []common.Address) (event.Subscription, error) {

	var voterAddressRule []interface{}
	for _, voterAddressItem := range voterAddress {
		voterAddressRule = append(voterAddressRule, voterAddressItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.WatchLogs(opts, "UpdateVoterAddress", voterAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3StorageUpdateVoterAddress)
				if err := _CnStakingV3Storage.contract.UnpackLog(event, "UpdateVoterAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateVoterAddress is a log parse operation binding the contract event 0x61ee88e3c7513df1e6e214415e781030278cf98b7fbb9d6d53720ee8aeb654ee.
//
// Solidity: event UpdateVoterAddress(address indexed voterAddress)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) ParseUpdateVoterAddress(log types.Log) (*CnStakingV3StorageUpdateVoterAddress, error) {
	event := new(CnStakingV3StorageUpdateVoterAddress)
	if err := _CnStakingV3Storage.contract.UnpackLog(event, "UpdateVoterAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3StorageWithdrawApprovedStakingIterator is returned from FilterWithdrawApprovedStaking and is used to iterate over the raw logs and unpacked data for WithdrawApprovedStaking events raised by the CnStakingV3Storage contract.
type CnStakingV3StorageWithdrawApprovedStakingIterator struct {
	Event *CnStakingV3StorageWithdrawApprovedStaking // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3StorageWithdrawApprovedStakingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3StorageWithdrawApprovedStaking)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3StorageWithdrawApprovedStaking)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3StorageWithdrawApprovedStakingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3StorageWithdrawApprovedStakingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3StorageWithdrawApprovedStaking represents a WithdrawApprovedStaking event raised by the CnStakingV3Storage contract.
type CnStakingV3StorageWithdrawApprovedStaking struct {
	ApprovedWithdrawalId *big.Int
	To                   common.Address
	Value                *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterWithdrawApprovedStaking is a free log retrieval operation binding the contract event 0x7a2d48d1df1249429730a253e5713a7d7a2024913de2fbccafdf36efdd32bf05.
//
// Solidity: event WithdrawApprovedStaking(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) FilterWithdrawApprovedStaking(opts *bind.FilterOpts, approvedWithdrawalId []*big.Int, to []common.Address) (*CnStakingV3StorageWithdrawApprovedStakingIterator, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.FilterLogs(opts, "WithdrawApprovedStaking", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageWithdrawApprovedStakingIterator{contract: _CnStakingV3Storage.contract, event: "WithdrawApprovedStaking", logs: logs, sub: sub}, nil
}

// WatchWithdrawApprovedStaking is a free log subscription operation binding the contract event 0x7a2d48d1df1249429730a253e5713a7d7a2024913de2fbccafdf36efdd32bf05.
//
// Solidity: event WithdrawApprovedStaking(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) WatchWithdrawApprovedStaking(opts *bind.WatchOpts, sink chan<- *CnStakingV3StorageWithdrawApprovedStaking, approvedWithdrawalId []*big.Int, to []common.Address) (event.Subscription, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.WatchLogs(opts, "WithdrawApprovedStaking", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3StorageWithdrawApprovedStaking)
				if err := _CnStakingV3Storage.contract.UnpackLog(event, "WithdrawApprovedStaking", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawApprovedStaking is a log parse operation binding the contract event 0x7a2d48d1df1249429730a253e5713a7d7a2024913de2fbccafdf36efdd32bf05.
//
// Solidity: event WithdrawApprovedStaking(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) ParseWithdrawApprovedStaking(log types.Log) (*CnStakingV3StorageWithdrawApprovedStaking, error) {
	event := new(CnStakingV3StorageWithdrawApprovedStaking)
	if err := _CnStakingV3Storage.contract.UnpackLog(event, "WithdrawApprovedStaking", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CnStakingV3StorageWithdrawLockupStakingIterator is returned from FilterWithdrawLockupStaking and is used to iterate over the raw logs and unpacked data for WithdrawLockupStaking events raised by the CnStakingV3Storage contract.
type CnStakingV3StorageWithdrawLockupStakingIterator struct {
	Event *CnStakingV3StorageWithdrawLockupStaking // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CnStakingV3StorageWithdrawLockupStakingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CnStakingV3StorageWithdrawLockupStaking)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CnStakingV3StorageWithdrawLockupStaking)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CnStakingV3StorageWithdrawLockupStakingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CnStakingV3StorageWithdrawLockupStakingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CnStakingV3StorageWithdrawLockupStaking represents a WithdrawLockupStaking event raised by the CnStakingV3Storage contract.
type CnStakingV3StorageWithdrawLockupStaking struct {
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWithdrawLockupStaking is a free log retrieval operation binding the contract event 0x2d9d65e4fcab96e158761a8d3cc0bd7fd76951ab5574667b07190da171777470.
//
// Solidity: event WithdrawLockupStaking(address indexed to, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) FilterWithdrawLockupStaking(opts *bind.FilterOpts, to []common.Address) (*CnStakingV3StorageWithdrawLockupStakingIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.FilterLogs(opts, "WithdrawLockupStaking", toRule)
	if err != nil {
		return nil, err
	}
	return &CnStakingV3StorageWithdrawLockupStakingIterator{contract: _CnStakingV3Storage.contract, event: "WithdrawLockupStaking", logs: logs, sub: sub}, nil
}

// WatchWithdrawLockupStaking is a free log subscription operation binding the contract event 0x2d9d65e4fcab96e158761a8d3cc0bd7fd76951ab5574667b07190da171777470.
//
// Solidity: event WithdrawLockupStaking(address indexed to, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) WatchWithdrawLockupStaking(opts *bind.WatchOpts, sink chan<- *CnStakingV3StorageWithdrawLockupStaking, to []common.Address) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _CnStakingV3Storage.contract.WatchLogs(opts, "WithdrawLockupStaking", toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CnStakingV3StorageWithdrawLockupStaking)
				if err := _CnStakingV3Storage.contract.UnpackLog(event, "WithdrawLockupStaking", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawLockupStaking is a log parse operation binding the contract event 0x2d9d65e4fcab96e158761a8d3cc0bd7fd76951ab5574667b07190da171777470.
//
// Solidity: event WithdrawLockupStaking(address indexed to, uint256 value)
func (_CnStakingV3Storage *CnStakingV3StorageFilterer) ParseWithdrawLockupStaking(log types.Log) (*CnStakingV3StorageWithdrawLockupStaking, error) {
	event := new(CnStakingV3StorageWithdrawLockupStaking)
	if err := _CnStakingV3Storage.contract.UnpackLog(event, "WithdrawLockupStaking", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContextMetaData contains all meta data concerning the Context contract.
var ContextMetaData = &bind.MetaData{
	ABI: "[]",
}

// ContextABI is the input ABI used to generate the binding from.
// Deprecated: Use ContextMetaData.ABI instead.
var ContextABI = ContextMetaData.ABI

// ContextBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const ContextBinRuntime = ``

// Context is an auto generated Go binding around a Kaia contract.
type Context struct {
	ContextCaller     // Read-only binding to the contract
	ContextTransactor // Write-only binding to the contract
	ContextFilterer   // Log filterer for contract events
}

// ContextCaller is an auto generated read-only Go binding around a Kaia contract.
type ContextCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextTransactor is an auto generated write-only Go binding around a Kaia contract.
type ContextTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type ContextFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type ContextSession struct {
	Contract     *Context          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContextCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type ContextCallerSession struct {
	Contract *ContextCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ContextTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type ContextTransactorSession struct {
	Contract     *ContextTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ContextRaw is an auto generated low-level Go binding around a Kaia contract.
type ContextRaw struct {
	Contract *Context // Generic contract binding to access the raw methods on
}

// ContextCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type ContextCallerRaw struct {
	Contract *ContextCaller // Generic read-only contract binding to access the raw methods on
}

// ContextTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type ContextTransactorRaw struct {
	Contract *ContextTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContext creates a new instance of Context, bound to a specific deployed contract.
func NewContext(address common.Address, backend bind.ContractBackend) (*Context, error) {
	contract, err := bindContext(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Context{ContextCaller: ContextCaller{contract: contract}, ContextTransactor: ContextTransactor{contract: contract}, ContextFilterer: ContextFilterer{contract: contract}}, nil
}

// NewContextCaller creates a new read-only instance of Context, bound to a specific deployed contract.
func NewContextCaller(address common.Address, caller bind.ContractCaller) (*ContextCaller, error) {
	contract, err := bindContext(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContextCaller{contract: contract}, nil
}

// NewContextTransactor creates a new write-only instance of Context, bound to a specific deployed contract.
func NewContextTransactor(address common.Address, transactor bind.ContractTransactor) (*ContextTransactor, error) {
	contract, err := bindContext(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContextTransactor{contract: contract}, nil
}

// NewContextFilterer creates a new log filterer instance of Context, bound to a specific deployed contract.
func NewContextFilterer(address common.Address, filterer bind.ContractFilterer) (*ContextFilterer, error) {
	contract, err := bindContext(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContextFilterer{contract: contract}, nil
}

// bindContext binds a generic wrapper to an already deployed contract.
func bindContext(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContextMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Context *ContextRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Context.Contract.ContextCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Context *ContextRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Context.Contract.ContextTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Context *ContextRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Context.Contract.ContextTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Context *ContextCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Context.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Context *ContextTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Context.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Context *ContextTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Context.Contract.contract.Transact(opts, method, params...)
}

// ERC165MetaData contains all meta data concerning the ERC165 contract.
var ERC165MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"01ffc9a7": "supportsInterface(bytes4)",
	},
}

// ERC165ABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC165MetaData.ABI instead.
var ERC165ABI = ERC165MetaData.ABI

// ERC165BinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const ERC165BinRuntime = ``

// Deprecated: Use ERC165MetaData.Sigs instead.
// ERC165FuncSigs maps the 4-byte function signature to its string representation.
var ERC165FuncSigs = ERC165MetaData.Sigs

// ERC165 is an auto generated Go binding around a Kaia contract.
type ERC165 struct {
	ERC165Caller     // Read-only binding to the contract
	ERC165Transactor // Write-only binding to the contract
	ERC165Filterer   // Log filterer for contract events
}

// ERC165Caller is an auto generated read-only Go binding around a Kaia contract.
type ERC165Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165Transactor is an auto generated write-only Go binding around a Kaia contract.
type ERC165Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165Filterer is an auto generated log filtering Go binding around a Kaia contract events.
type ERC165Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165Session is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type ERC165Session struct {
	Contract     *ERC165           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC165CallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type ERC165CallerSession struct {
	Contract *ERC165Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ERC165TransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type ERC165TransactorSession struct {
	Contract     *ERC165Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC165Raw is an auto generated low-level Go binding around a Kaia contract.
type ERC165Raw struct {
	Contract *ERC165 // Generic contract binding to access the raw methods on
}

// ERC165CallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type ERC165CallerRaw struct {
	Contract *ERC165Caller // Generic read-only contract binding to access the raw methods on
}

// ERC165TransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type ERC165TransactorRaw struct {
	Contract *ERC165Transactor // Generic write-only contract binding to access the raw methods on
}

// NewERC165 creates a new instance of ERC165, bound to a specific deployed contract.
func NewERC165(address common.Address, backend bind.ContractBackend) (*ERC165, error) {
	contract, err := bindERC165(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC165{ERC165Caller: ERC165Caller{contract: contract}, ERC165Transactor: ERC165Transactor{contract: contract}, ERC165Filterer: ERC165Filterer{contract: contract}}, nil
}

// NewERC165Caller creates a new read-only instance of ERC165, bound to a specific deployed contract.
func NewERC165Caller(address common.Address, caller bind.ContractCaller) (*ERC165Caller, error) {
	contract, err := bindERC165(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC165Caller{contract: contract}, nil
}

// NewERC165Transactor creates a new write-only instance of ERC165, bound to a specific deployed contract.
func NewERC165Transactor(address common.Address, transactor bind.ContractTransactor) (*ERC165Transactor, error) {
	contract, err := bindERC165(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC165Transactor{contract: contract}, nil
}

// NewERC165Filterer creates a new log filterer instance of ERC165, bound to a specific deployed contract.
func NewERC165Filterer(address common.Address, filterer bind.ContractFilterer) (*ERC165Filterer, error) {
	contract, err := bindERC165(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC165Filterer{contract: contract}, nil
}

// bindERC165 binds a generic wrapper to an already deployed contract.
func bindERC165(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC165MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC165 *ERC165Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC165.Contract.ERC165Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC165 *ERC165Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC165.Contract.ERC165Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC165 *ERC165Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC165.Contract.ERC165Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC165 *ERC165CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC165.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC165 *ERC165TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC165.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC165 *ERC165TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC165.Contract.contract.Transact(opts, method, params...)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC165 *ERC165Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ERC165.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC165 *ERC165Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC165.Contract.SupportsInterface(&_ERC165.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC165 *ERC165CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC165.Contract.SupportsInterface(&_ERC165.CallOpts, interfaceId)
}

// ERC20MetaData contains all meta data concerning the ERC20 contract.
var ERC20MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"313ce567": "decimals()",
		"06fdde03": "name()",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
	},
}

// ERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20MetaData.ABI instead.
var ERC20ABI = ERC20MetaData.ABI

// ERC20BinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const ERC20BinRuntime = ``

// Deprecated: Use ERC20MetaData.Sigs instead.
// ERC20FuncSigs maps the 4-byte function signature to its string representation.
var ERC20FuncSigs = ERC20MetaData.Sigs

// ERC20 is an auto generated Go binding around a Kaia contract.
type ERC20 struct {
	ERC20Caller     // Read-only binding to the contract
	ERC20Transactor // Write-only binding to the contract
	ERC20Filterer   // Log filterer for contract events
}

// ERC20Caller is an auto generated read-only Go binding around a Kaia contract.
type ERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Transactor is an auto generated write-only Go binding around a Kaia contract.
type ERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Filterer is an auto generated log filtering Go binding around a Kaia contract events.
type ERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Session is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type ERC20Session struct {
	Contract     *ERC20            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20CallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type ERC20CallerSession struct {
	Contract *ERC20Caller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ERC20TransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type ERC20TransactorSession struct {
	Contract     *ERC20Transactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20Raw is an auto generated low-level Go binding around a Kaia contract.
type ERC20Raw struct {
	Contract *ERC20 // Generic contract binding to access the raw methods on
}

// ERC20CallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type ERC20CallerRaw struct {
	Contract *ERC20Caller // Generic read-only contract binding to access the raw methods on
}

// ERC20TransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type ERC20TransactorRaw struct {
	Contract *ERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20 creates a new instance of ERC20, bound to a specific deployed contract.
func NewERC20(address common.Address, backend bind.ContractBackend) (*ERC20, error) {
	contract, err := bindERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20{ERC20Caller: ERC20Caller{contract: contract}, ERC20Transactor: ERC20Transactor{contract: contract}, ERC20Filterer: ERC20Filterer{contract: contract}}, nil
}

// NewERC20Caller creates a new read-only instance of ERC20, bound to a specific deployed contract.
func NewERC20Caller(address common.Address, caller bind.ContractCaller) (*ERC20Caller, error) {
	contract, err := bindERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20Caller{contract: contract}, nil
}

// NewERC20Transactor creates a new write-only instance of ERC20, bound to a specific deployed contract.
func NewERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*ERC20Transactor, error) {
	contract, err := bindERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20Transactor{contract: contract}, nil
}

// NewERC20Filterer creates a new log filterer instance of ERC20, bound to a specific deployed contract.
func NewERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*ERC20Filterer, error) {
	contract, err := bindERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20Filterer{contract: contract}, nil
}

// bindERC20 binds a generic wrapper to an already deployed contract.
func bindERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20 *ERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20.Contract.ERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20 *ERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20.Contract.ERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20 *ERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20.Contract.ERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20 *ERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20 *ERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20 *ERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20.Contract.Allowance(&_ERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20.Contract.Allowance(&_ERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20.Contract.BalanceOf(&_ERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20.Contract.BalanceOf(&_ERC20.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20 *ERC20Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20 *ERC20Session) Decimals() (uint8, error) {
	return _ERC20.Contract.Decimals(&_ERC20.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20 *ERC20CallerSession) Decimals() (uint8, error) {
	return _ERC20.Contract.Decimals(&_ERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20 *ERC20Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20 *ERC20Session) Name() (string, error) {
	return _ERC20.Contract.Name(&_ERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20 *ERC20CallerSession) Name() (string, error) {
	return _ERC20.Contract.Name(&_ERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20 *ERC20Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20 *ERC20Session) Symbol() (string, error) {
	return _ERC20.Contract.Symbol(&_ERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20 *ERC20CallerSession) Symbol() (string, error) {
	return _ERC20.Contract.Symbol(&_ERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20Session) TotalSupply() (*big.Int, error) {
	return _ERC20.Contract.TotalSupply(&_ERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _ERC20.Contract.TotalSupply(&_ERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_ERC20 *ERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_ERC20 *ERC20Session) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Approve(&_ERC20.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_ERC20 *ERC20TransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Approve(&_ERC20.TransactOpts, spender, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_ERC20 *ERC20Transactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_ERC20 *ERC20Session) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Transfer(&_ERC20.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_ERC20 *ERC20TransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Transfer(&_ERC20.TransactOpts, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_ERC20 *ERC20Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_ERC20 *ERC20Session) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.TransferFrom(&_ERC20.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_ERC20 *ERC20TransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.TransferFrom(&_ERC20.TransactOpts, from, to, value)
}

// ERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC20 contract.
type ERC20ApprovalIterator struct {
	Event *ERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20Approval represents a Approval event raised by the ERC20 contract.
type ERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20ApprovalIterator{contract: _ERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20Approval)
				if err := _ERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) ParseApproval(log types.Log) (*ERC20Approval, error) {
	event := new(ERC20Approval)
	if err := _ERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC20 contract.
type ERC20TransferIterator struct {
	Event *ERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20Transfer represents a Transfer event raised by the ERC20 contract.
type ERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TransferIterator{contract: _ERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20Transfer)
				if err := _ERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) ParseTransfer(log types.Log) (*ERC20Transfer, error) {
	event := new(ERC20Transfer)
	if err := _ERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EnumerableSetMetaData contains all meta data concerning the EnumerableSet contract.
var EnumerableSetMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220ab7ec786af90a9f4a47555f20c6e9ec9c8cbd49047b90c75fa05c2991f6f865664736f6c63430008190033",
}

// EnumerableSetABI is the input ABI used to generate the binding from.
// Deprecated: Use EnumerableSetMetaData.ABI instead.
var EnumerableSetABI = EnumerableSetMetaData.ABI

// EnumerableSetBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const EnumerableSetBinRuntime = `730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220ab7ec786af90a9f4a47555f20c6e9ec9c8cbd49047b90c75fa05c2991f6f865664736f6c63430008190033`

// EnumerableSetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EnumerableSetMetaData.Bin instead.
var EnumerableSetBin = EnumerableSetMetaData.Bin

// DeployEnumerableSet deploys a new Kaia contract, binding an instance of EnumerableSet to it.
func DeployEnumerableSet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EnumerableSet, error) {
	parsed, err := EnumerableSetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EnumerableSetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EnumerableSet{EnumerableSetCaller: EnumerableSetCaller{contract: contract}, EnumerableSetTransactor: EnumerableSetTransactor{contract: contract}, EnumerableSetFilterer: EnumerableSetFilterer{contract: contract}}, nil
}

// EnumerableSet is an auto generated Go binding around a Kaia contract.
type EnumerableSet struct {
	EnumerableSetCaller     // Read-only binding to the contract
	EnumerableSetTransactor // Write-only binding to the contract
	EnumerableSetFilterer   // Log filterer for contract events
}

// EnumerableSetCaller is an auto generated read-only Go binding around a Kaia contract.
type EnumerableSetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EnumerableSetTransactor is an auto generated write-only Go binding around a Kaia contract.
type EnumerableSetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EnumerableSetFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type EnumerableSetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EnumerableSetSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type EnumerableSetSession struct {
	Contract     *EnumerableSet    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EnumerableSetCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type EnumerableSetCallerSession struct {
	Contract *EnumerableSetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// EnumerableSetTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type EnumerableSetTransactorSession struct {
	Contract     *EnumerableSetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// EnumerableSetRaw is an auto generated low-level Go binding around a Kaia contract.
type EnumerableSetRaw struct {
	Contract *EnumerableSet // Generic contract binding to access the raw methods on
}

// EnumerableSetCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type EnumerableSetCallerRaw struct {
	Contract *EnumerableSetCaller // Generic read-only contract binding to access the raw methods on
}

// EnumerableSetTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type EnumerableSetTransactorRaw struct {
	Contract *EnumerableSetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEnumerableSet creates a new instance of EnumerableSet, bound to a specific deployed contract.
func NewEnumerableSet(address common.Address, backend bind.ContractBackend) (*EnumerableSet, error) {
	contract, err := bindEnumerableSet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EnumerableSet{EnumerableSetCaller: EnumerableSetCaller{contract: contract}, EnumerableSetTransactor: EnumerableSetTransactor{contract: contract}, EnumerableSetFilterer: EnumerableSetFilterer{contract: contract}}, nil
}

// NewEnumerableSetCaller creates a new read-only instance of EnumerableSet, bound to a specific deployed contract.
func NewEnumerableSetCaller(address common.Address, caller bind.ContractCaller) (*EnumerableSetCaller, error) {
	contract, err := bindEnumerableSet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EnumerableSetCaller{contract: contract}, nil
}

// NewEnumerableSetTransactor creates a new write-only instance of EnumerableSet, bound to a specific deployed contract.
func NewEnumerableSetTransactor(address common.Address, transactor bind.ContractTransactor) (*EnumerableSetTransactor, error) {
	contract, err := bindEnumerableSet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EnumerableSetTransactor{contract: contract}, nil
}

// NewEnumerableSetFilterer creates a new log filterer instance of EnumerableSet, bound to a specific deployed contract.
func NewEnumerableSetFilterer(address common.Address, filterer bind.ContractFilterer) (*EnumerableSetFilterer, error) {
	contract, err := bindEnumerableSet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EnumerableSetFilterer{contract: contract}, nil
}

// bindEnumerableSet binds a generic wrapper to an already deployed contract.
func bindEnumerableSet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := EnumerableSetMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EnumerableSet *EnumerableSetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EnumerableSet.Contract.EnumerableSetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EnumerableSet *EnumerableSetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EnumerableSet.Contract.EnumerableSetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EnumerableSet *EnumerableSetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EnumerableSet.Contract.EnumerableSetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EnumerableSet *EnumerableSetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EnumerableSet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EnumerableSet *EnumerableSetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EnumerableSet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EnumerableSet *EnumerableSetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EnumerableSet.Contract.contract.Transact(opts, method, params...)
}

// IAccessControlMetaData contains all meta data concerning the IAccessControl contract.
var IAccessControlMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"248a9ca3": "getRoleAdmin(bytes32)",
		"2f2ff15d": "grantRole(bytes32,address)",
		"91d14854": "hasRole(bytes32,address)",
		"36568abe": "renounceRole(bytes32,address)",
		"d547741f": "revokeRole(bytes32,address)",
	},
}

// IAccessControlABI is the input ABI used to generate the binding from.
// Deprecated: Use IAccessControlMetaData.ABI instead.
var IAccessControlABI = IAccessControlMetaData.ABI

// IAccessControlBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const IAccessControlBinRuntime = ``

// Deprecated: Use IAccessControlMetaData.Sigs instead.
// IAccessControlFuncSigs maps the 4-byte function signature to its string representation.
var IAccessControlFuncSigs = IAccessControlMetaData.Sigs

// IAccessControl is an auto generated Go binding around a Kaia contract.
type IAccessControl struct {
	IAccessControlCaller     // Read-only binding to the contract
	IAccessControlTransactor // Write-only binding to the contract
	IAccessControlFilterer   // Log filterer for contract events
}

// IAccessControlCaller is an auto generated read-only Go binding around a Kaia contract.
type IAccessControlCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAccessControlTransactor is an auto generated write-only Go binding around a Kaia contract.
type IAccessControlTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAccessControlFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type IAccessControlFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAccessControlSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type IAccessControlSession struct {
	Contract     *IAccessControl   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IAccessControlCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type IAccessControlCallerSession struct {
	Contract *IAccessControlCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IAccessControlTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type IAccessControlTransactorSession struct {
	Contract     *IAccessControlTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IAccessControlRaw is an auto generated low-level Go binding around a Kaia contract.
type IAccessControlRaw struct {
	Contract *IAccessControl // Generic contract binding to access the raw methods on
}

// IAccessControlCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type IAccessControlCallerRaw struct {
	Contract *IAccessControlCaller // Generic read-only contract binding to access the raw methods on
}

// IAccessControlTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type IAccessControlTransactorRaw struct {
	Contract *IAccessControlTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIAccessControl creates a new instance of IAccessControl, bound to a specific deployed contract.
func NewIAccessControl(address common.Address, backend bind.ContractBackend) (*IAccessControl, error) {
	contract, err := bindIAccessControl(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IAccessControl{IAccessControlCaller: IAccessControlCaller{contract: contract}, IAccessControlTransactor: IAccessControlTransactor{contract: contract}, IAccessControlFilterer: IAccessControlFilterer{contract: contract}}, nil
}

// NewIAccessControlCaller creates a new read-only instance of IAccessControl, bound to a specific deployed contract.
func NewIAccessControlCaller(address common.Address, caller bind.ContractCaller) (*IAccessControlCaller, error) {
	contract, err := bindIAccessControl(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IAccessControlCaller{contract: contract}, nil
}

// NewIAccessControlTransactor creates a new write-only instance of IAccessControl, bound to a specific deployed contract.
func NewIAccessControlTransactor(address common.Address, transactor bind.ContractTransactor) (*IAccessControlTransactor, error) {
	contract, err := bindIAccessControl(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IAccessControlTransactor{contract: contract}, nil
}

// NewIAccessControlFilterer creates a new log filterer instance of IAccessControl, bound to a specific deployed contract.
func NewIAccessControlFilterer(address common.Address, filterer bind.ContractFilterer) (*IAccessControlFilterer, error) {
	contract, err := bindIAccessControl(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IAccessControlFilterer{contract: contract}, nil
}

// bindIAccessControl binds a generic wrapper to an already deployed contract.
func bindIAccessControl(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IAccessControlMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAccessControl *IAccessControlRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IAccessControl.Contract.IAccessControlCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAccessControl *IAccessControlRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAccessControl.Contract.IAccessControlTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAccessControl *IAccessControlRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAccessControl.Contract.IAccessControlTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAccessControl *IAccessControlCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IAccessControl.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAccessControl *IAccessControlTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAccessControl.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAccessControl *IAccessControlTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAccessControl.Contract.contract.Transact(opts, method, params...)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_IAccessControl *IAccessControlCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _IAccessControl.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_IAccessControl *IAccessControlSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _IAccessControl.Contract.GetRoleAdmin(&_IAccessControl.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_IAccessControl *IAccessControlCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _IAccessControl.Contract.GetRoleAdmin(&_IAccessControl.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_IAccessControl *IAccessControlCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _IAccessControl.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_IAccessControl *IAccessControlSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _IAccessControl.Contract.HasRole(&_IAccessControl.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_IAccessControl *IAccessControlCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _IAccessControl.Contract.HasRole(&_IAccessControl.CallOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_IAccessControl *IAccessControlTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _IAccessControl.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_IAccessControl *IAccessControlSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _IAccessControl.Contract.GrantRole(&_IAccessControl.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_IAccessControl *IAccessControlTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _IAccessControl.Contract.GrantRole(&_IAccessControl.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_IAccessControl *IAccessControlTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _IAccessControl.contract.Transact(opts, "renounceRole", role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_IAccessControl *IAccessControlSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _IAccessControl.Contract.RenounceRole(&_IAccessControl.TransactOpts, role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_IAccessControl *IAccessControlTransactorSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _IAccessControl.Contract.RenounceRole(&_IAccessControl.TransactOpts, role, callerConfirmation)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_IAccessControl *IAccessControlTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _IAccessControl.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_IAccessControl *IAccessControlSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _IAccessControl.Contract.RevokeRole(&_IAccessControl.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_IAccessControl *IAccessControlTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _IAccessControl.Contract.RevokeRole(&_IAccessControl.TransactOpts, role, account)
}

// IAccessControlRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the IAccessControl contract.
type IAccessControlRoleAdminChangedIterator struct {
	Event *IAccessControlRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IAccessControlRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IAccessControlRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IAccessControlRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IAccessControlRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IAccessControlRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IAccessControlRoleAdminChanged represents a RoleAdminChanged event raised by the IAccessControl contract.
type IAccessControlRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_IAccessControl *IAccessControlFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*IAccessControlRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _IAccessControl.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &IAccessControlRoleAdminChangedIterator{contract: _IAccessControl.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_IAccessControl *IAccessControlFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *IAccessControlRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _IAccessControl.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IAccessControlRoleAdminChanged)
				if err := _IAccessControl.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_IAccessControl *IAccessControlFilterer) ParseRoleAdminChanged(log types.Log) (*IAccessControlRoleAdminChanged, error) {
	event := new(IAccessControlRoleAdminChanged)
	if err := _IAccessControl.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IAccessControlRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the IAccessControl contract.
type IAccessControlRoleGrantedIterator struct {
	Event *IAccessControlRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IAccessControlRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IAccessControlRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IAccessControlRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IAccessControlRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IAccessControlRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IAccessControlRoleGranted represents a RoleGranted event raised by the IAccessControl contract.
type IAccessControlRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_IAccessControl *IAccessControlFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*IAccessControlRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IAccessControl.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &IAccessControlRoleGrantedIterator{contract: _IAccessControl.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_IAccessControl *IAccessControlFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *IAccessControlRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IAccessControl.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IAccessControlRoleGranted)
				if err := _IAccessControl.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_IAccessControl *IAccessControlFilterer) ParseRoleGranted(log types.Log) (*IAccessControlRoleGranted, error) {
	event := new(IAccessControlRoleGranted)
	if err := _IAccessControl.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IAccessControlRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the IAccessControl contract.
type IAccessControlRoleRevokedIterator struct {
	Event *IAccessControlRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IAccessControlRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IAccessControlRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IAccessControlRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IAccessControlRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IAccessControlRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IAccessControlRoleRevoked represents a RoleRevoked event raised by the IAccessControl contract.
type IAccessControlRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_IAccessControl *IAccessControlFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*IAccessControlRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IAccessControl.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &IAccessControlRoleRevokedIterator{contract: _IAccessControl.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_IAccessControl *IAccessControlFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *IAccessControlRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IAccessControl.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IAccessControlRoleRevoked)
				if err := _IAccessControl.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_IAccessControl *IAccessControlFilterer) ParseRoleRevoked(log types.Log) (*IAccessControlRoleRevoked, error) {
	event := new(IAccessControlRoleRevoked)
	if err := _IAccessControl.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IAccessControlEnumerableMetaData contains all meta data concerning the IAccessControlEnumerable contract.
var IAccessControlEnumerableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"248a9ca3": "getRoleAdmin(bytes32)",
		"9010d07c": "getRoleMember(bytes32,uint256)",
		"ca15c873": "getRoleMemberCount(bytes32)",
		"2f2ff15d": "grantRole(bytes32,address)",
		"91d14854": "hasRole(bytes32,address)",
		"36568abe": "renounceRole(bytes32,address)",
		"d547741f": "revokeRole(bytes32,address)",
	},
}

// IAccessControlEnumerableABI is the input ABI used to generate the binding from.
// Deprecated: Use IAccessControlEnumerableMetaData.ABI instead.
var IAccessControlEnumerableABI = IAccessControlEnumerableMetaData.ABI

// IAccessControlEnumerableBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const IAccessControlEnumerableBinRuntime = ``

// Deprecated: Use IAccessControlEnumerableMetaData.Sigs instead.
// IAccessControlEnumerableFuncSigs maps the 4-byte function signature to its string representation.
var IAccessControlEnumerableFuncSigs = IAccessControlEnumerableMetaData.Sigs

// IAccessControlEnumerable is an auto generated Go binding around a Kaia contract.
type IAccessControlEnumerable struct {
	IAccessControlEnumerableCaller     // Read-only binding to the contract
	IAccessControlEnumerableTransactor // Write-only binding to the contract
	IAccessControlEnumerableFilterer   // Log filterer for contract events
}

// IAccessControlEnumerableCaller is an auto generated read-only Go binding around a Kaia contract.
type IAccessControlEnumerableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAccessControlEnumerableTransactor is an auto generated write-only Go binding around a Kaia contract.
type IAccessControlEnumerableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAccessControlEnumerableFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type IAccessControlEnumerableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAccessControlEnumerableSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type IAccessControlEnumerableSession struct {
	Contract     *IAccessControlEnumerable // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IAccessControlEnumerableCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type IAccessControlEnumerableCallerSession struct {
	Contract *IAccessControlEnumerableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// IAccessControlEnumerableTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type IAccessControlEnumerableTransactorSession struct {
	Contract     *IAccessControlEnumerableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// IAccessControlEnumerableRaw is an auto generated low-level Go binding around a Kaia contract.
type IAccessControlEnumerableRaw struct {
	Contract *IAccessControlEnumerable // Generic contract binding to access the raw methods on
}

// IAccessControlEnumerableCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type IAccessControlEnumerableCallerRaw struct {
	Contract *IAccessControlEnumerableCaller // Generic read-only contract binding to access the raw methods on
}

// IAccessControlEnumerableTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type IAccessControlEnumerableTransactorRaw struct {
	Contract *IAccessControlEnumerableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIAccessControlEnumerable creates a new instance of IAccessControlEnumerable, bound to a specific deployed contract.
func NewIAccessControlEnumerable(address common.Address, backend bind.ContractBackend) (*IAccessControlEnumerable, error) {
	contract, err := bindIAccessControlEnumerable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IAccessControlEnumerable{IAccessControlEnumerableCaller: IAccessControlEnumerableCaller{contract: contract}, IAccessControlEnumerableTransactor: IAccessControlEnumerableTransactor{contract: contract}, IAccessControlEnumerableFilterer: IAccessControlEnumerableFilterer{contract: contract}}, nil
}

// NewIAccessControlEnumerableCaller creates a new read-only instance of IAccessControlEnumerable, bound to a specific deployed contract.
func NewIAccessControlEnumerableCaller(address common.Address, caller bind.ContractCaller) (*IAccessControlEnumerableCaller, error) {
	contract, err := bindIAccessControlEnumerable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IAccessControlEnumerableCaller{contract: contract}, nil
}

// NewIAccessControlEnumerableTransactor creates a new write-only instance of IAccessControlEnumerable, bound to a specific deployed contract.
func NewIAccessControlEnumerableTransactor(address common.Address, transactor bind.ContractTransactor) (*IAccessControlEnumerableTransactor, error) {
	contract, err := bindIAccessControlEnumerable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IAccessControlEnumerableTransactor{contract: contract}, nil
}

// NewIAccessControlEnumerableFilterer creates a new log filterer instance of IAccessControlEnumerable, bound to a specific deployed contract.
func NewIAccessControlEnumerableFilterer(address common.Address, filterer bind.ContractFilterer) (*IAccessControlEnumerableFilterer, error) {
	contract, err := bindIAccessControlEnumerable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IAccessControlEnumerableFilterer{contract: contract}, nil
}

// bindIAccessControlEnumerable binds a generic wrapper to an already deployed contract.
func bindIAccessControlEnumerable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IAccessControlEnumerableMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAccessControlEnumerable *IAccessControlEnumerableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IAccessControlEnumerable.Contract.IAccessControlEnumerableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAccessControlEnumerable *IAccessControlEnumerableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAccessControlEnumerable.Contract.IAccessControlEnumerableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAccessControlEnumerable *IAccessControlEnumerableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAccessControlEnumerable.Contract.IAccessControlEnumerableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAccessControlEnumerable *IAccessControlEnumerableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IAccessControlEnumerable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAccessControlEnumerable *IAccessControlEnumerableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAccessControlEnumerable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAccessControlEnumerable *IAccessControlEnumerableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAccessControlEnumerable.Contract.contract.Transact(opts, method, params...)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_IAccessControlEnumerable *IAccessControlEnumerableCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _IAccessControlEnumerable.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_IAccessControlEnumerable *IAccessControlEnumerableSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _IAccessControlEnumerable.Contract.GetRoleAdmin(&_IAccessControlEnumerable.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_IAccessControlEnumerable *IAccessControlEnumerableCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _IAccessControlEnumerable.Contract.GetRoleAdmin(&_IAccessControlEnumerable.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_IAccessControlEnumerable *IAccessControlEnumerableCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IAccessControlEnumerable.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_IAccessControlEnumerable *IAccessControlEnumerableSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _IAccessControlEnumerable.Contract.GetRoleMember(&_IAccessControlEnumerable.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_IAccessControlEnumerable *IAccessControlEnumerableCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _IAccessControlEnumerable.Contract.GetRoleMember(&_IAccessControlEnumerable.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_IAccessControlEnumerable *IAccessControlEnumerableCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _IAccessControlEnumerable.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_IAccessControlEnumerable *IAccessControlEnumerableSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _IAccessControlEnumerable.Contract.GetRoleMemberCount(&_IAccessControlEnumerable.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_IAccessControlEnumerable *IAccessControlEnumerableCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _IAccessControlEnumerable.Contract.GetRoleMemberCount(&_IAccessControlEnumerable.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_IAccessControlEnumerable *IAccessControlEnumerableCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _IAccessControlEnumerable.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_IAccessControlEnumerable *IAccessControlEnumerableSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _IAccessControlEnumerable.Contract.HasRole(&_IAccessControlEnumerable.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_IAccessControlEnumerable *IAccessControlEnumerableCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _IAccessControlEnumerable.Contract.HasRole(&_IAccessControlEnumerable.CallOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_IAccessControlEnumerable *IAccessControlEnumerableTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _IAccessControlEnumerable.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_IAccessControlEnumerable *IAccessControlEnumerableSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _IAccessControlEnumerable.Contract.GrantRole(&_IAccessControlEnumerable.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_IAccessControlEnumerable *IAccessControlEnumerableTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _IAccessControlEnumerable.Contract.GrantRole(&_IAccessControlEnumerable.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_IAccessControlEnumerable *IAccessControlEnumerableTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _IAccessControlEnumerable.contract.Transact(opts, "renounceRole", role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_IAccessControlEnumerable *IAccessControlEnumerableSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _IAccessControlEnumerable.Contract.RenounceRole(&_IAccessControlEnumerable.TransactOpts, role, callerConfirmation)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address callerConfirmation) returns()
func (_IAccessControlEnumerable *IAccessControlEnumerableTransactorSession) RenounceRole(role [32]byte, callerConfirmation common.Address) (*types.Transaction, error) {
	return _IAccessControlEnumerable.Contract.RenounceRole(&_IAccessControlEnumerable.TransactOpts, role, callerConfirmation)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_IAccessControlEnumerable *IAccessControlEnumerableTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _IAccessControlEnumerable.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_IAccessControlEnumerable *IAccessControlEnumerableSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _IAccessControlEnumerable.Contract.RevokeRole(&_IAccessControlEnumerable.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_IAccessControlEnumerable *IAccessControlEnumerableTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _IAccessControlEnumerable.Contract.RevokeRole(&_IAccessControlEnumerable.TransactOpts, role, account)
}

// IAccessControlEnumerableRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the IAccessControlEnumerable contract.
type IAccessControlEnumerableRoleAdminChangedIterator struct {
	Event *IAccessControlEnumerableRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IAccessControlEnumerableRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IAccessControlEnumerableRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IAccessControlEnumerableRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IAccessControlEnumerableRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IAccessControlEnumerableRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IAccessControlEnumerableRoleAdminChanged represents a RoleAdminChanged event raised by the IAccessControlEnumerable contract.
type IAccessControlEnumerableRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_IAccessControlEnumerable *IAccessControlEnumerableFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*IAccessControlEnumerableRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _IAccessControlEnumerable.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &IAccessControlEnumerableRoleAdminChangedIterator{contract: _IAccessControlEnumerable.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_IAccessControlEnumerable *IAccessControlEnumerableFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *IAccessControlEnumerableRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _IAccessControlEnumerable.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IAccessControlEnumerableRoleAdminChanged)
				if err := _IAccessControlEnumerable.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_IAccessControlEnumerable *IAccessControlEnumerableFilterer) ParseRoleAdminChanged(log types.Log) (*IAccessControlEnumerableRoleAdminChanged, error) {
	event := new(IAccessControlEnumerableRoleAdminChanged)
	if err := _IAccessControlEnumerable.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IAccessControlEnumerableRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the IAccessControlEnumerable contract.
type IAccessControlEnumerableRoleGrantedIterator struct {
	Event *IAccessControlEnumerableRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IAccessControlEnumerableRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IAccessControlEnumerableRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IAccessControlEnumerableRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IAccessControlEnumerableRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IAccessControlEnumerableRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IAccessControlEnumerableRoleGranted represents a RoleGranted event raised by the IAccessControlEnumerable contract.
type IAccessControlEnumerableRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_IAccessControlEnumerable *IAccessControlEnumerableFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*IAccessControlEnumerableRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IAccessControlEnumerable.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &IAccessControlEnumerableRoleGrantedIterator{contract: _IAccessControlEnumerable.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_IAccessControlEnumerable *IAccessControlEnumerableFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *IAccessControlEnumerableRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IAccessControlEnumerable.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IAccessControlEnumerableRoleGranted)
				if err := _IAccessControlEnumerable.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_IAccessControlEnumerable *IAccessControlEnumerableFilterer) ParseRoleGranted(log types.Log) (*IAccessControlEnumerableRoleGranted, error) {
	event := new(IAccessControlEnumerableRoleGranted)
	if err := _IAccessControlEnumerable.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IAccessControlEnumerableRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the IAccessControlEnumerable contract.
type IAccessControlEnumerableRoleRevokedIterator struct {
	Event *IAccessControlEnumerableRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IAccessControlEnumerableRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IAccessControlEnumerableRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IAccessControlEnumerableRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IAccessControlEnumerableRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IAccessControlEnumerableRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IAccessControlEnumerableRoleRevoked represents a RoleRevoked event raised by the IAccessControlEnumerable contract.
type IAccessControlEnumerableRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_IAccessControlEnumerable *IAccessControlEnumerableFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*IAccessControlEnumerableRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IAccessControlEnumerable.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &IAccessControlEnumerableRoleRevokedIterator{contract: _IAccessControlEnumerable.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_IAccessControlEnumerable *IAccessControlEnumerableFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *IAccessControlEnumerableRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IAccessControlEnumerable.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IAccessControlEnumerableRoleRevoked)
				if err := _IAccessControlEnumerable.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_IAccessControlEnumerable *IAccessControlEnumerableFilterer) ParseRoleRevoked(log types.Log) (*IAccessControlEnumerableRoleRevoked, error) {
	event := new(IAccessControlEnumerableRoleRevoked)
	if err := _IAccessControlEnumerable.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IAddressBookMetaData contains all meta data concerning the IAddressBook contract.
var IAddressBookMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_adminList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"constructContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAddress\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"typeList\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"addressList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAddressInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"cnNodeIdList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"cnStakingContractList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"cnRewardAddressList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"pocContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kirContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cnNodeId\",\"type\":\"address\"}],\"name\":\"getCnInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cnNodeId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cnStakingcontract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cnRewardAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingRequestList\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"pendingRequestList\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getRequestInfo\",\"outputs\":[{\"internalType\":\"enumIAddressBook.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"confirmers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"initialProposedTime\",\"type\":\"uint256\"},{\"internalType\":\"enumIAddressBook.RequestState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumIAddressBook.Functions\",\"name\":\"_functionId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_firstArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_secondArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_thirdArg\",\"type\":\"bytes32\"}],\"name\":\"getRequestInfoByArgs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"confirmers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"initialProposedTime\",\"type\":\"uint256\"},{\"internalType\":\"enumIAddressBook.RequestState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"adminList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"requirement\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isConstructed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kirContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pocContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"reviseRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumIAddressBook.Functions\",\"name\":\"_functionId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_firstArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_secondArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_thirdArg\",\"type\":\"bytes32\"}],\"name\":\"revokeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spareContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitActivateAddressBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"submitAddAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitClearRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"submitDeleteAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cnNodeId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cnStakingContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cnRewardAddress\",\"type\":\"address\"}],\"name\":\"submitRegisterCnStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cnNodeId\",\"type\":\"address\"}],\"name\":\"submitUnregisterCnStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kirContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"submitUpdateKirContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pocContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"submitUpdatePocContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"submitUpdateRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spareContractAddress\",\"type\":\"address\"}],\"name\":\"submitUpdateSpareContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"7894c366": "constructContract(address[],uint256)",
		"715b208b": "getAllAddress()",
		"160370b8": "getAllAddressInfo()",
		"15575d5a": "getCnInfo(address)",
		"da34a0bd": "getPendingRequestList()",
		"82d67e5a": "getRequestInfo(bytes32)",
		"407091eb": "getRequestInfoByArgs(uint8,bytes32,bytes32,bytes32)",
		"1865c57d": "getState()",
		"4a8c1fb4": "isActivated()",
		"50a5bb69": "isConstructed()",
		"b858dd95": "kirContractAddress()",
		"d267eda5": "pocContractAddress()",
		"832a2aad": "reviseRewardAddress(address)",
		"3f0628b1": "revokeRequest(uint8,bytes32,bytes32,bytes32)",
		"6abd623d": "spareContractAddress()",
		"feb15ca1": "submitActivateAddressBook()",
		"863f5c0a": "submitAddAdmin(address)",
		"87cd9feb": "submitClearRequest()",
		"791b5123": "submitDeleteAdmin(address)",
		"cc11efc0": "submitRegisterCnStakingContract(address,address,address)",
		"b5067706": "submitUnregisterCnStakingContract(address)",
		"9258d768": "submitUpdateKirContract(address,uint256)",
		"21ac4ad4": "submitUpdatePocContract(address,uint256)",
		"e748357b": "submitUpdateRequirement(uint256)",
		"394a144a": "submitUpdateSpareContract(address)",
	},
}

// IAddressBookABI is the input ABI used to generate the binding from.
// Deprecated: Use IAddressBookMetaData.ABI instead.
var IAddressBookABI = IAddressBookMetaData.ABI

// IAddressBookBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const IAddressBookBinRuntime = ``

// Deprecated: Use IAddressBookMetaData.Sigs instead.
// IAddressBookFuncSigs maps the 4-byte function signature to its string representation.
var IAddressBookFuncSigs = IAddressBookMetaData.Sigs

// IAddressBook is an auto generated Go binding around a Kaia contract.
type IAddressBook struct {
	IAddressBookCaller     // Read-only binding to the contract
	IAddressBookTransactor // Write-only binding to the contract
	IAddressBookFilterer   // Log filterer for contract events
}

// IAddressBookCaller is an auto generated read-only Go binding around a Kaia contract.
type IAddressBookCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAddressBookTransactor is an auto generated write-only Go binding around a Kaia contract.
type IAddressBookTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAddressBookFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type IAddressBookFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAddressBookSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type IAddressBookSession struct {
	Contract     *IAddressBook     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IAddressBookCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type IAddressBookCallerSession struct {
	Contract *IAddressBookCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// IAddressBookTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type IAddressBookTransactorSession struct {
	Contract     *IAddressBookTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// IAddressBookRaw is an auto generated low-level Go binding around a Kaia contract.
type IAddressBookRaw struct {
	Contract *IAddressBook // Generic contract binding to access the raw methods on
}

// IAddressBookCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type IAddressBookCallerRaw struct {
	Contract *IAddressBookCaller // Generic read-only contract binding to access the raw methods on
}

// IAddressBookTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type IAddressBookTransactorRaw struct {
	Contract *IAddressBookTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIAddressBook creates a new instance of IAddressBook, bound to a specific deployed contract.
func NewIAddressBook(address common.Address, backend bind.ContractBackend) (*IAddressBook, error) {
	contract, err := bindIAddressBook(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IAddressBook{IAddressBookCaller: IAddressBookCaller{contract: contract}, IAddressBookTransactor: IAddressBookTransactor{contract: contract}, IAddressBookFilterer: IAddressBookFilterer{contract: contract}}, nil
}

// NewIAddressBookCaller creates a new read-only instance of IAddressBook, bound to a specific deployed contract.
func NewIAddressBookCaller(address common.Address, caller bind.ContractCaller) (*IAddressBookCaller, error) {
	contract, err := bindIAddressBook(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IAddressBookCaller{contract: contract}, nil
}

// NewIAddressBookTransactor creates a new write-only instance of IAddressBook, bound to a specific deployed contract.
func NewIAddressBookTransactor(address common.Address, transactor bind.ContractTransactor) (*IAddressBookTransactor, error) {
	contract, err := bindIAddressBook(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IAddressBookTransactor{contract: contract}, nil
}

// NewIAddressBookFilterer creates a new log filterer instance of IAddressBook, bound to a specific deployed contract.
func NewIAddressBookFilterer(address common.Address, filterer bind.ContractFilterer) (*IAddressBookFilterer, error) {
	contract, err := bindIAddressBook(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IAddressBookFilterer{contract: contract}, nil
}

// bindIAddressBook binds a generic wrapper to an already deployed contract.
func bindIAddressBook(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IAddressBookMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAddressBook *IAddressBookRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IAddressBook.Contract.IAddressBookCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAddressBook *IAddressBookRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAddressBook.Contract.IAddressBookTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAddressBook *IAddressBookRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAddressBook.Contract.IAddressBookTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAddressBook *IAddressBookCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IAddressBook.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAddressBook *IAddressBookTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAddressBook.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAddressBook *IAddressBookTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAddressBook.Contract.contract.Transact(opts, method, params...)
}

// GetAllAddress is a free data retrieval call binding the contract method 0x715b208b.
//
// Solidity: function getAllAddress() view returns(uint8[] typeList, address[] addressList)
func (_IAddressBook *IAddressBookCaller) GetAllAddress(opts *bind.CallOpts) (struct {
	TypeList    []uint8
	AddressList []common.Address
}, error) {
	var out []interface{}
	err := _IAddressBook.contract.Call(opts, &out, "getAllAddress")

	outstruct := new(struct {
		TypeList    []uint8
		AddressList []common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TypeList = *abi.ConvertType(out[0], new([]uint8)).(*[]uint8)
	outstruct.AddressList = *abi.ConvertType(out[1], new([]common.Address)).(*[]common.Address)

	return *outstruct, err

}

// GetAllAddress is a free data retrieval call binding the contract method 0x715b208b.
//
// Solidity: function getAllAddress() view returns(uint8[] typeList, address[] addressList)
func (_IAddressBook *IAddressBookSession) GetAllAddress() (struct {
	TypeList    []uint8
	AddressList []common.Address
}, error) {
	return _IAddressBook.Contract.GetAllAddress(&_IAddressBook.CallOpts)
}

// GetAllAddress is a free data retrieval call binding the contract method 0x715b208b.
//
// Solidity: function getAllAddress() view returns(uint8[] typeList, address[] addressList)
func (_IAddressBook *IAddressBookCallerSession) GetAllAddress() (struct {
	TypeList    []uint8
	AddressList []common.Address
}, error) {
	return _IAddressBook.Contract.GetAllAddress(&_IAddressBook.CallOpts)
}

// GetAllAddressInfo is a free data retrieval call binding the contract method 0x160370b8.
//
// Solidity: function getAllAddressInfo() view returns(address[] cnNodeIdList, address[] cnStakingContractList, address[] cnRewardAddressList, address pocContractAddress, address kirContractAddress)
func (_IAddressBook *IAddressBookCaller) GetAllAddressInfo(opts *bind.CallOpts) (struct {
	CnNodeIdList          []common.Address
	CnStakingContractList []common.Address
	CnRewardAddressList   []common.Address
	PocContractAddress    common.Address
	KirContractAddress    common.Address
}, error) {
	var out []interface{}
	err := _IAddressBook.contract.Call(opts, &out, "getAllAddressInfo")

	outstruct := new(struct {
		CnNodeIdList          []common.Address
		CnStakingContractList []common.Address
		CnRewardAddressList   []common.Address
		PocContractAddress    common.Address
		KirContractAddress    common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.CnNodeIdList = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	outstruct.CnStakingContractList = *abi.ConvertType(out[1], new([]common.Address)).(*[]common.Address)
	outstruct.CnRewardAddressList = *abi.ConvertType(out[2], new([]common.Address)).(*[]common.Address)
	outstruct.PocContractAddress = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.KirContractAddress = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// GetAllAddressInfo is a free data retrieval call binding the contract method 0x160370b8.
//
// Solidity: function getAllAddressInfo() view returns(address[] cnNodeIdList, address[] cnStakingContractList, address[] cnRewardAddressList, address pocContractAddress, address kirContractAddress)
func (_IAddressBook *IAddressBookSession) GetAllAddressInfo() (struct {
	CnNodeIdList          []common.Address
	CnStakingContractList []common.Address
	CnRewardAddressList   []common.Address
	PocContractAddress    common.Address
	KirContractAddress    common.Address
}, error) {
	return _IAddressBook.Contract.GetAllAddressInfo(&_IAddressBook.CallOpts)
}

// GetAllAddressInfo is a free data retrieval call binding the contract method 0x160370b8.
//
// Solidity: function getAllAddressInfo() view returns(address[] cnNodeIdList, address[] cnStakingContractList, address[] cnRewardAddressList, address pocContractAddress, address kirContractAddress)
func (_IAddressBook *IAddressBookCallerSession) GetAllAddressInfo() (struct {
	CnNodeIdList          []common.Address
	CnStakingContractList []common.Address
	CnRewardAddressList   []common.Address
	PocContractAddress    common.Address
	KirContractAddress    common.Address
}, error) {
	return _IAddressBook.Contract.GetAllAddressInfo(&_IAddressBook.CallOpts)
}

// GetCnInfo is a free data retrieval call binding the contract method 0x15575d5a.
//
// Solidity: function getCnInfo(address _cnNodeId) view returns(address cnNodeId, address cnStakingcontract, address cnRewardAddress)
func (_IAddressBook *IAddressBookCaller) GetCnInfo(opts *bind.CallOpts, _cnNodeId common.Address) (struct {
	CnNodeId          common.Address
	CnStakingcontract common.Address
	CnRewardAddress   common.Address
}, error) {
	var out []interface{}
	err := _IAddressBook.contract.Call(opts, &out, "getCnInfo", _cnNodeId)

	outstruct := new(struct {
		CnNodeId          common.Address
		CnStakingcontract common.Address
		CnRewardAddress   common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.CnNodeId = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.CnStakingcontract = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.CnRewardAddress = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// GetCnInfo is a free data retrieval call binding the contract method 0x15575d5a.
//
// Solidity: function getCnInfo(address _cnNodeId) view returns(address cnNodeId, address cnStakingcontract, address cnRewardAddress)
func (_IAddressBook *IAddressBookSession) GetCnInfo(_cnNodeId common.Address) (struct {
	CnNodeId          common.Address
	CnStakingcontract common.Address
	CnRewardAddress   common.Address
}, error) {
	return _IAddressBook.Contract.GetCnInfo(&_IAddressBook.CallOpts, _cnNodeId)
}

// GetCnInfo is a free data retrieval call binding the contract method 0x15575d5a.
//
// Solidity: function getCnInfo(address _cnNodeId) view returns(address cnNodeId, address cnStakingcontract, address cnRewardAddress)
func (_IAddressBook *IAddressBookCallerSession) GetCnInfo(_cnNodeId common.Address) (struct {
	CnNodeId          common.Address
	CnStakingcontract common.Address
	CnRewardAddress   common.Address
}, error) {
	return _IAddressBook.Contract.GetCnInfo(&_IAddressBook.CallOpts, _cnNodeId)
}

// GetPendingRequestList is a free data retrieval call binding the contract method 0xda34a0bd.
//
// Solidity: function getPendingRequestList() view returns(bytes32[] pendingRequestList)
func (_IAddressBook *IAddressBookCaller) GetPendingRequestList(opts *bind.CallOpts) ([][32]byte, error) {
	var out []interface{}
	err := _IAddressBook.contract.Call(opts, &out, "getPendingRequestList")

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetPendingRequestList is a free data retrieval call binding the contract method 0xda34a0bd.
//
// Solidity: function getPendingRequestList() view returns(bytes32[] pendingRequestList)
func (_IAddressBook *IAddressBookSession) GetPendingRequestList() ([][32]byte, error) {
	return _IAddressBook.Contract.GetPendingRequestList(&_IAddressBook.CallOpts)
}

// GetPendingRequestList is a free data retrieval call binding the contract method 0xda34a0bd.
//
// Solidity: function getPendingRequestList() view returns(bytes32[] pendingRequestList)
func (_IAddressBook *IAddressBookCallerSession) GetPendingRequestList() ([][32]byte, error) {
	return _IAddressBook.Contract.GetPendingRequestList(&_IAddressBook.CallOpts)
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x82d67e5a.
//
// Solidity: function getRequestInfo(bytes32 _id) view returns(uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers, uint256 initialProposedTime, uint8 state)
func (_IAddressBook *IAddressBookCaller) GetRequestInfo(opts *bind.CallOpts, _id [32]byte) (struct {
	FunctionId          uint8
	FirstArg            [32]byte
	SecondArg           [32]byte
	ThirdArg            [32]byte
	Confirmers          []common.Address
	InitialProposedTime *big.Int
	State               uint8
}, error) {
	var out []interface{}
	err := _IAddressBook.contract.Call(opts, &out, "getRequestInfo", _id)

	outstruct := new(struct {
		FunctionId          uint8
		FirstArg            [32]byte
		SecondArg           [32]byte
		ThirdArg            [32]byte
		Confirmers          []common.Address
		InitialProposedTime *big.Int
		State               uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.FunctionId = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.FirstArg = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.SecondArg = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)
	outstruct.ThirdArg = *abi.ConvertType(out[3], new([32]byte)).(*[32]byte)
	outstruct.Confirmers = *abi.ConvertType(out[4], new([]common.Address)).(*[]common.Address)
	outstruct.InitialProposedTime = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.State = *abi.ConvertType(out[6], new(uint8)).(*uint8)

	return *outstruct, err

}

// GetRequestInfo is a free data retrieval call binding the contract method 0x82d67e5a.
//
// Solidity: function getRequestInfo(bytes32 _id) view returns(uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers, uint256 initialProposedTime, uint8 state)
func (_IAddressBook *IAddressBookSession) GetRequestInfo(_id [32]byte) (struct {
	FunctionId          uint8
	FirstArg            [32]byte
	SecondArg           [32]byte
	ThirdArg            [32]byte
	Confirmers          []common.Address
	InitialProposedTime *big.Int
	State               uint8
}, error) {
	return _IAddressBook.Contract.GetRequestInfo(&_IAddressBook.CallOpts, _id)
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x82d67e5a.
//
// Solidity: function getRequestInfo(bytes32 _id) view returns(uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers, uint256 initialProposedTime, uint8 state)
func (_IAddressBook *IAddressBookCallerSession) GetRequestInfo(_id [32]byte) (struct {
	FunctionId          uint8
	FirstArg            [32]byte
	SecondArg           [32]byte
	ThirdArg            [32]byte
	Confirmers          []common.Address
	InitialProposedTime *big.Int
	State               uint8
}, error) {
	return _IAddressBook.Contract.GetRequestInfo(&_IAddressBook.CallOpts, _id)
}

// GetRequestInfoByArgs is a free data retrieval call binding the contract method 0x407091eb.
//
// Solidity: function getRequestInfoByArgs(uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) view returns(bytes32 id, address[] confirmers, uint256 initialProposedTime, uint8 state)
func (_IAddressBook *IAddressBookCaller) GetRequestInfoByArgs(opts *bind.CallOpts, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (struct {
	Id                  [32]byte
	Confirmers          []common.Address
	InitialProposedTime *big.Int
	State               uint8
}, error) {
	var out []interface{}
	err := _IAddressBook.contract.Call(opts, &out, "getRequestInfoByArgs", _functionId, _firstArg, _secondArg, _thirdArg)

	outstruct := new(struct {
		Id                  [32]byte
		Confirmers          []common.Address
		InitialProposedTime *big.Int
		State               uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Confirmers = *abi.ConvertType(out[1], new([]common.Address)).(*[]common.Address)
	outstruct.InitialProposedTime = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.State = *abi.ConvertType(out[3], new(uint8)).(*uint8)

	return *outstruct, err

}

// GetRequestInfoByArgs is a free data retrieval call binding the contract method 0x407091eb.
//
// Solidity: function getRequestInfoByArgs(uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) view returns(bytes32 id, address[] confirmers, uint256 initialProposedTime, uint8 state)
func (_IAddressBook *IAddressBookSession) GetRequestInfoByArgs(_functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (struct {
	Id                  [32]byte
	Confirmers          []common.Address
	InitialProposedTime *big.Int
	State               uint8
}, error) {
	return _IAddressBook.Contract.GetRequestInfoByArgs(&_IAddressBook.CallOpts, _functionId, _firstArg, _secondArg, _thirdArg)
}

// GetRequestInfoByArgs is a free data retrieval call binding the contract method 0x407091eb.
//
// Solidity: function getRequestInfoByArgs(uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) view returns(bytes32 id, address[] confirmers, uint256 initialProposedTime, uint8 state)
func (_IAddressBook *IAddressBookCallerSession) GetRequestInfoByArgs(_functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (struct {
	Id                  [32]byte
	Confirmers          []common.Address
	InitialProposedTime *big.Int
	State               uint8
}, error) {
	return _IAddressBook.Contract.GetRequestInfoByArgs(&_IAddressBook.CallOpts, _functionId, _firstArg, _secondArg, _thirdArg)
}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address[] adminList, uint256 requirement)
func (_IAddressBook *IAddressBookCaller) GetState(opts *bind.CallOpts) (struct {
	AdminList   []common.Address
	Requirement *big.Int
}, error) {
	var out []interface{}
	err := _IAddressBook.contract.Call(opts, &out, "getState")

	outstruct := new(struct {
		AdminList   []common.Address
		Requirement *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AdminList = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	outstruct.Requirement = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address[] adminList, uint256 requirement)
func (_IAddressBook *IAddressBookSession) GetState() (struct {
	AdminList   []common.Address
	Requirement *big.Int
}, error) {
	return _IAddressBook.Contract.GetState(&_IAddressBook.CallOpts)
}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address[] adminList, uint256 requirement)
func (_IAddressBook *IAddressBookCallerSession) GetState() (struct {
	AdminList   []common.Address
	Requirement *big.Int
}, error) {
	return _IAddressBook.Contract.GetState(&_IAddressBook.CallOpts)
}

// IsActivated is a free data retrieval call binding the contract method 0x4a8c1fb4.
//
// Solidity: function isActivated() view returns(bool)
func (_IAddressBook *IAddressBookCaller) IsActivated(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IAddressBook.contract.Call(opts, &out, "isActivated")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsActivated is a free data retrieval call binding the contract method 0x4a8c1fb4.
//
// Solidity: function isActivated() view returns(bool)
func (_IAddressBook *IAddressBookSession) IsActivated() (bool, error) {
	return _IAddressBook.Contract.IsActivated(&_IAddressBook.CallOpts)
}

// IsActivated is a free data retrieval call binding the contract method 0x4a8c1fb4.
//
// Solidity: function isActivated() view returns(bool)
func (_IAddressBook *IAddressBookCallerSession) IsActivated() (bool, error) {
	return _IAddressBook.Contract.IsActivated(&_IAddressBook.CallOpts)
}

// IsConstructed is a free data retrieval call binding the contract method 0x50a5bb69.
//
// Solidity: function isConstructed() view returns(bool)
func (_IAddressBook *IAddressBookCaller) IsConstructed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IAddressBook.contract.Call(opts, &out, "isConstructed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsConstructed is a free data retrieval call binding the contract method 0x50a5bb69.
//
// Solidity: function isConstructed() view returns(bool)
func (_IAddressBook *IAddressBookSession) IsConstructed() (bool, error) {
	return _IAddressBook.Contract.IsConstructed(&_IAddressBook.CallOpts)
}

// IsConstructed is a free data retrieval call binding the contract method 0x50a5bb69.
//
// Solidity: function isConstructed() view returns(bool)
func (_IAddressBook *IAddressBookCallerSession) IsConstructed() (bool, error) {
	return _IAddressBook.Contract.IsConstructed(&_IAddressBook.CallOpts)
}

// KirContractAddress is a free data retrieval call binding the contract method 0xb858dd95.
//
// Solidity: function kirContractAddress() view returns(address)
func (_IAddressBook *IAddressBookCaller) KirContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IAddressBook.contract.Call(opts, &out, "kirContractAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// KirContractAddress is a free data retrieval call binding the contract method 0xb858dd95.
//
// Solidity: function kirContractAddress() view returns(address)
func (_IAddressBook *IAddressBookSession) KirContractAddress() (common.Address, error) {
	return _IAddressBook.Contract.KirContractAddress(&_IAddressBook.CallOpts)
}

// KirContractAddress is a free data retrieval call binding the contract method 0xb858dd95.
//
// Solidity: function kirContractAddress() view returns(address)
func (_IAddressBook *IAddressBookCallerSession) KirContractAddress() (common.Address, error) {
	return _IAddressBook.Contract.KirContractAddress(&_IAddressBook.CallOpts)
}

// PocContractAddress is a free data retrieval call binding the contract method 0xd267eda5.
//
// Solidity: function pocContractAddress() view returns(address)
func (_IAddressBook *IAddressBookCaller) PocContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IAddressBook.contract.Call(opts, &out, "pocContractAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PocContractAddress is a free data retrieval call binding the contract method 0xd267eda5.
//
// Solidity: function pocContractAddress() view returns(address)
func (_IAddressBook *IAddressBookSession) PocContractAddress() (common.Address, error) {
	return _IAddressBook.Contract.PocContractAddress(&_IAddressBook.CallOpts)
}

// PocContractAddress is a free data retrieval call binding the contract method 0xd267eda5.
//
// Solidity: function pocContractAddress() view returns(address)
func (_IAddressBook *IAddressBookCallerSession) PocContractAddress() (common.Address, error) {
	return _IAddressBook.Contract.PocContractAddress(&_IAddressBook.CallOpts)
}

// SpareContractAddress is a free data retrieval call binding the contract method 0x6abd623d.
//
// Solidity: function spareContractAddress() view returns(address)
func (_IAddressBook *IAddressBookCaller) SpareContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IAddressBook.contract.Call(opts, &out, "spareContractAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SpareContractAddress is a free data retrieval call binding the contract method 0x6abd623d.
//
// Solidity: function spareContractAddress() view returns(address)
func (_IAddressBook *IAddressBookSession) SpareContractAddress() (common.Address, error) {
	return _IAddressBook.Contract.SpareContractAddress(&_IAddressBook.CallOpts)
}

// SpareContractAddress is a free data retrieval call binding the contract method 0x6abd623d.
//
// Solidity: function spareContractAddress() view returns(address)
func (_IAddressBook *IAddressBookCallerSession) SpareContractAddress() (common.Address, error) {
	return _IAddressBook.Contract.SpareContractAddress(&_IAddressBook.CallOpts)
}

// ConstructContract is a paid mutator transaction binding the contract method 0x7894c366.
//
// Solidity: function constructContract(address[] _adminList, uint256 _requirement) returns()
func (_IAddressBook *IAddressBookTransactor) ConstructContract(opts *bind.TransactOpts, _adminList []common.Address, _requirement *big.Int) (*types.Transaction, error) {
	return _IAddressBook.contract.Transact(opts, "constructContract", _adminList, _requirement)
}

// ConstructContract is a paid mutator transaction binding the contract method 0x7894c366.
//
// Solidity: function constructContract(address[] _adminList, uint256 _requirement) returns()
func (_IAddressBook *IAddressBookSession) ConstructContract(_adminList []common.Address, _requirement *big.Int) (*types.Transaction, error) {
	return _IAddressBook.Contract.ConstructContract(&_IAddressBook.TransactOpts, _adminList, _requirement)
}

// ConstructContract is a paid mutator transaction binding the contract method 0x7894c366.
//
// Solidity: function constructContract(address[] _adminList, uint256 _requirement) returns()
func (_IAddressBook *IAddressBookTransactorSession) ConstructContract(_adminList []common.Address, _requirement *big.Int) (*types.Transaction, error) {
	return _IAddressBook.Contract.ConstructContract(&_IAddressBook.TransactOpts, _adminList, _requirement)
}

// ReviseRewardAddress is a paid mutator transaction binding the contract method 0x832a2aad.
//
// Solidity: function reviseRewardAddress(address _rewardAddress) returns()
func (_IAddressBook *IAddressBookTransactor) ReviseRewardAddress(opts *bind.TransactOpts, _rewardAddress common.Address) (*types.Transaction, error) {
	return _IAddressBook.contract.Transact(opts, "reviseRewardAddress", _rewardAddress)
}

// ReviseRewardAddress is a paid mutator transaction binding the contract method 0x832a2aad.
//
// Solidity: function reviseRewardAddress(address _rewardAddress) returns()
func (_IAddressBook *IAddressBookSession) ReviseRewardAddress(_rewardAddress common.Address) (*types.Transaction, error) {
	return _IAddressBook.Contract.ReviseRewardAddress(&_IAddressBook.TransactOpts, _rewardAddress)
}

// ReviseRewardAddress is a paid mutator transaction binding the contract method 0x832a2aad.
//
// Solidity: function reviseRewardAddress(address _rewardAddress) returns()
func (_IAddressBook *IAddressBookTransactorSession) ReviseRewardAddress(_rewardAddress common.Address) (*types.Transaction, error) {
	return _IAddressBook.Contract.ReviseRewardAddress(&_IAddressBook.TransactOpts, _rewardAddress)
}

// RevokeRequest is a paid mutator transaction binding the contract method 0x3f0628b1.
//
// Solidity: function revokeRequest(uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_IAddressBook *IAddressBookTransactor) RevokeRequest(opts *bind.TransactOpts, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _IAddressBook.contract.Transact(opts, "revokeRequest", _functionId, _firstArg, _secondArg, _thirdArg)
}

// RevokeRequest is a paid mutator transaction binding the contract method 0x3f0628b1.
//
// Solidity: function revokeRequest(uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_IAddressBook *IAddressBookSession) RevokeRequest(_functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _IAddressBook.Contract.RevokeRequest(&_IAddressBook.TransactOpts, _functionId, _firstArg, _secondArg, _thirdArg)
}

// RevokeRequest is a paid mutator transaction binding the contract method 0x3f0628b1.
//
// Solidity: function revokeRequest(uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_IAddressBook *IAddressBookTransactorSession) RevokeRequest(_functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _IAddressBook.Contract.RevokeRequest(&_IAddressBook.TransactOpts, _functionId, _firstArg, _secondArg, _thirdArg)
}

// SubmitActivateAddressBook is a paid mutator transaction binding the contract method 0xfeb15ca1.
//
// Solidity: function submitActivateAddressBook() returns()
func (_IAddressBook *IAddressBookTransactor) SubmitActivateAddressBook(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAddressBook.contract.Transact(opts, "submitActivateAddressBook")
}

// SubmitActivateAddressBook is a paid mutator transaction binding the contract method 0xfeb15ca1.
//
// Solidity: function submitActivateAddressBook() returns()
func (_IAddressBook *IAddressBookSession) SubmitActivateAddressBook() (*types.Transaction, error) {
	return _IAddressBook.Contract.SubmitActivateAddressBook(&_IAddressBook.TransactOpts)
}

// SubmitActivateAddressBook is a paid mutator transaction binding the contract method 0xfeb15ca1.
//
// Solidity: function submitActivateAddressBook() returns()
func (_IAddressBook *IAddressBookTransactorSession) SubmitActivateAddressBook() (*types.Transaction, error) {
	return _IAddressBook.Contract.SubmitActivateAddressBook(&_IAddressBook.TransactOpts)
}

// SubmitAddAdmin is a paid mutator transaction binding the contract method 0x863f5c0a.
//
// Solidity: function submitAddAdmin(address _admin) returns()
func (_IAddressBook *IAddressBookTransactor) SubmitAddAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _IAddressBook.contract.Transact(opts, "submitAddAdmin", _admin)
}

// SubmitAddAdmin is a paid mutator transaction binding the contract method 0x863f5c0a.
//
// Solidity: function submitAddAdmin(address _admin) returns()
func (_IAddressBook *IAddressBookSession) SubmitAddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _IAddressBook.Contract.SubmitAddAdmin(&_IAddressBook.TransactOpts, _admin)
}

// SubmitAddAdmin is a paid mutator transaction binding the contract method 0x863f5c0a.
//
// Solidity: function submitAddAdmin(address _admin) returns()
func (_IAddressBook *IAddressBookTransactorSession) SubmitAddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _IAddressBook.Contract.SubmitAddAdmin(&_IAddressBook.TransactOpts, _admin)
}

// SubmitClearRequest is a paid mutator transaction binding the contract method 0x87cd9feb.
//
// Solidity: function submitClearRequest() returns()
func (_IAddressBook *IAddressBookTransactor) SubmitClearRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAddressBook.contract.Transact(opts, "submitClearRequest")
}

// SubmitClearRequest is a paid mutator transaction binding the contract method 0x87cd9feb.
//
// Solidity: function submitClearRequest() returns()
func (_IAddressBook *IAddressBookSession) SubmitClearRequest() (*types.Transaction, error) {
	return _IAddressBook.Contract.SubmitClearRequest(&_IAddressBook.TransactOpts)
}

// SubmitClearRequest is a paid mutator transaction binding the contract method 0x87cd9feb.
//
// Solidity: function submitClearRequest() returns()
func (_IAddressBook *IAddressBookTransactorSession) SubmitClearRequest() (*types.Transaction, error) {
	return _IAddressBook.Contract.SubmitClearRequest(&_IAddressBook.TransactOpts)
}

// SubmitDeleteAdmin is a paid mutator transaction binding the contract method 0x791b5123.
//
// Solidity: function submitDeleteAdmin(address _admin) returns()
func (_IAddressBook *IAddressBookTransactor) SubmitDeleteAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _IAddressBook.contract.Transact(opts, "submitDeleteAdmin", _admin)
}

// SubmitDeleteAdmin is a paid mutator transaction binding the contract method 0x791b5123.
//
// Solidity: function submitDeleteAdmin(address _admin) returns()
func (_IAddressBook *IAddressBookSession) SubmitDeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _IAddressBook.Contract.SubmitDeleteAdmin(&_IAddressBook.TransactOpts, _admin)
}

// SubmitDeleteAdmin is a paid mutator transaction binding the contract method 0x791b5123.
//
// Solidity: function submitDeleteAdmin(address _admin) returns()
func (_IAddressBook *IAddressBookTransactorSession) SubmitDeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _IAddressBook.Contract.SubmitDeleteAdmin(&_IAddressBook.TransactOpts, _admin)
}

// SubmitRegisterCnStakingContract is a paid mutator transaction binding the contract method 0xcc11efc0.
//
// Solidity: function submitRegisterCnStakingContract(address _cnNodeId, address _cnStakingContractAddress, address _cnRewardAddress) returns()
func (_IAddressBook *IAddressBookTransactor) SubmitRegisterCnStakingContract(opts *bind.TransactOpts, _cnNodeId common.Address, _cnStakingContractAddress common.Address, _cnRewardAddress common.Address) (*types.Transaction, error) {
	return _IAddressBook.contract.Transact(opts, "submitRegisterCnStakingContract", _cnNodeId, _cnStakingContractAddress, _cnRewardAddress)
}

// SubmitRegisterCnStakingContract is a paid mutator transaction binding the contract method 0xcc11efc0.
//
// Solidity: function submitRegisterCnStakingContract(address _cnNodeId, address _cnStakingContractAddress, address _cnRewardAddress) returns()
func (_IAddressBook *IAddressBookSession) SubmitRegisterCnStakingContract(_cnNodeId common.Address, _cnStakingContractAddress common.Address, _cnRewardAddress common.Address) (*types.Transaction, error) {
	return _IAddressBook.Contract.SubmitRegisterCnStakingContract(&_IAddressBook.TransactOpts, _cnNodeId, _cnStakingContractAddress, _cnRewardAddress)
}

// SubmitRegisterCnStakingContract is a paid mutator transaction binding the contract method 0xcc11efc0.
//
// Solidity: function submitRegisterCnStakingContract(address _cnNodeId, address _cnStakingContractAddress, address _cnRewardAddress) returns()
func (_IAddressBook *IAddressBookTransactorSession) SubmitRegisterCnStakingContract(_cnNodeId common.Address, _cnStakingContractAddress common.Address, _cnRewardAddress common.Address) (*types.Transaction, error) {
	return _IAddressBook.Contract.SubmitRegisterCnStakingContract(&_IAddressBook.TransactOpts, _cnNodeId, _cnStakingContractAddress, _cnRewardAddress)
}

// SubmitUnregisterCnStakingContract is a paid mutator transaction binding the contract method 0xb5067706.
//
// Solidity: function submitUnregisterCnStakingContract(address _cnNodeId) returns()
func (_IAddressBook *IAddressBookTransactor) SubmitUnregisterCnStakingContract(opts *bind.TransactOpts, _cnNodeId common.Address) (*types.Transaction, error) {
	return _IAddressBook.contract.Transact(opts, "submitUnregisterCnStakingContract", _cnNodeId)
}

// SubmitUnregisterCnStakingContract is a paid mutator transaction binding the contract method 0xb5067706.
//
// Solidity: function submitUnregisterCnStakingContract(address _cnNodeId) returns()
func (_IAddressBook *IAddressBookSession) SubmitUnregisterCnStakingContract(_cnNodeId common.Address) (*types.Transaction, error) {
	return _IAddressBook.Contract.SubmitUnregisterCnStakingContract(&_IAddressBook.TransactOpts, _cnNodeId)
}

// SubmitUnregisterCnStakingContract is a paid mutator transaction binding the contract method 0xb5067706.
//
// Solidity: function submitUnregisterCnStakingContract(address _cnNodeId) returns()
func (_IAddressBook *IAddressBookTransactorSession) SubmitUnregisterCnStakingContract(_cnNodeId common.Address) (*types.Transaction, error) {
	return _IAddressBook.Contract.SubmitUnregisterCnStakingContract(&_IAddressBook.TransactOpts, _cnNodeId)
}

// SubmitUpdateKirContract is a paid mutator transaction binding the contract method 0x9258d768.
//
// Solidity: function submitUpdateKirContract(address _kirContractAddress, uint256 _version) returns()
func (_IAddressBook *IAddressBookTransactor) SubmitUpdateKirContract(opts *bind.TransactOpts, _kirContractAddress common.Address, _version *big.Int) (*types.Transaction, error) {
	return _IAddressBook.contract.Transact(opts, "submitUpdateKirContract", _kirContractAddress, _version)
}

// SubmitUpdateKirContract is a paid mutator transaction binding the contract method 0x9258d768.
//
// Solidity: function submitUpdateKirContract(address _kirContractAddress, uint256 _version) returns()
func (_IAddressBook *IAddressBookSession) SubmitUpdateKirContract(_kirContractAddress common.Address, _version *big.Int) (*types.Transaction, error) {
	return _IAddressBook.Contract.SubmitUpdateKirContract(&_IAddressBook.TransactOpts, _kirContractAddress, _version)
}

// SubmitUpdateKirContract is a paid mutator transaction binding the contract method 0x9258d768.
//
// Solidity: function submitUpdateKirContract(address _kirContractAddress, uint256 _version) returns()
func (_IAddressBook *IAddressBookTransactorSession) SubmitUpdateKirContract(_kirContractAddress common.Address, _version *big.Int) (*types.Transaction, error) {
	return _IAddressBook.Contract.SubmitUpdateKirContract(&_IAddressBook.TransactOpts, _kirContractAddress, _version)
}

// SubmitUpdatePocContract is a paid mutator transaction binding the contract method 0x21ac4ad4.
//
// Solidity: function submitUpdatePocContract(address _pocContractAddress, uint256 _version) returns()
func (_IAddressBook *IAddressBookTransactor) SubmitUpdatePocContract(opts *bind.TransactOpts, _pocContractAddress common.Address, _version *big.Int) (*types.Transaction, error) {
	return _IAddressBook.contract.Transact(opts, "submitUpdatePocContract", _pocContractAddress, _version)
}

// SubmitUpdatePocContract is a paid mutator transaction binding the contract method 0x21ac4ad4.
//
// Solidity: function submitUpdatePocContract(address _pocContractAddress, uint256 _version) returns()
func (_IAddressBook *IAddressBookSession) SubmitUpdatePocContract(_pocContractAddress common.Address, _version *big.Int) (*types.Transaction, error) {
	return _IAddressBook.Contract.SubmitUpdatePocContract(&_IAddressBook.TransactOpts, _pocContractAddress, _version)
}

// SubmitUpdatePocContract is a paid mutator transaction binding the contract method 0x21ac4ad4.
//
// Solidity: function submitUpdatePocContract(address _pocContractAddress, uint256 _version) returns()
func (_IAddressBook *IAddressBookTransactorSession) SubmitUpdatePocContract(_pocContractAddress common.Address, _version *big.Int) (*types.Transaction, error) {
	return _IAddressBook.Contract.SubmitUpdatePocContract(&_IAddressBook.TransactOpts, _pocContractAddress, _version)
}

// SubmitUpdateRequirement is a paid mutator transaction binding the contract method 0xe748357b.
//
// Solidity: function submitUpdateRequirement(uint256 _requirement) returns()
func (_IAddressBook *IAddressBookTransactor) SubmitUpdateRequirement(opts *bind.TransactOpts, _requirement *big.Int) (*types.Transaction, error) {
	return _IAddressBook.contract.Transact(opts, "submitUpdateRequirement", _requirement)
}

// SubmitUpdateRequirement is a paid mutator transaction binding the contract method 0xe748357b.
//
// Solidity: function submitUpdateRequirement(uint256 _requirement) returns()
func (_IAddressBook *IAddressBookSession) SubmitUpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _IAddressBook.Contract.SubmitUpdateRequirement(&_IAddressBook.TransactOpts, _requirement)
}

// SubmitUpdateRequirement is a paid mutator transaction binding the contract method 0xe748357b.
//
// Solidity: function submitUpdateRequirement(uint256 _requirement) returns()
func (_IAddressBook *IAddressBookTransactorSession) SubmitUpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _IAddressBook.Contract.SubmitUpdateRequirement(&_IAddressBook.TransactOpts, _requirement)
}

// SubmitUpdateSpareContract is a paid mutator transaction binding the contract method 0x394a144a.
//
// Solidity: function submitUpdateSpareContract(address _spareContractAddress) returns()
func (_IAddressBook *IAddressBookTransactor) SubmitUpdateSpareContract(opts *bind.TransactOpts, _spareContractAddress common.Address) (*types.Transaction, error) {
	return _IAddressBook.contract.Transact(opts, "submitUpdateSpareContract", _spareContractAddress)
}

// SubmitUpdateSpareContract is a paid mutator transaction binding the contract method 0x394a144a.
//
// Solidity: function submitUpdateSpareContract(address _spareContractAddress) returns()
func (_IAddressBook *IAddressBookSession) SubmitUpdateSpareContract(_spareContractAddress common.Address) (*types.Transaction, error) {
	return _IAddressBook.Contract.SubmitUpdateSpareContract(&_IAddressBook.TransactOpts, _spareContractAddress)
}

// SubmitUpdateSpareContract is a paid mutator transaction binding the contract method 0x394a144a.
//
// Solidity: function submitUpdateSpareContract(address _spareContractAddress) returns()
func (_IAddressBook *IAddressBookTransactorSession) SubmitUpdateSpareContract(_spareContractAddress common.Address) (*types.Transaction, error) {
	return _IAddressBook.Contract.SubmitUpdateSpareContract(&_IAddressBook.TransactOpts, _spareContractAddress)
}

// ICnStakingMetaData contains all meta data concerning the ICnStaking contract.
var ICnStakingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"CONTRACT_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"4b6a94cc": "CONTRACT_TYPE()",
		"ffa1ad74": "VERSION()",
		"139d7fed": "nodeId()",
	},
}

// ICnStakingABI is the input ABI used to generate the binding from.
// Deprecated: Use ICnStakingMetaData.ABI instead.
var ICnStakingABI = ICnStakingMetaData.ABI

// ICnStakingBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const ICnStakingBinRuntime = ``

// Deprecated: Use ICnStakingMetaData.Sigs instead.
// ICnStakingFuncSigs maps the 4-byte function signature to its string representation.
var ICnStakingFuncSigs = ICnStakingMetaData.Sigs

// ICnStaking is an auto generated Go binding around a Kaia contract.
type ICnStaking struct {
	ICnStakingCaller     // Read-only binding to the contract
	ICnStakingTransactor // Write-only binding to the contract
	ICnStakingFilterer   // Log filterer for contract events
}

// ICnStakingCaller is an auto generated read-only Go binding around a Kaia contract.
type ICnStakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICnStakingTransactor is an auto generated write-only Go binding around a Kaia contract.
type ICnStakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICnStakingFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type ICnStakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICnStakingSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type ICnStakingSession struct {
	Contract     *ICnStaking       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ICnStakingCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type ICnStakingCallerSession struct {
	Contract *ICnStakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ICnStakingTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type ICnStakingTransactorSession struct {
	Contract     *ICnStakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ICnStakingRaw is an auto generated low-level Go binding around a Kaia contract.
type ICnStakingRaw struct {
	Contract *ICnStaking // Generic contract binding to access the raw methods on
}

// ICnStakingCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type ICnStakingCallerRaw struct {
	Contract *ICnStakingCaller // Generic read-only contract binding to access the raw methods on
}

// ICnStakingTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type ICnStakingTransactorRaw struct {
	Contract *ICnStakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewICnStaking creates a new instance of ICnStaking, bound to a specific deployed contract.
func NewICnStaking(address common.Address, backend bind.ContractBackend) (*ICnStaking, error) {
	contract, err := bindICnStaking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ICnStaking{ICnStakingCaller: ICnStakingCaller{contract: contract}, ICnStakingTransactor: ICnStakingTransactor{contract: contract}, ICnStakingFilterer: ICnStakingFilterer{contract: contract}}, nil
}

// NewICnStakingCaller creates a new read-only instance of ICnStaking, bound to a specific deployed contract.
func NewICnStakingCaller(address common.Address, caller bind.ContractCaller) (*ICnStakingCaller, error) {
	contract, err := bindICnStaking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ICnStakingCaller{contract: contract}, nil
}

// NewICnStakingTransactor creates a new write-only instance of ICnStaking, bound to a specific deployed contract.
func NewICnStakingTransactor(address common.Address, transactor bind.ContractTransactor) (*ICnStakingTransactor, error) {
	contract, err := bindICnStaking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ICnStakingTransactor{contract: contract}, nil
}

// NewICnStakingFilterer creates a new log filterer instance of ICnStaking, bound to a specific deployed contract.
func NewICnStakingFilterer(address common.Address, filterer bind.ContractFilterer) (*ICnStakingFilterer, error) {
	contract, err := bindICnStaking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ICnStakingFilterer{contract: contract}, nil
}

// bindICnStaking binds a generic wrapper to an already deployed contract.
func bindICnStaking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ICnStakingMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICnStaking *ICnStakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ICnStaking.Contract.ICnStakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICnStaking *ICnStakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICnStaking.Contract.ICnStakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICnStaking *ICnStakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICnStaking.Contract.ICnStakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICnStaking *ICnStakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ICnStaking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICnStaking *ICnStakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICnStaking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICnStaking *ICnStakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICnStaking.Contract.contract.Transact(opts, method, params...)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_ICnStaking *ICnStakingCaller) CONTRACTTYPE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ICnStaking.contract.Call(opts, &out, "CONTRACT_TYPE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_ICnStaking *ICnStakingSession) CONTRACTTYPE() (string, error) {
	return _ICnStaking.Contract.CONTRACTTYPE(&_ICnStaking.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_ICnStaking *ICnStakingCallerSession) CONTRACTTYPE() (string, error) {
	return _ICnStaking.Contract.CONTRACTTYPE(&_ICnStaking.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_ICnStaking *ICnStakingCaller) VERSION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ICnStaking.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_ICnStaking *ICnStakingSession) VERSION() (*big.Int, error) {
	return _ICnStaking.Contract.VERSION(&_ICnStaking.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_ICnStaking *ICnStakingCallerSession) VERSION() (*big.Int, error) {
	return _ICnStaking.Contract.VERSION(&_ICnStaking.CallOpts)
}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_ICnStaking *ICnStakingCaller) NodeId(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ICnStaking.contract.Call(opts, &out, "nodeId")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_ICnStaking *ICnStakingSession) NodeId() (common.Address, error) {
	return _ICnStaking.Contract.NodeId(&_ICnStaking.CallOpts)
}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_ICnStaking *ICnStakingCallerSession) NodeId() (common.Address, error) {
	return _ICnStaking.Contract.NodeId(&_ICnStaking.CallOpts)
}

// ICnStakingV3MetaData contains all meta data concerning the ICnStakingV3 contract.
var ICnStakingV3MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"AcceptRewardAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"approvedWithdrawalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawableFrom\",\"type\":\"uint256\"}],\"name\":\"ApproveStakingWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"approvedWithdrawalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CancelApprovedStakingWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CompleteReviewInitialConditions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DelegateKaia\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contractType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nodeId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"unlockTime\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"unlockAmount\",\"type\":\"uint256[]\"}],\"name\":\"DeployCnStakingV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DepositLockupStakingAndInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevCnStakingV3\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetCnStakingV3\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"HandleRedelegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetCnStakingV3\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Redelegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"ReviewInitialConditions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"publicDelegation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"SetPublicDelegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRedelegationEnabled\",\"type\":\"bool\"}],\"name\":\"ToggleRedelegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gcId\",\"type\":\"uint256\"}],\"name\":\"UpdateGCId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"UpdateRewardAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingTracker\",\"type\":\"address\"}],\"name\":\"UpdateStakingTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"UpdateVoterAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"approvedWithdrawalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawApprovedStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawLockupStaking\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_BOOK_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_LOCKUP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKING_APPROVER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKING_CLAIMER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"acceptRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveStakingWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_approvedWithdrawalId\",\"type\":\"uint256\"}],\"name\":\"cancelApprovedStakingWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLockupStakingAndInit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gcId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"enumICnStakingV3.WithdrawalStakingState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"getApprovedStakingWithdrawalIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getApprovedStakingWithdrawalInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableFrom\",\"type\":\"uint256\"},{\"internalType\":\"enumICnStakingV3.WithdrawalStakingState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockupStakingInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"unlockTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unlockAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"initial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"handleRedelegation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialLockupStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicDelegationEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRedelegationEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"lastRedelegation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicDelegation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetCnV3\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"redelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingLockupStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reviewInitialConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gcId\",\"type\":\"uint256\"}],\"name\":\"setGCId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pdFactory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_pdArgs\",\"type\":\"bytes\"}],\"name\":\"setPublicDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tracker\",\"type\":\"address\"}],\"name\":\"setStakingTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRedelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"updateRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tracker\",\"type\":\"address\"}],\"name\":\"updateStakingTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voterAddress\",\"type\":\"address\"}],\"name\":\"updateVoterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_approvedWithdrawalId\",\"type\":\"uint256\"}],\"name\":\"withdrawApprovedStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawLockupStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"f2f2f49b": "ADDRESS_BOOK_ADDRESS()",
		"75b238fc": "ADMIN_ROLE()",
		"4b6a94cc": "CONTRACT_TYPE()",
		"f5b541a6": "OPERATOR_ROLE()",
		"3780b3ed": "STAKER_ROLE()",
		"96106ae4": "STAKE_LOCKUP()",
		"0c07d842": "UNSTAKING_APPROVER_ROLE()",
		"9c394c5d": "UNSTAKING_CLAIMER_ROLE()",
		"ffa1ad74": "VERSION()",
		"aa4058b9": "acceptRewardAddress(address)",
		"5df8b09a": "approveStakingWithdrawal(address,uint256)",
		"c804b115": "cancelApprovedStakingWithdrawal(uint256)",
		"c89e4361": "delegate()",
		"6a27c206": "depositLockupStakingAndInit()",
		"6d2714db": "gcId()",
		"d2569eb9": "getApprovedStakingWithdrawalIds(uint256,uint256,uint8)",
		"725c0503": "getApprovedStakingWithdrawalInfo(uint256)",
		"5ecd75f2": "getLockupStakingInfo()",
		"a006e90c": "handleRedelegation(address)",
		"06704222": "initialLockupStaking()",
		"392e53cd": "isInitialized()",
		"bfc7e948": "isPublicDelegationEnabled()",
		"7a66c96b": "isRedelegationEnabled()",
		"14d3ce10": "lastRedelegation(address)",
		"139d7fed": "nodeId()",
		"8740568b": "pendingRewardAddress()",
		"e1a12d35": "publicDelegation()",
		"6bd8f804": "redelegate(address,address,uint256)",
		"7b5e0481": "remainingLockupStaking()",
		"702b9c9b": "reviewInitialConditions()",
		"8cf57cb9": "rewardAddress()",
		"ff4634bc": "setGCId(uint256)",
		"2e5dc0f7": "setPublicDelegation(address,bytes)",
		"c336aa35": "setStakingTracker(address)",
		"4cf088d9": "staking()",
		"008c477a": "stakingTracker()",
		"d75859ec": "toggleRedelegation()",
		"630b1146": "unstaking()",
		"944dd5a2": "updateRewardAddress(address)",
		"5be6eacc": "updateStakingTracker(address)",
		"5784d18b": "updateVoterAddress(address)",
		"992ac9fa": "voterAddress()",
		"6e93df0d": "withdrawApprovedStaking(uint256)",
		"505ebed4": "withdrawLockupStaking(address,uint256)",
		"19e44e32": "withdrawalRequestCount()",
	},
}

// ICnStakingV3ABI is the input ABI used to generate the binding from.
// Deprecated: Use ICnStakingV3MetaData.ABI instead.
var ICnStakingV3ABI = ICnStakingV3MetaData.ABI

// ICnStakingV3BinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const ICnStakingV3BinRuntime = ``

// Deprecated: Use ICnStakingV3MetaData.Sigs instead.
// ICnStakingV3FuncSigs maps the 4-byte function signature to its string representation.
var ICnStakingV3FuncSigs = ICnStakingV3MetaData.Sigs

// ICnStakingV3 is an auto generated Go binding around a Kaia contract.
type ICnStakingV3 struct {
	ICnStakingV3Caller     // Read-only binding to the contract
	ICnStakingV3Transactor // Write-only binding to the contract
	ICnStakingV3Filterer   // Log filterer for contract events
}

// ICnStakingV3Caller is an auto generated read-only Go binding around a Kaia contract.
type ICnStakingV3Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICnStakingV3Transactor is an auto generated write-only Go binding around a Kaia contract.
type ICnStakingV3Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICnStakingV3Filterer is an auto generated log filtering Go binding around a Kaia contract events.
type ICnStakingV3Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICnStakingV3Session is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type ICnStakingV3Session struct {
	Contract     *ICnStakingV3     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ICnStakingV3CallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type ICnStakingV3CallerSession struct {
	Contract *ICnStakingV3Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ICnStakingV3TransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type ICnStakingV3TransactorSession struct {
	Contract     *ICnStakingV3Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ICnStakingV3Raw is an auto generated low-level Go binding around a Kaia contract.
type ICnStakingV3Raw struct {
	Contract *ICnStakingV3 // Generic contract binding to access the raw methods on
}

// ICnStakingV3CallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type ICnStakingV3CallerRaw struct {
	Contract *ICnStakingV3Caller // Generic read-only contract binding to access the raw methods on
}

// ICnStakingV3TransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type ICnStakingV3TransactorRaw struct {
	Contract *ICnStakingV3Transactor // Generic write-only contract binding to access the raw methods on
}

// NewICnStakingV3 creates a new instance of ICnStakingV3, bound to a specific deployed contract.
func NewICnStakingV3(address common.Address, backend bind.ContractBackend) (*ICnStakingV3, error) {
	contract, err := bindICnStakingV3(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3{ICnStakingV3Caller: ICnStakingV3Caller{contract: contract}, ICnStakingV3Transactor: ICnStakingV3Transactor{contract: contract}, ICnStakingV3Filterer: ICnStakingV3Filterer{contract: contract}}, nil
}

// NewICnStakingV3Caller creates a new read-only instance of ICnStakingV3, bound to a specific deployed contract.
func NewICnStakingV3Caller(address common.Address, caller bind.ContractCaller) (*ICnStakingV3Caller, error) {
	contract, err := bindICnStakingV3(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3Caller{contract: contract}, nil
}

// NewICnStakingV3Transactor creates a new write-only instance of ICnStakingV3, bound to a specific deployed contract.
func NewICnStakingV3Transactor(address common.Address, transactor bind.ContractTransactor) (*ICnStakingV3Transactor, error) {
	contract, err := bindICnStakingV3(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3Transactor{contract: contract}, nil
}

// NewICnStakingV3Filterer creates a new log filterer instance of ICnStakingV3, bound to a specific deployed contract.
func NewICnStakingV3Filterer(address common.Address, filterer bind.ContractFilterer) (*ICnStakingV3Filterer, error) {
	contract, err := bindICnStakingV3(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3Filterer{contract: contract}, nil
}

// bindICnStakingV3 binds a generic wrapper to an already deployed contract.
func bindICnStakingV3(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ICnStakingV3MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICnStakingV3 *ICnStakingV3Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ICnStakingV3.Contract.ICnStakingV3Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICnStakingV3 *ICnStakingV3Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.ICnStakingV3Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICnStakingV3 *ICnStakingV3Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.ICnStakingV3Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICnStakingV3 *ICnStakingV3CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ICnStakingV3.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICnStakingV3 *ICnStakingV3TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICnStakingV3 *ICnStakingV3TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.contract.Transact(opts, method, params...)
}

// ADDRESSBOOKADDRESS is a free data retrieval call binding the contract method 0xf2f2f49b.
//
// Solidity: function ADDRESS_BOOK_ADDRESS() pure returns(address)
func (_ICnStakingV3 *ICnStakingV3Caller) ADDRESSBOOKADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "ADDRESS_BOOK_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ADDRESSBOOKADDRESS is a free data retrieval call binding the contract method 0xf2f2f49b.
//
// Solidity: function ADDRESS_BOOK_ADDRESS() pure returns(address)
func (_ICnStakingV3 *ICnStakingV3Session) ADDRESSBOOKADDRESS() (common.Address, error) {
	return _ICnStakingV3.Contract.ADDRESSBOOKADDRESS(&_ICnStakingV3.CallOpts)
}

// ADDRESSBOOKADDRESS is a free data retrieval call binding the contract method 0xf2f2f49b.
//
// Solidity: function ADDRESS_BOOK_ADDRESS() pure returns(address)
func (_ICnStakingV3 *ICnStakingV3CallerSession) ADDRESSBOOKADDRESS() (common.Address, error) {
	return _ICnStakingV3.Contract.ADDRESSBOOKADDRESS(&_ICnStakingV3.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() pure returns(bytes32)
func (_ICnStakingV3 *ICnStakingV3Caller) ADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() pure returns(bytes32)
func (_ICnStakingV3 *ICnStakingV3Session) ADMINROLE() ([32]byte, error) {
	return _ICnStakingV3.Contract.ADMINROLE(&_ICnStakingV3.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() pure returns(bytes32)
func (_ICnStakingV3 *ICnStakingV3CallerSession) ADMINROLE() ([32]byte, error) {
	return _ICnStakingV3.Contract.ADMINROLE(&_ICnStakingV3.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() pure returns(string)
func (_ICnStakingV3 *ICnStakingV3Caller) CONTRACTTYPE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "CONTRACT_TYPE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() pure returns(string)
func (_ICnStakingV3 *ICnStakingV3Session) CONTRACTTYPE() (string, error) {
	return _ICnStakingV3.Contract.CONTRACTTYPE(&_ICnStakingV3.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() pure returns(string)
func (_ICnStakingV3 *ICnStakingV3CallerSession) CONTRACTTYPE() (string, error) {
	return _ICnStakingV3.Contract.CONTRACTTYPE(&_ICnStakingV3.CallOpts)
}

// OPERATORROLE is a free data retrieval call binding the contract method 0xf5b541a6.
//
// Solidity: function OPERATOR_ROLE() pure returns(bytes32)
func (_ICnStakingV3 *ICnStakingV3Caller) OPERATORROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "OPERATOR_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// OPERATORROLE is a free data retrieval call binding the contract method 0xf5b541a6.
//
// Solidity: function OPERATOR_ROLE() pure returns(bytes32)
func (_ICnStakingV3 *ICnStakingV3Session) OPERATORROLE() ([32]byte, error) {
	return _ICnStakingV3.Contract.OPERATORROLE(&_ICnStakingV3.CallOpts)
}

// OPERATORROLE is a free data retrieval call binding the contract method 0xf5b541a6.
//
// Solidity: function OPERATOR_ROLE() pure returns(bytes32)
func (_ICnStakingV3 *ICnStakingV3CallerSession) OPERATORROLE() ([32]byte, error) {
	return _ICnStakingV3.Contract.OPERATORROLE(&_ICnStakingV3.CallOpts)
}

// STAKERROLE is a free data retrieval call binding the contract method 0x3780b3ed.
//
// Solidity: function STAKER_ROLE() pure returns(bytes32)
func (_ICnStakingV3 *ICnStakingV3Caller) STAKERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "STAKER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// STAKERROLE is a free data retrieval call binding the contract method 0x3780b3ed.
//
// Solidity: function STAKER_ROLE() pure returns(bytes32)
func (_ICnStakingV3 *ICnStakingV3Session) STAKERROLE() ([32]byte, error) {
	return _ICnStakingV3.Contract.STAKERROLE(&_ICnStakingV3.CallOpts)
}

// STAKERROLE is a free data retrieval call binding the contract method 0x3780b3ed.
//
// Solidity: function STAKER_ROLE() pure returns(bytes32)
func (_ICnStakingV3 *ICnStakingV3CallerSession) STAKERROLE() ([32]byte, error) {
	return _ICnStakingV3.Contract.STAKERROLE(&_ICnStakingV3.CallOpts)
}

// STAKELOCKUP is a free data retrieval call binding the contract method 0x96106ae4.
//
// Solidity: function STAKE_LOCKUP() pure returns(uint256)
func (_ICnStakingV3 *ICnStakingV3Caller) STAKELOCKUP(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "STAKE_LOCKUP")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// STAKELOCKUP is a free data retrieval call binding the contract method 0x96106ae4.
//
// Solidity: function STAKE_LOCKUP() pure returns(uint256)
func (_ICnStakingV3 *ICnStakingV3Session) STAKELOCKUP() (*big.Int, error) {
	return _ICnStakingV3.Contract.STAKELOCKUP(&_ICnStakingV3.CallOpts)
}

// STAKELOCKUP is a free data retrieval call binding the contract method 0x96106ae4.
//
// Solidity: function STAKE_LOCKUP() pure returns(uint256)
func (_ICnStakingV3 *ICnStakingV3CallerSession) STAKELOCKUP() (*big.Int, error) {
	return _ICnStakingV3.Contract.STAKELOCKUP(&_ICnStakingV3.CallOpts)
}

// UNSTAKINGAPPROVERROLE is a free data retrieval call binding the contract method 0x0c07d842.
//
// Solidity: function UNSTAKING_APPROVER_ROLE() pure returns(bytes32)
func (_ICnStakingV3 *ICnStakingV3Caller) UNSTAKINGAPPROVERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "UNSTAKING_APPROVER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// UNSTAKINGAPPROVERROLE is a free data retrieval call binding the contract method 0x0c07d842.
//
// Solidity: function UNSTAKING_APPROVER_ROLE() pure returns(bytes32)
func (_ICnStakingV3 *ICnStakingV3Session) UNSTAKINGAPPROVERROLE() ([32]byte, error) {
	return _ICnStakingV3.Contract.UNSTAKINGAPPROVERROLE(&_ICnStakingV3.CallOpts)
}

// UNSTAKINGAPPROVERROLE is a free data retrieval call binding the contract method 0x0c07d842.
//
// Solidity: function UNSTAKING_APPROVER_ROLE() pure returns(bytes32)
func (_ICnStakingV3 *ICnStakingV3CallerSession) UNSTAKINGAPPROVERROLE() ([32]byte, error) {
	return _ICnStakingV3.Contract.UNSTAKINGAPPROVERROLE(&_ICnStakingV3.CallOpts)
}

// UNSTAKINGCLAIMERROLE is a free data retrieval call binding the contract method 0x9c394c5d.
//
// Solidity: function UNSTAKING_CLAIMER_ROLE() pure returns(bytes32)
func (_ICnStakingV3 *ICnStakingV3Caller) UNSTAKINGCLAIMERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "UNSTAKING_CLAIMER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// UNSTAKINGCLAIMERROLE is a free data retrieval call binding the contract method 0x9c394c5d.
//
// Solidity: function UNSTAKING_CLAIMER_ROLE() pure returns(bytes32)
func (_ICnStakingV3 *ICnStakingV3Session) UNSTAKINGCLAIMERROLE() ([32]byte, error) {
	return _ICnStakingV3.Contract.UNSTAKINGCLAIMERROLE(&_ICnStakingV3.CallOpts)
}

// UNSTAKINGCLAIMERROLE is a free data retrieval call binding the contract method 0x9c394c5d.
//
// Solidity: function UNSTAKING_CLAIMER_ROLE() pure returns(bytes32)
func (_ICnStakingV3 *ICnStakingV3CallerSession) UNSTAKINGCLAIMERROLE() ([32]byte, error) {
	return _ICnStakingV3.Contract.UNSTAKINGCLAIMERROLE(&_ICnStakingV3.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(uint256)
func (_ICnStakingV3 *ICnStakingV3Caller) VERSION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(uint256)
func (_ICnStakingV3 *ICnStakingV3Session) VERSION() (*big.Int, error) {
	return _ICnStakingV3.Contract.VERSION(&_ICnStakingV3.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(uint256)
func (_ICnStakingV3 *ICnStakingV3CallerSession) VERSION() (*big.Int, error) {
	return _ICnStakingV3.Contract.VERSION(&_ICnStakingV3.CallOpts)
}

// GcId is a free data retrieval call binding the contract method 0x6d2714db.
//
// Solidity: function gcId() view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3Caller) GcId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "gcId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GcId is a free data retrieval call binding the contract method 0x6d2714db.
//
// Solidity: function gcId() view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3Session) GcId() (*big.Int, error) {
	return _ICnStakingV3.Contract.GcId(&_ICnStakingV3.CallOpts)
}

// GcId is a free data retrieval call binding the contract method 0x6d2714db.
//
// Solidity: function gcId() view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3CallerSession) GcId() (*big.Int, error) {
	return _ICnStakingV3.Contract.GcId(&_ICnStakingV3.CallOpts)
}

// GetApprovedStakingWithdrawalIds is a free data retrieval call binding the contract method 0xd2569eb9.
//
// Solidity: function getApprovedStakingWithdrawalIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_ICnStakingV3 *ICnStakingV3Caller) GetApprovedStakingWithdrawalIds(opts *bind.CallOpts, _from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "getApprovedStakingWithdrawalIds", _from, _to, _state)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetApprovedStakingWithdrawalIds is a free data retrieval call binding the contract method 0xd2569eb9.
//
// Solidity: function getApprovedStakingWithdrawalIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_ICnStakingV3 *ICnStakingV3Session) GetApprovedStakingWithdrawalIds(_from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	return _ICnStakingV3.Contract.GetApprovedStakingWithdrawalIds(&_ICnStakingV3.CallOpts, _from, _to, _state)
}

// GetApprovedStakingWithdrawalIds is a free data retrieval call binding the contract method 0xd2569eb9.
//
// Solidity: function getApprovedStakingWithdrawalIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_ICnStakingV3 *ICnStakingV3CallerSession) GetApprovedStakingWithdrawalIds(_from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	return _ICnStakingV3.Contract.GetApprovedStakingWithdrawalIds(&_ICnStakingV3.CallOpts, _from, _to, _state)
}

// GetApprovedStakingWithdrawalInfo is a free data retrieval call binding the contract method 0x725c0503.
//
// Solidity: function getApprovedStakingWithdrawalInfo(uint256 _index) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_ICnStakingV3 *ICnStakingV3Caller) GetApprovedStakingWithdrawalInfo(opts *bind.CallOpts, _index *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "getApprovedStakingWithdrawalInfo", _index)

	outstruct := new(struct {
		To               common.Address
		Value            *big.Int
		WithdrawableFrom *big.Int
		State            uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.To = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Value = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.WithdrawableFrom = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.State = *abi.ConvertType(out[3], new(uint8)).(*uint8)

	return *outstruct, err

}

// GetApprovedStakingWithdrawalInfo is a free data retrieval call binding the contract method 0x725c0503.
//
// Solidity: function getApprovedStakingWithdrawalInfo(uint256 _index) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_ICnStakingV3 *ICnStakingV3Session) GetApprovedStakingWithdrawalInfo(_index *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	return _ICnStakingV3.Contract.GetApprovedStakingWithdrawalInfo(&_ICnStakingV3.CallOpts, _index)
}

// GetApprovedStakingWithdrawalInfo is a free data retrieval call binding the contract method 0x725c0503.
//
// Solidity: function getApprovedStakingWithdrawalInfo(uint256 _index) view returns(address to, uint256 value, uint256 withdrawableFrom, uint8 state)
func (_ICnStakingV3 *ICnStakingV3CallerSession) GetApprovedStakingWithdrawalInfo(_index *big.Int) (struct {
	To               common.Address
	Value            *big.Int
	WithdrawableFrom *big.Int
	State            uint8
}, error) {
	return _ICnStakingV3.Contract.GetApprovedStakingWithdrawalInfo(&_ICnStakingV3.CallOpts, _index)
}

// GetLockupStakingInfo is a free data retrieval call binding the contract method 0x5ecd75f2.
//
// Solidity: function getLockupStakingInfo() view returns(uint256[] unlockTime, uint256[] unlockAmount, uint256 initial, uint256 remaining, uint256 withdrawable)
func (_ICnStakingV3 *ICnStakingV3Caller) GetLockupStakingInfo(opts *bind.CallOpts) (struct {
	UnlockTime   []*big.Int
	UnlockAmount []*big.Int
	Initial      *big.Int
	Remaining    *big.Int
	Withdrawable *big.Int
}, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "getLockupStakingInfo")

	outstruct := new(struct {
		UnlockTime   []*big.Int
		UnlockAmount []*big.Int
		Initial      *big.Int
		Remaining    *big.Int
		Withdrawable *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.UnlockTime = *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
	outstruct.UnlockAmount = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)
	outstruct.Initial = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Remaining = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Withdrawable = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetLockupStakingInfo is a free data retrieval call binding the contract method 0x5ecd75f2.
//
// Solidity: function getLockupStakingInfo() view returns(uint256[] unlockTime, uint256[] unlockAmount, uint256 initial, uint256 remaining, uint256 withdrawable)
func (_ICnStakingV3 *ICnStakingV3Session) GetLockupStakingInfo() (struct {
	UnlockTime   []*big.Int
	UnlockAmount []*big.Int
	Initial      *big.Int
	Remaining    *big.Int
	Withdrawable *big.Int
}, error) {
	return _ICnStakingV3.Contract.GetLockupStakingInfo(&_ICnStakingV3.CallOpts)
}

// GetLockupStakingInfo is a free data retrieval call binding the contract method 0x5ecd75f2.
//
// Solidity: function getLockupStakingInfo() view returns(uint256[] unlockTime, uint256[] unlockAmount, uint256 initial, uint256 remaining, uint256 withdrawable)
func (_ICnStakingV3 *ICnStakingV3CallerSession) GetLockupStakingInfo() (struct {
	UnlockTime   []*big.Int
	UnlockAmount []*big.Int
	Initial      *big.Int
	Remaining    *big.Int
	Withdrawable *big.Int
}, error) {
	return _ICnStakingV3.Contract.GetLockupStakingInfo(&_ICnStakingV3.CallOpts)
}

// InitialLockupStaking is a free data retrieval call binding the contract method 0x06704222.
//
// Solidity: function initialLockupStaking() view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3Caller) InitialLockupStaking(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "initialLockupStaking")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InitialLockupStaking is a free data retrieval call binding the contract method 0x06704222.
//
// Solidity: function initialLockupStaking() view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3Session) InitialLockupStaking() (*big.Int, error) {
	return _ICnStakingV3.Contract.InitialLockupStaking(&_ICnStakingV3.CallOpts)
}

// InitialLockupStaking is a free data retrieval call binding the contract method 0x06704222.
//
// Solidity: function initialLockupStaking() view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3CallerSession) InitialLockupStaking() (*big.Int, error) {
	return _ICnStakingV3.Contract.InitialLockupStaking(&_ICnStakingV3.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_ICnStakingV3 *ICnStakingV3Caller) IsInitialized(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "isInitialized")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_ICnStakingV3 *ICnStakingV3Session) IsInitialized() (bool, error) {
	return _ICnStakingV3.Contract.IsInitialized(&_ICnStakingV3.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_ICnStakingV3 *ICnStakingV3CallerSession) IsInitialized() (bool, error) {
	return _ICnStakingV3.Contract.IsInitialized(&_ICnStakingV3.CallOpts)
}

// IsPublicDelegationEnabled is a free data retrieval call binding the contract method 0xbfc7e948.
//
// Solidity: function isPublicDelegationEnabled() view returns(bool)
func (_ICnStakingV3 *ICnStakingV3Caller) IsPublicDelegationEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "isPublicDelegationEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPublicDelegationEnabled is a free data retrieval call binding the contract method 0xbfc7e948.
//
// Solidity: function isPublicDelegationEnabled() view returns(bool)
func (_ICnStakingV3 *ICnStakingV3Session) IsPublicDelegationEnabled() (bool, error) {
	return _ICnStakingV3.Contract.IsPublicDelegationEnabled(&_ICnStakingV3.CallOpts)
}

// IsPublicDelegationEnabled is a free data retrieval call binding the contract method 0xbfc7e948.
//
// Solidity: function isPublicDelegationEnabled() view returns(bool)
func (_ICnStakingV3 *ICnStakingV3CallerSession) IsPublicDelegationEnabled() (bool, error) {
	return _ICnStakingV3.Contract.IsPublicDelegationEnabled(&_ICnStakingV3.CallOpts)
}

// IsRedelegationEnabled is a free data retrieval call binding the contract method 0x7a66c96b.
//
// Solidity: function isRedelegationEnabled() view returns(bool)
func (_ICnStakingV3 *ICnStakingV3Caller) IsRedelegationEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "isRedelegationEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRedelegationEnabled is a free data retrieval call binding the contract method 0x7a66c96b.
//
// Solidity: function isRedelegationEnabled() view returns(bool)
func (_ICnStakingV3 *ICnStakingV3Session) IsRedelegationEnabled() (bool, error) {
	return _ICnStakingV3.Contract.IsRedelegationEnabled(&_ICnStakingV3.CallOpts)
}

// IsRedelegationEnabled is a free data retrieval call binding the contract method 0x7a66c96b.
//
// Solidity: function isRedelegationEnabled() view returns(bool)
func (_ICnStakingV3 *ICnStakingV3CallerSession) IsRedelegationEnabled() (bool, error) {
	return _ICnStakingV3.Contract.IsRedelegationEnabled(&_ICnStakingV3.CallOpts)
}

// LastRedelegation is a free data retrieval call binding the contract method 0x14d3ce10.
//
// Solidity: function lastRedelegation(address _account) view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3Caller) LastRedelegation(opts *bind.CallOpts, _account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "lastRedelegation", _account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastRedelegation is a free data retrieval call binding the contract method 0x14d3ce10.
//
// Solidity: function lastRedelegation(address _account) view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3Session) LastRedelegation(_account common.Address) (*big.Int, error) {
	return _ICnStakingV3.Contract.LastRedelegation(&_ICnStakingV3.CallOpts, _account)
}

// LastRedelegation is a free data retrieval call binding the contract method 0x14d3ce10.
//
// Solidity: function lastRedelegation(address _account) view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3CallerSession) LastRedelegation(_account common.Address) (*big.Int, error) {
	return _ICnStakingV3.Contract.LastRedelegation(&_ICnStakingV3.CallOpts, _account)
}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_ICnStakingV3 *ICnStakingV3Caller) NodeId(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "nodeId")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_ICnStakingV3 *ICnStakingV3Session) NodeId() (common.Address, error) {
	return _ICnStakingV3.Contract.NodeId(&_ICnStakingV3.CallOpts)
}

// NodeId is a free data retrieval call binding the contract method 0x139d7fed.
//
// Solidity: function nodeId() view returns(address)
func (_ICnStakingV3 *ICnStakingV3CallerSession) NodeId() (common.Address, error) {
	return _ICnStakingV3.Contract.NodeId(&_ICnStakingV3.CallOpts)
}

// PendingRewardAddress is a free data retrieval call binding the contract method 0x8740568b.
//
// Solidity: function pendingRewardAddress() view returns(address)
func (_ICnStakingV3 *ICnStakingV3Caller) PendingRewardAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "pendingRewardAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingRewardAddress is a free data retrieval call binding the contract method 0x8740568b.
//
// Solidity: function pendingRewardAddress() view returns(address)
func (_ICnStakingV3 *ICnStakingV3Session) PendingRewardAddress() (common.Address, error) {
	return _ICnStakingV3.Contract.PendingRewardAddress(&_ICnStakingV3.CallOpts)
}

// PendingRewardAddress is a free data retrieval call binding the contract method 0x8740568b.
//
// Solidity: function pendingRewardAddress() view returns(address)
func (_ICnStakingV3 *ICnStakingV3CallerSession) PendingRewardAddress() (common.Address, error) {
	return _ICnStakingV3.Contract.PendingRewardAddress(&_ICnStakingV3.CallOpts)
}

// PublicDelegation is a free data retrieval call binding the contract method 0xe1a12d35.
//
// Solidity: function publicDelegation() view returns(address)
func (_ICnStakingV3 *ICnStakingV3Caller) PublicDelegation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "publicDelegation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PublicDelegation is a free data retrieval call binding the contract method 0xe1a12d35.
//
// Solidity: function publicDelegation() view returns(address)
func (_ICnStakingV3 *ICnStakingV3Session) PublicDelegation() (common.Address, error) {
	return _ICnStakingV3.Contract.PublicDelegation(&_ICnStakingV3.CallOpts)
}

// PublicDelegation is a free data retrieval call binding the contract method 0xe1a12d35.
//
// Solidity: function publicDelegation() view returns(address)
func (_ICnStakingV3 *ICnStakingV3CallerSession) PublicDelegation() (common.Address, error) {
	return _ICnStakingV3.Contract.PublicDelegation(&_ICnStakingV3.CallOpts)
}

// RemainingLockupStaking is a free data retrieval call binding the contract method 0x7b5e0481.
//
// Solidity: function remainingLockupStaking() view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3Caller) RemainingLockupStaking(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "remainingLockupStaking")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RemainingLockupStaking is a free data retrieval call binding the contract method 0x7b5e0481.
//
// Solidity: function remainingLockupStaking() view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3Session) RemainingLockupStaking() (*big.Int, error) {
	return _ICnStakingV3.Contract.RemainingLockupStaking(&_ICnStakingV3.CallOpts)
}

// RemainingLockupStaking is a free data retrieval call binding the contract method 0x7b5e0481.
//
// Solidity: function remainingLockupStaking() view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3CallerSession) RemainingLockupStaking() (*big.Int, error) {
	return _ICnStakingV3.Contract.RemainingLockupStaking(&_ICnStakingV3.CallOpts)
}

// RewardAddress is a free data retrieval call binding the contract method 0x8cf57cb9.
//
// Solidity: function rewardAddress() view returns(address)
func (_ICnStakingV3 *ICnStakingV3Caller) RewardAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "rewardAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RewardAddress is a free data retrieval call binding the contract method 0x8cf57cb9.
//
// Solidity: function rewardAddress() view returns(address)
func (_ICnStakingV3 *ICnStakingV3Session) RewardAddress() (common.Address, error) {
	return _ICnStakingV3.Contract.RewardAddress(&_ICnStakingV3.CallOpts)
}

// RewardAddress is a free data retrieval call binding the contract method 0x8cf57cb9.
//
// Solidity: function rewardAddress() view returns(address)
func (_ICnStakingV3 *ICnStakingV3CallerSession) RewardAddress() (common.Address, error) {
	return _ICnStakingV3.Contract.RewardAddress(&_ICnStakingV3.CallOpts)
}

// Staking is a free data retrieval call binding the contract method 0x4cf088d9.
//
// Solidity: function staking() view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3Caller) Staking(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "staking")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Staking is a free data retrieval call binding the contract method 0x4cf088d9.
//
// Solidity: function staking() view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3Session) Staking() (*big.Int, error) {
	return _ICnStakingV3.Contract.Staking(&_ICnStakingV3.CallOpts)
}

// Staking is a free data retrieval call binding the contract method 0x4cf088d9.
//
// Solidity: function staking() view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3CallerSession) Staking() (*big.Int, error) {
	return _ICnStakingV3.Contract.Staking(&_ICnStakingV3.CallOpts)
}

// StakingTracker is a free data retrieval call binding the contract method 0x008c477a.
//
// Solidity: function stakingTracker() view returns(address)
func (_ICnStakingV3 *ICnStakingV3Caller) StakingTracker(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "stakingTracker")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakingTracker is a free data retrieval call binding the contract method 0x008c477a.
//
// Solidity: function stakingTracker() view returns(address)
func (_ICnStakingV3 *ICnStakingV3Session) StakingTracker() (common.Address, error) {
	return _ICnStakingV3.Contract.StakingTracker(&_ICnStakingV3.CallOpts)
}

// StakingTracker is a free data retrieval call binding the contract method 0x008c477a.
//
// Solidity: function stakingTracker() view returns(address)
func (_ICnStakingV3 *ICnStakingV3CallerSession) StakingTracker() (common.Address, error) {
	return _ICnStakingV3.Contract.StakingTracker(&_ICnStakingV3.CallOpts)
}

// Unstaking is a free data retrieval call binding the contract method 0x630b1146.
//
// Solidity: function unstaking() view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3Caller) Unstaking(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "unstaking")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Unstaking is a free data retrieval call binding the contract method 0x630b1146.
//
// Solidity: function unstaking() view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3Session) Unstaking() (*big.Int, error) {
	return _ICnStakingV3.Contract.Unstaking(&_ICnStakingV3.CallOpts)
}

// Unstaking is a free data retrieval call binding the contract method 0x630b1146.
//
// Solidity: function unstaking() view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3CallerSession) Unstaking() (*big.Int, error) {
	return _ICnStakingV3.Contract.Unstaking(&_ICnStakingV3.CallOpts)
}

// VoterAddress is a free data retrieval call binding the contract method 0x992ac9fa.
//
// Solidity: function voterAddress() view returns(address)
func (_ICnStakingV3 *ICnStakingV3Caller) VoterAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "voterAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VoterAddress is a free data retrieval call binding the contract method 0x992ac9fa.
//
// Solidity: function voterAddress() view returns(address)
func (_ICnStakingV3 *ICnStakingV3Session) VoterAddress() (common.Address, error) {
	return _ICnStakingV3.Contract.VoterAddress(&_ICnStakingV3.CallOpts)
}

// VoterAddress is a free data retrieval call binding the contract method 0x992ac9fa.
//
// Solidity: function voterAddress() view returns(address)
func (_ICnStakingV3 *ICnStakingV3CallerSession) VoterAddress() (common.Address, error) {
	return _ICnStakingV3.Contract.VoterAddress(&_ICnStakingV3.CallOpts)
}

// WithdrawalRequestCount is a free data retrieval call binding the contract method 0x19e44e32.
//
// Solidity: function withdrawalRequestCount() view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3Caller) WithdrawalRequestCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ICnStakingV3.contract.Call(opts, &out, "withdrawalRequestCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawalRequestCount is a free data retrieval call binding the contract method 0x19e44e32.
//
// Solidity: function withdrawalRequestCount() view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3Session) WithdrawalRequestCount() (*big.Int, error) {
	return _ICnStakingV3.Contract.WithdrawalRequestCount(&_ICnStakingV3.CallOpts)
}

// WithdrawalRequestCount is a free data retrieval call binding the contract method 0x19e44e32.
//
// Solidity: function withdrawalRequestCount() view returns(uint256)
func (_ICnStakingV3 *ICnStakingV3CallerSession) WithdrawalRequestCount() (*big.Int, error) {
	return _ICnStakingV3.Contract.WithdrawalRequestCount(&_ICnStakingV3.CallOpts)
}

// AcceptRewardAddress is a paid mutator transaction binding the contract method 0xaa4058b9.
//
// Solidity: function acceptRewardAddress(address _rewardAddress) returns()
func (_ICnStakingV3 *ICnStakingV3Transactor) AcceptRewardAddress(opts *bind.TransactOpts, _rewardAddress common.Address) (*types.Transaction, error) {
	return _ICnStakingV3.contract.Transact(opts, "acceptRewardAddress", _rewardAddress)
}

// AcceptRewardAddress is a paid mutator transaction binding the contract method 0xaa4058b9.
//
// Solidity: function acceptRewardAddress(address _rewardAddress) returns()
func (_ICnStakingV3 *ICnStakingV3Session) AcceptRewardAddress(_rewardAddress common.Address) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.AcceptRewardAddress(&_ICnStakingV3.TransactOpts, _rewardAddress)
}

// AcceptRewardAddress is a paid mutator transaction binding the contract method 0xaa4058b9.
//
// Solidity: function acceptRewardAddress(address _rewardAddress) returns()
func (_ICnStakingV3 *ICnStakingV3TransactorSession) AcceptRewardAddress(_rewardAddress common.Address) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.AcceptRewardAddress(&_ICnStakingV3.TransactOpts, _rewardAddress)
}

// ApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x5df8b09a.
//
// Solidity: function approveStakingWithdrawal(address _to, uint256 _value) returns(uint256)
func (_ICnStakingV3 *ICnStakingV3Transactor) ApproveStakingWithdrawal(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3.contract.Transact(opts, "approveStakingWithdrawal", _to, _value)
}

// ApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x5df8b09a.
//
// Solidity: function approveStakingWithdrawal(address _to, uint256 _value) returns(uint256)
func (_ICnStakingV3 *ICnStakingV3Session) ApproveStakingWithdrawal(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.ApproveStakingWithdrawal(&_ICnStakingV3.TransactOpts, _to, _value)
}

// ApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x5df8b09a.
//
// Solidity: function approveStakingWithdrawal(address _to, uint256 _value) returns(uint256)
func (_ICnStakingV3 *ICnStakingV3TransactorSession) ApproveStakingWithdrawal(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.ApproveStakingWithdrawal(&_ICnStakingV3.TransactOpts, _to, _value)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _approvedWithdrawalId) returns()
func (_ICnStakingV3 *ICnStakingV3Transactor) CancelApprovedStakingWithdrawal(opts *bind.TransactOpts, _approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3.contract.Transact(opts, "cancelApprovedStakingWithdrawal", _approvedWithdrawalId)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _approvedWithdrawalId) returns()
func (_ICnStakingV3 *ICnStakingV3Session) CancelApprovedStakingWithdrawal(_approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.CancelApprovedStakingWithdrawal(&_ICnStakingV3.TransactOpts, _approvedWithdrawalId)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _approvedWithdrawalId) returns()
func (_ICnStakingV3 *ICnStakingV3TransactorSession) CancelApprovedStakingWithdrawal(_approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.CancelApprovedStakingWithdrawal(&_ICnStakingV3.TransactOpts, _approvedWithdrawalId)
}

// Delegate is a paid mutator transaction binding the contract method 0xc89e4361.
//
// Solidity: function delegate() payable returns()
func (_ICnStakingV3 *ICnStakingV3Transactor) Delegate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICnStakingV3.contract.Transact(opts, "delegate")
}

// Delegate is a paid mutator transaction binding the contract method 0xc89e4361.
//
// Solidity: function delegate() payable returns()
func (_ICnStakingV3 *ICnStakingV3Session) Delegate() (*types.Transaction, error) {
	return _ICnStakingV3.Contract.Delegate(&_ICnStakingV3.TransactOpts)
}

// Delegate is a paid mutator transaction binding the contract method 0xc89e4361.
//
// Solidity: function delegate() payable returns()
func (_ICnStakingV3 *ICnStakingV3TransactorSession) Delegate() (*types.Transaction, error) {
	return _ICnStakingV3.Contract.Delegate(&_ICnStakingV3.TransactOpts)
}

// DepositLockupStakingAndInit is a paid mutator transaction binding the contract method 0x6a27c206.
//
// Solidity: function depositLockupStakingAndInit() payable returns()
func (_ICnStakingV3 *ICnStakingV3Transactor) DepositLockupStakingAndInit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICnStakingV3.contract.Transact(opts, "depositLockupStakingAndInit")
}

// DepositLockupStakingAndInit is a paid mutator transaction binding the contract method 0x6a27c206.
//
// Solidity: function depositLockupStakingAndInit() payable returns()
func (_ICnStakingV3 *ICnStakingV3Session) DepositLockupStakingAndInit() (*types.Transaction, error) {
	return _ICnStakingV3.Contract.DepositLockupStakingAndInit(&_ICnStakingV3.TransactOpts)
}

// DepositLockupStakingAndInit is a paid mutator transaction binding the contract method 0x6a27c206.
//
// Solidity: function depositLockupStakingAndInit() payable returns()
func (_ICnStakingV3 *ICnStakingV3TransactorSession) DepositLockupStakingAndInit() (*types.Transaction, error) {
	return _ICnStakingV3.Contract.DepositLockupStakingAndInit(&_ICnStakingV3.TransactOpts)
}

// HandleRedelegation is a paid mutator transaction binding the contract method 0xa006e90c.
//
// Solidity: function handleRedelegation(address _user) payable returns()
func (_ICnStakingV3 *ICnStakingV3Transactor) HandleRedelegation(opts *bind.TransactOpts, _user common.Address) (*types.Transaction, error) {
	return _ICnStakingV3.contract.Transact(opts, "handleRedelegation", _user)
}

// HandleRedelegation is a paid mutator transaction binding the contract method 0xa006e90c.
//
// Solidity: function handleRedelegation(address _user) payable returns()
func (_ICnStakingV3 *ICnStakingV3Session) HandleRedelegation(_user common.Address) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.HandleRedelegation(&_ICnStakingV3.TransactOpts, _user)
}

// HandleRedelegation is a paid mutator transaction binding the contract method 0xa006e90c.
//
// Solidity: function handleRedelegation(address _user) payable returns()
func (_ICnStakingV3 *ICnStakingV3TransactorSession) HandleRedelegation(_user common.Address) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.HandleRedelegation(&_ICnStakingV3.TransactOpts, _user)
}

// Redelegate is a paid mutator transaction binding the contract method 0x6bd8f804.
//
// Solidity: function redelegate(address _user, address _targetCnV3, uint256 _value) returns()
func (_ICnStakingV3 *ICnStakingV3Transactor) Redelegate(opts *bind.TransactOpts, _user common.Address, _targetCnV3 common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3.contract.Transact(opts, "redelegate", _user, _targetCnV3, _value)
}

// Redelegate is a paid mutator transaction binding the contract method 0x6bd8f804.
//
// Solidity: function redelegate(address _user, address _targetCnV3, uint256 _value) returns()
func (_ICnStakingV3 *ICnStakingV3Session) Redelegate(_user common.Address, _targetCnV3 common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.Redelegate(&_ICnStakingV3.TransactOpts, _user, _targetCnV3, _value)
}

// Redelegate is a paid mutator transaction binding the contract method 0x6bd8f804.
//
// Solidity: function redelegate(address _user, address _targetCnV3, uint256 _value) returns()
func (_ICnStakingV3 *ICnStakingV3TransactorSession) Redelegate(_user common.Address, _targetCnV3 common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.Redelegate(&_ICnStakingV3.TransactOpts, _user, _targetCnV3, _value)
}

// ReviewInitialConditions is a paid mutator transaction binding the contract method 0x702b9c9b.
//
// Solidity: function reviewInitialConditions() returns()
func (_ICnStakingV3 *ICnStakingV3Transactor) ReviewInitialConditions(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICnStakingV3.contract.Transact(opts, "reviewInitialConditions")
}

// ReviewInitialConditions is a paid mutator transaction binding the contract method 0x702b9c9b.
//
// Solidity: function reviewInitialConditions() returns()
func (_ICnStakingV3 *ICnStakingV3Session) ReviewInitialConditions() (*types.Transaction, error) {
	return _ICnStakingV3.Contract.ReviewInitialConditions(&_ICnStakingV3.TransactOpts)
}

// ReviewInitialConditions is a paid mutator transaction binding the contract method 0x702b9c9b.
//
// Solidity: function reviewInitialConditions() returns()
func (_ICnStakingV3 *ICnStakingV3TransactorSession) ReviewInitialConditions() (*types.Transaction, error) {
	return _ICnStakingV3.Contract.ReviewInitialConditions(&_ICnStakingV3.TransactOpts)
}

// SetGCId is a paid mutator transaction binding the contract method 0xff4634bc.
//
// Solidity: function setGCId(uint256 _gcId) returns()
func (_ICnStakingV3 *ICnStakingV3Transactor) SetGCId(opts *bind.TransactOpts, _gcId *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3.contract.Transact(opts, "setGCId", _gcId)
}

// SetGCId is a paid mutator transaction binding the contract method 0xff4634bc.
//
// Solidity: function setGCId(uint256 _gcId) returns()
func (_ICnStakingV3 *ICnStakingV3Session) SetGCId(_gcId *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.SetGCId(&_ICnStakingV3.TransactOpts, _gcId)
}

// SetGCId is a paid mutator transaction binding the contract method 0xff4634bc.
//
// Solidity: function setGCId(uint256 _gcId) returns()
func (_ICnStakingV3 *ICnStakingV3TransactorSession) SetGCId(_gcId *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.SetGCId(&_ICnStakingV3.TransactOpts, _gcId)
}

// SetPublicDelegation is a paid mutator transaction binding the contract method 0x2e5dc0f7.
//
// Solidity: function setPublicDelegation(address _pdFactory, bytes _pdArgs) returns()
func (_ICnStakingV3 *ICnStakingV3Transactor) SetPublicDelegation(opts *bind.TransactOpts, _pdFactory common.Address, _pdArgs []byte) (*types.Transaction, error) {
	return _ICnStakingV3.contract.Transact(opts, "setPublicDelegation", _pdFactory, _pdArgs)
}

// SetPublicDelegation is a paid mutator transaction binding the contract method 0x2e5dc0f7.
//
// Solidity: function setPublicDelegation(address _pdFactory, bytes _pdArgs) returns()
func (_ICnStakingV3 *ICnStakingV3Session) SetPublicDelegation(_pdFactory common.Address, _pdArgs []byte) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.SetPublicDelegation(&_ICnStakingV3.TransactOpts, _pdFactory, _pdArgs)
}

// SetPublicDelegation is a paid mutator transaction binding the contract method 0x2e5dc0f7.
//
// Solidity: function setPublicDelegation(address _pdFactory, bytes _pdArgs) returns()
func (_ICnStakingV3 *ICnStakingV3TransactorSession) SetPublicDelegation(_pdFactory common.Address, _pdArgs []byte) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.SetPublicDelegation(&_ICnStakingV3.TransactOpts, _pdFactory, _pdArgs)
}

// SetStakingTracker is a paid mutator transaction binding the contract method 0xc336aa35.
//
// Solidity: function setStakingTracker(address _tracker) returns()
func (_ICnStakingV3 *ICnStakingV3Transactor) SetStakingTracker(opts *bind.TransactOpts, _tracker common.Address) (*types.Transaction, error) {
	return _ICnStakingV3.contract.Transact(opts, "setStakingTracker", _tracker)
}

// SetStakingTracker is a paid mutator transaction binding the contract method 0xc336aa35.
//
// Solidity: function setStakingTracker(address _tracker) returns()
func (_ICnStakingV3 *ICnStakingV3Session) SetStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.SetStakingTracker(&_ICnStakingV3.TransactOpts, _tracker)
}

// SetStakingTracker is a paid mutator transaction binding the contract method 0xc336aa35.
//
// Solidity: function setStakingTracker(address _tracker) returns()
func (_ICnStakingV3 *ICnStakingV3TransactorSession) SetStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.SetStakingTracker(&_ICnStakingV3.TransactOpts, _tracker)
}

// ToggleRedelegation is a paid mutator transaction binding the contract method 0xd75859ec.
//
// Solidity: function toggleRedelegation() returns()
func (_ICnStakingV3 *ICnStakingV3Transactor) ToggleRedelegation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICnStakingV3.contract.Transact(opts, "toggleRedelegation")
}

// ToggleRedelegation is a paid mutator transaction binding the contract method 0xd75859ec.
//
// Solidity: function toggleRedelegation() returns()
func (_ICnStakingV3 *ICnStakingV3Session) ToggleRedelegation() (*types.Transaction, error) {
	return _ICnStakingV3.Contract.ToggleRedelegation(&_ICnStakingV3.TransactOpts)
}

// ToggleRedelegation is a paid mutator transaction binding the contract method 0xd75859ec.
//
// Solidity: function toggleRedelegation() returns()
func (_ICnStakingV3 *ICnStakingV3TransactorSession) ToggleRedelegation() (*types.Transaction, error) {
	return _ICnStakingV3.Contract.ToggleRedelegation(&_ICnStakingV3.TransactOpts)
}

// UpdateRewardAddress is a paid mutator transaction binding the contract method 0x944dd5a2.
//
// Solidity: function updateRewardAddress(address _rewardAddress) returns()
func (_ICnStakingV3 *ICnStakingV3Transactor) UpdateRewardAddress(opts *bind.TransactOpts, _rewardAddress common.Address) (*types.Transaction, error) {
	return _ICnStakingV3.contract.Transact(opts, "updateRewardAddress", _rewardAddress)
}

// UpdateRewardAddress is a paid mutator transaction binding the contract method 0x944dd5a2.
//
// Solidity: function updateRewardAddress(address _rewardAddress) returns()
func (_ICnStakingV3 *ICnStakingV3Session) UpdateRewardAddress(_rewardAddress common.Address) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.UpdateRewardAddress(&_ICnStakingV3.TransactOpts, _rewardAddress)
}

// UpdateRewardAddress is a paid mutator transaction binding the contract method 0x944dd5a2.
//
// Solidity: function updateRewardAddress(address _rewardAddress) returns()
func (_ICnStakingV3 *ICnStakingV3TransactorSession) UpdateRewardAddress(_rewardAddress common.Address) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.UpdateRewardAddress(&_ICnStakingV3.TransactOpts, _rewardAddress)
}

// UpdateStakingTracker is a paid mutator transaction binding the contract method 0x5be6eacc.
//
// Solidity: function updateStakingTracker(address _tracker) returns()
func (_ICnStakingV3 *ICnStakingV3Transactor) UpdateStakingTracker(opts *bind.TransactOpts, _tracker common.Address) (*types.Transaction, error) {
	return _ICnStakingV3.contract.Transact(opts, "updateStakingTracker", _tracker)
}

// UpdateStakingTracker is a paid mutator transaction binding the contract method 0x5be6eacc.
//
// Solidity: function updateStakingTracker(address _tracker) returns()
func (_ICnStakingV3 *ICnStakingV3Session) UpdateStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.UpdateStakingTracker(&_ICnStakingV3.TransactOpts, _tracker)
}

// UpdateStakingTracker is a paid mutator transaction binding the contract method 0x5be6eacc.
//
// Solidity: function updateStakingTracker(address _tracker) returns()
func (_ICnStakingV3 *ICnStakingV3TransactorSession) UpdateStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.UpdateStakingTracker(&_ICnStakingV3.TransactOpts, _tracker)
}

// UpdateVoterAddress is a paid mutator transaction binding the contract method 0x5784d18b.
//
// Solidity: function updateVoterAddress(address _voterAddress) returns()
func (_ICnStakingV3 *ICnStakingV3Transactor) UpdateVoterAddress(opts *bind.TransactOpts, _voterAddress common.Address) (*types.Transaction, error) {
	return _ICnStakingV3.contract.Transact(opts, "updateVoterAddress", _voterAddress)
}

// UpdateVoterAddress is a paid mutator transaction binding the contract method 0x5784d18b.
//
// Solidity: function updateVoterAddress(address _voterAddress) returns()
func (_ICnStakingV3 *ICnStakingV3Session) UpdateVoterAddress(_voterAddress common.Address) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.UpdateVoterAddress(&_ICnStakingV3.TransactOpts, _voterAddress)
}

// UpdateVoterAddress is a paid mutator transaction binding the contract method 0x5784d18b.
//
// Solidity: function updateVoterAddress(address _voterAddress) returns()
func (_ICnStakingV3 *ICnStakingV3TransactorSession) UpdateVoterAddress(_voterAddress common.Address) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.UpdateVoterAddress(&_ICnStakingV3.TransactOpts, _voterAddress)
}

// WithdrawApprovedStaking is a paid mutator transaction binding the contract method 0x6e93df0d.
//
// Solidity: function withdrawApprovedStaking(uint256 _approvedWithdrawalId) returns()
func (_ICnStakingV3 *ICnStakingV3Transactor) WithdrawApprovedStaking(opts *bind.TransactOpts, _approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3.contract.Transact(opts, "withdrawApprovedStaking", _approvedWithdrawalId)
}

// WithdrawApprovedStaking is a paid mutator transaction binding the contract method 0x6e93df0d.
//
// Solidity: function withdrawApprovedStaking(uint256 _approvedWithdrawalId) returns()
func (_ICnStakingV3 *ICnStakingV3Session) WithdrawApprovedStaking(_approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.WithdrawApprovedStaking(&_ICnStakingV3.TransactOpts, _approvedWithdrawalId)
}

// WithdrawApprovedStaking is a paid mutator transaction binding the contract method 0x6e93df0d.
//
// Solidity: function withdrawApprovedStaking(uint256 _approvedWithdrawalId) returns()
func (_ICnStakingV3 *ICnStakingV3TransactorSession) WithdrawApprovedStaking(_approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.WithdrawApprovedStaking(&_ICnStakingV3.TransactOpts, _approvedWithdrawalId)
}

// WithdrawLockupStaking is a paid mutator transaction binding the contract method 0x505ebed4.
//
// Solidity: function withdrawLockupStaking(address _to, uint256 _value) returns()
func (_ICnStakingV3 *ICnStakingV3Transactor) WithdrawLockupStaking(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3.contract.Transact(opts, "withdrawLockupStaking", _to, _value)
}

// WithdrawLockupStaking is a paid mutator transaction binding the contract method 0x505ebed4.
//
// Solidity: function withdrawLockupStaking(address _to, uint256 _value) returns()
func (_ICnStakingV3 *ICnStakingV3Session) WithdrawLockupStaking(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.WithdrawLockupStaking(&_ICnStakingV3.TransactOpts, _to, _value)
}

// WithdrawLockupStaking is a paid mutator transaction binding the contract method 0x505ebed4.
//
// Solidity: function withdrawLockupStaking(address _to, uint256 _value) returns()
func (_ICnStakingV3 *ICnStakingV3TransactorSession) WithdrawLockupStaking(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3.Contract.WithdrawLockupStaking(&_ICnStakingV3.TransactOpts, _to, _value)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ICnStakingV3 *ICnStakingV3Transactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICnStakingV3.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ICnStakingV3 *ICnStakingV3Session) Receive() (*types.Transaction, error) {
	return _ICnStakingV3.Contract.Receive(&_ICnStakingV3.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ICnStakingV3 *ICnStakingV3TransactorSession) Receive() (*types.Transaction, error) {
	return _ICnStakingV3.Contract.Receive(&_ICnStakingV3.TransactOpts)
}

// ICnStakingV3AcceptRewardAddressIterator is returned from FilterAcceptRewardAddress and is used to iterate over the raw logs and unpacked data for AcceptRewardAddress events raised by the ICnStakingV3 contract.
type ICnStakingV3AcceptRewardAddressIterator struct {
	Event *ICnStakingV3AcceptRewardAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3AcceptRewardAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3AcceptRewardAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3AcceptRewardAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3AcceptRewardAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3AcceptRewardAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3AcceptRewardAddress represents a AcceptRewardAddress event raised by the ICnStakingV3 contract.
type ICnStakingV3AcceptRewardAddress struct {
	RewardAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAcceptRewardAddress is a free log retrieval operation binding the contract event 0x36e0b58f785f850d6622cb742fa1e0750728da3c75816916830b50b747efb6b6.
//
// Solidity: event AcceptRewardAddress(address indexed rewardAddress)
func (_ICnStakingV3 *ICnStakingV3Filterer) FilterAcceptRewardAddress(opts *bind.FilterOpts, rewardAddress []common.Address) (*ICnStakingV3AcceptRewardAddressIterator, error) {

	var rewardAddressRule []interface{}
	for _, rewardAddressItem := range rewardAddress {
		rewardAddressRule = append(rewardAddressRule, rewardAddressItem)
	}

	logs, sub, err := _ICnStakingV3.contract.FilterLogs(opts, "AcceptRewardAddress", rewardAddressRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3AcceptRewardAddressIterator{contract: _ICnStakingV3.contract, event: "AcceptRewardAddress", logs: logs, sub: sub}, nil
}

// WatchAcceptRewardAddress is a free log subscription operation binding the contract event 0x36e0b58f785f850d6622cb742fa1e0750728da3c75816916830b50b747efb6b6.
//
// Solidity: event AcceptRewardAddress(address indexed rewardAddress)
func (_ICnStakingV3 *ICnStakingV3Filterer) WatchAcceptRewardAddress(opts *bind.WatchOpts, sink chan<- *ICnStakingV3AcceptRewardAddress, rewardAddress []common.Address) (event.Subscription, error) {

	var rewardAddressRule []interface{}
	for _, rewardAddressItem := range rewardAddress {
		rewardAddressRule = append(rewardAddressRule, rewardAddressItem)
	}

	logs, sub, err := _ICnStakingV3.contract.WatchLogs(opts, "AcceptRewardAddress", rewardAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3AcceptRewardAddress)
				if err := _ICnStakingV3.contract.UnpackLog(event, "AcceptRewardAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAcceptRewardAddress is a log parse operation binding the contract event 0x36e0b58f785f850d6622cb742fa1e0750728da3c75816916830b50b747efb6b6.
//
// Solidity: event AcceptRewardAddress(address indexed rewardAddress)
func (_ICnStakingV3 *ICnStakingV3Filterer) ParseAcceptRewardAddress(log types.Log) (*ICnStakingV3AcceptRewardAddress, error) {
	event := new(ICnStakingV3AcceptRewardAddress)
	if err := _ICnStakingV3.contract.UnpackLog(event, "AcceptRewardAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3ApproveStakingWithdrawalIterator is returned from FilterApproveStakingWithdrawal and is used to iterate over the raw logs and unpacked data for ApproveStakingWithdrawal events raised by the ICnStakingV3 contract.
type ICnStakingV3ApproveStakingWithdrawalIterator struct {
	Event *ICnStakingV3ApproveStakingWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3ApproveStakingWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3ApproveStakingWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3ApproveStakingWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3ApproveStakingWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3ApproveStakingWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3ApproveStakingWithdrawal represents a ApproveStakingWithdrawal event raised by the ICnStakingV3 contract.
type ICnStakingV3ApproveStakingWithdrawal struct {
	ApprovedWithdrawalId *big.Int
	To                   common.Address
	Value                *big.Int
	WithdrawableFrom     *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterApproveStakingWithdrawal is a free log retrieval operation binding the contract event 0xdd0988b8c11a867814c87be652f93a86d35c6a235b92977e99d5394bd8580ced.
//
// Solidity: event ApproveStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value, uint256 withdrawableFrom)
func (_ICnStakingV3 *ICnStakingV3Filterer) FilterApproveStakingWithdrawal(opts *bind.FilterOpts, approvedWithdrawalId []*big.Int, to []common.Address) (*ICnStakingV3ApproveStakingWithdrawalIterator, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ICnStakingV3.contract.FilterLogs(opts, "ApproveStakingWithdrawal", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3ApproveStakingWithdrawalIterator{contract: _ICnStakingV3.contract, event: "ApproveStakingWithdrawal", logs: logs, sub: sub}, nil
}

// WatchApproveStakingWithdrawal is a free log subscription operation binding the contract event 0xdd0988b8c11a867814c87be652f93a86d35c6a235b92977e99d5394bd8580ced.
//
// Solidity: event ApproveStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value, uint256 withdrawableFrom)
func (_ICnStakingV3 *ICnStakingV3Filterer) WatchApproveStakingWithdrawal(opts *bind.WatchOpts, sink chan<- *ICnStakingV3ApproveStakingWithdrawal, approvedWithdrawalId []*big.Int, to []common.Address) (event.Subscription, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ICnStakingV3.contract.WatchLogs(opts, "ApproveStakingWithdrawal", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3ApproveStakingWithdrawal)
				if err := _ICnStakingV3.contract.UnpackLog(event, "ApproveStakingWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproveStakingWithdrawal is a log parse operation binding the contract event 0xdd0988b8c11a867814c87be652f93a86d35c6a235b92977e99d5394bd8580ced.
//
// Solidity: event ApproveStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value, uint256 withdrawableFrom)
func (_ICnStakingV3 *ICnStakingV3Filterer) ParseApproveStakingWithdrawal(log types.Log) (*ICnStakingV3ApproveStakingWithdrawal, error) {
	event := new(ICnStakingV3ApproveStakingWithdrawal)
	if err := _ICnStakingV3.contract.UnpackLog(event, "ApproveStakingWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3CancelApprovedStakingWithdrawalIterator is returned from FilterCancelApprovedStakingWithdrawal and is used to iterate over the raw logs and unpacked data for CancelApprovedStakingWithdrawal events raised by the ICnStakingV3 contract.
type ICnStakingV3CancelApprovedStakingWithdrawalIterator struct {
	Event *ICnStakingV3CancelApprovedStakingWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3CancelApprovedStakingWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3CancelApprovedStakingWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3CancelApprovedStakingWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3CancelApprovedStakingWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3CancelApprovedStakingWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3CancelApprovedStakingWithdrawal represents a CancelApprovedStakingWithdrawal event raised by the ICnStakingV3 contract.
type ICnStakingV3CancelApprovedStakingWithdrawal struct {
	ApprovedWithdrawalId *big.Int
	To                   common.Address
	Value                *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterCancelApprovedStakingWithdrawal is a free log retrieval operation binding the contract event 0xcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df.
//
// Solidity: event CancelApprovedStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) FilterCancelApprovedStakingWithdrawal(opts *bind.FilterOpts, approvedWithdrawalId []*big.Int, to []common.Address) (*ICnStakingV3CancelApprovedStakingWithdrawalIterator, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ICnStakingV3.contract.FilterLogs(opts, "CancelApprovedStakingWithdrawal", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3CancelApprovedStakingWithdrawalIterator{contract: _ICnStakingV3.contract, event: "CancelApprovedStakingWithdrawal", logs: logs, sub: sub}, nil
}

// WatchCancelApprovedStakingWithdrawal is a free log subscription operation binding the contract event 0xcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df.
//
// Solidity: event CancelApprovedStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) WatchCancelApprovedStakingWithdrawal(opts *bind.WatchOpts, sink chan<- *ICnStakingV3CancelApprovedStakingWithdrawal, approvedWithdrawalId []*big.Int, to []common.Address) (event.Subscription, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ICnStakingV3.contract.WatchLogs(opts, "CancelApprovedStakingWithdrawal", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3CancelApprovedStakingWithdrawal)
				if err := _ICnStakingV3.contract.UnpackLog(event, "CancelApprovedStakingWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancelApprovedStakingWithdrawal is a log parse operation binding the contract event 0xcc847b5f283b573ff21408ad42cb442f358bbce95269470b05097215598173df.
//
// Solidity: event CancelApprovedStakingWithdrawal(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) ParseCancelApprovedStakingWithdrawal(log types.Log) (*ICnStakingV3CancelApprovedStakingWithdrawal, error) {
	event := new(ICnStakingV3CancelApprovedStakingWithdrawal)
	if err := _ICnStakingV3.contract.UnpackLog(event, "CancelApprovedStakingWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3CompleteReviewInitialConditionsIterator is returned from FilterCompleteReviewInitialConditions and is used to iterate over the raw logs and unpacked data for CompleteReviewInitialConditions events raised by the ICnStakingV3 contract.
type ICnStakingV3CompleteReviewInitialConditionsIterator struct {
	Event *ICnStakingV3CompleteReviewInitialConditions // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3CompleteReviewInitialConditionsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3CompleteReviewInitialConditions)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3CompleteReviewInitialConditions)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3CompleteReviewInitialConditionsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3CompleteReviewInitialConditionsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3CompleteReviewInitialConditions represents a CompleteReviewInitialConditions event raised by the ICnStakingV3 contract.
type ICnStakingV3CompleteReviewInitialConditions struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterCompleteReviewInitialConditions is a free log retrieval operation binding the contract event 0x244ff9a3d72b1dc5a4bce7f05fb615395f2a8c7ad6ea525d2bac9030f75d7a9b.
//
// Solidity: event CompleteReviewInitialConditions()
func (_ICnStakingV3 *ICnStakingV3Filterer) FilterCompleteReviewInitialConditions(opts *bind.FilterOpts) (*ICnStakingV3CompleteReviewInitialConditionsIterator, error) {

	logs, sub, err := _ICnStakingV3.contract.FilterLogs(opts, "CompleteReviewInitialConditions")
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3CompleteReviewInitialConditionsIterator{contract: _ICnStakingV3.contract, event: "CompleteReviewInitialConditions", logs: logs, sub: sub}, nil
}

// WatchCompleteReviewInitialConditions is a free log subscription operation binding the contract event 0x244ff9a3d72b1dc5a4bce7f05fb615395f2a8c7ad6ea525d2bac9030f75d7a9b.
//
// Solidity: event CompleteReviewInitialConditions()
func (_ICnStakingV3 *ICnStakingV3Filterer) WatchCompleteReviewInitialConditions(opts *bind.WatchOpts, sink chan<- *ICnStakingV3CompleteReviewInitialConditions) (event.Subscription, error) {

	logs, sub, err := _ICnStakingV3.contract.WatchLogs(opts, "CompleteReviewInitialConditions")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3CompleteReviewInitialConditions)
				if err := _ICnStakingV3.contract.UnpackLog(event, "CompleteReviewInitialConditions", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCompleteReviewInitialConditions is a log parse operation binding the contract event 0x244ff9a3d72b1dc5a4bce7f05fb615395f2a8c7ad6ea525d2bac9030f75d7a9b.
//
// Solidity: event CompleteReviewInitialConditions()
func (_ICnStakingV3 *ICnStakingV3Filterer) ParseCompleteReviewInitialConditions(log types.Log) (*ICnStakingV3CompleteReviewInitialConditions, error) {
	event := new(ICnStakingV3CompleteReviewInitialConditions)
	if err := _ICnStakingV3.contract.UnpackLog(event, "CompleteReviewInitialConditions", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3DelegateKaiaIterator is returned from FilterDelegateKaia and is used to iterate over the raw logs and unpacked data for DelegateKaia events raised by the ICnStakingV3 contract.
type ICnStakingV3DelegateKaiaIterator struct {
	Event *ICnStakingV3DelegateKaia // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3DelegateKaiaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3DelegateKaia)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3DelegateKaia)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3DelegateKaiaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3DelegateKaiaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3DelegateKaia represents a DelegateKaia event raised by the ICnStakingV3 contract.
type ICnStakingV3DelegateKaia struct {
	From  common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDelegateKaia is a free log retrieval operation binding the contract event 0x8ecbcbd560048c1f474847748189e8c43f1fdee737fbd34523b04b5a9bbdffaa.
//
// Solidity: event DelegateKaia(address indexed from, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) FilterDelegateKaia(opts *bind.FilterOpts, from []common.Address) (*ICnStakingV3DelegateKaiaIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ICnStakingV3.contract.FilterLogs(opts, "DelegateKaia", fromRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3DelegateKaiaIterator{contract: _ICnStakingV3.contract, event: "DelegateKaia", logs: logs, sub: sub}, nil
}

// WatchDelegateKaia is a free log subscription operation binding the contract event 0x8ecbcbd560048c1f474847748189e8c43f1fdee737fbd34523b04b5a9bbdffaa.
//
// Solidity: event DelegateKaia(address indexed from, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) WatchDelegateKaia(opts *bind.WatchOpts, sink chan<- *ICnStakingV3DelegateKaia, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ICnStakingV3.contract.WatchLogs(opts, "DelegateKaia", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3DelegateKaia)
				if err := _ICnStakingV3.contract.UnpackLog(event, "DelegateKaia", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateKaia is a log parse operation binding the contract event 0x8ecbcbd560048c1f474847748189e8c43f1fdee737fbd34523b04b5a9bbdffaa.
//
// Solidity: event DelegateKaia(address indexed from, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) ParseDelegateKaia(log types.Log) (*ICnStakingV3DelegateKaia, error) {
	event := new(ICnStakingV3DelegateKaia)
	if err := _ICnStakingV3.contract.UnpackLog(event, "DelegateKaia", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3DeployCnStakingV3Iterator is returned from FilterDeployCnStakingV3 and is used to iterate over the raw logs and unpacked data for DeployCnStakingV3 events raised by the ICnStakingV3 contract.
type ICnStakingV3DeployCnStakingV3Iterator struct {
	Event *ICnStakingV3DeployCnStakingV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3DeployCnStakingV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3DeployCnStakingV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3DeployCnStakingV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3DeployCnStakingV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3DeployCnStakingV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3DeployCnStakingV3 represents a DeployCnStakingV3 event raised by the ICnStakingV3 contract.
type ICnStakingV3DeployCnStakingV3 struct {
	ContractType  string
	NodeId        common.Address
	RewardAddress common.Address
	UnlockTime    []*big.Int
	UnlockAmount  []*big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterDeployCnStakingV3 is a free log retrieval operation binding the contract event 0x8ceb5a03da525381440f64ae9f54fa4cb32a6299f0521f5261edd8839a0f3265.
//
// Solidity: event DeployCnStakingV3(string contractType, address nodeId, address rewardAddress, uint256[] unlockTime, uint256[] unlockAmount)
func (_ICnStakingV3 *ICnStakingV3Filterer) FilterDeployCnStakingV3(opts *bind.FilterOpts) (*ICnStakingV3DeployCnStakingV3Iterator, error) {

	logs, sub, err := _ICnStakingV3.contract.FilterLogs(opts, "DeployCnStakingV3")
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3DeployCnStakingV3Iterator{contract: _ICnStakingV3.contract, event: "DeployCnStakingV3", logs: logs, sub: sub}, nil
}

// WatchDeployCnStakingV3 is a free log subscription operation binding the contract event 0x8ceb5a03da525381440f64ae9f54fa4cb32a6299f0521f5261edd8839a0f3265.
//
// Solidity: event DeployCnStakingV3(string contractType, address nodeId, address rewardAddress, uint256[] unlockTime, uint256[] unlockAmount)
func (_ICnStakingV3 *ICnStakingV3Filterer) WatchDeployCnStakingV3(opts *bind.WatchOpts, sink chan<- *ICnStakingV3DeployCnStakingV3) (event.Subscription, error) {

	logs, sub, err := _ICnStakingV3.contract.WatchLogs(opts, "DeployCnStakingV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3DeployCnStakingV3)
				if err := _ICnStakingV3.contract.UnpackLog(event, "DeployCnStakingV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployCnStakingV3 is a log parse operation binding the contract event 0x8ceb5a03da525381440f64ae9f54fa4cb32a6299f0521f5261edd8839a0f3265.
//
// Solidity: event DeployCnStakingV3(string contractType, address nodeId, address rewardAddress, uint256[] unlockTime, uint256[] unlockAmount)
func (_ICnStakingV3 *ICnStakingV3Filterer) ParseDeployCnStakingV3(log types.Log) (*ICnStakingV3DeployCnStakingV3, error) {
	event := new(ICnStakingV3DeployCnStakingV3)
	if err := _ICnStakingV3.contract.UnpackLog(event, "DeployCnStakingV3", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3DepositLockupStakingAndInitIterator is returned from FilterDepositLockupStakingAndInit and is used to iterate over the raw logs and unpacked data for DepositLockupStakingAndInit events raised by the ICnStakingV3 contract.
type ICnStakingV3DepositLockupStakingAndInitIterator struct {
	Event *ICnStakingV3DepositLockupStakingAndInit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3DepositLockupStakingAndInitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3DepositLockupStakingAndInit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3DepositLockupStakingAndInit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3DepositLockupStakingAndInitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3DepositLockupStakingAndInitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3DepositLockupStakingAndInit represents a DepositLockupStakingAndInit event raised by the ICnStakingV3 contract.
type ICnStakingV3DepositLockupStakingAndInit struct {
	From  common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDepositLockupStakingAndInit is a free log retrieval operation binding the contract event 0x2b3c5e8e58d7d1e42ccd071c6f749d53f9ee506020a81fad9ff98140ccccde69.
//
// Solidity: event DepositLockupStakingAndInit(address indexed from, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) FilterDepositLockupStakingAndInit(opts *bind.FilterOpts, from []common.Address) (*ICnStakingV3DepositLockupStakingAndInitIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ICnStakingV3.contract.FilterLogs(opts, "DepositLockupStakingAndInit", fromRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3DepositLockupStakingAndInitIterator{contract: _ICnStakingV3.contract, event: "DepositLockupStakingAndInit", logs: logs, sub: sub}, nil
}

// WatchDepositLockupStakingAndInit is a free log subscription operation binding the contract event 0x2b3c5e8e58d7d1e42ccd071c6f749d53f9ee506020a81fad9ff98140ccccde69.
//
// Solidity: event DepositLockupStakingAndInit(address indexed from, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) WatchDepositLockupStakingAndInit(opts *bind.WatchOpts, sink chan<- *ICnStakingV3DepositLockupStakingAndInit, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ICnStakingV3.contract.WatchLogs(opts, "DepositLockupStakingAndInit", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3DepositLockupStakingAndInit)
				if err := _ICnStakingV3.contract.UnpackLog(event, "DepositLockupStakingAndInit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositLockupStakingAndInit is a log parse operation binding the contract event 0x2b3c5e8e58d7d1e42ccd071c6f749d53f9ee506020a81fad9ff98140ccccde69.
//
// Solidity: event DepositLockupStakingAndInit(address indexed from, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) ParseDepositLockupStakingAndInit(log types.Log) (*ICnStakingV3DepositLockupStakingAndInit, error) {
	event := new(ICnStakingV3DepositLockupStakingAndInit)
	if err := _ICnStakingV3.contract.UnpackLog(event, "DepositLockupStakingAndInit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3HandleRedelegationIterator is returned from FilterHandleRedelegation and is used to iterate over the raw logs and unpacked data for HandleRedelegation events raised by the ICnStakingV3 contract.
type ICnStakingV3HandleRedelegationIterator struct {
	Event *ICnStakingV3HandleRedelegation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3HandleRedelegationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3HandleRedelegation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3HandleRedelegation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3HandleRedelegationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3HandleRedelegationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3HandleRedelegation represents a HandleRedelegation event raised by the ICnStakingV3 contract.
type ICnStakingV3HandleRedelegation struct {
	User              common.Address
	PrevCnStakingV3   common.Address
	TargetCnStakingV3 common.Address
	Value             *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterHandleRedelegation is a free log retrieval operation binding the contract event 0xcbbd772ac9792b90fb77aa3194b0279ec4dbea1880ecc3674ecd2f4bf39b0c90.
//
// Solidity: event HandleRedelegation(address indexed user, address indexed prevCnStakingV3, address indexed targetCnStakingV3, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) FilterHandleRedelegation(opts *bind.FilterOpts, user []common.Address, prevCnStakingV3 []common.Address, targetCnStakingV3 []common.Address) (*ICnStakingV3HandleRedelegationIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var prevCnStakingV3Rule []interface{}
	for _, prevCnStakingV3Item := range prevCnStakingV3 {
		prevCnStakingV3Rule = append(prevCnStakingV3Rule, prevCnStakingV3Item)
	}
	var targetCnStakingV3Rule []interface{}
	for _, targetCnStakingV3Item := range targetCnStakingV3 {
		targetCnStakingV3Rule = append(targetCnStakingV3Rule, targetCnStakingV3Item)
	}

	logs, sub, err := _ICnStakingV3.contract.FilterLogs(opts, "HandleRedelegation", userRule, prevCnStakingV3Rule, targetCnStakingV3Rule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3HandleRedelegationIterator{contract: _ICnStakingV3.contract, event: "HandleRedelegation", logs: logs, sub: sub}, nil
}

// WatchHandleRedelegation is a free log subscription operation binding the contract event 0xcbbd772ac9792b90fb77aa3194b0279ec4dbea1880ecc3674ecd2f4bf39b0c90.
//
// Solidity: event HandleRedelegation(address indexed user, address indexed prevCnStakingV3, address indexed targetCnStakingV3, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) WatchHandleRedelegation(opts *bind.WatchOpts, sink chan<- *ICnStakingV3HandleRedelegation, user []common.Address, prevCnStakingV3 []common.Address, targetCnStakingV3 []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var prevCnStakingV3Rule []interface{}
	for _, prevCnStakingV3Item := range prevCnStakingV3 {
		prevCnStakingV3Rule = append(prevCnStakingV3Rule, prevCnStakingV3Item)
	}
	var targetCnStakingV3Rule []interface{}
	for _, targetCnStakingV3Item := range targetCnStakingV3 {
		targetCnStakingV3Rule = append(targetCnStakingV3Rule, targetCnStakingV3Item)
	}

	logs, sub, err := _ICnStakingV3.contract.WatchLogs(opts, "HandleRedelegation", userRule, prevCnStakingV3Rule, targetCnStakingV3Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3HandleRedelegation)
				if err := _ICnStakingV3.contract.UnpackLog(event, "HandleRedelegation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHandleRedelegation is a log parse operation binding the contract event 0xcbbd772ac9792b90fb77aa3194b0279ec4dbea1880ecc3674ecd2f4bf39b0c90.
//
// Solidity: event HandleRedelegation(address indexed user, address indexed prevCnStakingV3, address indexed targetCnStakingV3, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) ParseHandleRedelegation(log types.Log) (*ICnStakingV3HandleRedelegation, error) {
	event := new(ICnStakingV3HandleRedelegation)
	if err := _ICnStakingV3.contract.UnpackLog(event, "HandleRedelegation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3RedelegationIterator is returned from FilterRedelegation and is used to iterate over the raw logs and unpacked data for Redelegation events raised by the ICnStakingV3 contract.
type ICnStakingV3RedelegationIterator struct {
	Event *ICnStakingV3Redelegation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3RedelegationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3Redelegation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3Redelegation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3RedelegationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3RedelegationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3Redelegation represents a Redelegation event raised by the ICnStakingV3 contract.
type ICnStakingV3Redelegation struct {
	User              common.Address
	TargetCnStakingV3 common.Address
	Value             *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRedelegation is a free log retrieval operation binding the contract event 0x4830c21a6eb4b2b3af6c4d24cfbd78ce437d5b690aac56ceec54df1d4d24e1a0.
//
// Solidity: event Redelegation(address indexed user, address indexed targetCnStakingV3, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) FilterRedelegation(opts *bind.FilterOpts, user []common.Address, targetCnStakingV3 []common.Address) (*ICnStakingV3RedelegationIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var targetCnStakingV3Rule []interface{}
	for _, targetCnStakingV3Item := range targetCnStakingV3 {
		targetCnStakingV3Rule = append(targetCnStakingV3Rule, targetCnStakingV3Item)
	}

	logs, sub, err := _ICnStakingV3.contract.FilterLogs(opts, "Redelegation", userRule, targetCnStakingV3Rule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3RedelegationIterator{contract: _ICnStakingV3.contract, event: "Redelegation", logs: logs, sub: sub}, nil
}

// WatchRedelegation is a free log subscription operation binding the contract event 0x4830c21a6eb4b2b3af6c4d24cfbd78ce437d5b690aac56ceec54df1d4d24e1a0.
//
// Solidity: event Redelegation(address indexed user, address indexed targetCnStakingV3, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) WatchRedelegation(opts *bind.WatchOpts, sink chan<- *ICnStakingV3Redelegation, user []common.Address, targetCnStakingV3 []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var targetCnStakingV3Rule []interface{}
	for _, targetCnStakingV3Item := range targetCnStakingV3 {
		targetCnStakingV3Rule = append(targetCnStakingV3Rule, targetCnStakingV3Item)
	}

	logs, sub, err := _ICnStakingV3.contract.WatchLogs(opts, "Redelegation", userRule, targetCnStakingV3Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3Redelegation)
				if err := _ICnStakingV3.contract.UnpackLog(event, "Redelegation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedelegation is a log parse operation binding the contract event 0x4830c21a6eb4b2b3af6c4d24cfbd78ce437d5b690aac56ceec54df1d4d24e1a0.
//
// Solidity: event Redelegation(address indexed user, address indexed targetCnStakingV3, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) ParseRedelegation(log types.Log) (*ICnStakingV3Redelegation, error) {
	event := new(ICnStakingV3Redelegation)
	if err := _ICnStakingV3.contract.UnpackLog(event, "Redelegation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3ReviewInitialConditionsIterator is returned from FilterReviewInitialConditions and is used to iterate over the raw logs and unpacked data for ReviewInitialConditions events raised by the ICnStakingV3 contract.
type ICnStakingV3ReviewInitialConditionsIterator struct {
	Event *ICnStakingV3ReviewInitialConditions // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3ReviewInitialConditionsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3ReviewInitialConditions)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3ReviewInitialConditions)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3ReviewInitialConditionsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3ReviewInitialConditionsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3ReviewInitialConditions represents a ReviewInitialConditions event raised by the ICnStakingV3 contract.
type ICnStakingV3ReviewInitialConditions struct {
	From common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterReviewInitialConditions is a free log retrieval operation binding the contract event 0x65d287f4118b03f8cc979b433fd0b2246074200dd5da70c9daf204aaa0da1a2c.
//
// Solidity: event ReviewInitialConditions(address indexed from)
func (_ICnStakingV3 *ICnStakingV3Filterer) FilterReviewInitialConditions(opts *bind.FilterOpts, from []common.Address) (*ICnStakingV3ReviewInitialConditionsIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ICnStakingV3.contract.FilterLogs(opts, "ReviewInitialConditions", fromRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3ReviewInitialConditionsIterator{contract: _ICnStakingV3.contract, event: "ReviewInitialConditions", logs: logs, sub: sub}, nil
}

// WatchReviewInitialConditions is a free log subscription operation binding the contract event 0x65d287f4118b03f8cc979b433fd0b2246074200dd5da70c9daf204aaa0da1a2c.
//
// Solidity: event ReviewInitialConditions(address indexed from)
func (_ICnStakingV3 *ICnStakingV3Filterer) WatchReviewInitialConditions(opts *bind.WatchOpts, sink chan<- *ICnStakingV3ReviewInitialConditions, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ICnStakingV3.contract.WatchLogs(opts, "ReviewInitialConditions", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3ReviewInitialConditions)
				if err := _ICnStakingV3.contract.UnpackLog(event, "ReviewInitialConditions", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReviewInitialConditions is a log parse operation binding the contract event 0x65d287f4118b03f8cc979b433fd0b2246074200dd5da70c9daf204aaa0da1a2c.
//
// Solidity: event ReviewInitialConditions(address indexed from)
func (_ICnStakingV3 *ICnStakingV3Filterer) ParseReviewInitialConditions(log types.Log) (*ICnStakingV3ReviewInitialConditions, error) {
	event := new(ICnStakingV3ReviewInitialConditions)
	if err := _ICnStakingV3.contract.UnpackLog(event, "ReviewInitialConditions", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3SetPublicDelegationIterator is returned from FilterSetPublicDelegation and is used to iterate over the raw logs and unpacked data for SetPublicDelegation events raised by the ICnStakingV3 contract.
type ICnStakingV3SetPublicDelegationIterator struct {
	Event *ICnStakingV3SetPublicDelegation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3SetPublicDelegationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3SetPublicDelegation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3SetPublicDelegation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3SetPublicDelegationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3SetPublicDelegationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3SetPublicDelegation represents a SetPublicDelegation event raised by the ICnStakingV3 contract.
type ICnStakingV3SetPublicDelegation struct {
	From             common.Address
	PublicDelegation common.Address
	RewardAddress    common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterSetPublicDelegation is a free log retrieval operation binding the contract event 0x669ea85a3c8fdb578f28c81d130bb3cf68e5f3845d178688ae84abdba59c9030.
//
// Solidity: event SetPublicDelegation(address indexed from, address publicDelegation, address rewardAddress)
func (_ICnStakingV3 *ICnStakingV3Filterer) FilterSetPublicDelegation(opts *bind.FilterOpts, from []common.Address) (*ICnStakingV3SetPublicDelegationIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ICnStakingV3.contract.FilterLogs(opts, "SetPublicDelegation", fromRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3SetPublicDelegationIterator{contract: _ICnStakingV3.contract, event: "SetPublicDelegation", logs: logs, sub: sub}, nil
}

// WatchSetPublicDelegation is a free log subscription operation binding the contract event 0x669ea85a3c8fdb578f28c81d130bb3cf68e5f3845d178688ae84abdba59c9030.
//
// Solidity: event SetPublicDelegation(address indexed from, address publicDelegation, address rewardAddress)
func (_ICnStakingV3 *ICnStakingV3Filterer) WatchSetPublicDelegation(opts *bind.WatchOpts, sink chan<- *ICnStakingV3SetPublicDelegation, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ICnStakingV3.contract.WatchLogs(opts, "SetPublicDelegation", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3SetPublicDelegation)
				if err := _ICnStakingV3.contract.UnpackLog(event, "SetPublicDelegation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetPublicDelegation is a log parse operation binding the contract event 0x669ea85a3c8fdb578f28c81d130bb3cf68e5f3845d178688ae84abdba59c9030.
//
// Solidity: event SetPublicDelegation(address indexed from, address publicDelegation, address rewardAddress)
func (_ICnStakingV3 *ICnStakingV3Filterer) ParseSetPublicDelegation(log types.Log) (*ICnStakingV3SetPublicDelegation, error) {
	event := new(ICnStakingV3SetPublicDelegation)
	if err := _ICnStakingV3.contract.UnpackLog(event, "SetPublicDelegation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3ToggleRedelegationIterator is returned from FilterToggleRedelegation and is used to iterate over the raw logs and unpacked data for ToggleRedelegation events raised by the ICnStakingV3 contract.
type ICnStakingV3ToggleRedelegationIterator struct {
	Event *ICnStakingV3ToggleRedelegation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3ToggleRedelegationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3ToggleRedelegation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3ToggleRedelegation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3ToggleRedelegationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3ToggleRedelegationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3ToggleRedelegation represents a ToggleRedelegation event raised by the ICnStakingV3 contract.
type ICnStakingV3ToggleRedelegation struct {
	IsRedelegationEnabled bool
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterToggleRedelegation is a free log retrieval operation binding the contract event 0x02efa9113845c402ffbbc237400eeba75de99c23f054459573f88caa5a941898.
//
// Solidity: event ToggleRedelegation(bool isRedelegationEnabled)
func (_ICnStakingV3 *ICnStakingV3Filterer) FilterToggleRedelegation(opts *bind.FilterOpts) (*ICnStakingV3ToggleRedelegationIterator, error) {

	logs, sub, err := _ICnStakingV3.contract.FilterLogs(opts, "ToggleRedelegation")
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3ToggleRedelegationIterator{contract: _ICnStakingV3.contract, event: "ToggleRedelegation", logs: logs, sub: sub}, nil
}

// WatchToggleRedelegation is a free log subscription operation binding the contract event 0x02efa9113845c402ffbbc237400eeba75de99c23f054459573f88caa5a941898.
//
// Solidity: event ToggleRedelegation(bool isRedelegationEnabled)
func (_ICnStakingV3 *ICnStakingV3Filterer) WatchToggleRedelegation(opts *bind.WatchOpts, sink chan<- *ICnStakingV3ToggleRedelegation) (event.Subscription, error) {

	logs, sub, err := _ICnStakingV3.contract.WatchLogs(opts, "ToggleRedelegation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3ToggleRedelegation)
				if err := _ICnStakingV3.contract.UnpackLog(event, "ToggleRedelegation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseToggleRedelegation is a log parse operation binding the contract event 0x02efa9113845c402ffbbc237400eeba75de99c23f054459573f88caa5a941898.
//
// Solidity: event ToggleRedelegation(bool isRedelegationEnabled)
func (_ICnStakingV3 *ICnStakingV3Filterer) ParseToggleRedelegation(log types.Log) (*ICnStakingV3ToggleRedelegation, error) {
	event := new(ICnStakingV3ToggleRedelegation)
	if err := _ICnStakingV3.contract.UnpackLog(event, "ToggleRedelegation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3UpdateGCIdIterator is returned from FilterUpdateGCId and is used to iterate over the raw logs and unpacked data for UpdateGCId events raised by the ICnStakingV3 contract.
type ICnStakingV3UpdateGCIdIterator struct {
	Event *ICnStakingV3UpdateGCId // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3UpdateGCIdIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3UpdateGCId)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3UpdateGCId)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3UpdateGCIdIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3UpdateGCIdIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3UpdateGCId represents a UpdateGCId event raised by the ICnStakingV3 contract.
type ICnStakingV3UpdateGCId struct {
	GcId *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterUpdateGCId is a free log retrieval operation binding the contract event 0x469cb2f3ce5d5e879269af625b54571651feb0ede6e83ee89b9c888648af514f.
//
// Solidity: event UpdateGCId(uint256 indexed gcId)
func (_ICnStakingV3 *ICnStakingV3Filterer) FilterUpdateGCId(opts *bind.FilterOpts, gcId []*big.Int) (*ICnStakingV3UpdateGCIdIterator, error) {

	var gcIdRule []interface{}
	for _, gcIdItem := range gcId {
		gcIdRule = append(gcIdRule, gcIdItem)
	}

	logs, sub, err := _ICnStakingV3.contract.FilterLogs(opts, "UpdateGCId", gcIdRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3UpdateGCIdIterator{contract: _ICnStakingV3.contract, event: "UpdateGCId", logs: logs, sub: sub}, nil
}

// WatchUpdateGCId is a free log subscription operation binding the contract event 0x469cb2f3ce5d5e879269af625b54571651feb0ede6e83ee89b9c888648af514f.
//
// Solidity: event UpdateGCId(uint256 indexed gcId)
func (_ICnStakingV3 *ICnStakingV3Filterer) WatchUpdateGCId(opts *bind.WatchOpts, sink chan<- *ICnStakingV3UpdateGCId, gcId []*big.Int) (event.Subscription, error) {

	var gcIdRule []interface{}
	for _, gcIdItem := range gcId {
		gcIdRule = append(gcIdRule, gcIdItem)
	}

	logs, sub, err := _ICnStakingV3.contract.WatchLogs(opts, "UpdateGCId", gcIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3UpdateGCId)
				if err := _ICnStakingV3.contract.UnpackLog(event, "UpdateGCId", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateGCId is a log parse operation binding the contract event 0x469cb2f3ce5d5e879269af625b54571651feb0ede6e83ee89b9c888648af514f.
//
// Solidity: event UpdateGCId(uint256 indexed gcId)
func (_ICnStakingV3 *ICnStakingV3Filterer) ParseUpdateGCId(log types.Log) (*ICnStakingV3UpdateGCId, error) {
	event := new(ICnStakingV3UpdateGCId)
	if err := _ICnStakingV3.contract.UnpackLog(event, "UpdateGCId", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3UpdateRewardAddressIterator is returned from FilterUpdateRewardAddress and is used to iterate over the raw logs and unpacked data for UpdateRewardAddress events raised by the ICnStakingV3 contract.
type ICnStakingV3UpdateRewardAddressIterator struct {
	Event *ICnStakingV3UpdateRewardAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3UpdateRewardAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3UpdateRewardAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3UpdateRewardAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3UpdateRewardAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3UpdateRewardAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3UpdateRewardAddress represents a UpdateRewardAddress event raised by the ICnStakingV3 contract.
type ICnStakingV3UpdateRewardAddress struct {
	RewardAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterUpdateRewardAddress is a free log retrieval operation binding the contract event 0xbe1849831e6775a2022006aeebcc00f70d10bc4202c8187e215ad9e9911f2b06.
//
// Solidity: event UpdateRewardAddress(address indexed rewardAddress)
func (_ICnStakingV3 *ICnStakingV3Filterer) FilterUpdateRewardAddress(opts *bind.FilterOpts, rewardAddress []common.Address) (*ICnStakingV3UpdateRewardAddressIterator, error) {

	var rewardAddressRule []interface{}
	for _, rewardAddressItem := range rewardAddress {
		rewardAddressRule = append(rewardAddressRule, rewardAddressItem)
	}

	logs, sub, err := _ICnStakingV3.contract.FilterLogs(opts, "UpdateRewardAddress", rewardAddressRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3UpdateRewardAddressIterator{contract: _ICnStakingV3.contract, event: "UpdateRewardAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateRewardAddress is a free log subscription operation binding the contract event 0xbe1849831e6775a2022006aeebcc00f70d10bc4202c8187e215ad9e9911f2b06.
//
// Solidity: event UpdateRewardAddress(address indexed rewardAddress)
func (_ICnStakingV3 *ICnStakingV3Filterer) WatchUpdateRewardAddress(opts *bind.WatchOpts, sink chan<- *ICnStakingV3UpdateRewardAddress, rewardAddress []common.Address) (event.Subscription, error) {

	var rewardAddressRule []interface{}
	for _, rewardAddressItem := range rewardAddress {
		rewardAddressRule = append(rewardAddressRule, rewardAddressItem)
	}

	logs, sub, err := _ICnStakingV3.contract.WatchLogs(opts, "UpdateRewardAddress", rewardAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3UpdateRewardAddress)
				if err := _ICnStakingV3.contract.UnpackLog(event, "UpdateRewardAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRewardAddress is a log parse operation binding the contract event 0xbe1849831e6775a2022006aeebcc00f70d10bc4202c8187e215ad9e9911f2b06.
//
// Solidity: event UpdateRewardAddress(address indexed rewardAddress)
func (_ICnStakingV3 *ICnStakingV3Filterer) ParseUpdateRewardAddress(log types.Log) (*ICnStakingV3UpdateRewardAddress, error) {
	event := new(ICnStakingV3UpdateRewardAddress)
	if err := _ICnStakingV3.contract.UnpackLog(event, "UpdateRewardAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3UpdateStakingTrackerIterator is returned from FilterUpdateStakingTracker and is used to iterate over the raw logs and unpacked data for UpdateStakingTracker events raised by the ICnStakingV3 contract.
type ICnStakingV3UpdateStakingTrackerIterator struct {
	Event *ICnStakingV3UpdateStakingTracker // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3UpdateStakingTrackerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3UpdateStakingTracker)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3UpdateStakingTracker)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3UpdateStakingTrackerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3UpdateStakingTrackerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3UpdateStakingTracker represents a UpdateStakingTracker event raised by the ICnStakingV3 contract.
type ICnStakingV3UpdateStakingTracker struct {
	StakingTracker common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpdateStakingTracker is a free log retrieval operation binding the contract event 0xef25e066ac14a10491ae1ac89a8247282158e169968aaccbceb257d0878bdfd0.
//
// Solidity: event UpdateStakingTracker(address indexed stakingTracker)
func (_ICnStakingV3 *ICnStakingV3Filterer) FilterUpdateStakingTracker(opts *bind.FilterOpts, stakingTracker []common.Address) (*ICnStakingV3UpdateStakingTrackerIterator, error) {

	var stakingTrackerRule []interface{}
	for _, stakingTrackerItem := range stakingTracker {
		stakingTrackerRule = append(stakingTrackerRule, stakingTrackerItem)
	}

	logs, sub, err := _ICnStakingV3.contract.FilterLogs(opts, "UpdateStakingTracker", stakingTrackerRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3UpdateStakingTrackerIterator{contract: _ICnStakingV3.contract, event: "UpdateStakingTracker", logs: logs, sub: sub}, nil
}

// WatchUpdateStakingTracker is a free log subscription operation binding the contract event 0xef25e066ac14a10491ae1ac89a8247282158e169968aaccbceb257d0878bdfd0.
//
// Solidity: event UpdateStakingTracker(address indexed stakingTracker)
func (_ICnStakingV3 *ICnStakingV3Filterer) WatchUpdateStakingTracker(opts *bind.WatchOpts, sink chan<- *ICnStakingV3UpdateStakingTracker, stakingTracker []common.Address) (event.Subscription, error) {

	var stakingTrackerRule []interface{}
	for _, stakingTrackerItem := range stakingTracker {
		stakingTrackerRule = append(stakingTrackerRule, stakingTrackerItem)
	}

	logs, sub, err := _ICnStakingV3.contract.WatchLogs(opts, "UpdateStakingTracker", stakingTrackerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3UpdateStakingTracker)
				if err := _ICnStakingV3.contract.UnpackLog(event, "UpdateStakingTracker", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateStakingTracker is a log parse operation binding the contract event 0xef25e066ac14a10491ae1ac89a8247282158e169968aaccbceb257d0878bdfd0.
//
// Solidity: event UpdateStakingTracker(address indexed stakingTracker)
func (_ICnStakingV3 *ICnStakingV3Filterer) ParseUpdateStakingTracker(log types.Log) (*ICnStakingV3UpdateStakingTracker, error) {
	event := new(ICnStakingV3UpdateStakingTracker)
	if err := _ICnStakingV3.contract.UnpackLog(event, "UpdateStakingTracker", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3UpdateVoterAddressIterator is returned from FilterUpdateVoterAddress and is used to iterate over the raw logs and unpacked data for UpdateVoterAddress events raised by the ICnStakingV3 contract.
type ICnStakingV3UpdateVoterAddressIterator struct {
	Event *ICnStakingV3UpdateVoterAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3UpdateVoterAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3UpdateVoterAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3UpdateVoterAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3UpdateVoterAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3UpdateVoterAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3UpdateVoterAddress represents a UpdateVoterAddress event raised by the ICnStakingV3 contract.
type ICnStakingV3UpdateVoterAddress struct {
	VoterAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterUpdateVoterAddress is a free log retrieval operation binding the contract event 0x61ee88e3c7513df1e6e214415e781030278cf98b7fbb9d6d53720ee8aeb654ee.
//
// Solidity: event UpdateVoterAddress(address indexed voterAddress)
func (_ICnStakingV3 *ICnStakingV3Filterer) FilterUpdateVoterAddress(opts *bind.FilterOpts, voterAddress []common.Address) (*ICnStakingV3UpdateVoterAddressIterator, error) {

	var voterAddressRule []interface{}
	for _, voterAddressItem := range voterAddress {
		voterAddressRule = append(voterAddressRule, voterAddressItem)
	}

	logs, sub, err := _ICnStakingV3.contract.FilterLogs(opts, "UpdateVoterAddress", voterAddressRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3UpdateVoterAddressIterator{contract: _ICnStakingV3.contract, event: "UpdateVoterAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateVoterAddress is a free log subscription operation binding the contract event 0x61ee88e3c7513df1e6e214415e781030278cf98b7fbb9d6d53720ee8aeb654ee.
//
// Solidity: event UpdateVoterAddress(address indexed voterAddress)
func (_ICnStakingV3 *ICnStakingV3Filterer) WatchUpdateVoterAddress(opts *bind.WatchOpts, sink chan<- *ICnStakingV3UpdateVoterAddress, voterAddress []common.Address) (event.Subscription, error) {

	var voterAddressRule []interface{}
	for _, voterAddressItem := range voterAddress {
		voterAddressRule = append(voterAddressRule, voterAddressItem)
	}

	logs, sub, err := _ICnStakingV3.contract.WatchLogs(opts, "UpdateVoterAddress", voterAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3UpdateVoterAddress)
				if err := _ICnStakingV3.contract.UnpackLog(event, "UpdateVoterAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateVoterAddress is a log parse operation binding the contract event 0x61ee88e3c7513df1e6e214415e781030278cf98b7fbb9d6d53720ee8aeb654ee.
//
// Solidity: event UpdateVoterAddress(address indexed voterAddress)
func (_ICnStakingV3 *ICnStakingV3Filterer) ParseUpdateVoterAddress(log types.Log) (*ICnStakingV3UpdateVoterAddress, error) {
	event := new(ICnStakingV3UpdateVoterAddress)
	if err := _ICnStakingV3.contract.UnpackLog(event, "UpdateVoterAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3WithdrawApprovedStakingIterator is returned from FilterWithdrawApprovedStaking and is used to iterate over the raw logs and unpacked data for WithdrawApprovedStaking events raised by the ICnStakingV3 contract.
type ICnStakingV3WithdrawApprovedStakingIterator struct {
	Event *ICnStakingV3WithdrawApprovedStaking // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3WithdrawApprovedStakingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3WithdrawApprovedStaking)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3WithdrawApprovedStaking)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3WithdrawApprovedStakingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3WithdrawApprovedStakingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3WithdrawApprovedStaking represents a WithdrawApprovedStaking event raised by the ICnStakingV3 contract.
type ICnStakingV3WithdrawApprovedStaking struct {
	ApprovedWithdrawalId *big.Int
	To                   common.Address
	Value                *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterWithdrawApprovedStaking is a free log retrieval operation binding the contract event 0x7a2d48d1df1249429730a253e5713a7d7a2024913de2fbccafdf36efdd32bf05.
//
// Solidity: event WithdrawApprovedStaking(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) FilterWithdrawApprovedStaking(opts *bind.FilterOpts, approvedWithdrawalId []*big.Int, to []common.Address) (*ICnStakingV3WithdrawApprovedStakingIterator, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ICnStakingV3.contract.FilterLogs(opts, "WithdrawApprovedStaking", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3WithdrawApprovedStakingIterator{contract: _ICnStakingV3.contract, event: "WithdrawApprovedStaking", logs: logs, sub: sub}, nil
}

// WatchWithdrawApprovedStaking is a free log subscription operation binding the contract event 0x7a2d48d1df1249429730a253e5713a7d7a2024913de2fbccafdf36efdd32bf05.
//
// Solidity: event WithdrawApprovedStaking(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) WatchWithdrawApprovedStaking(opts *bind.WatchOpts, sink chan<- *ICnStakingV3WithdrawApprovedStaking, approvedWithdrawalId []*big.Int, to []common.Address) (event.Subscription, error) {

	var approvedWithdrawalIdRule []interface{}
	for _, approvedWithdrawalIdItem := range approvedWithdrawalId {
		approvedWithdrawalIdRule = append(approvedWithdrawalIdRule, approvedWithdrawalIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ICnStakingV3.contract.WatchLogs(opts, "WithdrawApprovedStaking", approvedWithdrawalIdRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3WithdrawApprovedStaking)
				if err := _ICnStakingV3.contract.UnpackLog(event, "WithdrawApprovedStaking", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawApprovedStaking is a log parse operation binding the contract event 0x7a2d48d1df1249429730a253e5713a7d7a2024913de2fbccafdf36efdd32bf05.
//
// Solidity: event WithdrawApprovedStaking(uint256 indexed approvedWithdrawalId, address indexed to, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) ParseWithdrawApprovedStaking(log types.Log) (*ICnStakingV3WithdrawApprovedStaking, error) {
	event := new(ICnStakingV3WithdrawApprovedStaking)
	if err := _ICnStakingV3.contract.UnpackLog(event, "WithdrawApprovedStaking", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3WithdrawLockupStakingIterator is returned from FilterWithdrawLockupStaking and is used to iterate over the raw logs and unpacked data for WithdrawLockupStaking events raised by the ICnStakingV3 contract.
type ICnStakingV3WithdrawLockupStakingIterator struct {
	Event *ICnStakingV3WithdrawLockupStaking // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3WithdrawLockupStakingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3WithdrawLockupStaking)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3WithdrawLockupStaking)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3WithdrawLockupStakingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3WithdrawLockupStakingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3WithdrawLockupStaking represents a WithdrawLockupStaking event raised by the ICnStakingV3 contract.
type ICnStakingV3WithdrawLockupStaking struct {
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWithdrawLockupStaking is a free log retrieval operation binding the contract event 0x2d9d65e4fcab96e158761a8d3cc0bd7fd76951ab5574667b07190da171777470.
//
// Solidity: event WithdrawLockupStaking(address indexed to, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) FilterWithdrawLockupStaking(opts *bind.FilterOpts, to []common.Address) (*ICnStakingV3WithdrawLockupStakingIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ICnStakingV3.contract.FilterLogs(opts, "WithdrawLockupStaking", toRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3WithdrawLockupStakingIterator{contract: _ICnStakingV3.contract, event: "WithdrawLockupStaking", logs: logs, sub: sub}, nil
}

// WatchWithdrawLockupStaking is a free log subscription operation binding the contract event 0x2d9d65e4fcab96e158761a8d3cc0bd7fd76951ab5574667b07190da171777470.
//
// Solidity: event WithdrawLockupStaking(address indexed to, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) WatchWithdrawLockupStaking(opts *bind.WatchOpts, sink chan<- *ICnStakingV3WithdrawLockupStaking, to []common.Address) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ICnStakingV3.contract.WatchLogs(opts, "WithdrawLockupStaking", toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3WithdrawLockupStaking)
				if err := _ICnStakingV3.contract.UnpackLog(event, "WithdrawLockupStaking", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawLockupStaking is a log parse operation binding the contract event 0x2d9d65e4fcab96e158761a8d3cc0bd7fd76951ab5574667b07190da171777470.
//
// Solidity: event WithdrawLockupStaking(address indexed to, uint256 value)
func (_ICnStakingV3 *ICnStakingV3Filterer) ParseWithdrawLockupStaking(log types.Log) (*ICnStakingV3WithdrawLockupStaking, error) {
	event := new(ICnStakingV3WithdrawLockupStaking)
	if err := _ICnStakingV3.contract.UnpackLog(event, "WithdrawLockupStaking", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3MultiSigMetaData contains all meta data concerning the ICnStakingV3MultiSig contract.
var ICnStakingV3MultiSigMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"}],\"name\":\"CancelRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ClearRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"confirmers\",\"type\":\"address[]\"}],\"name\":\"ConfirmRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"DeleteAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contractType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractValidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"cnAdminList\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requirement\",\"type\":\"uint256\"}],\"name\":\"DeployCnStakingV3MultiSig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"}],\"name\":\"ExecuteRequestFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"}],\"name\":\"ExecuteRequestSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"confirmers\",\"type\":\"address[]\"}],\"name\":\"RevokeConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"}],\"name\":\"SubmitRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requirement\",\"type\":\"uint256\"}],\"name\":\"UpdateRequirement\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ADMIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pos\",\"type\":\"uint256\"}],\"name\":\"adminList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"_functionId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_firstArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_secondArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_thirdArg\",\"type\":\"bytes32\"}],\"name\":\"confirmRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"deleteAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"enumICnStakingV3MultiSig.RequestState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"getRequestIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getRequestInfo\",\"outputs\":[{\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"firstArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secondArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"thirdArg\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"confirmers\",\"type\":\"address[]\"},{\"internalType\":\"enumICnStakingV3MultiSig.RequestState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getRequestState\",\"outputs\":[{\"internalType\":\"enumICnStakingV3MultiSig.RequestState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReviewers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"reviewers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractValidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"adminListArr\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"requirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"unlockTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unlockAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"allReviewed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInitialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClearedId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"enumICnStakingV3MultiSig.Functions\",\"name\":\"_functionId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_firstArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_secondArg\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_thirdArg\",\"type\":\"bytes32\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"submitAddAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"submitApproveStakingWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_approvedWithdrawalId\",\"type\":\"uint256\"}],\"name\":\"submitCancelApprovedStakingWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitClearRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"submitDeleteAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitToggleRedelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"submitUpdateRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddress\",\"type\":\"address\"}],\"name\":\"submitUpdateRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tracker\",\"type\":\"address\"}],\"name\":\"submitUpdateStakingTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voterAddress\",\"type\":\"address\"}],\"name\":\"submitUpdateVoterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"submitWithdrawLockupStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"updateRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"58d65880": "MAX_ADMIN()",
		"70480275": "addAdmin(address)",
		"11117fc8": "adminList(uint256)",
		"4f97638f": "clearRequest()",
		"3b2d2aca": "confirmRequest(uint256,uint8,bytes32,bytes32,bytes32)",
		"7a5db068": "contractValidator()",
		"27e1f7df": "deleteAdmin(address)",
		"0fd440ec": "getRequestIds(uint256,uint256,uint8)",
		"0b816045": "getRequestInfo(uint256)",
		"ed979dd6": "getRequestState(uint256)",
		"75a87643": "getReviewers()",
		"1865c57d": "getState()",
		"24d7806c": "isAdmin(address)",
		"e7abb98d": "lastClearedId()",
		"5badbe4c": "requestCount()",
		"b7563930": "requirement()",
		"164990f8": "revokeConfirmation(uint256,uint8,bytes32,bytes32,bytes32)",
		"863f5c0a": "submitAddAdmin(address)",
		"7818097c": "submitApproveStakingWithdrawal(address,uint256)",
		"06b35d31": "submitCancelApprovedStakingWithdrawal(uint256)",
		"87cd9feb": "submitClearRequest()",
		"791b5123": "submitDeleteAdmin(address)",
		"2f890b1d": "submitToggleRedelegation()",
		"e748357b": "submitUpdateRequirement(uint256)",
		"069135af": "submitUpdateRewardAddress(address)",
		"0df5975c": "submitUpdateStakingTracker(address)",
		"b756e6ff": "submitUpdateVoterAddress(address)",
		"4b8bc6f8": "submitWithdrawLockupStaking(address,uint256)",
		"c47afb3a": "updateRequirement(uint256)",
	},
}

// ICnStakingV3MultiSigABI is the input ABI used to generate the binding from.
// Deprecated: Use ICnStakingV3MultiSigMetaData.ABI instead.
var ICnStakingV3MultiSigABI = ICnStakingV3MultiSigMetaData.ABI

// ICnStakingV3MultiSigBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const ICnStakingV3MultiSigBinRuntime = ``

// Deprecated: Use ICnStakingV3MultiSigMetaData.Sigs instead.
// ICnStakingV3MultiSigFuncSigs maps the 4-byte function signature to its string representation.
var ICnStakingV3MultiSigFuncSigs = ICnStakingV3MultiSigMetaData.Sigs

// ICnStakingV3MultiSig is an auto generated Go binding around a Kaia contract.
type ICnStakingV3MultiSig struct {
	ICnStakingV3MultiSigCaller     // Read-only binding to the contract
	ICnStakingV3MultiSigTransactor // Write-only binding to the contract
	ICnStakingV3MultiSigFilterer   // Log filterer for contract events
}

// ICnStakingV3MultiSigCaller is an auto generated read-only Go binding around a Kaia contract.
type ICnStakingV3MultiSigCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICnStakingV3MultiSigTransactor is an auto generated write-only Go binding around a Kaia contract.
type ICnStakingV3MultiSigTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICnStakingV3MultiSigFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type ICnStakingV3MultiSigFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICnStakingV3MultiSigSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type ICnStakingV3MultiSigSession struct {
	Contract     *ICnStakingV3MultiSig // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ICnStakingV3MultiSigCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type ICnStakingV3MultiSigCallerSession struct {
	Contract *ICnStakingV3MultiSigCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// ICnStakingV3MultiSigTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type ICnStakingV3MultiSigTransactorSession struct {
	Contract     *ICnStakingV3MultiSigTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// ICnStakingV3MultiSigRaw is an auto generated low-level Go binding around a Kaia contract.
type ICnStakingV3MultiSigRaw struct {
	Contract *ICnStakingV3MultiSig // Generic contract binding to access the raw methods on
}

// ICnStakingV3MultiSigCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type ICnStakingV3MultiSigCallerRaw struct {
	Contract *ICnStakingV3MultiSigCaller // Generic read-only contract binding to access the raw methods on
}

// ICnStakingV3MultiSigTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type ICnStakingV3MultiSigTransactorRaw struct {
	Contract *ICnStakingV3MultiSigTransactor // Generic write-only contract binding to access the raw methods on
}

// NewICnStakingV3MultiSig creates a new instance of ICnStakingV3MultiSig, bound to a specific deployed contract.
func NewICnStakingV3MultiSig(address common.Address, backend bind.ContractBackend) (*ICnStakingV3MultiSig, error) {
	contract, err := bindICnStakingV3MultiSig(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3MultiSig{ICnStakingV3MultiSigCaller: ICnStakingV3MultiSigCaller{contract: contract}, ICnStakingV3MultiSigTransactor: ICnStakingV3MultiSigTransactor{contract: contract}, ICnStakingV3MultiSigFilterer: ICnStakingV3MultiSigFilterer{contract: contract}}, nil
}

// NewICnStakingV3MultiSigCaller creates a new read-only instance of ICnStakingV3MultiSig, bound to a specific deployed contract.
func NewICnStakingV3MultiSigCaller(address common.Address, caller bind.ContractCaller) (*ICnStakingV3MultiSigCaller, error) {
	contract, err := bindICnStakingV3MultiSig(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3MultiSigCaller{contract: contract}, nil
}

// NewICnStakingV3MultiSigTransactor creates a new write-only instance of ICnStakingV3MultiSig, bound to a specific deployed contract.
func NewICnStakingV3MultiSigTransactor(address common.Address, transactor bind.ContractTransactor) (*ICnStakingV3MultiSigTransactor, error) {
	contract, err := bindICnStakingV3MultiSig(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3MultiSigTransactor{contract: contract}, nil
}

// NewICnStakingV3MultiSigFilterer creates a new log filterer instance of ICnStakingV3MultiSig, bound to a specific deployed contract.
func NewICnStakingV3MultiSigFilterer(address common.Address, filterer bind.ContractFilterer) (*ICnStakingV3MultiSigFilterer, error) {
	contract, err := bindICnStakingV3MultiSig(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3MultiSigFilterer{contract: contract}, nil
}

// bindICnStakingV3MultiSig binds a generic wrapper to an already deployed contract.
func bindICnStakingV3MultiSig(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ICnStakingV3MultiSigMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ICnStakingV3MultiSig.Contract.ICnStakingV3MultiSigCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.ICnStakingV3MultiSigTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.ICnStakingV3MultiSigTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ICnStakingV3MultiSig.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.contract.Transact(opts, method, params...)
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() view returns(uint256)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCaller) MAXADMIN(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ICnStakingV3MultiSig.contract.Call(opts, &out, "MAX_ADMIN")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() view returns(uint256)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) MAXADMIN() (*big.Int, error) {
	return _ICnStakingV3MultiSig.Contract.MAXADMIN(&_ICnStakingV3MultiSig.CallOpts)
}

// MAXADMIN is a free data retrieval call binding the contract method 0x58d65880.
//
// Solidity: function MAX_ADMIN() view returns(uint256)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCallerSession) MAXADMIN() (*big.Int, error) {
	return _ICnStakingV3MultiSig.Contract.MAXADMIN(&_ICnStakingV3MultiSig.CallOpts)
}

// AdminList is a free data retrieval call binding the contract method 0x11117fc8.
//
// Solidity: function adminList(uint256 _pos) view returns(address)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCaller) AdminList(opts *bind.CallOpts, _pos *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ICnStakingV3MultiSig.contract.Call(opts, &out, "adminList", _pos)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AdminList is a free data retrieval call binding the contract method 0x11117fc8.
//
// Solidity: function adminList(uint256 _pos) view returns(address)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) AdminList(_pos *big.Int) (common.Address, error) {
	return _ICnStakingV3MultiSig.Contract.AdminList(&_ICnStakingV3MultiSig.CallOpts, _pos)
}

// AdminList is a free data retrieval call binding the contract method 0x11117fc8.
//
// Solidity: function adminList(uint256 _pos) view returns(address)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCallerSession) AdminList(_pos *big.Int) (common.Address, error) {
	return _ICnStakingV3MultiSig.Contract.AdminList(&_ICnStakingV3MultiSig.CallOpts, _pos)
}

// ContractValidator is a free data retrieval call binding the contract method 0x7a5db068.
//
// Solidity: function contractValidator() view returns(address)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCaller) ContractValidator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ICnStakingV3MultiSig.contract.Call(opts, &out, "contractValidator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContractValidator is a free data retrieval call binding the contract method 0x7a5db068.
//
// Solidity: function contractValidator() view returns(address)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) ContractValidator() (common.Address, error) {
	return _ICnStakingV3MultiSig.Contract.ContractValidator(&_ICnStakingV3MultiSig.CallOpts)
}

// ContractValidator is a free data retrieval call binding the contract method 0x7a5db068.
//
// Solidity: function contractValidator() view returns(address)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCallerSession) ContractValidator() (common.Address, error) {
	return _ICnStakingV3MultiSig.Contract.ContractValidator(&_ICnStakingV3MultiSig.CallOpts)
}

// GetRequestIds is a free data retrieval call binding the contract method 0x0fd440ec.
//
// Solidity: function getRequestIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCaller) GetRequestIds(opts *bind.CallOpts, _from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	var out []interface{}
	err := _ICnStakingV3MultiSig.contract.Call(opts, &out, "getRequestIds", _from, _to, _state)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetRequestIds is a free data retrieval call binding the contract method 0x0fd440ec.
//
// Solidity: function getRequestIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) GetRequestIds(_from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	return _ICnStakingV3MultiSig.Contract.GetRequestIds(&_ICnStakingV3MultiSig.CallOpts, _from, _to, _state)
}

// GetRequestIds is a free data retrieval call binding the contract method 0x0fd440ec.
//
// Solidity: function getRequestIds(uint256 _from, uint256 _to, uint8 _state) view returns(uint256[] ids)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCallerSession) GetRequestIds(_from *big.Int, _to *big.Int, _state uint8) ([]*big.Int, error) {
	return _ICnStakingV3MultiSig.Contract.GetRequestIds(&_ICnStakingV3MultiSig.CallOpts, _from, _to, _state)
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(uint256 _id) view returns(uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address proposer, address[] confirmers, uint8 state)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCaller) GetRequestInfo(opts *bind.CallOpts, _id *big.Int) (struct {
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Proposer   common.Address
	Confirmers []common.Address
	State      uint8
}, error) {
	var out []interface{}
	err := _ICnStakingV3MultiSig.contract.Call(opts, &out, "getRequestInfo", _id)

	outstruct := new(struct {
		FunctionId uint8
		FirstArg   [32]byte
		SecondArg  [32]byte
		ThirdArg   [32]byte
		Proposer   common.Address
		Confirmers []common.Address
		State      uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.FunctionId = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.FirstArg = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.SecondArg = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)
	outstruct.ThirdArg = *abi.ConvertType(out[3], new([32]byte)).(*[32]byte)
	outstruct.Proposer = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Confirmers = *abi.ConvertType(out[5], new([]common.Address)).(*[]common.Address)
	outstruct.State = *abi.ConvertType(out[6], new(uint8)).(*uint8)

	return *outstruct, err

}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(uint256 _id) view returns(uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address proposer, address[] confirmers, uint8 state)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) GetRequestInfo(_id *big.Int) (struct {
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Proposer   common.Address
	Confirmers []common.Address
	State      uint8
}, error) {
	return _ICnStakingV3MultiSig.Contract.GetRequestInfo(&_ICnStakingV3MultiSig.CallOpts, _id)
}

// GetRequestInfo is a free data retrieval call binding the contract method 0x0b816045.
//
// Solidity: function getRequestInfo(uint256 _id) view returns(uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address proposer, address[] confirmers, uint8 state)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCallerSession) GetRequestInfo(_id *big.Int) (struct {
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Proposer   common.Address
	Confirmers []common.Address
	State      uint8
}, error) {
	return _ICnStakingV3MultiSig.Contract.GetRequestInfo(&_ICnStakingV3MultiSig.CallOpts, _id)
}

// GetRequestState is a free data retrieval call binding the contract method 0xed979dd6.
//
// Solidity: function getRequestState(uint256 _id) view returns(uint8)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCaller) GetRequestState(opts *bind.CallOpts, _id *big.Int) (uint8, error) {
	var out []interface{}
	err := _ICnStakingV3MultiSig.contract.Call(opts, &out, "getRequestState", _id)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetRequestState is a free data retrieval call binding the contract method 0xed979dd6.
//
// Solidity: function getRequestState(uint256 _id) view returns(uint8)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) GetRequestState(_id *big.Int) (uint8, error) {
	return _ICnStakingV3MultiSig.Contract.GetRequestState(&_ICnStakingV3MultiSig.CallOpts, _id)
}

// GetRequestState is a free data retrieval call binding the contract method 0xed979dd6.
//
// Solidity: function getRequestState(uint256 _id) view returns(uint8)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCallerSession) GetRequestState(_id *big.Int) (uint8, error) {
	return _ICnStakingV3MultiSig.Contract.GetRequestState(&_ICnStakingV3MultiSig.CallOpts, _id)
}

// GetReviewers is a free data retrieval call binding the contract method 0x75a87643.
//
// Solidity: function getReviewers() view returns(address[] reviewers)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCaller) GetReviewers(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _ICnStakingV3MultiSig.contract.Call(opts, &out, "getReviewers")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetReviewers is a free data retrieval call binding the contract method 0x75a87643.
//
// Solidity: function getReviewers() view returns(address[] reviewers)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) GetReviewers() ([]common.Address, error) {
	return _ICnStakingV3MultiSig.Contract.GetReviewers(&_ICnStakingV3MultiSig.CallOpts)
}

// GetReviewers is a free data retrieval call binding the contract method 0x75a87643.
//
// Solidity: function getReviewers() view returns(address[] reviewers)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCallerSession) GetReviewers() ([]common.Address, error) {
	return _ICnStakingV3MultiSig.Contract.GetReviewers(&_ICnStakingV3MultiSig.CallOpts)
}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address contractValidator, address nodeId, address rewardAddress, address[] adminListArr, uint256 requirement, uint256[] unlockTime, uint256[] unlockAmount, bool allReviewed, bool isInitialized)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCaller) GetState(opts *bind.CallOpts) (struct {
	ContractValidator common.Address
	NodeId            common.Address
	RewardAddress     common.Address
	AdminListArr      []common.Address
	Requirement       *big.Int
	UnlockTime        []*big.Int
	UnlockAmount      []*big.Int
	AllReviewed       bool
	IsInitialized     bool
}, error) {
	var out []interface{}
	err := _ICnStakingV3MultiSig.contract.Call(opts, &out, "getState")

	outstruct := new(struct {
		ContractValidator common.Address
		NodeId            common.Address
		RewardAddress     common.Address
		AdminListArr      []common.Address
		Requirement       *big.Int
		UnlockTime        []*big.Int
		UnlockAmount      []*big.Int
		AllReviewed       bool
		IsInitialized     bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ContractValidator = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.NodeId = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.RewardAddress = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.AdminListArr = *abi.ConvertType(out[3], new([]common.Address)).(*[]common.Address)
	outstruct.Requirement = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.UnlockTime = *abi.ConvertType(out[5], new([]*big.Int)).(*[]*big.Int)
	outstruct.UnlockAmount = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)
	outstruct.AllReviewed = *abi.ConvertType(out[7], new(bool)).(*bool)
	outstruct.IsInitialized = *abi.ConvertType(out[8], new(bool)).(*bool)

	return *outstruct, err

}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address contractValidator, address nodeId, address rewardAddress, address[] adminListArr, uint256 requirement, uint256[] unlockTime, uint256[] unlockAmount, bool allReviewed, bool isInitialized)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) GetState() (struct {
	ContractValidator common.Address
	NodeId            common.Address
	RewardAddress     common.Address
	AdminListArr      []common.Address
	Requirement       *big.Int
	UnlockTime        []*big.Int
	UnlockAmount      []*big.Int
	AllReviewed       bool
	IsInitialized     bool
}, error) {
	return _ICnStakingV3MultiSig.Contract.GetState(&_ICnStakingV3MultiSig.CallOpts)
}

// GetState is a free data retrieval call binding the contract method 0x1865c57d.
//
// Solidity: function getState() view returns(address contractValidator, address nodeId, address rewardAddress, address[] adminListArr, uint256 requirement, uint256[] unlockTime, uint256[] unlockAmount, bool allReviewed, bool isInitialized)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCallerSession) GetState() (struct {
	ContractValidator common.Address
	NodeId            common.Address
	RewardAddress     common.Address
	AdminListArr      []common.Address
	Requirement       *big.Int
	UnlockTime        []*big.Int
	UnlockAmount      []*big.Int
	AllReviewed       bool
	IsInitialized     bool
}, error) {
	return _ICnStakingV3MultiSig.Contract.GetState(&_ICnStakingV3MultiSig.CallOpts)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _admin) view returns(bool)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCaller) IsAdmin(opts *bind.CallOpts, _admin common.Address) (bool, error) {
	var out []interface{}
	err := _ICnStakingV3MultiSig.contract.Call(opts, &out, "isAdmin", _admin)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _admin) view returns(bool)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) IsAdmin(_admin common.Address) (bool, error) {
	return _ICnStakingV3MultiSig.Contract.IsAdmin(&_ICnStakingV3MultiSig.CallOpts, _admin)
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _admin) view returns(bool)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCallerSession) IsAdmin(_admin common.Address) (bool, error) {
	return _ICnStakingV3MultiSig.Contract.IsAdmin(&_ICnStakingV3MultiSig.CallOpts, _admin)
}

// LastClearedId is a free data retrieval call binding the contract method 0xe7abb98d.
//
// Solidity: function lastClearedId() view returns(uint256)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCaller) LastClearedId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ICnStakingV3MultiSig.contract.Call(opts, &out, "lastClearedId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastClearedId is a free data retrieval call binding the contract method 0xe7abb98d.
//
// Solidity: function lastClearedId() view returns(uint256)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) LastClearedId() (*big.Int, error) {
	return _ICnStakingV3MultiSig.Contract.LastClearedId(&_ICnStakingV3MultiSig.CallOpts)
}

// LastClearedId is a free data retrieval call binding the contract method 0xe7abb98d.
//
// Solidity: function lastClearedId() view returns(uint256)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCallerSession) LastClearedId() (*big.Int, error) {
	return _ICnStakingV3MultiSig.Contract.LastClearedId(&_ICnStakingV3MultiSig.CallOpts)
}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() view returns(uint256)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCaller) RequestCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ICnStakingV3MultiSig.contract.Call(opts, &out, "requestCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() view returns(uint256)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) RequestCount() (*big.Int, error) {
	return _ICnStakingV3MultiSig.Contract.RequestCount(&_ICnStakingV3MultiSig.CallOpts)
}

// RequestCount is a free data retrieval call binding the contract method 0x5badbe4c.
//
// Solidity: function requestCount() view returns(uint256)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCallerSession) RequestCount() (*big.Int, error) {
	return _ICnStakingV3MultiSig.Contract.RequestCount(&_ICnStakingV3MultiSig.CallOpts)
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() view returns(uint256)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCaller) Requirement(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ICnStakingV3MultiSig.contract.Call(opts, &out, "requirement")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() view returns(uint256)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) Requirement() (*big.Int, error) {
	return _ICnStakingV3MultiSig.Contract.Requirement(&_ICnStakingV3MultiSig.CallOpts)
}

// Requirement is a free data retrieval call binding the contract method 0xb7563930.
//
// Solidity: function requirement() view returns(uint256)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigCallerSession) Requirement() (*big.Int, error) {
	return _ICnStakingV3MultiSig.Contract.Requirement(&_ICnStakingV3MultiSig.CallOpts)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address _admin) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactor) AddAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.contract.Transact(opts, "addAdmin", _admin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address _admin) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) AddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.AddAdmin(&_ICnStakingV3MultiSig.TransactOpts, _admin)
}

// AddAdmin is a paid mutator transaction binding the contract method 0x70480275.
//
// Solidity: function addAdmin(address _admin) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactorSession) AddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.AddAdmin(&_ICnStakingV3MultiSig.TransactOpts, _admin)
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactor) ClearRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.contract.Transact(opts, "clearRequest")
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) ClearRequest() (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.ClearRequest(&_ICnStakingV3MultiSig.TransactOpts)
}

// ClearRequest is a paid mutator transaction binding the contract method 0x4f97638f.
//
// Solidity: function clearRequest() returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactorSession) ClearRequest() (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.ClearRequest(&_ICnStakingV3MultiSig.TransactOpts)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0x3b2d2aca.
//
// Solidity: function confirmRequest(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactor) ConfirmRequest(opts *bind.TransactOpts, _id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.contract.Transact(opts, "confirmRequest", _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0x3b2d2aca.
//
// Solidity: function confirmRequest(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) ConfirmRequest(_id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.ConfirmRequest(&_ICnStakingV3MultiSig.TransactOpts, _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// ConfirmRequest is a paid mutator transaction binding the contract method 0x3b2d2aca.
//
// Solidity: function confirmRequest(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactorSession) ConfirmRequest(_id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.ConfirmRequest(&_ICnStakingV3MultiSig.TransactOpts, _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(address _admin) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactor) DeleteAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.contract.Transact(opts, "deleteAdmin", _admin)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(address _admin) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) DeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.DeleteAdmin(&_ICnStakingV3MultiSig.TransactOpts, _admin)
}

// DeleteAdmin is a paid mutator transaction binding the contract method 0x27e1f7df.
//
// Solidity: function deleteAdmin(address _admin) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactorSession) DeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.DeleteAdmin(&_ICnStakingV3MultiSig.TransactOpts, _admin)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x164990f8.
//
// Solidity: function revokeConfirmation(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactor) RevokeConfirmation(opts *bind.TransactOpts, _id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.contract.Transact(opts, "revokeConfirmation", _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x164990f8.
//
// Solidity: function revokeConfirmation(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) RevokeConfirmation(_id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.RevokeConfirmation(&_ICnStakingV3MultiSig.TransactOpts, _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x164990f8.
//
// Solidity: function revokeConfirmation(uint256 _id, uint8 _functionId, bytes32 _firstArg, bytes32 _secondArg, bytes32 _thirdArg) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactorSession) RevokeConfirmation(_id *big.Int, _functionId uint8, _firstArg [32]byte, _secondArg [32]byte, _thirdArg [32]byte) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.RevokeConfirmation(&_ICnStakingV3MultiSig.TransactOpts, _id, _functionId, _firstArg, _secondArg, _thirdArg)
}

// SubmitAddAdmin is a paid mutator transaction binding the contract method 0x863f5c0a.
//
// Solidity: function submitAddAdmin(address _admin) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactor) SubmitAddAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.contract.Transact(opts, "submitAddAdmin", _admin)
}

// SubmitAddAdmin is a paid mutator transaction binding the contract method 0x863f5c0a.
//
// Solidity: function submitAddAdmin(address _admin) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) SubmitAddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitAddAdmin(&_ICnStakingV3MultiSig.TransactOpts, _admin)
}

// SubmitAddAdmin is a paid mutator transaction binding the contract method 0x863f5c0a.
//
// Solidity: function submitAddAdmin(address _admin) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactorSession) SubmitAddAdmin(_admin common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitAddAdmin(&_ICnStakingV3MultiSig.TransactOpts, _admin)
}

// SubmitApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x7818097c.
//
// Solidity: function submitApproveStakingWithdrawal(address _to, uint256 _value) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactor) SubmitApproveStakingWithdrawal(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.contract.Transact(opts, "submitApproveStakingWithdrawal", _to, _value)
}

// SubmitApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x7818097c.
//
// Solidity: function submitApproveStakingWithdrawal(address _to, uint256 _value) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) SubmitApproveStakingWithdrawal(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitApproveStakingWithdrawal(&_ICnStakingV3MultiSig.TransactOpts, _to, _value)
}

// SubmitApproveStakingWithdrawal is a paid mutator transaction binding the contract method 0x7818097c.
//
// Solidity: function submitApproveStakingWithdrawal(address _to, uint256 _value) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactorSession) SubmitApproveStakingWithdrawal(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitApproveStakingWithdrawal(&_ICnStakingV3MultiSig.TransactOpts, _to, _value)
}

// SubmitCancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0x06b35d31.
//
// Solidity: function submitCancelApprovedStakingWithdrawal(uint256 _approvedWithdrawalId) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactor) SubmitCancelApprovedStakingWithdrawal(opts *bind.TransactOpts, _approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.contract.Transact(opts, "submitCancelApprovedStakingWithdrawal", _approvedWithdrawalId)
}

// SubmitCancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0x06b35d31.
//
// Solidity: function submitCancelApprovedStakingWithdrawal(uint256 _approvedWithdrawalId) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) SubmitCancelApprovedStakingWithdrawal(_approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitCancelApprovedStakingWithdrawal(&_ICnStakingV3MultiSig.TransactOpts, _approvedWithdrawalId)
}

// SubmitCancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0x06b35d31.
//
// Solidity: function submitCancelApprovedStakingWithdrawal(uint256 _approvedWithdrawalId) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactorSession) SubmitCancelApprovedStakingWithdrawal(_approvedWithdrawalId *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitCancelApprovedStakingWithdrawal(&_ICnStakingV3MultiSig.TransactOpts, _approvedWithdrawalId)
}

// SubmitClearRequest is a paid mutator transaction binding the contract method 0x87cd9feb.
//
// Solidity: function submitClearRequest() returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactor) SubmitClearRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.contract.Transact(opts, "submitClearRequest")
}

// SubmitClearRequest is a paid mutator transaction binding the contract method 0x87cd9feb.
//
// Solidity: function submitClearRequest() returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) SubmitClearRequest() (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitClearRequest(&_ICnStakingV3MultiSig.TransactOpts)
}

// SubmitClearRequest is a paid mutator transaction binding the contract method 0x87cd9feb.
//
// Solidity: function submitClearRequest() returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactorSession) SubmitClearRequest() (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitClearRequest(&_ICnStakingV3MultiSig.TransactOpts)
}

// SubmitDeleteAdmin is a paid mutator transaction binding the contract method 0x791b5123.
//
// Solidity: function submitDeleteAdmin(address _admin) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactor) SubmitDeleteAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.contract.Transact(opts, "submitDeleteAdmin", _admin)
}

// SubmitDeleteAdmin is a paid mutator transaction binding the contract method 0x791b5123.
//
// Solidity: function submitDeleteAdmin(address _admin) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) SubmitDeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitDeleteAdmin(&_ICnStakingV3MultiSig.TransactOpts, _admin)
}

// SubmitDeleteAdmin is a paid mutator transaction binding the contract method 0x791b5123.
//
// Solidity: function submitDeleteAdmin(address _admin) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactorSession) SubmitDeleteAdmin(_admin common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitDeleteAdmin(&_ICnStakingV3MultiSig.TransactOpts, _admin)
}

// SubmitToggleRedelegation is a paid mutator transaction binding the contract method 0x2f890b1d.
//
// Solidity: function submitToggleRedelegation() returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactor) SubmitToggleRedelegation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.contract.Transact(opts, "submitToggleRedelegation")
}

// SubmitToggleRedelegation is a paid mutator transaction binding the contract method 0x2f890b1d.
//
// Solidity: function submitToggleRedelegation() returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) SubmitToggleRedelegation() (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitToggleRedelegation(&_ICnStakingV3MultiSig.TransactOpts)
}

// SubmitToggleRedelegation is a paid mutator transaction binding the contract method 0x2f890b1d.
//
// Solidity: function submitToggleRedelegation() returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactorSession) SubmitToggleRedelegation() (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitToggleRedelegation(&_ICnStakingV3MultiSig.TransactOpts)
}

// SubmitUpdateRequirement is a paid mutator transaction binding the contract method 0xe748357b.
//
// Solidity: function submitUpdateRequirement(uint256 _requirement) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactor) SubmitUpdateRequirement(opts *bind.TransactOpts, _requirement *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.contract.Transact(opts, "submitUpdateRequirement", _requirement)
}

// SubmitUpdateRequirement is a paid mutator transaction binding the contract method 0xe748357b.
//
// Solidity: function submitUpdateRequirement(uint256 _requirement) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) SubmitUpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitUpdateRequirement(&_ICnStakingV3MultiSig.TransactOpts, _requirement)
}

// SubmitUpdateRequirement is a paid mutator transaction binding the contract method 0xe748357b.
//
// Solidity: function submitUpdateRequirement(uint256 _requirement) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactorSession) SubmitUpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitUpdateRequirement(&_ICnStakingV3MultiSig.TransactOpts, _requirement)
}

// SubmitUpdateRewardAddress is a paid mutator transaction binding the contract method 0x069135af.
//
// Solidity: function submitUpdateRewardAddress(address _rewardAddress) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactor) SubmitUpdateRewardAddress(opts *bind.TransactOpts, _rewardAddress common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.contract.Transact(opts, "submitUpdateRewardAddress", _rewardAddress)
}

// SubmitUpdateRewardAddress is a paid mutator transaction binding the contract method 0x069135af.
//
// Solidity: function submitUpdateRewardAddress(address _rewardAddress) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) SubmitUpdateRewardAddress(_rewardAddress common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitUpdateRewardAddress(&_ICnStakingV3MultiSig.TransactOpts, _rewardAddress)
}

// SubmitUpdateRewardAddress is a paid mutator transaction binding the contract method 0x069135af.
//
// Solidity: function submitUpdateRewardAddress(address _rewardAddress) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactorSession) SubmitUpdateRewardAddress(_rewardAddress common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitUpdateRewardAddress(&_ICnStakingV3MultiSig.TransactOpts, _rewardAddress)
}

// SubmitUpdateStakingTracker is a paid mutator transaction binding the contract method 0x0df5975c.
//
// Solidity: function submitUpdateStakingTracker(address _tracker) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactor) SubmitUpdateStakingTracker(opts *bind.TransactOpts, _tracker common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.contract.Transact(opts, "submitUpdateStakingTracker", _tracker)
}

// SubmitUpdateStakingTracker is a paid mutator transaction binding the contract method 0x0df5975c.
//
// Solidity: function submitUpdateStakingTracker(address _tracker) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) SubmitUpdateStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitUpdateStakingTracker(&_ICnStakingV3MultiSig.TransactOpts, _tracker)
}

// SubmitUpdateStakingTracker is a paid mutator transaction binding the contract method 0x0df5975c.
//
// Solidity: function submitUpdateStakingTracker(address _tracker) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactorSession) SubmitUpdateStakingTracker(_tracker common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitUpdateStakingTracker(&_ICnStakingV3MultiSig.TransactOpts, _tracker)
}

// SubmitUpdateVoterAddress is a paid mutator transaction binding the contract method 0xb756e6ff.
//
// Solidity: function submitUpdateVoterAddress(address _voterAddress) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactor) SubmitUpdateVoterAddress(opts *bind.TransactOpts, _voterAddress common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.contract.Transact(opts, "submitUpdateVoterAddress", _voterAddress)
}

// SubmitUpdateVoterAddress is a paid mutator transaction binding the contract method 0xb756e6ff.
//
// Solidity: function submitUpdateVoterAddress(address _voterAddress) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) SubmitUpdateVoterAddress(_voterAddress common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitUpdateVoterAddress(&_ICnStakingV3MultiSig.TransactOpts, _voterAddress)
}

// SubmitUpdateVoterAddress is a paid mutator transaction binding the contract method 0xb756e6ff.
//
// Solidity: function submitUpdateVoterAddress(address _voterAddress) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactorSession) SubmitUpdateVoterAddress(_voterAddress common.Address) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitUpdateVoterAddress(&_ICnStakingV3MultiSig.TransactOpts, _voterAddress)
}

// SubmitWithdrawLockupStaking is a paid mutator transaction binding the contract method 0x4b8bc6f8.
//
// Solidity: function submitWithdrawLockupStaking(address _to, uint256 _value) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactor) SubmitWithdrawLockupStaking(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.contract.Transact(opts, "submitWithdrawLockupStaking", _to, _value)
}

// SubmitWithdrawLockupStaking is a paid mutator transaction binding the contract method 0x4b8bc6f8.
//
// Solidity: function submitWithdrawLockupStaking(address _to, uint256 _value) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) SubmitWithdrawLockupStaking(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitWithdrawLockupStaking(&_ICnStakingV3MultiSig.TransactOpts, _to, _value)
}

// SubmitWithdrawLockupStaking is a paid mutator transaction binding the contract method 0x4b8bc6f8.
//
// Solidity: function submitWithdrawLockupStaking(address _to, uint256 _value) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactorSession) SubmitWithdrawLockupStaking(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.SubmitWithdrawLockupStaking(&_ICnStakingV3MultiSig.TransactOpts, _to, _value)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(uint256 _requirement) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactor) UpdateRequirement(opts *bind.TransactOpts, _requirement *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.contract.Transact(opts, "updateRequirement", _requirement)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(uint256 _requirement) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigSession) UpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.UpdateRequirement(&_ICnStakingV3MultiSig.TransactOpts, _requirement)
}

// UpdateRequirement is a paid mutator transaction binding the contract method 0xc47afb3a.
//
// Solidity: function updateRequirement(uint256 _requirement) returns()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigTransactorSession) UpdateRequirement(_requirement *big.Int) (*types.Transaction, error) {
	return _ICnStakingV3MultiSig.Contract.UpdateRequirement(&_ICnStakingV3MultiSig.TransactOpts, _requirement)
}

// ICnStakingV3MultiSigAddAdminIterator is returned from FilterAddAdmin and is used to iterate over the raw logs and unpacked data for AddAdmin events raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigAddAdminIterator struct {
	Event *ICnStakingV3MultiSigAddAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3MultiSigAddAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3MultiSigAddAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3MultiSigAddAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3MultiSigAddAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3MultiSigAddAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3MultiSigAddAdmin represents a AddAdmin event raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigAddAdmin struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAddAdmin is a free log retrieval operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: event AddAdmin(address indexed admin)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) FilterAddAdmin(opts *bind.FilterOpts, admin []common.Address) (*ICnStakingV3MultiSigAddAdminIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _ICnStakingV3MultiSig.contract.FilterLogs(opts, "AddAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3MultiSigAddAdminIterator{contract: _ICnStakingV3MultiSig.contract, event: "AddAdmin", logs: logs, sub: sub}, nil
}

// WatchAddAdmin is a free log subscription operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: event AddAdmin(address indexed admin)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) WatchAddAdmin(opts *bind.WatchOpts, sink chan<- *ICnStakingV3MultiSigAddAdmin, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _ICnStakingV3MultiSig.contract.WatchLogs(opts, "AddAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3MultiSigAddAdmin)
				if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "AddAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddAdmin is a log parse operation binding the contract event 0xad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba.
//
// Solidity: event AddAdmin(address indexed admin)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) ParseAddAdmin(log types.Log) (*ICnStakingV3MultiSigAddAdmin, error) {
	event := new(ICnStakingV3MultiSigAddAdmin)
	if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "AddAdmin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3MultiSigCancelRequestIterator is returned from FilterCancelRequest and is used to iterate over the raw logs and unpacked data for CancelRequest events raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigCancelRequestIterator struct {
	Event *ICnStakingV3MultiSigCancelRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3MultiSigCancelRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3MultiSigCancelRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3MultiSigCancelRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3MultiSigCancelRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3MultiSigCancelRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3MultiSigCancelRequest represents a CancelRequest event raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigCancelRequest struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCancelRequest is a free log retrieval operation binding the contract event 0x01011152a3b44da915f5831c5c63c3448b616dcc166c3543f289ed79645280c9.
//
// Solidity: event CancelRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) FilterCancelRequest(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*ICnStakingV3MultiSigCancelRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ICnStakingV3MultiSig.contract.FilterLogs(opts, "CancelRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3MultiSigCancelRequestIterator{contract: _ICnStakingV3MultiSig.contract, event: "CancelRequest", logs: logs, sub: sub}, nil
}

// WatchCancelRequest is a free log subscription operation binding the contract event 0x01011152a3b44da915f5831c5c63c3448b616dcc166c3543f289ed79645280c9.
//
// Solidity: event CancelRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) WatchCancelRequest(opts *bind.WatchOpts, sink chan<- *ICnStakingV3MultiSigCancelRequest, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ICnStakingV3MultiSig.contract.WatchLogs(opts, "CancelRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3MultiSigCancelRequest)
				if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "CancelRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancelRequest is a log parse operation binding the contract event 0x01011152a3b44da915f5831c5c63c3448b616dcc166c3543f289ed79645280c9.
//
// Solidity: event CancelRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) ParseCancelRequest(log types.Log) (*ICnStakingV3MultiSigCancelRequest, error) {
	event := new(ICnStakingV3MultiSigCancelRequest)
	if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "CancelRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3MultiSigClearRequestIterator is returned from FilterClearRequest and is used to iterate over the raw logs and unpacked data for ClearRequest events raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigClearRequestIterator struct {
	Event *ICnStakingV3MultiSigClearRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3MultiSigClearRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3MultiSigClearRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3MultiSigClearRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3MultiSigClearRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3MultiSigClearRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3MultiSigClearRequest represents a ClearRequest event raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigClearRequest struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterClearRequest is a free log retrieval operation binding the contract event 0x907527d30089abd16e30f06ddbbbc18480505176262f19bc16c1fbf9262f9c6b.
//
// Solidity: event ClearRequest()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) FilterClearRequest(opts *bind.FilterOpts) (*ICnStakingV3MultiSigClearRequestIterator, error) {

	logs, sub, err := _ICnStakingV3MultiSig.contract.FilterLogs(opts, "ClearRequest")
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3MultiSigClearRequestIterator{contract: _ICnStakingV3MultiSig.contract, event: "ClearRequest", logs: logs, sub: sub}, nil
}

// WatchClearRequest is a free log subscription operation binding the contract event 0x907527d30089abd16e30f06ddbbbc18480505176262f19bc16c1fbf9262f9c6b.
//
// Solidity: event ClearRequest()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) WatchClearRequest(opts *bind.WatchOpts, sink chan<- *ICnStakingV3MultiSigClearRequest) (event.Subscription, error) {

	logs, sub, err := _ICnStakingV3MultiSig.contract.WatchLogs(opts, "ClearRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3MultiSigClearRequest)
				if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "ClearRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClearRequest is a log parse operation binding the contract event 0x907527d30089abd16e30f06ddbbbc18480505176262f19bc16c1fbf9262f9c6b.
//
// Solidity: event ClearRequest()
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) ParseClearRequest(log types.Log) (*ICnStakingV3MultiSigClearRequest, error) {
	event := new(ICnStakingV3MultiSigClearRequest)
	if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "ClearRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3MultiSigConfirmRequestIterator is returned from FilterConfirmRequest and is used to iterate over the raw logs and unpacked data for ConfirmRequest events raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigConfirmRequestIterator struct {
	Event *ICnStakingV3MultiSigConfirmRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3MultiSigConfirmRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3MultiSigConfirmRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3MultiSigConfirmRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3MultiSigConfirmRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3MultiSigConfirmRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3MultiSigConfirmRequest represents a ConfirmRequest event raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigConfirmRequest struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Confirmers []common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterConfirmRequest is a free log retrieval operation binding the contract event 0x658055f08cf63659025f616b2baf94baf8f4d2ee9c600c2ae722b4b7716cce46.
//
// Solidity: event ConfirmRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) FilterConfirmRequest(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*ICnStakingV3MultiSigConfirmRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ICnStakingV3MultiSig.contract.FilterLogs(opts, "ConfirmRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3MultiSigConfirmRequestIterator{contract: _ICnStakingV3MultiSig.contract, event: "ConfirmRequest", logs: logs, sub: sub}, nil
}

// WatchConfirmRequest is a free log subscription operation binding the contract event 0x658055f08cf63659025f616b2baf94baf8f4d2ee9c600c2ae722b4b7716cce46.
//
// Solidity: event ConfirmRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) WatchConfirmRequest(opts *bind.WatchOpts, sink chan<- *ICnStakingV3MultiSigConfirmRequest, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ICnStakingV3MultiSig.contract.WatchLogs(opts, "ConfirmRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3MultiSigConfirmRequest)
				if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "ConfirmRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfirmRequest is a log parse operation binding the contract event 0x658055f08cf63659025f616b2baf94baf8f4d2ee9c600c2ae722b4b7716cce46.
//
// Solidity: event ConfirmRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) ParseConfirmRequest(log types.Log) (*ICnStakingV3MultiSigConfirmRequest, error) {
	event := new(ICnStakingV3MultiSigConfirmRequest)
	if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "ConfirmRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3MultiSigDeleteAdminIterator is returned from FilterDeleteAdmin and is used to iterate over the raw logs and unpacked data for DeleteAdmin events raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigDeleteAdminIterator struct {
	Event *ICnStakingV3MultiSigDeleteAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3MultiSigDeleteAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3MultiSigDeleteAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3MultiSigDeleteAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3MultiSigDeleteAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3MultiSigDeleteAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3MultiSigDeleteAdmin represents a DeleteAdmin event raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigDeleteAdmin struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDeleteAdmin is a free log retrieval operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: event DeleteAdmin(address indexed admin)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) FilterDeleteAdmin(opts *bind.FilterOpts, admin []common.Address) (*ICnStakingV3MultiSigDeleteAdminIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _ICnStakingV3MultiSig.contract.FilterLogs(opts, "DeleteAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3MultiSigDeleteAdminIterator{contract: _ICnStakingV3MultiSig.contract, event: "DeleteAdmin", logs: logs, sub: sub}, nil
}

// WatchDeleteAdmin is a free log subscription operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: event DeleteAdmin(address indexed admin)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) WatchDeleteAdmin(opts *bind.WatchOpts, sink chan<- *ICnStakingV3MultiSigDeleteAdmin, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _ICnStakingV3MultiSig.contract.WatchLogs(opts, "DeleteAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3MultiSigDeleteAdmin)
				if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "DeleteAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeleteAdmin is a log parse operation binding the contract event 0x1af6bd3d85a56e7c4a0700756fd2ca3b3b65c266e56c77652c5a346bc2565220.
//
// Solidity: event DeleteAdmin(address indexed admin)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) ParseDeleteAdmin(log types.Log) (*ICnStakingV3MultiSigDeleteAdmin, error) {
	event := new(ICnStakingV3MultiSigDeleteAdmin)
	if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "DeleteAdmin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3MultiSigDeployCnStakingV3MultiSigIterator is returned from FilterDeployCnStakingV3MultiSig and is used to iterate over the raw logs and unpacked data for DeployCnStakingV3MultiSig events raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigDeployCnStakingV3MultiSigIterator struct {
	Event *ICnStakingV3MultiSigDeployCnStakingV3MultiSig // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3MultiSigDeployCnStakingV3MultiSigIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3MultiSigDeployCnStakingV3MultiSig)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3MultiSigDeployCnStakingV3MultiSig)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3MultiSigDeployCnStakingV3MultiSigIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3MultiSigDeployCnStakingV3MultiSigIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3MultiSigDeployCnStakingV3MultiSig represents a DeployCnStakingV3MultiSig event raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigDeployCnStakingV3MultiSig struct {
	ContractType      string
	ContractValidator common.Address
	CnAdminList       []common.Address
	Requirement       *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterDeployCnStakingV3MultiSig is a free log retrieval operation binding the contract event 0x66f82b55f642c6d1ad96892e17a269b2f7f5e3ec3d46acf2a9d239b43fe035e3.
//
// Solidity: event DeployCnStakingV3MultiSig(string contractType, address contractValidator, address[] cnAdminList, uint256 requirement)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) FilterDeployCnStakingV3MultiSig(opts *bind.FilterOpts) (*ICnStakingV3MultiSigDeployCnStakingV3MultiSigIterator, error) {

	logs, sub, err := _ICnStakingV3MultiSig.contract.FilterLogs(opts, "DeployCnStakingV3MultiSig")
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3MultiSigDeployCnStakingV3MultiSigIterator{contract: _ICnStakingV3MultiSig.contract, event: "DeployCnStakingV3MultiSig", logs: logs, sub: sub}, nil
}

// WatchDeployCnStakingV3MultiSig is a free log subscription operation binding the contract event 0x66f82b55f642c6d1ad96892e17a269b2f7f5e3ec3d46acf2a9d239b43fe035e3.
//
// Solidity: event DeployCnStakingV3MultiSig(string contractType, address contractValidator, address[] cnAdminList, uint256 requirement)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) WatchDeployCnStakingV3MultiSig(opts *bind.WatchOpts, sink chan<- *ICnStakingV3MultiSigDeployCnStakingV3MultiSig) (event.Subscription, error) {

	logs, sub, err := _ICnStakingV3MultiSig.contract.WatchLogs(opts, "DeployCnStakingV3MultiSig")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3MultiSigDeployCnStakingV3MultiSig)
				if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "DeployCnStakingV3MultiSig", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployCnStakingV3MultiSig is a log parse operation binding the contract event 0x66f82b55f642c6d1ad96892e17a269b2f7f5e3ec3d46acf2a9d239b43fe035e3.
//
// Solidity: event DeployCnStakingV3MultiSig(string contractType, address contractValidator, address[] cnAdminList, uint256 requirement)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) ParseDeployCnStakingV3MultiSig(log types.Log) (*ICnStakingV3MultiSigDeployCnStakingV3MultiSig, error) {
	event := new(ICnStakingV3MultiSigDeployCnStakingV3MultiSig)
	if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "DeployCnStakingV3MultiSig", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3MultiSigExecuteRequestFailureIterator is returned from FilterExecuteRequestFailure and is used to iterate over the raw logs and unpacked data for ExecuteRequestFailure events raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigExecuteRequestFailureIterator struct {
	Event *ICnStakingV3MultiSigExecuteRequestFailure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3MultiSigExecuteRequestFailureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3MultiSigExecuteRequestFailure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3MultiSigExecuteRequestFailure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3MultiSigExecuteRequestFailureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3MultiSigExecuteRequestFailureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3MultiSigExecuteRequestFailure represents a ExecuteRequestFailure event raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigExecuteRequestFailure struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterExecuteRequestFailure is a free log retrieval operation binding the contract event 0xbd3ad69fc5a8e233118506c67ebe892bef493fcf2eb9e6986f6d6c3f2adf0e8a.
//
// Solidity: event ExecuteRequestFailure(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) FilterExecuteRequestFailure(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*ICnStakingV3MultiSigExecuteRequestFailureIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ICnStakingV3MultiSig.contract.FilterLogs(opts, "ExecuteRequestFailure", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3MultiSigExecuteRequestFailureIterator{contract: _ICnStakingV3MultiSig.contract, event: "ExecuteRequestFailure", logs: logs, sub: sub}, nil
}

// WatchExecuteRequestFailure is a free log subscription operation binding the contract event 0xbd3ad69fc5a8e233118506c67ebe892bef493fcf2eb9e6986f6d6c3f2adf0e8a.
//
// Solidity: event ExecuteRequestFailure(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) WatchExecuteRequestFailure(opts *bind.WatchOpts, sink chan<- *ICnStakingV3MultiSigExecuteRequestFailure, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ICnStakingV3MultiSig.contract.WatchLogs(opts, "ExecuteRequestFailure", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3MultiSigExecuteRequestFailure)
				if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "ExecuteRequestFailure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecuteRequestFailure is a log parse operation binding the contract event 0xbd3ad69fc5a8e233118506c67ebe892bef493fcf2eb9e6986f6d6c3f2adf0e8a.
//
// Solidity: event ExecuteRequestFailure(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) ParseExecuteRequestFailure(log types.Log) (*ICnStakingV3MultiSigExecuteRequestFailure, error) {
	event := new(ICnStakingV3MultiSigExecuteRequestFailure)
	if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "ExecuteRequestFailure", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3MultiSigExecuteRequestSuccessIterator is returned from FilterExecuteRequestSuccess and is used to iterate over the raw logs and unpacked data for ExecuteRequestSuccess events raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigExecuteRequestSuccessIterator struct {
	Event *ICnStakingV3MultiSigExecuteRequestSuccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3MultiSigExecuteRequestSuccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3MultiSigExecuteRequestSuccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3MultiSigExecuteRequestSuccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3MultiSigExecuteRequestSuccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3MultiSigExecuteRequestSuccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3MultiSigExecuteRequestSuccess represents a ExecuteRequestSuccess event raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigExecuteRequestSuccess struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterExecuteRequestSuccess is a free log retrieval operation binding the contract event 0x48f16d9e6ab6f19798a7c7f307ecea3def480049fa0a09280e2a3fa45aaa8426.
//
// Solidity: event ExecuteRequestSuccess(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) FilterExecuteRequestSuccess(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*ICnStakingV3MultiSigExecuteRequestSuccessIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ICnStakingV3MultiSig.contract.FilterLogs(opts, "ExecuteRequestSuccess", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3MultiSigExecuteRequestSuccessIterator{contract: _ICnStakingV3MultiSig.contract, event: "ExecuteRequestSuccess", logs: logs, sub: sub}, nil
}

// WatchExecuteRequestSuccess is a free log subscription operation binding the contract event 0x48f16d9e6ab6f19798a7c7f307ecea3def480049fa0a09280e2a3fa45aaa8426.
//
// Solidity: event ExecuteRequestSuccess(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) WatchExecuteRequestSuccess(opts *bind.WatchOpts, sink chan<- *ICnStakingV3MultiSigExecuteRequestSuccess, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ICnStakingV3MultiSig.contract.WatchLogs(opts, "ExecuteRequestSuccess", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3MultiSigExecuteRequestSuccess)
				if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "ExecuteRequestSuccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecuteRequestSuccess is a log parse operation binding the contract event 0x48f16d9e6ab6f19798a7c7f307ecea3def480049fa0a09280e2a3fa45aaa8426.
//
// Solidity: event ExecuteRequestSuccess(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) ParseExecuteRequestSuccess(log types.Log) (*ICnStakingV3MultiSigExecuteRequestSuccess, error) {
	event := new(ICnStakingV3MultiSigExecuteRequestSuccess)
	if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "ExecuteRequestSuccess", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3MultiSigRevokeConfirmationIterator is returned from FilterRevokeConfirmation and is used to iterate over the raw logs and unpacked data for RevokeConfirmation events raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigRevokeConfirmationIterator struct {
	Event *ICnStakingV3MultiSigRevokeConfirmation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3MultiSigRevokeConfirmationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3MultiSigRevokeConfirmation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3MultiSigRevokeConfirmation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3MultiSigRevokeConfirmationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3MultiSigRevokeConfirmationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3MultiSigRevokeConfirmation represents a RevokeConfirmation event raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigRevokeConfirmation struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Confirmers []common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRevokeConfirmation is a free log retrieval operation binding the contract event 0xed38e5621fac2aa23736077187104abfe9c8aa1c5b4eb73015d8cfdf403fe070.
//
// Solidity: event RevokeConfirmation(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) FilterRevokeConfirmation(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*ICnStakingV3MultiSigRevokeConfirmationIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ICnStakingV3MultiSig.contract.FilterLogs(opts, "RevokeConfirmation", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3MultiSigRevokeConfirmationIterator{contract: _ICnStakingV3MultiSig.contract, event: "RevokeConfirmation", logs: logs, sub: sub}, nil
}

// WatchRevokeConfirmation is a free log subscription operation binding the contract event 0xed38e5621fac2aa23736077187104abfe9c8aa1c5b4eb73015d8cfdf403fe070.
//
// Solidity: event RevokeConfirmation(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) WatchRevokeConfirmation(opts *bind.WatchOpts, sink chan<- *ICnStakingV3MultiSigRevokeConfirmation, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ICnStakingV3MultiSig.contract.WatchLogs(opts, "RevokeConfirmation", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3MultiSigRevokeConfirmation)
				if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "RevokeConfirmation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevokeConfirmation is a log parse operation binding the contract event 0xed38e5621fac2aa23736077187104abfe9c8aa1c5b4eb73015d8cfdf403fe070.
//
// Solidity: event RevokeConfirmation(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg, address[] confirmers)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) ParseRevokeConfirmation(log types.Log) (*ICnStakingV3MultiSigRevokeConfirmation, error) {
	event := new(ICnStakingV3MultiSigRevokeConfirmation)
	if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "RevokeConfirmation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3MultiSigSubmitRequestIterator is returned from FilterSubmitRequest and is used to iterate over the raw logs and unpacked data for SubmitRequest events raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigSubmitRequestIterator struct {
	Event *ICnStakingV3MultiSigSubmitRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3MultiSigSubmitRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3MultiSigSubmitRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3MultiSigSubmitRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3MultiSigSubmitRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3MultiSigSubmitRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3MultiSigSubmitRequest represents a SubmitRequest event raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigSubmitRequest struct {
	Id         *big.Int
	From       common.Address
	FunctionId uint8
	FirstArg   [32]byte
	SecondArg  [32]byte
	ThirdArg   [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSubmitRequest is a free log retrieval operation binding the contract event 0xdd9ce6d431d4ac3e8bea81bc2d7760b97d30c4e54252d8c8c59054849b8f61b5.
//
// Solidity: event SubmitRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) FilterSubmitRequest(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*ICnStakingV3MultiSigSubmitRequestIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ICnStakingV3MultiSig.contract.FilterLogs(opts, "SubmitRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3MultiSigSubmitRequestIterator{contract: _ICnStakingV3MultiSig.contract, event: "SubmitRequest", logs: logs, sub: sub}, nil
}

// WatchSubmitRequest is a free log subscription operation binding the contract event 0xdd9ce6d431d4ac3e8bea81bc2d7760b97d30c4e54252d8c8c59054849b8f61b5.
//
// Solidity: event SubmitRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) WatchSubmitRequest(opts *bind.WatchOpts, sink chan<- *ICnStakingV3MultiSigSubmitRequest, id []*big.Int, from []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _ICnStakingV3MultiSig.contract.WatchLogs(opts, "SubmitRequest", idRule, fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3MultiSigSubmitRequest)
				if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "SubmitRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmitRequest is a log parse operation binding the contract event 0xdd9ce6d431d4ac3e8bea81bc2d7760b97d30c4e54252d8c8c59054849b8f61b5.
//
// Solidity: event SubmitRequest(uint256 indexed id, address indexed from, uint8 functionId, bytes32 firstArg, bytes32 secondArg, bytes32 thirdArg)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) ParseSubmitRequest(log types.Log) (*ICnStakingV3MultiSigSubmitRequest, error) {
	event := new(ICnStakingV3MultiSigSubmitRequest)
	if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "SubmitRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICnStakingV3MultiSigUpdateRequirementIterator is returned from FilterUpdateRequirement and is used to iterate over the raw logs and unpacked data for UpdateRequirement events raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigUpdateRequirementIterator struct {
	Event *ICnStakingV3MultiSigUpdateRequirement // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICnStakingV3MultiSigUpdateRequirementIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICnStakingV3MultiSigUpdateRequirement)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICnStakingV3MultiSigUpdateRequirement)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICnStakingV3MultiSigUpdateRequirementIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICnStakingV3MultiSigUpdateRequirementIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICnStakingV3MultiSigUpdateRequirement represents a UpdateRequirement event raised by the ICnStakingV3MultiSig contract.
type ICnStakingV3MultiSigUpdateRequirement struct {
	Requirement *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequirement is a free log retrieval operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: event UpdateRequirement(uint256 requirement)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) FilterUpdateRequirement(opts *bind.FilterOpts) (*ICnStakingV3MultiSigUpdateRequirementIterator, error) {

	logs, sub, err := _ICnStakingV3MultiSig.contract.FilterLogs(opts, "UpdateRequirement")
	if err != nil {
		return nil, err
	}
	return &ICnStakingV3MultiSigUpdateRequirementIterator{contract: _ICnStakingV3MultiSig.contract, event: "UpdateRequirement", logs: logs, sub: sub}, nil
}

// WatchUpdateRequirement is a free log subscription operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: event UpdateRequirement(uint256 requirement)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) WatchUpdateRequirement(opts *bind.WatchOpts, sink chan<- *ICnStakingV3MultiSigUpdateRequirement) (event.Subscription, error) {

	logs, sub, err := _ICnStakingV3MultiSig.contract.WatchLogs(opts, "UpdateRequirement")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICnStakingV3MultiSigUpdateRequirement)
				if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "UpdateRequirement", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequirement is a log parse operation binding the contract event 0x8951393946c27b45080aad111464c16c70f3d5e7d24b114a627334441961bf5f.
//
// Solidity: event UpdateRequirement(uint256 requirement)
func (_ICnStakingV3MultiSig *ICnStakingV3MultiSigFilterer) ParseUpdateRequirement(log types.Log) (*ICnStakingV3MultiSigUpdateRequirement, error) {
	event := new(ICnStakingV3MultiSigUpdateRequirement)
	if err := _ICnStakingV3MultiSig.contract.UnpackLog(event, "UpdateRequirement", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC1155ErrorsMetaData contains all meta data concerning the IERC1155Errors contract.
var IERC1155ErrorsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}]",
}

// IERC1155ErrorsABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC1155ErrorsMetaData.ABI instead.
var IERC1155ErrorsABI = IERC1155ErrorsMetaData.ABI

// IERC1155ErrorsBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const IERC1155ErrorsBinRuntime = ``

// IERC1155Errors is an auto generated Go binding around a Kaia contract.
type IERC1155Errors struct {
	IERC1155ErrorsCaller     // Read-only binding to the contract
	IERC1155ErrorsTransactor // Write-only binding to the contract
	IERC1155ErrorsFilterer   // Log filterer for contract events
}

// IERC1155ErrorsCaller is an auto generated read-only Go binding around a Kaia contract.
type IERC1155ErrorsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC1155ErrorsTransactor is an auto generated write-only Go binding around a Kaia contract.
type IERC1155ErrorsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC1155ErrorsFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type IERC1155ErrorsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC1155ErrorsSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type IERC1155ErrorsSession struct {
	Contract     *IERC1155Errors   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC1155ErrorsCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type IERC1155ErrorsCallerSession struct {
	Contract *IERC1155ErrorsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IERC1155ErrorsTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type IERC1155ErrorsTransactorSession struct {
	Contract     *IERC1155ErrorsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IERC1155ErrorsRaw is an auto generated low-level Go binding around a Kaia contract.
type IERC1155ErrorsRaw struct {
	Contract *IERC1155Errors // Generic contract binding to access the raw methods on
}

// IERC1155ErrorsCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type IERC1155ErrorsCallerRaw struct {
	Contract *IERC1155ErrorsCaller // Generic read-only contract binding to access the raw methods on
}

// IERC1155ErrorsTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type IERC1155ErrorsTransactorRaw struct {
	Contract *IERC1155ErrorsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC1155Errors creates a new instance of IERC1155Errors, bound to a specific deployed contract.
func NewIERC1155Errors(address common.Address, backend bind.ContractBackend) (*IERC1155Errors, error) {
	contract, err := bindIERC1155Errors(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC1155Errors{IERC1155ErrorsCaller: IERC1155ErrorsCaller{contract: contract}, IERC1155ErrorsTransactor: IERC1155ErrorsTransactor{contract: contract}, IERC1155ErrorsFilterer: IERC1155ErrorsFilterer{contract: contract}}, nil
}

// NewIERC1155ErrorsCaller creates a new read-only instance of IERC1155Errors, bound to a specific deployed contract.
func NewIERC1155ErrorsCaller(address common.Address, caller bind.ContractCaller) (*IERC1155ErrorsCaller, error) {
	contract, err := bindIERC1155Errors(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC1155ErrorsCaller{contract: contract}, nil
}

// NewIERC1155ErrorsTransactor creates a new write-only instance of IERC1155Errors, bound to a specific deployed contract.
func NewIERC1155ErrorsTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC1155ErrorsTransactor, error) {
	contract, err := bindIERC1155Errors(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC1155ErrorsTransactor{contract: contract}, nil
}

// NewIERC1155ErrorsFilterer creates a new log filterer instance of IERC1155Errors, bound to a specific deployed contract.
func NewIERC1155ErrorsFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC1155ErrorsFilterer, error) {
	contract, err := bindIERC1155Errors(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC1155ErrorsFilterer{contract: contract}, nil
}

// bindIERC1155Errors binds a generic wrapper to an already deployed contract.
func bindIERC1155Errors(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC1155ErrorsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC1155Errors *IERC1155ErrorsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC1155Errors.Contract.IERC1155ErrorsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC1155Errors *IERC1155ErrorsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC1155Errors.Contract.IERC1155ErrorsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC1155Errors *IERC1155ErrorsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC1155Errors.Contract.IERC1155ErrorsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC1155Errors *IERC1155ErrorsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC1155Errors.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC1155Errors *IERC1155ErrorsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC1155Errors.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC1155Errors *IERC1155ErrorsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC1155Errors.Contract.contract.Transact(opts, method, params...)
}

// IERC165MetaData contains all meta data concerning the IERC165 contract.
var IERC165MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"01ffc9a7": "supportsInterface(bytes4)",
	},
}

// IERC165ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC165MetaData.ABI instead.
var IERC165ABI = IERC165MetaData.ABI

// IERC165BinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const IERC165BinRuntime = ``

// Deprecated: Use IERC165MetaData.Sigs instead.
// IERC165FuncSigs maps the 4-byte function signature to its string representation.
var IERC165FuncSigs = IERC165MetaData.Sigs

// IERC165 is an auto generated Go binding around a Kaia contract.
type IERC165 struct {
	IERC165Caller     // Read-only binding to the contract
	IERC165Transactor // Write-only binding to the contract
	IERC165Filterer   // Log filterer for contract events
}

// IERC165Caller is an auto generated read-only Go binding around a Kaia contract.
type IERC165Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165Transactor is an auto generated write-only Go binding around a Kaia contract.
type IERC165Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165Filterer is an auto generated log filtering Go binding around a Kaia contract events.
type IERC165Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165Session is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type IERC165Session struct {
	Contract     *IERC165          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC165CallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type IERC165CallerSession struct {
	Contract *IERC165Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IERC165TransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type IERC165TransactorSession struct {
	Contract     *IERC165Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IERC165Raw is an auto generated low-level Go binding around a Kaia contract.
type IERC165Raw struct {
	Contract *IERC165 // Generic contract binding to access the raw methods on
}

// IERC165CallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type IERC165CallerRaw struct {
	Contract *IERC165Caller // Generic read-only contract binding to access the raw methods on
}

// IERC165TransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type IERC165TransactorRaw struct {
	Contract *IERC165Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC165 creates a new instance of IERC165, bound to a specific deployed contract.
func NewIERC165(address common.Address, backend bind.ContractBackend) (*IERC165, error) {
	contract, err := bindIERC165(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC165{IERC165Caller: IERC165Caller{contract: contract}, IERC165Transactor: IERC165Transactor{contract: contract}, IERC165Filterer: IERC165Filterer{contract: contract}}, nil
}

// NewIERC165Caller creates a new read-only instance of IERC165, bound to a specific deployed contract.
func NewIERC165Caller(address common.Address, caller bind.ContractCaller) (*IERC165Caller, error) {
	contract, err := bindIERC165(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC165Caller{contract: contract}, nil
}

// NewIERC165Transactor creates a new write-only instance of IERC165, bound to a specific deployed contract.
func NewIERC165Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC165Transactor, error) {
	contract, err := bindIERC165(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC165Transactor{contract: contract}, nil
}

// NewIERC165Filterer creates a new log filterer instance of IERC165, bound to a specific deployed contract.
func NewIERC165Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC165Filterer, error) {
	contract, err := bindIERC165(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC165Filterer{contract: contract}, nil
}

// bindIERC165 binds a generic wrapper to an already deployed contract.
func bindIERC165(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC165MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC165 *IERC165Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC165.Contract.IERC165Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC165 *IERC165Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC165.Contract.IERC165Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC165 *IERC165Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC165.Contract.IERC165Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC165 *IERC165CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC165.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC165 *IERC165TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC165.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC165 *IERC165TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC165.Contract.contract.Transact(opts, method, params...)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC165 *IERC165Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _IERC165.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC165 *IERC165Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC165.Contract.SupportsInterface(&_IERC165.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC165 *IERC165CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC165.Contract.SupportsInterface(&_IERC165.CallOpts, interfaceId)
}

// IERC20MetaData contains all meta data concerning the IERC20 contract.
var IERC20MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
	},
}

// IERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20MetaData.ABI instead.
var IERC20ABI = IERC20MetaData.ABI

// IERC20BinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const IERC20BinRuntime = ``

// Deprecated: Use IERC20MetaData.Sigs instead.
// IERC20FuncSigs maps the 4-byte function signature to its string representation.
var IERC20FuncSigs = IERC20MetaData.Sigs

// IERC20 is an auto generated Go binding around a Kaia contract.
type IERC20 struct {
	IERC20Caller     // Read-only binding to the contract
	IERC20Transactor // Write-only binding to the contract
	IERC20Filterer   // Log filterer for contract events
}

// IERC20Caller is an auto generated read-only Go binding around a Kaia contract.
type IERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Transactor is an auto generated write-only Go binding around a Kaia contract.
type IERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Filterer is an auto generated log filtering Go binding around a Kaia contract events.
type IERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Session is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type IERC20Session struct {
	Contract     *IERC20           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20CallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type IERC20CallerSession struct {
	Contract *IERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IERC20TransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type IERC20TransactorSession struct {
	Contract     *IERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20Raw is an auto generated low-level Go binding around a Kaia contract.
type IERC20Raw struct {
	Contract *IERC20 // Generic contract binding to access the raw methods on
}

// IERC20CallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type IERC20CallerRaw struct {
	Contract *IERC20Caller // Generic read-only contract binding to access the raw methods on
}

// IERC20TransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type IERC20TransactorRaw struct {
	Contract *IERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20 creates a new instance of IERC20, bound to a specific deployed contract.
func NewIERC20(address common.Address, backend bind.ContractBackend) (*IERC20, error) {
	contract, err := bindIERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20{IERC20Caller: IERC20Caller{contract: contract}, IERC20Transactor: IERC20Transactor{contract: contract}, IERC20Filterer: IERC20Filterer{contract: contract}}, nil
}

// NewIERC20Caller creates a new read-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Caller(address common.Address, caller bind.ContractCaller) (*IERC20Caller, error) {
	contract, err := bindIERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Caller{contract: contract}, nil
}

// NewIERC20Transactor creates a new write-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC20Transactor, error) {
	contract, err := bindIERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Transactor{contract: contract}, nil
}

// NewIERC20Filterer creates a new log filterer instance of IERC20, bound to a specific deployed contract.
func NewIERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC20Filterer, error) {
	contract, err := bindIERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20Filterer{contract: contract}, nil
}

// bindIERC20 binds a generic wrapper to an already deployed contract.
func bindIERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.IERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Session) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_IERC20 *IERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_IERC20 *IERC20Session) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_IERC20 *IERC20TransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_IERC20 *IERC20Transactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_IERC20 *IERC20Session) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_IERC20 *IERC20TransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_IERC20 *IERC20Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_IERC20 *IERC20Session) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_IERC20 *IERC20TransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, from, to, value)
}

// IERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20 contract.
type IERC20ApprovalIterator struct {
	Event *IERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Approval represents a Approval event raised by the IERC20 contract.
type IERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20ApprovalIterator{contract: _IERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Approval)
				if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) ParseApproval(log types.Log) (*IERC20Approval, error) {
	event := new(IERC20Approval)
	if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20 contract.
type IERC20TransferIterator struct {
	Event *IERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Transfer represents a Transfer event raised by the IERC20 contract.
type IERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferIterator{contract: _IERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Transfer)
				if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) ParseTransfer(log types.Log) (*IERC20Transfer, error) {
	event := new(IERC20Transfer)
	if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20ErrorsMetaData contains all meta data concerning the IERC20Errors contract.
var IERC20ErrorsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}]",
}

// IERC20ErrorsABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20ErrorsMetaData.ABI instead.
var IERC20ErrorsABI = IERC20ErrorsMetaData.ABI

// IERC20ErrorsBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const IERC20ErrorsBinRuntime = ``

// IERC20Errors is an auto generated Go binding around a Kaia contract.
type IERC20Errors struct {
	IERC20ErrorsCaller     // Read-only binding to the contract
	IERC20ErrorsTransactor // Write-only binding to the contract
	IERC20ErrorsFilterer   // Log filterer for contract events
}

// IERC20ErrorsCaller is an auto generated read-only Go binding around a Kaia contract.
type IERC20ErrorsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20ErrorsTransactor is an auto generated write-only Go binding around a Kaia contract.
type IERC20ErrorsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20ErrorsFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type IERC20ErrorsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20ErrorsSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type IERC20ErrorsSession struct {
	Contract     *IERC20Errors     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20ErrorsCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type IERC20ErrorsCallerSession struct {
	Contract *IERC20ErrorsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// IERC20ErrorsTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type IERC20ErrorsTransactorSession struct {
	Contract     *IERC20ErrorsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// IERC20ErrorsRaw is an auto generated low-level Go binding around a Kaia contract.
type IERC20ErrorsRaw struct {
	Contract *IERC20Errors // Generic contract binding to access the raw methods on
}

// IERC20ErrorsCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type IERC20ErrorsCallerRaw struct {
	Contract *IERC20ErrorsCaller // Generic read-only contract binding to access the raw methods on
}

// IERC20ErrorsTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type IERC20ErrorsTransactorRaw struct {
	Contract *IERC20ErrorsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20Errors creates a new instance of IERC20Errors, bound to a specific deployed contract.
func NewIERC20Errors(address common.Address, backend bind.ContractBackend) (*IERC20Errors, error) {
	contract, err := bindIERC20Errors(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20Errors{IERC20ErrorsCaller: IERC20ErrorsCaller{contract: contract}, IERC20ErrorsTransactor: IERC20ErrorsTransactor{contract: contract}, IERC20ErrorsFilterer: IERC20ErrorsFilterer{contract: contract}}, nil
}

// NewIERC20ErrorsCaller creates a new read-only instance of IERC20Errors, bound to a specific deployed contract.
func NewIERC20ErrorsCaller(address common.Address, caller bind.ContractCaller) (*IERC20ErrorsCaller, error) {
	contract, err := bindIERC20Errors(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20ErrorsCaller{contract: contract}, nil
}

// NewIERC20ErrorsTransactor creates a new write-only instance of IERC20Errors, bound to a specific deployed contract.
func NewIERC20ErrorsTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC20ErrorsTransactor, error) {
	contract, err := bindIERC20Errors(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20ErrorsTransactor{contract: contract}, nil
}

// NewIERC20ErrorsFilterer creates a new log filterer instance of IERC20Errors, bound to a specific deployed contract.
func NewIERC20ErrorsFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC20ErrorsFilterer, error) {
	contract, err := bindIERC20Errors(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20ErrorsFilterer{contract: contract}, nil
}

// bindIERC20Errors binds a generic wrapper to an already deployed contract.
func bindIERC20Errors(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC20ErrorsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Errors *IERC20ErrorsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Errors.Contract.IERC20ErrorsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Errors *IERC20ErrorsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Errors.Contract.IERC20ErrorsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Errors *IERC20ErrorsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Errors.Contract.IERC20ErrorsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Errors *IERC20ErrorsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Errors.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Errors *IERC20ErrorsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Errors.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Errors *IERC20ErrorsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Errors.Contract.contract.Transact(opts, method, params...)
}

// IERC20MetadataMetaData contains all meta data concerning the IERC20Metadata contract.
var IERC20MetadataMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"313ce567": "decimals()",
		"06fdde03": "name()",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
	},
}

// IERC20MetadataABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20MetadataMetaData.ABI instead.
var IERC20MetadataABI = IERC20MetadataMetaData.ABI

// IERC20MetadataBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const IERC20MetadataBinRuntime = ``

// Deprecated: Use IERC20MetadataMetaData.Sigs instead.
// IERC20MetadataFuncSigs maps the 4-byte function signature to its string representation.
var IERC20MetadataFuncSigs = IERC20MetadataMetaData.Sigs

// IERC20Metadata is an auto generated Go binding around a Kaia contract.
type IERC20Metadata struct {
	IERC20MetadataCaller     // Read-only binding to the contract
	IERC20MetadataTransactor // Write-only binding to the contract
	IERC20MetadataFilterer   // Log filterer for contract events
}

// IERC20MetadataCaller is an auto generated read-only Go binding around a Kaia contract.
type IERC20MetadataCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MetadataTransactor is an auto generated write-only Go binding around a Kaia contract.
type IERC20MetadataTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MetadataFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type IERC20MetadataFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MetadataSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type IERC20MetadataSession struct {
	Contract     *IERC20Metadata   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20MetadataCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type IERC20MetadataCallerSession struct {
	Contract *IERC20MetadataCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IERC20MetadataTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type IERC20MetadataTransactorSession struct {
	Contract     *IERC20MetadataTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IERC20MetadataRaw is an auto generated low-level Go binding around a Kaia contract.
type IERC20MetadataRaw struct {
	Contract *IERC20Metadata // Generic contract binding to access the raw methods on
}

// IERC20MetadataCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type IERC20MetadataCallerRaw struct {
	Contract *IERC20MetadataCaller // Generic read-only contract binding to access the raw methods on
}

// IERC20MetadataTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type IERC20MetadataTransactorRaw struct {
	Contract *IERC20MetadataTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20Metadata creates a new instance of IERC20Metadata, bound to a specific deployed contract.
func NewIERC20Metadata(address common.Address, backend bind.ContractBackend) (*IERC20Metadata, error) {
	contract, err := bindIERC20Metadata(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20Metadata{IERC20MetadataCaller: IERC20MetadataCaller{contract: contract}, IERC20MetadataTransactor: IERC20MetadataTransactor{contract: contract}, IERC20MetadataFilterer: IERC20MetadataFilterer{contract: contract}}, nil
}

// NewIERC20MetadataCaller creates a new read-only instance of IERC20Metadata, bound to a specific deployed contract.
func NewIERC20MetadataCaller(address common.Address, caller bind.ContractCaller) (*IERC20MetadataCaller, error) {
	contract, err := bindIERC20Metadata(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataCaller{contract: contract}, nil
}

// NewIERC20MetadataTransactor creates a new write-only instance of IERC20Metadata, bound to a specific deployed contract.
func NewIERC20MetadataTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC20MetadataTransactor, error) {
	contract, err := bindIERC20Metadata(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataTransactor{contract: contract}, nil
}

// NewIERC20MetadataFilterer creates a new log filterer instance of IERC20Metadata, bound to a specific deployed contract.
func NewIERC20MetadataFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC20MetadataFilterer, error) {
	contract, err := bindIERC20Metadata(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataFilterer{contract: contract}, nil
}

// bindIERC20Metadata binds a generic wrapper to an already deployed contract.
func bindIERC20Metadata(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC20MetadataMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Metadata *IERC20MetadataRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Metadata.Contract.IERC20MetadataCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Metadata *IERC20MetadataRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.IERC20MetadataTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Metadata *IERC20MetadataRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.IERC20MetadataTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Metadata *IERC20MetadataCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Metadata.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Metadata *IERC20MetadataTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Metadata *IERC20MetadataTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20Metadata.Contract.Allowance(&_IERC20Metadata.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20Metadata.Contract.Allowance(&_IERC20Metadata.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Metadata.Contract.BalanceOf(&_IERC20Metadata.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Metadata.Contract.BalanceOf(&_IERC20Metadata.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20Metadata *IERC20MetadataCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20Metadata *IERC20MetadataSession) Decimals() (uint8, error) {
	return _IERC20Metadata.Contract.Decimals(&_IERC20Metadata.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20Metadata *IERC20MetadataCallerSession) Decimals() (uint8, error) {
	return _IERC20Metadata.Contract.Decimals(&_IERC20Metadata.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20Metadata *IERC20MetadataCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20Metadata *IERC20MetadataSession) Name() (string, error) {
	return _IERC20Metadata.Contract.Name(&_IERC20Metadata.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20Metadata *IERC20MetadataCallerSession) Name() (string, error) {
	return _IERC20Metadata.Contract.Name(&_IERC20Metadata.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20Metadata *IERC20MetadataCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20Metadata *IERC20MetadataSession) Symbol() (string, error) {
	return _IERC20Metadata.Contract.Symbol(&_IERC20Metadata.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20Metadata *IERC20MetadataCallerSession) Symbol() (string, error) {
	return _IERC20Metadata.Contract.Symbol(&_IERC20Metadata.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Metadata *IERC20MetadataSession) TotalSupply() (*big.Int, error) {
	return _IERC20Metadata.Contract.TotalSupply(&_IERC20Metadata.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20Metadata.Contract.TotalSupply(&_IERC20Metadata.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_IERC20Metadata *IERC20MetadataSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.Approve(&_IERC20Metadata.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.Approve(&_IERC20Metadata.TransactOpts, spender, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_IERC20Metadata *IERC20MetadataSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.Transfer(&_IERC20Metadata.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.Transfer(&_IERC20Metadata.TransactOpts, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_IERC20Metadata *IERC20MetadataSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.TransferFrom(&_IERC20Metadata.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.TransferFrom(&_IERC20Metadata.TransactOpts, from, to, value)
}

// IERC20MetadataApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20Metadata contract.
type IERC20MetadataApprovalIterator struct {
	Event *IERC20MetadataApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20MetadataApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20MetadataApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20MetadataApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20MetadataApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20MetadataApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20MetadataApproval represents a Approval event raised by the IERC20Metadata contract.
type IERC20MetadataApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20MetadataApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20Metadata.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataApprovalIterator{contract: _IERC20Metadata.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20MetadataApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20Metadata.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20MetadataApproval)
				if err := _IERC20Metadata.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) ParseApproval(log types.Log) (*IERC20MetadataApproval, error) {
	event := new(IERC20MetadataApproval)
	if err := _IERC20Metadata.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20MetadataTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20Metadata contract.
type IERC20MetadataTransferIterator struct {
	Event *IERC20MetadataTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20MetadataTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20MetadataTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20MetadataTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20MetadataTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20MetadataTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20MetadataTransfer represents a Transfer event raised by the IERC20Metadata contract.
type IERC20MetadataTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20MetadataTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20Metadata.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataTransferIterator{contract: _IERC20Metadata.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20MetadataTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20Metadata.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20MetadataTransfer)
				if err := _IERC20Metadata.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) ParseTransfer(log types.Log) (*IERC20MetadataTransfer, error) {
	event := new(IERC20MetadataTransfer)
	if err := _IERC20Metadata.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721ErrorsMetaData contains all meta data concerning the IERC721Errors contract.
var IERC721ErrorsMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}]",
}

// IERC721ErrorsABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721ErrorsMetaData.ABI instead.
var IERC721ErrorsABI = IERC721ErrorsMetaData.ABI

// IERC721ErrorsBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const IERC721ErrorsBinRuntime = ``

// IERC721Errors is an auto generated Go binding around a Kaia contract.
type IERC721Errors struct {
	IERC721ErrorsCaller     // Read-only binding to the contract
	IERC721ErrorsTransactor // Write-only binding to the contract
	IERC721ErrorsFilterer   // Log filterer for contract events
}

// IERC721ErrorsCaller is an auto generated read-only Go binding around a Kaia contract.
type IERC721ErrorsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ErrorsTransactor is an auto generated write-only Go binding around a Kaia contract.
type IERC721ErrorsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ErrorsFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type IERC721ErrorsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ErrorsSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type IERC721ErrorsSession struct {
	Contract     *IERC721Errors    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC721ErrorsCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type IERC721ErrorsCallerSession struct {
	Contract *IERC721ErrorsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// IERC721ErrorsTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type IERC721ErrorsTransactorSession struct {
	Contract     *IERC721ErrorsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// IERC721ErrorsRaw is an auto generated low-level Go binding around a Kaia contract.
type IERC721ErrorsRaw struct {
	Contract *IERC721Errors // Generic contract binding to access the raw methods on
}

// IERC721ErrorsCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type IERC721ErrorsCallerRaw struct {
	Contract *IERC721ErrorsCaller // Generic read-only contract binding to access the raw methods on
}

// IERC721ErrorsTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type IERC721ErrorsTransactorRaw struct {
	Contract *IERC721ErrorsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721Errors creates a new instance of IERC721Errors, bound to a specific deployed contract.
func NewIERC721Errors(address common.Address, backend bind.ContractBackend) (*IERC721Errors, error) {
	contract, err := bindIERC721Errors(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721Errors{IERC721ErrorsCaller: IERC721ErrorsCaller{contract: contract}, IERC721ErrorsTransactor: IERC721ErrorsTransactor{contract: contract}, IERC721ErrorsFilterer: IERC721ErrorsFilterer{contract: contract}}, nil
}

// NewIERC721ErrorsCaller creates a new read-only instance of IERC721Errors, bound to a specific deployed contract.
func NewIERC721ErrorsCaller(address common.Address, caller bind.ContractCaller) (*IERC721ErrorsCaller, error) {
	contract, err := bindIERC721Errors(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721ErrorsCaller{contract: contract}, nil
}

// NewIERC721ErrorsTransactor creates a new write-only instance of IERC721Errors, bound to a specific deployed contract.
func NewIERC721ErrorsTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC721ErrorsTransactor, error) {
	contract, err := bindIERC721Errors(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721ErrorsTransactor{contract: contract}, nil
}

// NewIERC721ErrorsFilterer creates a new log filterer instance of IERC721Errors, bound to a specific deployed contract.
func NewIERC721ErrorsFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC721ErrorsFilterer, error) {
	contract, err := bindIERC721Errors(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721ErrorsFilterer{contract: contract}, nil
}

// bindIERC721Errors binds a generic wrapper to an already deployed contract.
func bindIERC721Errors(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC721ErrorsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Errors *IERC721ErrorsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Errors.Contract.IERC721ErrorsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Errors *IERC721ErrorsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Errors.Contract.IERC721ErrorsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Errors *IERC721ErrorsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Errors.Contract.IERC721ErrorsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Errors *IERC721ErrorsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Errors.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Errors *IERC721ErrorsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Errors.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Errors *IERC721ErrorsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Errors.Contract.contract.Transact(opts, method, params...)
}

// IKIP163MetaData contains all meta data concerning the IKIP163 contract.
var IKIP163MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"228cb733": "reward()",
		"4bf69206": "stakeFor(address)",
	},
}

// IKIP163ABI is the input ABI used to generate the binding from.
// Deprecated: Use IKIP163MetaData.ABI instead.
var IKIP163ABI = IKIP163MetaData.ABI

// IKIP163BinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const IKIP163BinRuntime = ``

// Deprecated: Use IKIP163MetaData.Sigs instead.
// IKIP163FuncSigs maps the 4-byte function signature to its string representation.
var IKIP163FuncSigs = IKIP163MetaData.Sigs

// IKIP163 is an auto generated Go binding around a Kaia contract.
type IKIP163 struct {
	IKIP163Caller     // Read-only binding to the contract
	IKIP163Transactor // Write-only binding to the contract
	IKIP163Filterer   // Log filterer for contract events
}

// IKIP163Caller is an auto generated read-only Go binding around a Kaia contract.
type IKIP163Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IKIP163Transactor is an auto generated write-only Go binding around a Kaia contract.
type IKIP163Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IKIP163Filterer is an auto generated log filtering Go binding around a Kaia contract events.
type IKIP163Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IKIP163Session is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type IKIP163Session struct {
	Contract     *IKIP163          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IKIP163CallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type IKIP163CallerSession struct {
	Contract *IKIP163Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IKIP163TransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type IKIP163TransactorSession struct {
	Contract     *IKIP163Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IKIP163Raw is an auto generated low-level Go binding around a Kaia contract.
type IKIP163Raw struct {
	Contract *IKIP163 // Generic contract binding to access the raw methods on
}

// IKIP163CallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type IKIP163CallerRaw struct {
	Contract *IKIP163Caller // Generic read-only contract binding to access the raw methods on
}

// IKIP163TransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type IKIP163TransactorRaw struct {
	Contract *IKIP163Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIKIP163 creates a new instance of IKIP163, bound to a specific deployed contract.
func NewIKIP163(address common.Address, backend bind.ContractBackend) (*IKIP163, error) {
	contract, err := bindIKIP163(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IKIP163{IKIP163Caller: IKIP163Caller{contract: contract}, IKIP163Transactor: IKIP163Transactor{contract: contract}, IKIP163Filterer: IKIP163Filterer{contract: contract}}, nil
}

// NewIKIP163Caller creates a new read-only instance of IKIP163, bound to a specific deployed contract.
func NewIKIP163Caller(address common.Address, caller bind.ContractCaller) (*IKIP163Caller, error) {
	contract, err := bindIKIP163(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IKIP163Caller{contract: contract}, nil
}

// NewIKIP163Transactor creates a new write-only instance of IKIP163, bound to a specific deployed contract.
func NewIKIP163Transactor(address common.Address, transactor bind.ContractTransactor) (*IKIP163Transactor, error) {
	contract, err := bindIKIP163(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IKIP163Transactor{contract: contract}, nil
}

// NewIKIP163Filterer creates a new log filterer instance of IKIP163, bound to a specific deployed contract.
func NewIKIP163Filterer(address common.Address, filterer bind.ContractFilterer) (*IKIP163Filterer, error) {
	contract, err := bindIKIP163(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IKIP163Filterer{contract: contract}, nil
}

// bindIKIP163 binds a generic wrapper to an already deployed contract.
func bindIKIP163(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IKIP163MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IKIP163 *IKIP163Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IKIP163.Contract.IKIP163Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IKIP163 *IKIP163Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IKIP163.Contract.IKIP163Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IKIP163 *IKIP163Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IKIP163.Contract.IKIP163Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IKIP163 *IKIP163CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IKIP163.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IKIP163 *IKIP163TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IKIP163.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IKIP163 *IKIP163TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IKIP163.Contract.contract.Transact(opts, method, params...)
}

// Reward is a free data retrieval call binding the contract method 0x228cb733.
//
// Solidity: function reward() view returns(uint256)
func (_IKIP163 *IKIP163Caller) Reward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IKIP163.contract.Call(opts, &out, "reward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Reward is a free data retrieval call binding the contract method 0x228cb733.
//
// Solidity: function reward() view returns(uint256)
func (_IKIP163 *IKIP163Session) Reward() (*big.Int, error) {
	return _IKIP163.Contract.Reward(&_IKIP163.CallOpts)
}

// Reward is a free data retrieval call binding the contract method 0x228cb733.
//
// Solidity: function reward() view returns(uint256)
func (_IKIP163 *IKIP163CallerSession) Reward() (*big.Int, error) {
	return _IKIP163.Contract.Reward(&_IKIP163.CallOpts)
}

// StakeFor is a paid mutator transaction binding the contract method 0x4bf69206.
//
// Solidity: function stakeFor(address _recipient) payable returns()
func (_IKIP163 *IKIP163Transactor) StakeFor(opts *bind.TransactOpts, _recipient common.Address) (*types.Transaction, error) {
	return _IKIP163.contract.Transact(opts, "stakeFor", _recipient)
}

// StakeFor is a paid mutator transaction binding the contract method 0x4bf69206.
//
// Solidity: function stakeFor(address _recipient) payable returns()
func (_IKIP163 *IKIP163Session) StakeFor(_recipient common.Address) (*types.Transaction, error) {
	return _IKIP163.Contract.StakeFor(&_IKIP163.TransactOpts, _recipient)
}

// StakeFor is a paid mutator transaction binding the contract method 0x4bf69206.
//
// Solidity: function stakeFor(address _recipient) payable returns()
func (_IKIP163 *IKIP163TransactorSession) StakeFor(_recipient common.Address) (*types.Transaction, error) {
	return _IKIP163.Contract.StakeFor(&_IKIP163.TransactOpts, _recipient)
}

// IPublicDelegationMetaData contains all meta data concerning the IPublicDelegation contract.
var IPublicDelegationMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_contractType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_baseCnStakingV3\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"commissionTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"gcName\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"structIPublicDelegation.PDConstructorArgs\",\"name\":\"_pdArgs\",\"type\":\"tuple\"}],\"name\":\"DeployContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_targetCnV3\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"Redelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"RequestCancelWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"RequestWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_commissionTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"SendCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_prevCommissionRate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"name\":\"UpdateCommissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_prevCommissionTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_commissionTo\",\"type\":\"address\"}],\"name\":\"UpdateCommissionTo\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMMISSION_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_COMMISSION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseCnStakingV3\",\"outputs\":[{\"internalType\":\"contractICnStakingV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"cancelApprovedStakingWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getCurrentWithdrawalRequestState\",\"outputs\":[{\"internalType\":\"enumIPublicDelegation.WithdrawalRequestState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getUserRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getUserRequestIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"enumIPublicDelegation.WithdrawalRequestState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"getUserRequestIdsWithState\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetCnV3\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"redelegateByAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetCnV3\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"redelegateByShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"requestIdToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"name\":\"updateCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_commissionTo\",\"type\":\"address\"}],\"name\":\"updateCommissionTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"userRequestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"3b1dbfcc": "COMMISSION_DENOMINATOR()",
		"4b6a94cc": "CONTRACT_TYPE()",
		"207239c0": "MAX_COMMISSION_RATE()",
		"ffa1ad74": "VERSION()",
		"e2c8bde5": "baseCnStakingV3()",
		"c804b115": "cancelApprovedStakingWithdrawal(uint256)",
		"379607f5": "claim(uint256)",
		"5ea1d6f8": "commissionRate()",
		"2f9ac83a": "commissionTo()",
		"07a2d13a": "convertToAssets(uint256)",
		"c6e6f592": "convertToShares(uint256)",
		"04ddc9d1": "getCurrentWithdrawalRequestState(uint256)",
		"c166c458": "getUserRequestCount(address)",
		"60df7c6c": "getUserRequestIds(address)",
		"93b89a84": "getUserRequestIdsWithState(address,uint8)",
		"d905777e": "maxRedeem(address)",
		"ce96cb77": "maxWithdraw(address)",
		"ef8b30f7": "previewDeposit(uint256)",
		"4cdad506": "previewRedeem(uint256)",
		"0a28a477": "previewWithdraw(uint256)",
		"1e9a6950": "redeem(address,uint256)",
		"e659d7d7": "redelegateByAssets(address,uint256)",
		"e15fc350": "redelegateByShares(address,uint256)",
		"f29177c3": "requestIdToOwner(uint256)",
		"228cb733": "reward()",
		"3a4b66f1": "stake()",
		"4bf69206": "stakeFor(address)",
		"35faa416": "sweep()",
		"01e1d114": "totalAssets()",
		"00fa3d50": "updateCommissionRate(uint256)",
		"052028d0": "updateCommissionTo(address)",
		"97feb23c": "userRequestIds(address,uint256)",
		"f3fef3a3": "withdraw(address,uint256)",
	},
}

// IPublicDelegationABI is the input ABI used to generate the binding from.
// Deprecated: Use IPublicDelegationMetaData.ABI instead.
var IPublicDelegationABI = IPublicDelegationMetaData.ABI

// IPublicDelegationBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const IPublicDelegationBinRuntime = ``

// Deprecated: Use IPublicDelegationMetaData.Sigs instead.
// IPublicDelegationFuncSigs maps the 4-byte function signature to its string representation.
var IPublicDelegationFuncSigs = IPublicDelegationMetaData.Sigs

// IPublicDelegation is an auto generated Go binding around a Kaia contract.
type IPublicDelegation struct {
	IPublicDelegationCaller     // Read-only binding to the contract
	IPublicDelegationTransactor // Write-only binding to the contract
	IPublicDelegationFilterer   // Log filterer for contract events
}

// IPublicDelegationCaller is an auto generated read-only Go binding around a Kaia contract.
type IPublicDelegationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPublicDelegationTransactor is an auto generated write-only Go binding around a Kaia contract.
type IPublicDelegationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPublicDelegationFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type IPublicDelegationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPublicDelegationSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type IPublicDelegationSession struct {
	Contract     *IPublicDelegation // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IPublicDelegationCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type IPublicDelegationCallerSession struct {
	Contract *IPublicDelegationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// IPublicDelegationTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type IPublicDelegationTransactorSession struct {
	Contract     *IPublicDelegationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// IPublicDelegationRaw is an auto generated low-level Go binding around a Kaia contract.
type IPublicDelegationRaw struct {
	Contract *IPublicDelegation // Generic contract binding to access the raw methods on
}

// IPublicDelegationCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type IPublicDelegationCallerRaw struct {
	Contract *IPublicDelegationCaller // Generic read-only contract binding to access the raw methods on
}

// IPublicDelegationTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type IPublicDelegationTransactorRaw struct {
	Contract *IPublicDelegationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIPublicDelegation creates a new instance of IPublicDelegation, bound to a specific deployed contract.
func NewIPublicDelegation(address common.Address, backend bind.ContractBackend) (*IPublicDelegation, error) {
	contract, err := bindIPublicDelegation(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IPublicDelegation{IPublicDelegationCaller: IPublicDelegationCaller{contract: contract}, IPublicDelegationTransactor: IPublicDelegationTransactor{contract: contract}, IPublicDelegationFilterer: IPublicDelegationFilterer{contract: contract}}, nil
}

// NewIPublicDelegationCaller creates a new read-only instance of IPublicDelegation, bound to a specific deployed contract.
func NewIPublicDelegationCaller(address common.Address, caller bind.ContractCaller) (*IPublicDelegationCaller, error) {
	contract, err := bindIPublicDelegation(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IPublicDelegationCaller{contract: contract}, nil
}

// NewIPublicDelegationTransactor creates a new write-only instance of IPublicDelegation, bound to a specific deployed contract.
func NewIPublicDelegationTransactor(address common.Address, transactor bind.ContractTransactor) (*IPublicDelegationTransactor, error) {
	contract, err := bindIPublicDelegation(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IPublicDelegationTransactor{contract: contract}, nil
}

// NewIPublicDelegationFilterer creates a new log filterer instance of IPublicDelegation, bound to a specific deployed contract.
func NewIPublicDelegationFilterer(address common.Address, filterer bind.ContractFilterer) (*IPublicDelegationFilterer, error) {
	contract, err := bindIPublicDelegation(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IPublicDelegationFilterer{contract: contract}, nil
}

// bindIPublicDelegation binds a generic wrapper to an already deployed contract.
func bindIPublicDelegation(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IPublicDelegationMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IPublicDelegation *IPublicDelegationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IPublicDelegation.Contract.IPublicDelegationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IPublicDelegation *IPublicDelegationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.IPublicDelegationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IPublicDelegation *IPublicDelegationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.IPublicDelegationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IPublicDelegation *IPublicDelegationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IPublicDelegation.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IPublicDelegation *IPublicDelegationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IPublicDelegation *IPublicDelegationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.contract.Transact(opts, method, params...)
}

// COMMISSIONDENOMINATOR is a free data retrieval call binding the contract method 0x3b1dbfcc.
//
// Solidity: function COMMISSION_DENOMINATOR() pure returns(uint256)
func (_IPublicDelegation *IPublicDelegationCaller) COMMISSIONDENOMINATOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "COMMISSION_DENOMINATOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMISSIONDENOMINATOR is a free data retrieval call binding the contract method 0x3b1dbfcc.
//
// Solidity: function COMMISSION_DENOMINATOR() pure returns(uint256)
func (_IPublicDelegation *IPublicDelegationSession) COMMISSIONDENOMINATOR() (*big.Int, error) {
	return _IPublicDelegation.Contract.COMMISSIONDENOMINATOR(&_IPublicDelegation.CallOpts)
}

// COMMISSIONDENOMINATOR is a free data retrieval call binding the contract method 0x3b1dbfcc.
//
// Solidity: function COMMISSION_DENOMINATOR() pure returns(uint256)
func (_IPublicDelegation *IPublicDelegationCallerSession) COMMISSIONDENOMINATOR() (*big.Int, error) {
	return _IPublicDelegation.Contract.COMMISSIONDENOMINATOR(&_IPublicDelegation.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() pure returns(string)
func (_IPublicDelegation *IPublicDelegationCaller) CONTRACTTYPE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "CONTRACT_TYPE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() pure returns(string)
func (_IPublicDelegation *IPublicDelegationSession) CONTRACTTYPE() (string, error) {
	return _IPublicDelegation.Contract.CONTRACTTYPE(&_IPublicDelegation.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() pure returns(string)
func (_IPublicDelegation *IPublicDelegationCallerSession) CONTRACTTYPE() (string, error) {
	return _IPublicDelegation.Contract.CONTRACTTYPE(&_IPublicDelegation.CallOpts)
}

// MAXCOMMISSIONRATE is a free data retrieval call binding the contract method 0x207239c0.
//
// Solidity: function MAX_COMMISSION_RATE() pure returns(uint256)
func (_IPublicDelegation *IPublicDelegationCaller) MAXCOMMISSIONRATE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "MAX_COMMISSION_RATE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXCOMMISSIONRATE is a free data retrieval call binding the contract method 0x207239c0.
//
// Solidity: function MAX_COMMISSION_RATE() pure returns(uint256)
func (_IPublicDelegation *IPublicDelegationSession) MAXCOMMISSIONRATE() (*big.Int, error) {
	return _IPublicDelegation.Contract.MAXCOMMISSIONRATE(&_IPublicDelegation.CallOpts)
}

// MAXCOMMISSIONRATE is a free data retrieval call binding the contract method 0x207239c0.
//
// Solidity: function MAX_COMMISSION_RATE() pure returns(uint256)
func (_IPublicDelegation *IPublicDelegationCallerSession) MAXCOMMISSIONRATE() (*big.Int, error) {
	return _IPublicDelegation.Contract.MAXCOMMISSIONRATE(&_IPublicDelegation.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(uint256)
func (_IPublicDelegation *IPublicDelegationCaller) VERSION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(uint256)
func (_IPublicDelegation *IPublicDelegationSession) VERSION() (*big.Int, error) {
	return _IPublicDelegation.Contract.VERSION(&_IPublicDelegation.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() pure returns(uint256)
func (_IPublicDelegation *IPublicDelegationCallerSession) VERSION() (*big.Int, error) {
	return _IPublicDelegation.Contract.VERSION(&_IPublicDelegation.CallOpts)
}

// BaseCnStakingV3 is a free data retrieval call binding the contract method 0xe2c8bde5.
//
// Solidity: function baseCnStakingV3() view returns(address)
func (_IPublicDelegation *IPublicDelegationCaller) BaseCnStakingV3(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "baseCnStakingV3")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BaseCnStakingV3 is a free data retrieval call binding the contract method 0xe2c8bde5.
//
// Solidity: function baseCnStakingV3() view returns(address)
func (_IPublicDelegation *IPublicDelegationSession) BaseCnStakingV3() (common.Address, error) {
	return _IPublicDelegation.Contract.BaseCnStakingV3(&_IPublicDelegation.CallOpts)
}

// BaseCnStakingV3 is a free data retrieval call binding the contract method 0xe2c8bde5.
//
// Solidity: function baseCnStakingV3() view returns(address)
func (_IPublicDelegation *IPublicDelegationCallerSession) BaseCnStakingV3() (common.Address, error) {
	return _IPublicDelegation.Contract.BaseCnStakingV3(&_IPublicDelegation.CallOpts)
}

// CommissionRate is a free data retrieval call binding the contract method 0x5ea1d6f8.
//
// Solidity: function commissionRate() view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCaller) CommissionRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "commissionRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CommissionRate is a free data retrieval call binding the contract method 0x5ea1d6f8.
//
// Solidity: function commissionRate() view returns(uint256)
func (_IPublicDelegation *IPublicDelegationSession) CommissionRate() (*big.Int, error) {
	return _IPublicDelegation.Contract.CommissionRate(&_IPublicDelegation.CallOpts)
}

// CommissionRate is a free data retrieval call binding the contract method 0x5ea1d6f8.
//
// Solidity: function commissionRate() view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCallerSession) CommissionRate() (*big.Int, error) {
	return _IPublicDelegation.Contract.CommissionRate(&_IPublicDelegation.CallOpts)
}

// CommissionTo is a free data retrieval call binding the contract method 0x2f9ac83a.
//
// Solidity: function commissionTo() view returns(address)
func (_IPublicDelegation *IPublicDelegationCaller) CommissionTo(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "commissionTo")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CommissionTo is a free data retrieval call binding the contract method 0x2f9ac83a.
//
// Solidity: function commissionTo() view returns(address)
func (_IPublicDelegation *IPublicDelegationSession) CommissionTo() (common.Address, error) {
	return _IPublicDelegation.Contract.CommissionTo(&_IPublicDelegation.CallOpts)
}

// CommissionTo is a free data retrieval call binding the contract method 0x2f9ac83a.
//
// Solidity: function commissionTo() view returns(address)
func (_IPublicDelegation *IPublicDelegationCallerSession) CommissionTo() (common.Address, error) {
	return _IPublicDelegation.Contract.CommissionTo(&_IPublicDelegation.CallOpts)
}

// ConvertToAssets is a free data retrieval call binding the contract method 0x07a2d13a.
//
// Solidity: function convertToAssets(uint256 _shares) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCaller) ConvertToAssets(opts *bind.CallOpts, _shares *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "convertToAssets", _shares)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ConvertToAssets is a free data retrieval call binding the contract method 0x07a2d13a.
//
// Solidity: function convertToAssets(uint256 _shares) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationSession) ConvertToAssets(_shares *big.Int) (*big.Int, error) {
	return _IPublicDelegation.Contract.ConvertToAssets(&_IPublicDelegation.CallOpts, _shares)
}

// ConvertToAssets is a free data retrieval call binding the contract method 0x07a2d13a.
//
// Solidity: function convertToAssets(uint256 _shares) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCallerSession) ConvertToAssets(_shares *big.Int) (*big.Int, error) {
	return _IPublicDelegation.Contract.ConvertToAssets(&_IPublicDelegation.CallOpts, _shares)
}

// ConvertToShares is a free data retrieval call binding the contract method 0xc6e6f592.
//
// Solidity: function convertToShares(uint256 _assets) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCaller) ConvertToShares(opts *bind.CallOpts, _assets *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "convertToShares", _assets)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ConvertToShares is a free data retrieval call binding the contract method 0xc6e6f592.
//
// Solidity: function convertToShares(uint256 _assets) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationSession) ConvertToShares(_assets *big.Int) (*big.Int, error) {
	return _IPublicDelegation.Contract.ConvertToShares(&_IPublicDelegation.CallOpts, _assets)
}

// ConvertToShares is a free data retrieval call binding the contract method 0xc6e6f592.
//
// Solidity: function convertToShares(uint256 _assets) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCallerSession) ConvertToShares(_assets *big.Int) (*big.Int, error) {
	return _IPublicDelegation.Contract.ConvertToShares(&_IPublicDelegation.CallOpts, _assets)
}

// GetCurrentWithdrawalRequestState is a free data retrieval call binding the contract method 0x04ddc9d1.
//
// Solidity: function getCurrentWithdrawalRequestState(uint256 _requestId) view returns(uint8)
func (_IPublicDelegation *IPublicDelegationCaller) GetCurrentWithdrawalRequestState(opts *bind.CallOpts, _requestId *big.Int) (uint8, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "getCurrentWithdrawalRequestState", _requestId)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetCurrentWithdrawalRequestState is a free data retrieval call binding the contract method 0x04ddc9d1.
//
// Solidity: function getCurrentWithdrawalRequestState(uint256 _requestId) view returns(uint8)
func (_IPublicDelegation *IPublicDelegationSession) GetCurrentWithdrawalRequestState(_requestId *big.Int) (uint8, error) {
	return _IPublicDelegation.Contract.GetCurrentWithdrawalRequestState(&_IPublicDelegation.CallOpts, _requestId)
}

// GetCurrentWithdrawalRequestState is a free data retrieval call binding the contract method 0x04ddc9d1.
//
// Solidity: function getCurrentWithdrawalRequestState(uint256 _requestId) view returns(uint8)
func (_IPublicDelegation *IPublicDelegationCallerSession) GetCurrentWithdrawalRequestState(_requestId *big.Int) (uint8, error) {
	return _IPublicDelegation.Contract.GetCurrentWithdrawalRequestState(&_IPublicDelegation.CallOpts, _requestId)
}

// GetUserRequestCount is a free data retrieval call binding the contract method 0xc166c458.
//
// Solidity: function getUserRequestCount(address _owner) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCaller) GetUserRequestCount(opts *bind.CallOpts, _owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "getUserRequestCount", _owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUserRequestCount is a free data retrieval call binding the contract method 0xc166c458.
//
// Solidity: function getUserRequestCount(address _owner) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationSession) GetUserRequestCount(_owner common.Address) (*big.Int, error) {
	return _IPublicDelegation.Contract.GetUserRequestCount(&_IPublicDelegation.CallOpts, _owner)
}

// GetUserRequestCount is a free data retrieval call binding the contract method 0xc166c458.
//
// Solidity: function getUserRequestCount(address _owner) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCallerSession) GetUserRequestCount(_owner common.Address) (*big.Int, error) {
	return _IPublicDelegation.Contract.GetUserRequestCount(&_IPublicDelegation.CallOpts, _owner)
}

// GetUserRequestIds is a free data retrieval call binding the contract method 0x60df7c6c.
//
// Solidity: function getUserRequestIds(address _owner) view returns(uint256[])
func (_IPublicDelegation *IPublicDelegationCaller) GetUserRequestIds(opts *bind.CallOpts, _owner common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "getUserRequestIds", _owner)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetUserRequestIds is a free data retrieval call binding the contract method 0x60df7c6c.
//
// Solidity: function getUserRequestIds(address _owner) view returns(uint256[])
func (_IPublicDelegation *IPublicDelegationSession) GetUserRequestIds(_owner common.Address) ([]*big.Int, error) {
	return _IPublicDelegation.Contract.GetUserRequestIds(&_IPublicDelegation.CallOpts, _owner)
}

// GetUserRequestIds is a free data retrieval call binding the contract method 0x60df7c6c.
//
// Solidity: function getUserRequestIds(address _owner) view returns(uint256[])
func (_IPublicDelegation *IPublicDelegationCallerSession) GetUserRequestIds(_owner common.Address) ([]*big.Int, error) {
	return _IPublicDelegation.Contract.GetUserRequestIds(&_IPublicDelegation.CallOpts, _owner)
}

// GetUserRequestIdsWithState is a free data retrieval call binding the contract method 0x93b89a84.
//
// Solidity: function getUserRequestIdsWithState(address _owner, uint8 _state) view returns(uint256[])
func (_IPublicDelegation *IPublicDelegationCaller) GetUserRequestIdsWithState(opts *bind.CallOpts, _owner common.Address, _state uint8) ([]*big.Int, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "getUserRequestIdsWithState", _owner, _state)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetUserRequestIdsWithState is a free data retrieval call binding the contract method 0x93b89a84.
//
// Solidity: function getUserRequestIdsWithState(address _owner, uint8 _state) view returns(uint256[])
func (_IPublicDelegation *IPublicDelegationSession) GetUserRequestIdsWithState(_owner common.Address, _state uint8) ([]*big.Int, error) {
	return _IPublicDelegation.Contract.GetUserRequestIdsWithState(&_IPublicDelegation.CallOpts, _owner, _state)
}

// GetUserRequestIdsWithState is a free data retrieval call binding the contract method 0x93b89a84.
//
// Solidity: function getUserRequestIdsWithState(address _owner, uint8 _state) view returns(uint256[])
func (_IPublicDelegation *IPublicDelegationCallerSession) GetUserRequestIdsWithState(_owner common.Address, _state uint8) ([]*big.Int, error) {
	return _IPublicDelegation.Contract.GetUserRequestIdsWithState(&_IPublicDelegation.CallOpts, _owner, _state)
}

// MaxRedeem is a free data retrieval call binding the contract method 0xd905777e.
//
// Solidity: function maxRedeem(address _owner) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCaller) MaxRedeem(opts *bind.CallOpts, _owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "maxRedeem", _owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxRedeem is a free data retrieval call binding the contract method 0xd905777e.
//
// Solidity: function maxRedeem(address _owner) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationSession) MaxRedeem(_owner common.Address) (*big.Int, error) {
	return _IPublicDelegation.Contract.MaxRedeem(&_IPublicDelegation.CallOpts, _owner)
}

// MaxRedeem is a free data retrieval call binding the contract method 0xd905777e.
//
// Solidity: function maxRedeem(address _owner) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCallerSession) MaxRedeem(_owner common.Address) (*big.Int, error) {
	return _IPublicDelegation.Contract.MaxRedeem(&_IPublicDelegation.CallOpts, _owner)
}

// MaxWithdraw is a free data retrieval call binding the contract method 0xce96cb77.
//
// Solidity: function maxWithdraw(address _owner) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCaller) MaxWithdraw(opts *bind.CallOpts, _owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "maxWithdraw", _owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxWithdraw is a free data retrieval call binding the contract method 0xce96cb77.
//
// Solidity: function maxWithdraw(address _owner) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationSession) MaxWithdraw(_owner common.Address) (*big.Int, error) {
	return _IPublicDelegation.Contract.MaxWithdraw(&_IPublicDelegation.CallOpts, _owner)
}

// MaxWithdraw is a free data retrieval call binding the contract method 0xce96cb77.
//
// Solidity: function maxWithdraw(address _owner) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCallerSession) MaxWithdraw(_owner common.Address) (*big.Int, error) {
	return _IPublicDelegation.Contract.MaxWithdraw(&_IPublicDelegation.CallOpts, _owner)
}

// PreviewDeposit is a free data retrieval call binding the contract method 0xef8b30f7.
//
// Solidity: function previewDeposit(uint256 _assets) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCaller) PreviewDeposit(opts *bind.CallOpts, _assets *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "previewDeposit", _assets)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PreviewDeposit is a free data retrieval call binding the contract method 0xef8b30f7.
//
// Solidity: function previewDeposit(uint256 _assets) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationSession) PreviewDeposit(_assets *big.Int) (*big.Int, error) {
	return _IPublicDelegation.Contract.PreviewDeposit(&_IPublicDelegation.CallOpts, _assets)
}

// PreviewDeposit is a free data retrieval call binding the contract method 0xef8b30f7.
//
// Solidity: function previewDeposit(uint256 _assets) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCallerSession) PreviewDeposit(_assets *big.Int) (*big.Int, error) {
	return _IPublicDelegation.Contract.PreviewDeposit(&_IPublicDelegation.CallOpts, _assets)
}

// PreviewRedeem is a free data retrieval call binding the contract method 0x4cdad506.
//
// Solidity: function previewRedeem(uint256 _shares) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCaller) PreviewRedeem(opts *bind.CallOpts, _shares *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "previewRedeem", _shares)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PreviewRedeem is a free data retrieval call binding the contract method 0x4cdad506.
//
// Solidity: function previewRedeem(uint256 _shares) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationSession) PreviewRedeem(_shares *big.Int) (*big.Int, error) {
	return _IPublicDelegation.Contract.PreviewRedeem(&_IPublicDelegation.CallOpts, _shares)
}

// PreviewRedeem is a free data retrieval call binding the contract method 0x4cdad506.
//
// Solidity: function previewRedeem(uint256 _shares) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCallerSession) PreviewRedeem(_shares *big.Int) (*big.Int, error) {
	return _IPublicDelegation.Contract.PreviewRedeem(&_IPublicDelegation.CallOpts, _shares)
}

// PreviewWithdraw is a free data retrieval call binding the contract method 0x0a28a477.
//
// Solidity: function previewWithdraw(uint256 _assets) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCaller) PreviewWithdraw(opts *bind.CallOpts, _assets *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "previewWithdraw", _assets)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PreviewWithdraw is a free data retrieval call binding the contract method 0x0a28a477.
//
// Solidity: function previewWithdraw(uint256 _assets) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationSession) PreviewWithdraw(_assets *big.Int) (*big.Int, error) {
	return _IPublicDelegation.Contract.PreviewWithdraw(&_IPublicDelegation.CallOpts, _assets)
}

// PreviewWithdraw is a free data retrieval call binding the contract method 0x0a28a477.
//
// Solidity: function previewWithdraw(uint256 _assets) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCallerSession) PreviewWithdraw(_assets *big.Int) (*big.Int, error) {
	return _IPublicDelegation.Contract.PreviewWithdraw(&_IPublicDelegation.CallOpts, _assets)
}

// RequestIdToOwner is a free data retrieval call binding the contract method 0xf29177c3.
//
// Solidity: function requestIdToOwner(uint256 _requestId) view returns(address)
func (_IPublicDelegation *IPublicDelegationCaller) RequestIdToOwner(opts *bind.CallOpts, _requestId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "requestIdToOwner", _requestId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RequestIdToOwner is a free data retrieval call binding the contract method 0xf29177c3.
//
// Solidity: function requestIdToOwner(uint256 _requestId) view returns(address)
func (_IPublicDelegation *IPublicDelegationSession) RequestIdToOwner(_requestId *big.Int) (common.Address, error) {
	return _IPublicDelegation.Contract.RequestIdToOwner(&_IPublicDelegation.CallOpts, _requestId)
}

// RequestIdToOwner is a free data retrieval call binding the contract method 0xf29177c3.
//
// Solidity: function requestIdToOwner(uint256 _requestId) view returns(address)
func (_IPublicDelegation *IPublicDelegationCallerSession) RequestIdToOwner(_requestId *big.Int) (common.Address, error) {
	return _IPublicDelegation.Contract.RequestIdToOwner(&_IPublicDelegation.CallOpts, _requestId)
}

// Reward is a free data retrieval call binding the contract method 0x228cb733.
//
// Solidity: function reward() view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCaller) Reward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "reward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Reward is a free data retrieval call binding the contract method 0x228cb733.
//
// Solidity: function reward() view returns(uint256)
func (_IPublicDelegation *IPublicDelegationSession) Reward() (*big.Int, error) {
	return _IPublicDelegation.Contract.Reward(&_IPublicDelegation.CallOpts)
}

// Reward is a free data retrieval call binding the contract method 0x228cb733.
//
// Solidity: function reward() view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCallerSession) Reward() (*big.Int, error) {
	return _IPublicDelegation.Contract.Reward(&_IPublicDelegation.CallOpts)
}

// TotalAssets is a free data retrieval call binding the contract method 0x01e1d114.
//
// Solidity: function totalAssets() view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCaller) TotalAssets(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "totalAssets")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalAssets is a free data retrieval call binding the contract method 0x01e1d114.
//
// Solidity: function totalAssets() view returns(uint256)
func (_IPublicDelegation *IPublicDelegationSession) TotalAssets() (*big.Int, error) {
	return _IPublicDelegation.Contract.TotalAssets(&_IPublicDelegation.CallOpts)
}

// TotalAssets is a free data retrieval call binding the contract method 0x01e1d114.
//
// Solidity: function totalAssets() view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCallerSession) TotalAssets() (*big.Int, error) {
	return _IPublicDelegation.Contract.TotalAssets(&_IPublicDelegation.CallOpts)
}

// UserRequestIds is a free data retrieval call binding the contract method 0x97feb23c.
//
// Solidity: function userRequestIds(address _owner, uint256 _index) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCaller) UserRequestIds(opts *bind.CallOpts, _owner common.Address, _index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IPublicDelegation.contract.Call(opts, &out, "userRequestIds", _owner, _index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UserRequestIds is a free data retrieval call binding the contract method 0x97feb23c.
//
// Solidity: function userRequestIds(address _owner, uint256 _index) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationSession) UserRequestIds(_owner common.Address, _index *big.Int) (*big.Int, error) {
	return _IPublicDelegation.Contract.UserRequestIds(&_IPublicDelegation.CallOpts, _owner, _index)
}

// UserRequestIds is a free data retrieval call binding the contract method 0x97feb23c.
//
// Solidity: function userRequestIds(address _owner, uint256 _index) view returns(uint256)
func (_IPublicDelegation *IPublicDelegationCallerSession) UserRequestIds(_owner common.Address, _index *big.Int) (*big.Int, error) {
	return _IPublicDelegation.Contract.UserRequestIds(&_IPublicDelegation.CallOpts, _owner, _index)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _requestId) returns()
func (_IPublicDelegation *IPublicDelegationTransactor) CancelApprovedStakingWithdrawal(opts *bind.TransactOpts, _requestId *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.contract.Transact(opts, "cancelApprovedStakingWithdrawal", _requestId)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _requestId) returns()
func (_IPublicDelegation *IPublicDelegationSession) CancelApprovedStakingWithdrawal(_requestId *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.CancelApprovedStakingWithdrawal(&_IPublicDelegation.TransactOpts, _requestId)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _requestId) returns()
func (_IPublicDelegation *IPublicDelegationTransactorSession) CancelApprovedStakingWithdrawal(_requestId *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.CancelApprovedStakingWithdrawal(&_IPublicDelegation.TransactOpts, _requestId)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 _requestId) returns()
func (_IPublicDelegation *IPublicDelegationTransactor) Claim(opts *bind.TransactOpts, _requestId *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.contract.Transact(opts, "claim", _requestId)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 _requestId) returns()
func (_IPublicDelegation *IPublicDelegationSession) Claim(_requestId *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.Claim(&_IPublicDelegation.TransactOpts, _requestId)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 _requestId) returns()
func (_IPublicDelegation *IPublicDelegationTransactorSession) Claim(_requestId *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.Claim(&_IPublicDelegation.TransactOpts, _requestId)
}

// Redeem is a paid mutator transaction binding the contract method 0x1e9a6950.
//
// Solidity: function redeem(address _recipient, uint256 _shares) returns()
func (_IPublicDelegation *IPublicDelegationTransactor) Redeem(opts *bind.TransactOpts, _recipient common.Address, _shares *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.contract.Transact(opts, "redeem", _recipient, _shares)
}

// Redeem is a paid mutator transaction binding the contract method 0x1e9a6950.
//
// Solidity: function redeem(address _recipient, uint256 _shares) returns()
func (_IPublicDelegation *IPublicDelegationSession) Redeem(_recipient common.Address, _shares *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.Redeem(&_IPublicDelegation.TransactOpts, _recipient, _shares)
}

// Redeem is a paid mutator transaction binding the contract method 0x1e9a6950.
//
// Solidity: function redeem(address _recipient, uint256 _shares) returns()
func (_IPublicDelegation *IPublicDelegationTransactorSession) Redeem(_recipient common.Address, _shares *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.Redeem(&_IPublicDelegation.TransactOpts, _recipient, _shares)
}

// RedelegateByAssets is a paid mutator transaction binding the contract method 0xe659d7d7.
//
// Solidity: function redelegateByAssets(address _targetCnV3, uint256 _assets) returns()
func (_IPublicDelegation *IPublicDelegationTransactor) RedelegateByAssets(opts *bind.TransactOpts, _targetCnV3 common.Address, _assets *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.contract.Transact(opts, "redelegateByAssets", _targetCnV3, _assets)
}

// RedelegateByAssets is a paid mutator transaction binding the contract method 0xe659d7d7.
//
// Solidity: function redelegateByAssets(address _targetCnV3, uint256 _assets) returns()
func (_IPublicDelegation *IPublicDelegationSession) RedelegateByAssets(_targetCnV3 common.Address, _assets *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.RedelegateByAssets(&_IPublicDelegation.TransactOpts, _targetCnV3, _assets)
}

// RedelegateByAssets is a paid mutator transaction binding the contract method 0xe659d7d7.
//
// Solidity: function redelegateByAssets(address _targetCnV3, uint256 _assets) returns()
func (_IPublicDelegation *IPublicDelegationTransactorSession) RedelegateByAssets(_targetCnV3 common.Address, _assets *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.RedelegateByAssets(&_IPublicDelegation.TransactOpts, _targetCnV3, _assets)
}

// RedelegateByShares is a paid mutator transaction binding the contract method 0xe15fc350.
//
// Solidity: function redelegateByShares(address _targetCnV3, uint256 _shares) returns()
func (_IPublicDelegation *IPublicDelegationTransactor) RedelegateByShares(opts *bind.TransactOpts, _targetCnV3 common.Address, _shares *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.contract.Transact(opts, "redelegateByShares", _targetCnV3, _shares)
}

// RedelegateByShares is a paid mutator transaction binding the contract method 0xe15fc350.
//
// Solidity: function redelegateByShares(address _targetCnV3, uint256 _shares) returns()
func (_IPublicDelegation *IPublicDelegationSession) RedelegateByShares(_targetCnV3 common.Address, _shares *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.RedelegateByShares(&_IPublicDelegation.TransactOpts, _targetCnV3, _shares)
}

// RedelegateByShares is a paid mutator transaction binding the contract method 0xe15fc350.
//
// Solidity: function redelegateByShares(address _targetCnV3, uint256 _shares) returns()
func (_IPublicDelegation *IPublicDelegationTransactorSession) RedelegateByShares(_targetCnV3 common.Address, _shares *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.RedelegateByShares(&_IPublicDelegation.TransactOpts, _targetCnV3, _shares)
}

// Stake is a paid mutator transaction binding the contract method 0x3a4b66f1.
//
// Solidity: function stake() payable returns()
func (_IPublicDelegation *IPublicDelegationTransactor) Stake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IPublicDelegation.contract.Transact(opts, "stake")
}

// Stake is a paid mutator transaction binding the contract method 0x3a4b66f1.
//
// Solidity: function stake() payable returns()
func (_IPublicDelegation *IPublicDelegationSession) Stake() (*types.Transaction, error) {
	return _IPublicDelegation.Contract.Stake(&_IPublicDelegation.TransactOpts)
}

// Stake is a paid mutator transaction binding the contract method 0x3a4b66f1.
//
// Solidity: function stake() payable returns()
func (_IPublicDelegation *IPublicDelegationTransactorSession) Stake() (*types.Transaction, error) {
	return _IPublicDelegation.Contract.Stake(&_IPublicDelegation.TransactOpts)
}

// StakeFor is a paid mutator transaction binding the contract method 0x4bf69206.
//
// Solidity: function stakeFor(address _recipient) payable returns()
func (_IPublicDelegation *IPublicDelegationTransactor) StakeFor(opts *bind.TransactOpts, _recipient common.Address) (*types.Transaction, error) {
	return _IPublicDelegation.contract.Transact(opts, "stakeFor", _recipient)
}

// StakeFor is a paid mutator transaction binding the contract method 0x4bf69206.
//
// Solidity: function stakeFor(address _recipient) payable returns()
func (_IPublicDelegation *IPublicDelegationSession) StakeFor(_recipient common.Address) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.StakeFor(&_IPublicDelegation.TransactOpts, _recipient)
}

// StakeFor is a paid mutator transaction binding the contract method 0x4bf69206.
//
// Solidity: function stakeFor(address _recipient) payable returns()
func (_IPublicDelegation *IPublicDelegationTransactorSession) StakeFor(_recipient common.Address) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.StakeFor(&_IPublicDelegation.TransactOpts, _recipient)
}

// Sweep is a paid mutator transaction binding the contract method 0x35faa416.
//
// Solidity: function sweep() returns()
func (_IPublicDelegation *IPublicDelegationTransactor) Sweep(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IPublicDelegation.contract.Transact(opts, "sweep")
}

// Sweep is a paid mutator transaction binding the contract method 0x35faa416.
//
// Solidity: function sweep() returns()
func (_IPublicDelegation *IPublicDelegationSession) Sweep() (*types.Transaction, error) {
	return _IPublicDelegation.Contract.Sweep(&_IPublicDelegation.TransactOpts)
}

// Sweep is a paid mutator transaction binding the contract method 0x35faa416.
//
// Solidity: function sweep() returns()
func (_IPublicDelegation *IPublicDelegationTransactorSession) Sweep() (*types.Transaction, error) {
	return _IPublicDelegation.Contract.Sweep(&_IPublicDelegation.TransactOpts)
}

// UpdateCommissionRate is a paid mutator transaction binding the contract method 0x00fa3d50.
//
// Solidity: function updateCommissionRate(uint256 _commissionRate) returns()
func (_IPublicDelegation *IPublicDelegationTransactor) UpdateCommissionRate(opts *bind.TransactOpts, _commissionRate *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.contract.Transact(opts, "updateCommissionRate", _commissionRate)
}

// UpdateCommissionRate is a paid mutator transaction binding the contract method 0x00fa3d50.
//
// Solidity: function updateCommissionRate(uint256 _commissionRate) returns()
func (_IPublicDelegation *IPublicDelegationSession) UpdateCommissionRate(_commissionRate *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.UpdateCommissionRate(&_IPublicDelegation.TransactOpts, _commissionRate)
}

// UpdateCommissionRate is a paid mutator transaction binding the contract method 0x00fa3d50.
//
// Solidity: function updateCommissionRate(uint256 _commissionRate) returns()
func (_IPublicDelegation *IPublicDelegationTransactorSession) UpdateCommissionRate(_commissionRate *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.UpdateCommissionRate(&_IPublicDelegation.TransactOpts, _commissionRate)
}

// UpdateCommissionTo is a paid mutator transaction binding the contract method 0x052028d0.
//
// Solidity: function updateCommissionTo(address _commissionTo) returns()
func (_IPublicDelegation *IPublicDelegationTransactor) UpdateCommissionTo(opts *bind.TransactOpts, _commissionTo common.Address) (*types.Transaction, error) {
	return _IPublicDelegation.contract.Transact(opts, "updateCommissionTo", _commissionTo)
}

// UpdateCommissionTo is a paid mutator transaction binding the contract method 0x052028d0.
//
// Solidity: function updateCommissionTo(address _commissionTo) returns()
func (_IPublicDelegation *IPublicDelegationSession) UpdateCommissionTo(_commissionTo common.Address) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.UpdateCommissionTo(&_IPublicDelegation.TransactOpts, _commissionTo)
}

// UpdateCommissionTo is a paid mutator transaction binding the contract method 0x052028d0.
//
// Solidity: function updateCommissionTo(address _commissionTo) returns()
func (_IPublicDelegation *IPublicDelegationTransactorSession) UpdateCommissionTo(_commissionTo common.Address) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.UpdateCommissionTo(&_IPublicDelegation.TransactOpts, _commissionTo)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _recipient, uint256 _assets) returns()
func (_IPublicDelegation *IPublicDelegationTransactor) Withdraw(opts *bind.TransactOpts, _recipient common.Address, _assets *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.contract.Transact(opts, "withdraw", _recipient, _assets)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _recipient, uint256 _assets) returns()
func (_IPublicDelegation *IPublicDelegationSession) Withdraw(_recipient common.Address, _assets *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.Withdraw(&_IPublicDelegation.TransactOpts, _recipient, _assets)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _recipient, uint256 _assets) returns()
func (_IPublicDelegation *IPublicDelegationTransactorSession) Withdraw(_recipient common.Address, _assets *big.Int) (*types.Transaction, error) {
	return _IPublicDelegation.Contract.Withdraw(&_IPublicDelegation.TransactOpts, _recipient, _assets)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_IPublicDelegation *IPublicDelegationTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IPublicDelegation.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_IPublicDelegation *IPublicDelegationSession) Receive() (*types.Transaction, error) {
	return _IPublicDelegation.Contract.Receive(&_IPublicDelegation.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_IPublicDelegation *IPublicDelegationTransactorSession) Receive() (*types.Transaction, error) {
	return _IPublicDelegation.Contract.Receive(&_IPublicDelegation.TransactOpts)
}

// IPublicDelegationClaimedIterator is returned from FilterClaimed and is used to iterate over the raw logs and unpacked data for Claimed events raised by the IPublicDelegation contract.
type IPublicDelegationClaimedIterator struct {
	Event *IPublicDelegationClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPublicDelegationClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPublicDelegationClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPublicDelegationClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPublicDelegationClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPublicDelegationClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPublicDelegationClaimed represents a Claimed event raised by the IPublicDelegation contract.
type IPublicDelegationClaimed struct {
	User      common.Address
	RequestId *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterClaimed is a free log retrieval operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address indexed _user, uint256 indexed _requestId)
func (_IPublicDelegation *IPublicDelegationFilterer) FilterClaimed(opts *bind.FilterOpts, _user []common.Address, _requestId []*big.Int) (*IPublicDelegationClaimedIterator, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _requestIdRule []interface{}
	for _, _requestIdItem := range _requestId {
		_requestIdRule = append(_requestIdRule, _requestIdItem)
	}

	logs, sub, err := _IPublicDelegation.contract.FilterLogs(opts, "Claimed", _userRule, _requestIdRule)
	if err != nil {
		return nil, err
	}
	return &IPublicDelegationClaimedIterator{contract: _IPublicDelegation.contract, event: "Claimed", logs: logs, sub: sub}, nil
}

// WatchClaimed is a free log subscription operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address indexed _user, uint256 indexed _requestId)
func (_IPublicDelegation *IPublicDelegationFilterer) WatchClaimed(opts *bind.WatchOpts, sink chan<- *IPublicDelegationClaimed, _user []common.Address, _requestId []*big.Int) (event.Subscription, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _requestIdRule []interface{}
	for _, _requestIdItem := range _requestId {
		_requestIdRule = append(_requestIdRule, _requestIdItem)
	}

	logs, sub, err := _IPublicDelegation.contract.WatchLogs(opts, "Claimed", _userRule, _requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPublicDelegationClaimed)
				if err := _IPublicDelegation.contract.UnpackLog(event, "Claimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimed is a log parse operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address indexed _user, uint256 indexed _requestId)
func (_IPublicDelegation *IPublicDelegationFilterer) ParseClaimed(log types.Log) (*IPublicDelegationClaimed, error) {
	event := new(IPublicDelegationClaimed)
	if err := _IPublicDelegation.contract.UnpackLog(event, "Claimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPublicDelegationDeployContractIterator is returned from FilterDeployContract and is used to iterate over the raw logs and unpacked data for DeployContract events raised by the IPublicDelegation contract.
type IPublicDelegationDeployContractIterator struct {
	Event *IPublicDelegationDeployContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPublicDelegationDeployContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPublicDelegationDeployContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPublicDelegationDeployContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPublicDelegationDeployContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPublicDelegationDeployContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPublicDelegationDeployContract represents a DeployContract event raised by the IPublicDelegation contract.
type IPublicDelegationDeployContract struct {
	ContractType    string
	BaseCnStakingV3 common.Address
	PdArgs          IPublicDelegationPDConstructorArgs
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDeployContract is a free log retrieval operation binding the contract event 0x559705a83e2830cb29ab43f78af7f847810ba4a5bff2a637f7e5665ecf8dc55f.
//
// Solidity: event DeployContract(string _contractType, address _baseCnStakingV3, (address,address,uint256,string) _pdArgs)
func (_IPublicDelegation *IPublicDelegationFilterer) FilterDeployContract(opts *bind.FilterOpts) (*IPublicDelegationDeployContractIterator, error) {

	logs, sub, err := _IPublicDelegation.contract.FilterLogs(opts, "DeployContract")
	if err != nil {
		return nil, err
	}
	return &IPublicDelegationDeployContractIterator{contract: _IPublicDelegation.contract, event: "DeployContract", logs: logs, sub: sub}, nil
}

// WatchDeployContract is a free log subscription operation binding the contract event 0x559705a83e2830cb29ab43f78af7f847810ba4a5bff2a637f7e5665ecf8dc55f.
//
// Solidity: event DeployContract(string _contractType, address _baseCnStakingV3, (address,address,uint256,string) _pdArgs)
func (_IPublicDelegation *IPublicDelegationFilterer) WatchDeployContract(opts *bind.WatchOpts, sink chan<- *IPublicDelegationDeployContract) (event.Subscription, error) {

	logs, sub, err := _IPublicDelegation.contract.WatchLogs(opts, "DeployContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPublicDelegationDeployContract)
				if err := _IPublicDelegation.contract.UnpackLog(event, "DeployContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployContract is a log parse operation binding the contract event 0x559705a83e2830cb29ab43f78af7f847810ba4a5bff2a637f7e5665ecf8dc55f.
//
// Solidity: event DeployContract(string _contractType, address _baseCnStakingV3, (address,address,uint256,string) _pdArgs)
func (_IPublicDelegation *IPublicDelegationFilterer) ParseDeployContract(log types.Log) (*IPublicDelegationDeployContract, error) {
	event := new(IPublicDelegationDeployContract)
	if err := _IPublicDelegation.contract.UnpackLog(event, "DeployContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPublicDelegationRedeemedIterator is returned from FilterRedeemed and is used to iterate over the raw logs and unpacked data for Redeemed events raised by the IPublicDelegation contract.
type IPublicDelegationRedeemedIterator struct {
	Event *IPublicDelegationRedeemed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPublicDelegationRedeemedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPublicDelegationRedeemed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPublicDelegationRedeemed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPublicDelegationRedeemedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPublicDelegationRedeemedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPublicDelegationRedeemed represents a Redeemed event raised by the IPublicDelegation contract.
type IPublicDelegationRedeemed struct {
	User      common.Address
	Recipient common.Address
	Assets    *big.Int
	Shares    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRedeemed is a free log retrieval operation binding the contract event 0x5cdf07ad0fc222442720b108e3ed4c4640f0fadc2ab2253e66f259a0fea83480.
//
// Solidity: event Redeemed(address indexed _user, address indexed _recipient, uint256 _assets, uint256 _shares)
func (_IPublicDelegation *IPublicDelegationFilterer) FilterRedeemed(opts *bind.FilterOpts, _user []common.Address, _recipient []common.Address) (*IPublicDelegationRedeemedIterator, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _recipientRule []interface{}
	for _, _recipientItem := range _recipient {
		_recipientRule = append(_recipientRule, _recipientItem)
	}

	logs, sub, err := _IPublicDelegation.contract.FilterLogs(opts, "Redeemed", _userRule, _recipientRule)
	if err != nil {
		return nil, err
	}
	return &IPublicDelegationRedeemedIterator{contract: _IPublicDelegation.contract, event: "Redeemed", logs: logs, sub: sub}, nil
}

// WatchRedeemed is a free log subscription operation binding the contract event 0x5cdf07ad0fc222442720b108e3ed4c4640f0fadc2ab2253e66f259a0fea83480.
//
// Solidity: event Redeemed(address indexed _user, address indexed _recipient, uint256 _assets, uint256 _shares)
func (_IPublicDelegation *IPublicDelegationFilterer) WatchRedeemed(opts *bind.WatchOpts, sink chan<- *IPublicDelegationRedeemed, _user []common.Address, _recipient []common.Address) (event.Subscription, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _recipientRule []interface{}
	for _, _recipientItem := range _recipient {
		_recipientRule = append(_recipientRule, _recipientItem)
	}

	logs, sub, err := _IPublicDelegation.contract.WatchLogs(opts, "Redeemed", _userRule, _recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPublicDelegationRedeemed)
				if err := _IPublicDelegation.contract.UnpackLog(event, "Redeemed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemed is a log parse operation binding the contract event 0x5cdf07ad0fc222442720b108e3ed4c4640f0fadc2ab2253e66f259a0fea83480.
//
// Solidity: event Redeemed(address indexed _user, address indexed _recipient, uint256 _assets, uint256 _shares)
func (_IPublicDelegation *IPublicDelegationFilterer) ParseRedeemed(log types.Log) (*IPublicDelegationRedeemed, error) {
	event := new(IPublicDelegationRedeemed)
	if err := _IPublicDelegation.contract.UnpackLog(event, "Redeemed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPublicDelegationRedelegatedIterator is returned from FilterRedelegated and is used to iterate over the raw logs and unpacked data for Redelegated events raised by the IPublicDelegation contract.
type IPublicDelegationRedelegatedIterator struct {
	Event *IPublicDelegationRedelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPublicDelegationRedelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPublicDelegationRedelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPublicDelegationRedelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPublicDelegationRedelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPublicDelegationRedelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPublicDelegationRedelegated represents a Redelegated event raised by the IPublicDelegation contract.
type IPublicDelegationRedelegated struct {
	User       common.Address
	TargetCnV3 common.Address
	Assets     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRedelegated is a free log retrieval operation binding the contract event 0x78d93753d5a8009153a294711a82a3d1ba802938d66537c1b9142a053782d693.
//
// Solidity: event Redelegated(address indexed _user, address indexed _targetCnV3, uint256 _assets)
func (_IPublicDelegation *IPublicDelegationFilterer) FilterRedelegated(opts *bind.FilterOpts, _user []common.Address, _targetCnV3 []common.Address) (*IPublicDelegationRedelegatedIterator, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _targetCnV3Rule []interface{}
	for _, _targetCnV3Item := range _targetCnV3 {
		_targetCnV3Rule = append(_targetCnV3Rule, _targetCnV3Item)
	}

	logs, sub, err := _IPublicDelegation.contract.FilterLogs(opts, "Redelegated", _userRule, _targetCnV3Rule)
	if err != nil {
		return nil, err
	}
	return &IPublicDelegationRedelegatedIterator{contract: _IPublicDelegation.contract, event: "Redelegated", logs: logs, sub: sub}, nil
}

// WatchRedelegated is a free log subscription operation binding the contract event 0x78d93753d5a8009153a294711a82a3d1ba802938d66537c1b9142a053782d693.
//
// Solidity: event Redelegated(address indexed _user, address indexed _targetCnV3, uint256 _assets)
func (_IPublicDelegation *IPublicDelegationFilterer) WatchRedelegated(opts *bind.WatchOpts, sink chan<- *IPublicDelegationRedelegated, _user []common.Address, _targetCnV3 []common.Address) (event.Subscription, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _targetCnV3Rule []interface{}
	for _, _targetCnV3Item := range _targetCnV3 {
		_targetCnV3Rule = append(_targetCnV3Rule, _targetCnV3Item)
	}

	logs, sub, err := _IPublicDelegation.contract.WatchLogs(opts, "Redelegated", _userRule, _targetCnV3Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPublicDelegationRedelegated)
				if err := _IPublicDelegation.contract.UnpackLog(event, "Redelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedelegated is a log parse operation binding the contract event 0x78d93753d5a8009153a294711a82a3d1ba802938d66537c1b9142a053782d693.
//
// Solidity: event Redelegated(address indexed _user, address indexed _targetCnV3, uint256 _assets)
func (_IPublicDelegation *IPublicDelegationFilterer) ParseRedelegated(log types.Log) (*IPublicDelegationRedelegated, error) {
	event := new(IPublicDelegationRedelegated)
	if err := _IPublicDelegation.contract.UnpackLog(event, "Redelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPublicDelegationRequestCancelWithdrawalIterator is returned from FilterRequestCancelWithdrawal and is used to iterate over the raw logs and unpacked data for RequestCancelWithdrawal events raised by the IPublicDelegation contract.
type IPublicDelegationRequestCancelWithdrawalIterator struct {
	Event *IPublicDelegationRequestCancelWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPublicDelegationRequestCancelWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPublicDelegationRequestCancelWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPublicDelegationRequestCancelWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPublicDelegationRequestCancelWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPublicDelegationRequestCancelWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPublicDelegationRequestCancelWithdrawal represents a RequestCancelWithdrawal event raised by the IPublicDelegation contract.
type IPublicDelegationRequestCancelWithdrawal struct {
	User      common.Address
	RequestId *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRequestCancelWithdrawal is a free log retrieval operation binding the contract event 0x853eba293fc3859716cf2e1a34b0c266f8265db181ec04748d0f25b8a19fc80e.
//
// Solidity: event RequestCancelWithdrawal(address indexed _user, uint256 indexed _requestId)
func (_IPublicDelegation *IPublicDelegationFilterer) FilterRequestCancelWithdrawal(opts *bind.FilterOpts, _user []common.Address, _requestId []*big.Int) (*IPublicDelegationRequestCancelWithdrawalIterator, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _requestIdRule []interface{}
	for _, _requestIdItem := range _requestId {
		_requestIdRule = append(_requestIdRule, _requestIdItem)
	}

	logs, sub, err := _IPublicDelegation.contract.FilterLogs(opts, "RequestCancelWithdrawal", _userRule, _requestIdRule)
	if err != nil {
		return nil, err
	}
	return &IPublicDelegationRequestCancelWithdrawalIterator{contract: _IPublicDelegation.contract, event: "RequestCancelWithdrawal", logs: logs, sub: sub}, nil
}

// WatchRequestCancelWithdrawal is a free log subscription operation binding the contract event 0x853eba293fc3859716cf2e1a34b0c266f8265db181ec04748d0f25b8a19fc80e.
//
// Solidity: event RequestCancelWithdrawal(address indexed _user, uint256 indexed _requestId)
func (_IPublicDelegation *IPublicDelegationFilterer) WatchRequestCancelWithdrawal(opts *bind.WatchOpts, sink chan<- *IPublicDelegationRequestCancelWithdrawal, _user []common.Address, _requestId []*big.Int) (event.Subscription, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _requestIdRule []interface{}
	for _, _requestIdItem := range _requestId {
		_requestIdRule = append(_requestIdRule, _requestIdItem)
	}

	logs, sub, err := _IPublicDelegation.contract.WatchLogs(opts, "RequestCancelWithdrawal", _userRule, _requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPublicDelegationRequestCancelWithdrawal)
				if err := _IPublicDelegation.contract.UnpackLog(event, "RequestCancelWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestCancelWithdrawal is a log parse operation binding the contract event 0x853eba293fc3859716cf2e1a34b0c266f8265db181ec04748d0f25b8a19fc80e.
//
// Solidity: event RequestCancelWithdrawal(address indexed _user, uint256 indexed _requestId)
func (_IPublicDelegation *IPublicDelegationFilterer) ParseRequestCancelWithdrawal(log types.Log) (*IPublicDelegationRequestCancelWithdrawal, error) {
	event := new(IPublicDelegationRequestCancelWithdrawal)
	if err := _IPublicDelegation.contract.UnpackLog(event, "RequestCancelWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPublicDelegationRequestWithdrawalIterator is returned from FilterRequestWithdrawal and is used to iterate over the raw logs and unpacked data for RequestWithdrawal events raised by the IPublicDelegation contract.
type IPublicDelegationRequestWithdrawalIterator struct {
	Event *IPublicDelegationRequestWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPublicDelegationRequestWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPublicDelegationRequestWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPublicDelegationRequestWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPublicDelegationRequestWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPublicDelegationRequestWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPublicDelegationRequestWithdrawal represents a RequestWithdrawal event raised by the IPublicDelegation contract.
type IPublicDelegationRequestWithdrawal struct {
	User      common.Address
	Recipient common.Address
	RequestId *big.Int
	Assets    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRequestWithdrawal is a free log retrieval operation binding the contract event 0xd71e6ec4eed83207b08d7ee4a0773c0ff8f8a1ab94b8ce85737fc0c5ea2b5f0c.
//
// Solidity: event RequestWithdrawal(address indexed _user, address indexed _recipient, uint256 indexed _requestId, uint256 _assets)
func (_IPublicDelegation *IPublicDelegationFilterer) FilterRequestWithdrawal(opts *bind.FilterOpts, _user []common.Address, _recipient []common.Address, _requestId []*big.Int) (*IPublicDelegationRequestWithdrawalIterator, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _recipientRule []interface{}
	for _, _recipientItem := range _recipient {
		_recipientRule = append(_recipientRule, _recipientItem)
	}
	var _requestIdRule []interface{}
	for _, _requestIdItem := range _requestId {
		_requestIdRule = append(_requestIdRule, _requestIdItem)
	}

	logs, sub, err := _IPublicDelegation.contract.FilterLogs(opts, "RequestWithdrawal", _userRule, _recipientRule, _requestIdRule)
	if err != nil {
		return nil, err
	}
	return &IPublicDelegationRequestWithdrawalIterator{contract: _IPublicDelegation.contract, event: "RequestWithdrawal", logs: logs, sub: sub}, nil
}

// WatchRequestWithdrawal is a free log subscription operation binding the contract event 0xd71e6ec4eed83207b08d7ee4a0773c0ff8f8a1ab94b8ce85737fc0c5ea2b5f0c.
//
// Solidity: event RequestWithdrawal(address indexed _user, address indexed _recipient, uint256 indexed _requestId, uint256 _assets)
func (_IPublicDelegation *IPublicDelegationFilterer) WatchRequestWithdrawal(opts *bind.WatchOpts, sink chan<- *IPublicDelegationRequestWithdrawal, _user []common.Address, _recipient []common.Address, _requestId []*big.Int) (event.Subscription, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _recipientRule []interface{}
	for _, _recipientItem := range _recipient {
		_recipientRule = append(_recipientRule, _recipientItem)
	}
	var _requestIdRule []interface{}
	for _, _requestIdItem := range _requestId {
		_requestIdRule = append(_requestIdRule, _requestIdItem)
	}

	logs, sub, err := _IPublicDelegation.contract.WatchLogs(opts, "RequestWithdrawal", _userRule, _recipientRule, _requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPublicDelegationRequestWithdrawal)
				if err := _IPublicDelegation.contract.UnpackLog(event, "RequestWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestWithdrawal is a log parse operation binding the contract event 0xd71e6ec4eed83207b08d7ee4a0773c0ff8f8a1ab94b8ce85737fc0c5ea2b5f0c.
//
// Solidity: event RequestWithdrawal(address indexed _user, address indexed _recipient, uint256 indexed _requestId, uint256 _assets)
func (_IPublicDelegation *IPublicDelegationFilterer) ParseRequestWithdrawal(log types.Log) (*IPublicDelegationRequestWithdrawal, error) {
	event := new(IPublicDelegationRequestWithdrawal)
	if err := _IPublicDelegation.contract.UnpackLog(event, "RequestWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPublicDelegationSendCommissionIterator is returned from FilterSendCommission and is used to iterate over the raw logs and unpacked data for SendCommission events raised by the IPublicDelegation contract.
type IPublicDelegationSendCommissionIterator struct {
	Event *IPublicDelegationSendCommission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPublicDelegationSendCommissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPublicDelegationSendCommission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPublicDelegationSendCommission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPublicDelegationSendCommissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPublicDelegationSendCommissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPublicDelegationSendCommission represents a SendCommission event raised by the IPublicDelegation contract.
type IPublicDelegationSendCommission struct {
	CommissionTo common.Address
	Commission   *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSendCommission is a free log retrieval operation binding the contract event 0x6c3b15f4a619d5331e4708792bb87f858ffb7a08f1a87aabca7cd15e51e04a63.
//
// Solidity: event SendCommission(address indexed _commissionTo, uint256 _commission)
func (_IPublicDelegation *IPublicDelegationFilterer) FilterSendCommission(opts *bind.FilterOpts, _commissionTo []common.Address) (*IPublicDelegationSendCommissionIterator, error) {

	var _commissionToRule []interface{}
	for _, _commissionToItem := range _commissionTo {
		_commissionToRule = append(_commissionToRule, _commissionToItem)
	}

	logs, sub, err := _IPublicDelegation.contract.FilterLogs(opts, "SendCommission", _commissionToRule)
	if err != nil {
		return nil, err
	}
	return &IPublicDelegationSendCommissionIterator{contract: _IPublicDelegation.contract, event: "SendCommission", logs: logs, sub: sub}, nil
}

// WatchSendCommission is a free log subscription operation binding the contract event 0x6c3b15f4a619d5331e4708792bb87f858ffb7a08f1a87aabca7cd15e51e04a63.
//
// Solidity: event SendCommission(address indexed _commissionTo, uint256 _commission)
func (_IPublicDelegation *IPublicDelegationFilterer) WatchSendCommission(opts *bind.WatchOpts, sink chan<- *IPublicDelegationSendCommission, _commissionTo []common.Address) (event.Subscription, error) {

	var _commissionToRule []interface{}
	for _, _commissionToItem := range _commissionTo {
		_commissionToRule = append(_commissionToRule, _commissionToItem)
	}

	logs, sub, err := _IPublicDelegation.contract.WatchLogs(opts, "SendCommission", _commissionToRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPublicDelegationSendCommission)
				if err := _IPublicDelegation.contract.UnpackLog(event, "SendCommission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSendCommission is a log parse operation binding the contract event 0x6c3b15f4a619d5331e4708792bb87f858ffb7a08f1a87aabca7cd15e51e04a63.
//
// Solidity: event SendCommission(address indexed _commissionTo, uint256 _commission)
func (_IPublicDelegation *IPublicDelegationFilterer) ParseSendCommission(log types.Log) (*IPublicDelegationSendCommission, error) {
	event := new(IPublicDelegationSendCommission)
	if err := _IPublicDelegation.contract.UnpackLog(event, "SendCommission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPublicDelegationStakedIterator is returned from FilterStaked and is used to iterate over the raw logs and unpacked data for Staked events raised by the IPublicDelegation contract.
type IPublicDelegationStakedIterator struct {
	Event *IPublicDelegationStaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPublicDelegationStakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPublicDelegationStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPublicDelegationStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPublicDelegationStakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPublicDelegationStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPublicDelegationStaked represents a Staked event raised by the IPublicDelegation contract.
type IPublicDelegationStaked struct {
	User   common.Address
	Assets *big.Int
	Shares *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterStaked is a free log retrieval operation binding the contract event 0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90.
//
// Solidity: event Staked(address indexed _user, uint256 _assets, uint256 _shares)
func (_IPublicDelegation *IPublicDelegationFilterer) FilterStaked(opts *bind.FilterOpts, _user []common.Address) (*IPublicDelegationStakedIterator, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}

	logs, sub, err := _IPublicDelegation.contract.FilterLogs(opts, "Staked", _userRule)
	if err != nil {
		return nil, err
	}
	return &IPublicDelegationStakedIterator{contract: _IPublicDelegation.contract, event: "Staked", logs: logs, sub: sub}, nil
}

// WatchStaked is a free log subscription operation binding the contract event 0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90.
//
// Solidity: event Staked(address indexed _user, uint256 _assets, uint256 _shares)
func (_IPublicDelegation *IPublicDelegationFilterer) WatchStaked(opts *bind.WatchOpts, sink chan<- *IPublicDelegationStaked, _user []common.Address) (event.Subscription, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}

	logs, sub, err := _IPublicDelegation.contract.WatchLogs(opts, "Staked", _userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPublicDelegationStaked)
				if err := _IPublicDelegation.contract.UnpackLog(event, "Staked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaked is a log parse operation binding the contract event 0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90.
//
// Solidity: event Staked(address indexed _user, uint256 _assets, uint256 _shares)
func (_IPublicDelegation *IPublicDelegationFilterer) ParseStaked(log types.Log) (*IPublicDelegationStaked, error) {
	event := new(IPublicDelegationStaked)
	if err := _IPublicDelegation.contract.UnpackLog(event, "Staked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPublicDelegationUpdateCommissionRateIterator is returned from FilterUpdateCommissionRate and is used to iterate over the raw logs and unpacked data for UpdateCommissionRate events raised by the IPublicDelegation contract.
type IPublicDelegationUpdateCommissionRateIterator struct {
	Event *IPublicDelegationUpdateCommissionRate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPublicDelegationUpdateCommissionRateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPublicDelegationUpdateCommissionRate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPublicDelegationUpdateCommissionRate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPublicDelegationUpdateCommissionRateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPublicDelegationUpdateCommissionRateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPublicDelegationUpdateCommissionRate represents a UpdateCommissionRate event raised by the IPublicDelegation contract.
type IPublicDelegationUpdateCommissionRate struct {
	PrevCommissionRate *big.Int
	CommissionRate     *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterUpdateCommissionRate is a free log retrieval operation binding the contract event 0x67fb2216d844c3553cf557bffa85f0fde0294999f808e61dcae1773d50d5e150.
//
// Solidity: event UpdateCommissionRate(uint256 indexed _prevCommissionRate, uint256 indexed _commissionRate)
func (_IPublicDelegation *IPublicDelegationFilterer) FilterUpdateCommissionRate(opts *bind.FilterOpts, _prevCommissionRate []*big.Int, _commissionRate []*big.Int) (*IPublicDelegationUpdateCommissionRateIterator, error) {

	var _prevCommissionRateRule []interface{}
	for _, _prevCommissionRateItem := range _prevCommissionRate {
		_prevCommissionRateRule = append(_prevCommissionRateRule, _prevCommissionRateItem)
	}
	var _commissionRateRule []interface{}
	for _, _commissionRateItem := range _commissionRate {
		_commissionRateRule = append(_commissionRateRule, _commissionRateItem)
	}

	logs, sub, err := _IPublicDelegation.contract.FilterLogs(opts, "UpdateCommissionRate", _prevCommissionRateRule, _commissionRateRule)
	if err != nil {
		return nil, err
	}
	return &IPublicDelegationUpdateCommissionRateIterator{contract: _IPublicDelegation.contract, event: "UpdateCommissionRate", logs: logs, sub: sub}, nil
}

// WatchUpdateCommissionRate is a free log subscription operation binding the contract event 0x67fb2216d844c3553cf557bffa85f0fde0294999f808e61dcae1773d50d5e150.
//
// Solidity: event UpdateCommissionRate(uint256 indexed _prevCommissionRate, uint256 indexed _commissionRate)
func (_IPublicDelegation *IPublicDelegationFilterer) WatchUpdateCommissionRate(opts *bind.WatchOpts, sink chan<- *IPublicDelegationUpdateCommissionRate, _prevCommissionRate []*big.Int, _commissionRate []*big.Int) (event.Subscription, error) {

	var _prevCommissionRateRule []interface{}
	for _, _prevCommissionRateItem := range _prevCommissionRate {
		_prevCommissionRateRule = append(_prevCommissionRateRule, _prevCommissionRateItem)
	}
	var _commissionRateRule []interface{}
	for _, _commissionRateItem := range _commissionRate {
		_commissionRateRule = append(_commissionRateRule, _commissionRateItem)
	}

	logs, sub, err := _IPublicDelegation.contract.WatchLogs(opts, "UpdateCommissionRate", _prevCommissionRateRule, _commissionRateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPublicDelegationUpdateCommissionRate)
				if err := _IPublicDelegation.contract.UnpackLog(event, "UpdateCommissionRate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateCommissionRate is a log parse operation binding the contract event 0x67fb2216d844c3553cf557bffa85f0fde0294999f808e61dcae1773d50d5e150.
//
// Solidity: event UpdateCommissionRate(uint256 indexed _prevCommissionRate, uint256 indexed _commissionRate)
func (_IPublicDelegation *IPublicDelegationFilterer) ParseUpdateCommissionRate(log types.Log) (*IPublicDelegationUpdateCommissionRate, error) {
	event := new(IPublicDelegationUpdateCommissionRate)
	if err := _IPublicDelegation.contract.UnpackLog(event, "UpdateCommissionRate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPublicDelegationUpdateCommissionToIterator is returned from FilterUpdateCommissionTo and is used to iterate over the raw logs and unpacked data for UpdateCommissionTo events raised by the IPublicDelegation contract.
type IPublicDelegationUpdateCommissionToIterator struct {
	Event *IPublicDelegationUpdateCommissionTo // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPublicDelegationUpdateCommissionToIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPublicDelegationUpdateCommissionTo)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPublicDelegationUpdateCommissionTo)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPublicDelegationUpdateCommissionToIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPublicDelegationUpdateCommissionToIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPublicDelegationUpdateCommissionTo represents a UpdateCommissionTo event raised by the IPublicDelegation contract.
type IPublicDelegationUpdateCommissionTo struct {
	PrevCommissionTo common.Address
	CommissionTo     common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterUpdateCommissionTo is a free log retrieval operation binding the contract event 0xa466bc069316af563b6a90c9b6f29a97752ac7be7c6bbf3767bc9b16c2fd90eb.
//
// Solidity: event UpdateCommissionTo(address indexed _prevCommissionTo, address indexed _commissionTo)
func (_IPublicDelegation *IPublicDelegationFilterer) FilterUpdateCommissionTo(opts *bind.FilterOpts, _prevCommissionTo []common.Address, _commissionTo []common.Address) (*IPublicDelegationUpdateCommissionToIterator, error) {

	var _prevCommissionToRule []interface{}
	for _, _prevCommissionToItem := range _prevCommissionTo {
		_prevCommissionToRule = append(_prevCommissionToRule, _prevCommissionToItem)
	}
	var _commissionToRule []interface{}
	for _, _commissionToItem := range _commissionTo {
		_commissionToRule = append(_commissionToRule, _commissionToItem)
	}

	logs, sub, err := _IPublicDelegation.contract.FilterLogs(opts, "UpdateCommissionTo", _prevCommissionToRule, _commissionToRule)
	if err != nil {
		return nil, err
	}
	return &IPublicDelegationUpdateCommissionToIterator{contract: _IPublicDelegation.contract, event: "UpdateCommissionTo", logs: logs, sub: sub}, nil
}

// WatchUpdateCommissionTo is a free log subscription operation binding the contract event 0xa466bc069316af563b6a90c9b6f29a97752ac7be7c6bbf3767bc9b16c2fd90eb.
//
// Solidity: event UpdateCommissionTo(address indexed _prevCommissionTo, address indexed _commissionTo)
func (_IPublicDelegation *IPublicDelegationFilterer) WatchUpdateCommissionTo(opts *bind.WatchOpts, sink chan<- *IPublicDelegationUpdateCommissionTo, _prevCommissionTo []common.Address, _commissionTo []common.Address) (event.Subscription, error) {

	var _prevCommissionToRule []interface{}
	for _, _prevCommissionToItem := range _prevCommissionTo {
		_prevCommissionToRule = append(_prevCommissionToRule, _prevCommissionToItem)
	}
	var _commissionToRule []interface{}
	for _, _commissionToItem := range _commissionTo {
		_commissionToRule = append(_commissionToRule, _commissionToItem)
	}

	logs, sub, err := _IPublicDelegation.contract.WatchLogs(opts, "UpdateCommissionTo", _prevCommissionToRule, _commissionToRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPublicDelegationUpdateCommissionTo)
				if err := _IPublicDelegation.contract.UnpackLog(event, "UpdateCommissionTo", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateCommissionTo is a log parse operation binding the contract event 0xa466bc069316af563b6a90c9b6f29a97752ac7be7c6bbf3767bc9b16c2fd90eb.
//
// Solidity: event UpdateCommissionTo(address indexed _prevCommissionTo, address indexed _commissionTo)
func (_IPublicDelegation *IPublicDelegationFilterer) ParseUpdateCommissionTo(log types.Log) (*IPublicDelegationUpdateCommissionTo, error) {
	event := new(IPublicDelegationUpdateCommissionTo)
	if err := _IPublicDelegation.contract.UnpackLog(event, "UpdateCommissionTo", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPublicDelegationFactoryMetaData contains all meta data concerning the IPublicDelegationFactory contract.
var IPublicDelegationFactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"CONTRACT_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"commissionTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"gcName\",\"type\":\"string\"}],\"internalType\":\"structIPublicDelegation.PDConstructorArgs\",\"name\":\"_pdArgs\",\"type\":\"tuple\"}],\"name\":\"deployPublicDelegation\",\"outputs\":[{\"internalType\":\"contractIPublicDelegation\",\"name\":\"publicDelegation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"4b6a94cc": "CONTRACT_TYPE()",
		"ffa1ad74": "VERSION()",
		"787821cc": "deployPublicDelegation((address,address,uint256,string))",
	},
}

// IPublicDelegationFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use IPublicDelegationFactoryMetaData.ABI instead.
var IPublicDelegationFactoryABI = IPublicDelegationFactoryMetaData.ABI

// IPublicDelegationFactoryBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const IPublicDelegationFactoryBinRuntime = ``

// Deprecated: Use IPublicDelegationFactoryMetaData.Sigs instead.
// IPublicDelegationFactoryFuncSigs maps the 4-byte function signature to its string representation.
var IPublicDelegationFactoryFuncSigs = IPublicDelegationFactoryMetaData.Sigs

// IPublicDelegationFactory is an auto generated Go binding around a Kaia contract.
type IPublicDelegationFactory struct {
	IPublicDelegationFactoryCaller     // Read-only binding to the contract
	IPublicDelegationFactoryTransactor // Write-only binding to the contract
	IPublicDelegationFactoryFilterer   // Log filterer for contract events
}

// IPublicDelegationFactoryCaller is an auto generated read-only Go binding around a Kaia contract.
type IPublicDelegationFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPublicDelegationFactoryTransactor is an auto generated write-only Go binding around a Kaia contract.
type IPublicDelegationFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPublicDelegationFactoryFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type IPublicDelegationFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPublicDelegationFactorySession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type IPublicDelegationFactorySession struct {
	Contract     *IPublicDelegationFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IPublicDelegationFactoryCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type IPublicDelegationFactoryCallerSession struct {
	Contract *IPublicDelegationFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// IPublicDelegationFactoryTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type IPublicDelegationFactoryTransactorSession struct {
	Contract     *IPublicDelegationFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// IPublicDelegationFactoryRaw is an auto generated low-level Go binding around a Kaia contract.
type IPublicDelegationFactoryRaw struct {
	Contract *IPublicDelegationFactory // Generic contract binding to access the raw methods on
}

// IPublicDelegationFactoryCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type IPublicDelegationFactoryCallerRaw struct {
	Contract *IPublicDelegationFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// IPublicDelegationFactoryTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type IPublicDelegationFactoryTransactorRaw struct {
	Contract *IPublicDelegationFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIPublicDelegationFactory creates a new instance of IPublicDelegationFactory, bound to a specific deployed contract.
func NewIPublicDelegationFactory(address common.Address, backend bind.ContractBackend) (*IPublicDelegationFactory, error) {
	contract, err := bindIPublicDelegationFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IPublicDelegationFactory{IPublicDelegationFactoryCaller: IPublicDelegationFactoryCaller{contract: contract}, IPublicDelegationFactoryTransactor: IPublicDelegationFactoryTransactor{contract: contract}, IPublicDelegationFactoryFilterer: IPublicDelegationFactoryFilterer{contract: contract}}, nil
}

// NewIPublicDelegationFactoryCaller creates a new read-only instance of IPublicDelegationFactory, bound to a specific deployed contract.
func NewIPublicDelegationFactoryCaller(address common.Address, caller bind.ContractCaller) (*IPublicDelegationFactoryCaller, error) {
	contract, err := bindIPublicDelegationFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IPublicDelegationFactoryCaller{contract: contract}, nil
}

// NewIPublicDelegationFactoryTransactor creates a new write-only instance of IPublicDelegationFactory, bound to a specific deployed contract.
func NewIPublicDelegationFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*IPublicDelegationFactoryTransactor, error) {
	contract, err := bindIPublicDelegationFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IPublicDelegationFactoryTransactor{contract: contract}, nil
}

// NewIPublicDelegationFactoryFilterer creates a new log filterer instance of IPublicDelegationFactory, bound to a specific deployed contract.
func NewIPublicDelegationFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*IPublicDelegationFactoryFilterer, error) {
	contract, err := bindIPublicDelegationFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IPublicDelegationFactoryFilterer{contract: contract}, nil
}

// bindIPublicDelegationFactory binds a generic wrapper to an already deployed contract.
func bindIPublicDelegationFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IPublicDelegationFactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IPublicDelegationFactory *IPublicDelegationFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IPublicDelegationFactory.Contract.IPublicDelegationFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IPublicDelegationFactory *IPublicDelegationFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IPublicDelegationFactory.Contract.IPublicDelegationFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IPublicDelegationFactory *IPublicDelegationFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IPublicDelegationFactory.Contract.IPublicDelegationFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IPublicDelegationFactory *IPublicDelegationFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IPublicDelegationFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IPublicDelegationFactory *IPublicDelegationFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IPublicDelegationFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IPublicDelegationFactory *IPublicDelegationFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IPublicDelegationFactory.Contract.contract.Transact(opts, method, params...)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_IPublicDelegationFactory *IPublicDelegationFactoryCaller) CONTRACTTYPE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IPublicDelegationFactory.contract.Call(opts, &out, "CONTRACT_TYPE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_IPublicDelegationFactory *IPublicDelegationFactorySession) CONTRACTTYPE() (string, error) {
	return _IPublicDelegationFactory.Contract.CONTRACTTYPE(&_IPublicDelegationFactory.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_IPublicDelegationFactory *IPublicDelegationFactoryCallerSession) CONTRACTTYPE() (string, error) {
	return _IPublicDelegationFactory.Contract.CONTRACTTYPE(&_IPublicDelegationFactory.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_IPublicDelegationFactory *IPublicDelegationFactoryCaller) VERSION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IPublicDelegationFactory.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_IPublicDelegationFactory *IPublicDelegationFactorySession) VERSION() (*big.Int, error) {
	return _IPublicDelegationFactory.Contract.VERSION(&_IPublicDelegationFactory.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_IPublicDelegationFactory *IPublicDelegationFactoryCallerSession) VERSION() (*big.Int, error) {
	return _IPublicDelegationFactory.Contract.VERSION(&_IPublicDelegationFactory.CallOpts)
}

// DeployPublicDelegation is a paid mutator transaction binding the contract method 0x787821cc.
//
// Solidity: function deployPublicDelegation((address,address,uint256,string) _pdArgs) returns(address publicDelegation)
func (_IPublicDelegationFactory *IPublicDelegationFactoryTransactor) DeployPublicDelegation(opts *bind.TransactOpts, _pdArgs IPublicDelegationPDConstructorArgs) (*types.Transaction, error) {
	return _IPublicDelegationFactory.contract.Transact(opts, "deployPublicDelegation", _pdArgs)
}

// DeployPublicDelegation is a paid mutator transaction binding the contract method 0x787821cc.
//
// Solidity: function deployPublicDelegation((address,address,uint256,string) _pdArgs) returns(address publicDelegation)
func (_IPublicDelegationFactory *IPublicDelegationFactorySession) DeployPublicDelegation(_pdArgs IPublicDelegationPDConstructorArgs) (*types.Transaction, error) {
	return _IPublicDelegationFactory.Contract.DeployPublicDelegation(&_IPublicDelegationFactory.TransactOpts, _pdArgs)
}

// DeployPublicDelegation is a paid mutator transaction binding the contract method 0x787821cc.
//
// Solidity: function deployPublicDelegation((address,address,uint256,string) _pdArgs) returns(address publicDelegation)
func (_IPublicDelegationFactory *IPublicDelegationFactoryTransactorSession) DeployPublicDelegation(_pdArgs IPublicDelegationPDConstructorArgs) (*types.Transaction, error) {
	return _IPublicDelegationFactory.Contract.DeployPublicDelegation(&_IPublicDelegationFactory.TransactOpts, _pdArgs)
}

// IStakingTrackerMetaData contains all meta data concerning the IStakingTracker contract.
var IStakingTrackerMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trackStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trackEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"gcIds\",\"type\":\"uint256[]\"}],\"name\":\"CreateTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gcId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gcBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gcVote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"name\":\"RefreshStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gcId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"RefreshVoter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"}],\"name\":\"RetireTracker\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_BOOK_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_STAKE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trackEnd\",\"type\":\"uint256\"}],\"name\":\"createTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gcId\",\"type\":\"uint256\"}],\"name\":\"gcIdToVoter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"}],\"name\":\"getAllTrackedGCs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"gcIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gcBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gcVotes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTrackerIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTrackerId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiveTrackerIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gcId\",\"type\":\"uint256\"}],\"name\":\"getTrackedGC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gcBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gcVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"}],\"name\":\"getTrackerSummary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"trackStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trackEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numGCs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numEligible\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"}],\"name\":\"refreshStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"}],\"name\":\"refreshVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trackerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"}],\"name\":\"stakingToGCId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gcId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"voterToGCId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gcId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"f2f2f49b": "ADDRESS_BOOK_ADDRESS()",
		"4b6a94cc": "CONTRACT_TYPE()",
		"cb1c2b5c": "MIN_STAKE()",
		"ffa1ad74": "VERSION()",
		"01d057c1": "createTracker(uint256,uint256)",
		"e2ec3a58": "gcIdToVoter(uint256)",
		"870a53ff": "getAllTrackedGCs(uint256)",
		"c4efadfb": "getAllTrackerIds()",
		"dac189b8": "getLastTrackerId()",
		"d4377d4d": "getLiveTrackerIds()",
		"51afc36c": "getTrackedGC(uint256,uint256)",
		"3c7fff46": "getTrackerSummary(uint256)",
		"5605a4e5": "refreshStake(address)",
		"aad8cb3f": "refreshVoter(address)",
		"0294a897": "stakingToGCId(uint256,address)",
		"4f471c02": "voterToGCId(address)",
	},
}

// IStakingTrackerABI is the input ABI used to generate the binding from.
// Deprecated: Use IStakingTrackerMetaData.ABI instead.
var IStakingTrackerABI = IStakingTrackerMetaData.ABI

// IStakingTrackerBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const IStakingTrackerBinRuntime = ``

// Deprecated: Use IStakingTrackerMetaData.Sigs instead.
// IStakingTrackerFuncSigs maps the 4-byte function signature to its string representation.
var IStakingTrackerFuncSigs = IStakingTrackerMetaData.Sigs

// IStakingTracker is an auto generated Go binding around a Kaia contract.
type IStakingTracker struct {
	IStakingTrackerCaller     // Read-only binding to the contract
	IStakingTrackerTransactor // Write-only binding to the contract
	IStakingTrackerFilterer   // Log filterer for contract events
}

// IStakingTrackerCaller is an auto generated read-only Go binding around a Kaia contract.
type IStakingTrackerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStakingTrackerTransactor is an auto generated write-only Go binding around a Kaia contract.
type IStakingTrackerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStakingTrackerFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type IStakingTrackerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IStakingTrackerSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type IStakingTrackerSession struct {
	Contract     *IStakingTracker  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IStakingTrackerCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type IStakingTrackerCallerSession struct {
	Contract *IStakingTrackerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// IStakingTrackerTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type IStakingTrackerTransactorSession struct {
	Contract     *IStakingTrackerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IStakingTrackerRaw is an auto generated low-level Go binding around a Kaia contract.
type IStakingTrackerRaw struct {
	Contract *IStakingTracker // Generic contract binding to access the raw methods on
}

// IStakingTrackerCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type IStakingTrackerCallerRaw struct {
	Contract *IStakingTrackerCaller // Generic read-only contract binding to access the raw methods on
}

// IStakingTrackerTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type IStakingTrackerTransactorRaw struct {
	Contract *IStakingTrackerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIStakingTracker creates a new instance of IStakingTracker, bound to a specific deployed contract.
func NewIStakingTracker(address common.Address, backend bind.ContractBackend) (*IStakingTracker, error) {
	contract, err := bindIStakingTracker(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IStakingTracker{IStakingTrackerCaller: IStakingTrackerCaller{contract: contract}, IStakingTrackerTransactor: IStakingTrackerTransactor{contract: contract}, IStakingTrackerFilterer: IStakingTrackerFilterer{contract: contract}}, nil
}

// NewIStakingTrackerCaller creates a new read-only instance of IStakingTracker, bound to a specific deployed contract.
func NewIStakingTrackerCaller(address common.Address, caller bind.ContractCaller) (*IStakingTrackerCaller, error) {
	contract, err := bindIStakingTracker(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IStakingTrackerCaller{contract: contract}, nil
}

// NewIStakingTrackerTransactor creates a new write-only instance of IStakingTracker, bound to a specific deployed contract.
func NewIStakingTrackerTransactor(address common.Address, transactor bind.ContractTransactor) (*IStakingTrackerTransactor, error) {
	contract, err := bindIStakingTracker(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IStakingTrackerTransactor{contract: contract}, nil
}

// NewIStakingTrackerFilterer creates a new log filterer instance of IStakingTracker, bound to a specific deployed contract.
func NewIStakingTrackerFilterer(address common.Address, filterer bind.ContractFilterer) (*IStakingTrackerFilterer, error) {
	contract, err := bindIStakingTracker(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IStakingTrackerFilterer{contract: contract}, nil
}

// bindIStakingTracker binds a generic wrapper to an already deployed contract.
func bindIStakingTracker(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IStakingTrackerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IStakingTracker *IStakingTrackerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IStakingTracker.Contract.IStakingTrackerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IStakingTracker *IStakingTrackerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStakingTracker.Contract.IStakingTrackerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IStakingTracker *IStakingTrackerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IStakingTracker.Contract.IStakingTrackerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IStakingTracker *IStakingTrackerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IStakingTracker.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IStakingTracker *IStakingTrackerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IStakingTracker.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IStakingTracker *IStakingTrackerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IStakingTracker.Contract.contract.Transact(opts, method, params...)
}

// ADDRESSBOOKADDRESS is a free data retrieval call binding the contract method 0xf2f2f49b.
//
// Solidity: function ADDRESS_BOOK_ADDRESS() view returns(address)
func (_IStakingTracker *IStakingTrackerCaller) ADDRESSBOOKADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IStakingTracker.contract.Call(opts, &out, "ADDRESS_BOOK_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ADDRESSBOOKADDRESS is a free data retrieval call binding the contract method 0xf2f2f49b.
//
// Solidity: function ADDRESS_BOOK_ADDRESS() view returns(address)
func (_IStakingTracker *IStakingTrackerSession) ADDRESSBOOKADDRESS() (common.Address, error) {
	return _IStakingTracker.Contract.ADDRESSBOOKADDRESS(&_IStakingTracker.CallOpts)
}

// ADDRESSBOOKADDRESS is a free data retrieval call binding the contract method 0xf2f2f49b.
//
// Solidity: function ADDRESS_BOOK_ADDRESS() view returns(address)
func (_IStakingTracker *IStakingTrackerCallerSession) ADDRESSBOOKADDRESS() (common.Address, error) {
	return _IStakingTracker.Contract.ADDRESSBOOKADDRESS(&_IStakingTracker.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_IStakingTracker *IStakingTrackerCaller) CONTRACTTYPE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IStakingTracker.contract.Call(opts, &out, "CONTRACT_TYPE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_IStakingTracker *IStakingTrackerSession) CONTRACTTYPE() (string, error) {
	return _IStakingTracker.Contract.CONTRACTTYPE(&_IStakingTracker.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_IStakingTracker *IStakingTrackerCallerSession) CONTRACTTYPE() (string, error) {
	return _IStakingTracker.Contract.CONTRACTTYPE(&_IStakingTracker.CallOpts)
}

// MINSTAKE is a free data retrieval call binding the contract method 0xcb1c2b5c.
//
// Solidity: function MIN_STAKE() view returns(uint256)
func (_IStakingTracker *IStakingTrackerCaller) MINSTAKE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IStakingTracker.contract.Call(opts, &out, "MIN_STAKE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINSTAKE is a free data retrieval call binding the contract method 0xcb1c2b5c.
//
// Solidity: function MIN_STAKE() view returns(uint256)
func (_IStakingTracker *IStakingTrackerSession) MINSTAKE() (*big.Int, error) {
	return _IStakingTracker.Contract.MINSTAKE(&_IStakingTracker.CallOpts)
}

// MINSTAKE is a free data retrieval call binding the contract method 0xcb1c2b5c.
//
// Solidity: function MIN_STAKE() view returns(uint256)
func (_IStakingTracker *IStakingTrackerCallerSession) MINSTAKE() (*big.Int, error) {
	return _IStakingTracker.Contract.MINSTAKE(&_IStakingTracker.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_IStakingTracker *IStakingTrackerCaller) VERSION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IStakingTracker.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_IStakingTracker *IStakingTrackerSession) VERSION() (*big.Int, error) {
	return _IStakingTracker.Contract.VERSION(&_IStakingTracker.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_IStakingTracker *IStakingTrackerCallerSession) VERSION() (*big.Int, error) {
	return _IStakingTracker.Contract.VERSION(&_IStakingTracker.CallOpts)
}

// GcIdToVoter is a free data retrieval call binding the contract method 0xe2ec3a58.
//
// Solidity: function gcIdToVoter(uint256 gcId) view returns(address voter)
func (_IStakingTracker *IStakingTrackerCaller) GcIdToVoter(opts *bind.CallOpts, gcId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IStakingTracker.contract.Call(opts, &out, "gcIdToVoter", gcId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GcIdToVoter is a free data retrieval call binding the contract method 0xe2ec3a58.
//
// Solidity: function gcIdToVoter(uint256 gcId) view returns(address voter)
func (_IStakingTracker *IStakingTrackerSession) GcIdToVoter(gcId *big.Int) (common.Address, error) {
	return _IStakingTracker.Contract.GcIdToVoter(&_IStakingTracker.CallOpts, gcId)
}

// GcIdToVoter is a free data retrieval call binding the contract method 0xe2ec3a58.
//
// Solidity: function gcIdToVoter(uint256 gcId) view returns(address voter)
func (_IStakingTracker *IStakingTrackerCallerSession) GcIdToVoter(gcId *big.Int) (common.Address, error) {
	return _IStakingTracker.Contract.GcIdToVoter(&_IStakingTracker.CallOpts, gcId)
}

// GetAllTrackedGCs is a free data retrieval call binding the contract method 0x870a53ff.
//
// Solidity: function getAllTrackedGCs(uint256 trackerId) view returns(uint256[] gcIds, uint256[] gcBalances, uint256[] gcVotes)
func (_IStakingTracker *IStakingTrackerCaller) GetAllTrackedGCs(opts *bind.CallOpts, trackerId *big.Int) (struct {
	GcIds      []*big.Int
	GcBalances []*big.Int
	GcVotes    []*big.Int
}, error) {
	var out []interface{}
	err := _IStakingTracker.contract.Call(opts, &out, "getAllTrackedGCs", trackerId)

	outstruct := new(struct {
		GcIds      []*big.Int
		GcBalances []*big.Int
		GcVotes    []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.GcIds = *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
	outstruct.GcBalances = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)
	outstruct.GcVotes = *abi.ConvertType(out[2], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// GetAllTrackedGCs is a free data retrieval call binding the contract method 0x870a53ff.
//
// Solidity: function getAllTrackedGCs(uint256 trackerId) view returns(uint256[] gcIds, uint256[] gcBalances, uint256[] gcVotes)
func (_IStakingTracker *IStakingTrackerSession) GetAllTrackedGCs(trackerId *big.Int) (struct {
	GcIds      []*big.Int
	GcBalances []*big.Int
	GcVotes    []*big.Int
}, error) {
	return _IStakingTracker.Contract.GetAllTrackedGCs(&_IStakingTracker.CallOpts, trackerId)
}

// GetAllTrackedGCs is a free data retrieval call binding the contract method 0x870a53ff.
//
// Solidity: function getAllTrackedGCs(uint256 trackerId) view returns(uint256[] gcIds, uint256[] gcBalances, uint256[] gcVotes)
func (_IStakingTracker *IStakingTrackerCallerSession) GetAllTrackedGCs(trackerId *big.Int) (struct {
	GcIds      []*big.Int
	GcBalances []*big.Int
	GcVotes    []*big.Int
}, error) {
	return _IStakingTracker.Contract.GetAllTrackedGCs(&_IStakingTracker.CallOpts, trackerId)
}

// GetAllTrackerIds is a free data retrieval call binding the contract method 0xc4efadfb.
//
// Solidity: function getAllTrackerIds() view returns(uint256[])
func (_IStakingTracker *IStakingTrackerCaller) GetAllTrackerIds(opts *bind.CallOpts) ([]*big.Int, error) {
	var out []interface{}
	err := _IStakingTracker.contract.Call(opts, &out, "getAllTrackerIds")

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetAllTrackerIds is a free data retrieval call binding the contract method 0xc4efadfb.
//
// Solidity: function getAllTrackerIds() view returns(uint256[])
func (_IStakingTracker *IStakingTrackerSession) GetAllTrackerIds() ([]*big.Int, error) {
	return _IStakingTracker.Contract.GetAllTrackerIds(&_IStakingTracker.CallOpts)
}

// GetAllTrackerIds is a free data retrieval call binding the contract method 0xc4efadfb.
//
// Solidity: function getAllTrackerIds() view returns(uint256[])
func (_IStakingTracker *IStakingTrackerCallerSession) GetAllTrackerIds() ([]*big.Int, error) {
	return _IStakingTracker.Contract.GetAllTrackerIds(&_IStakingTracker.CallOpts)
}

// GetLastTrackerId is a free data retrieval call binding the contract method 0xdac189b8.
//
// Solidity: function getLastTrackerId() view returns(uint256)
func (_IStakingTracker *IStakingTrackerCaller) GetLastTrackerId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IStakingTracker.contract.Call(opts, &out, "getLastTrackerId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLastTrackerId is a free data retrieval call binding the contract method 0xdac189b8.
//
// Solidity: function getLastTrackerId() view returns(uint256)
func (_IStakingTracker *IStakingTrackerSession) GetLastTrackerId() (*big.Int, error) {
	return _IStakingTracker.Contract.GetLastTrackerId(&_IStakingTracker.CallOpts)
}

// GetLastTrackerId is a free data retrieval call binding the contract method 0xdac189b8.
//
// Solidity: function getLastTrackerId() view returns(uint256)
func (_IStakingTracker *IStakingTrackerCallerSession) GetLastTrackerId() (*big.Int, error) {
	return _IStakingTracker.Contract.GetLastTrackerId(&_IStakingTracker.CallOpts)
}

// GetLiveTrackerIds is a free data retrieval call binding the contract method 0xd4377d4d.
//
// Solidity: function getLiveTrackerIds() view returns(uint256[])
func (_IStakingTracker *IStakingTrackerCaller) GetLiveTrackerIds(opts *bind.CallOpts) ([]*big.Int, error) {
	var out []interface{}
	err := _IStakingTracker.contract.Call(opts, &out, "getLiveTrackerIds")

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetLiveTrackerIds is a free data retrieval call binding the contract method 0xd4377d4d.
//
// Solidity: function getLiveTrackerIds() view returns(uint256[])
func (_IStakingTracker *IStakingTrackerSession) GetLiveTrackerIds() ([]*big.Int, error) {
	return _IStakingTracker.Contract.GetLiveTrackerIds(&_IStakingTracker.CallOpts)
}

// GetLiveTrackerIds is a free data retrieval call binding the contract method 0xd4377d4d.
//
// Solidity: function getLiveTrackerIds() view returns(uint256[])
func (_IStakingTracker *IStakingTrackerCallerSession) GetLiveTrackerIds() ([]*big.Int, error) {
	return _IStakingTracker.Contract.GetLiveTrackerIds(&_IStakingTracker.CallOpts)
}

// GetTrackedGC is a free data retrieval call binding the contract method 0x51afc36c.
//
// Solidity: function getTrackedGC(uint256 trackerId, uint256 gcId) view returns(uint256 gcBalance, uint256 gcVotes)
func (_IStakingTracker *IStakingTrackerCaller) GetTrackedGC(opts *bind.CallOpts, trackerId *big.Int, gcId *big.Int) (struct {
	GcBalance *big.Int
	GcVotes   *big.Int
}, error) {
	var out []interface{}
	err := _IStakingTracker.contract.Call(opts, &out, "getTrackedGC", trackerId, gcId)

	outstruct := new(struct {
		GcBalance *big.Int
		GcVotes   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.GcBalance = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.GcVotes = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetTrackedGC is a free data retrieval call binding the contract method 0x51afc36c.
//
// Solidity: function getTrackedGC(uint256 trackerId, uint256 gcId) view returns(uint256 gcBalance, uint256 gcVotes)
func (_IStakingTracker *IStakingTrackerSession) GetTrackedGC(trackerId *big.Int, gcId *big.Int) (struct {
	GcBalance *big.Int
	GcVotes   *big.Int
}, error) {
	return _IStakingTracker.Contract.GetTrackedGC(&_IStakingTracker.CallOpts, trackerId, gcId)
}

// GetTrackedGC is a free data retrieval call binding the contract method 0x51afc36c.
//
// Solidity: function getTrackedGC(uint256 trackerId, uint256 gcId) view returns(uint256 gcBalance, uint256 gcVotes)
func (_IStakingTracker *IStakingTrackerCallerSession) GetTrackedGC(trackerId *big.Int, gcId *big.Int) (struct {
	GcBalance *big.Int
	GcVotes   *big.Int
}, error) {
	return _IStakingTracker.Contract.GetTrackedGC(&_IStakingTracker.CallOpts, trackerId, gcId)
}

// GetTrackerSummary is a free data retrieval call binding the contract method 0x3c7fff46.
//
// Solidity: function getTrackerSummary(uint256 trackerId) view returns(uint256 trackStart, uint256 trackEnd, uint256 numGCs, uint256 totalVotes, uint256 numEligible)
func (_IStakingTracker *IStakingTrackerCaller) GetTrackerSummary(opts *bind.CallOpts, trackerId *big.Int) (struct {
	TrackStart  *big.Int
	TrackEnd    *big.Int
	NumGCs      *big.Int
	TotalVotes  *big.Int
	NumEligible *big.Int
}, error) {
	var out []interface{}
	err := _IStakingTracker.contract.Call(opts, &out, "getTrackerSummary", trackerId)

	outstruct := new(struct {
		TrackStart  *big.Int
		TrackEnd    *big.Int
		NumGCs      *big.Int
		TotalVotes  *big.Int
		NumEligible *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TrackStart = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.TrackEnd = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.NumGCs = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.TotalVotes = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.NumEligible = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetTrackerSummary is a free data retrieval call binding the contract method 0x3c7fff46.
//
// Solidity: function getTrackerSummary(uint256 trackerId) view returns(uint256 trackStart, uint256 trackEnd, uint256 numGCs, uint256 totalVotes, uint256 numEligible)
func (_IStakingTracker *IStakingTrackerSession) GetTrackerSummary(trackerId *big.Int) (struct {
	TrackStart  *big.Int
	TrackEnd    *big.Int
	NumGCs      *big.Int
	TotalVotes  *big.Int
	NumEligible *big.Int
}, error) {
	return _IStakingTracker.Contract.GetTrackerSummary(&_IStakingTracker.CallOpts, trackerId)
}

// GetTrackerSummary is a free data retrieval call binding the contract method 0x3c7fff46.
//
// Solidity: function getTrackerSummary(uint256 trackerId) view returns(uint256 trackStart, uint256 trackEnd, uint256 numGCs, uint256 totalVotes, uint256 numEligible)
func (_IStakingTracker *IStakingTrackerCallerSession) GetTrackerSummary(trackerId *big.Int) (struct {
	TrackStart  *big.Int
	TrackEnd    *big.Int
	NumGCs      *big.Int
	TotalVotes  *big.Int
	NumEligible *big.Int
}, error) {
	return _IStakingTracker.Contract.GetTrackerSummary(&_IStakingTracker.CallOpts, trackerId)
}

// StakingToGCId is a free data retrieval call binding the contract method 0x0294a897.
//
// Solidity: function stakingToGCId(uint256 trackerId, address staking) view returns(uint256 gcId)
func (_IStakingTracker *IStakingTrackerCaller) StakingToGCId(opts *bind.CallOpts, trackerId *big.Int, staking common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IStakingTracker.contract.Call(opts, &out, "stakingToGCId", trackerId, staking)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakingToGCId is a free data retrieval call binding the contract method 0x0294a897.
//
// Solidity: function stakingToGCId(uint256 trackerId, address staking) view returns(uint256 gcId)
func (_IStakingTracker *IStakingTrackerSession) StakingToGCId(trackerId *big.Int, staking common.Address) (*big.Int, error) {
	return _IStakingTracker.Contract.StakingToGCId(&_IStakingTracker.CallOpts, trackerId, staking)
}

// StakingToGCId is a free data retrieval call binding the contract method 0x0294a897.
//
// Solidity: function stakingToGCId(uint256 trackerId, address staking) view returns(uint256 gcId)
func (_IStakingTracker *IStakingTrackerCallerSession) StakingToGCId(trackerId *big.Int, staking common.Address) (*big.Int, error) {
	return _IStakingTracker.Contract.StakingToGCId(&_IStakingTracker.CallOpts, trackerId, staking)
}

// VoterToGCId is a free data retrieval call binding the contract method 0x4f471c02.
//
// Solidity: function voterToGCId(address voter) view returns(uint256 gcId)
func (_IStakingTracker *IStakingTrackerCaller) VoterToGCId(opts *bind.CallOpts, voter common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IStakingTracker.contract.Call(opts, &out, "voterToGCId", voter)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoterToGCId is a free data retrieval call binding the contract method 0x4f471c02.
//
// Solidity: function voterToGCId(address voter) view returns(uint256 gcId)
func (_IStakingTracker *IStakingTrackerSession) VoterToGCId(voter common.Address) (*big.Int, error) {
	return _IStakingTracker.Contract.VoterToGCId(&_IStakingTracker.CallOpts, voter)
}

// VoterToGCId is a free data retrieval call binding the contract method 0x4f471c02.
//
// Solidity: function voterToGCId(address voter) view returns(uint256 gcId)
func (_IStakingTracker *IStakingTrackerCallerSession) VoterToGCId(voter common.Address) (*big.Int, error) {
	return _IStakingTracker.Contract.VoterToGCId(&_IStakingTracker.CallOpts, voter)
}

// CreateTracker is a paid mutator transaction binding the contract method 0x01d057c1.
//
// Solidity: function createTracker(uint256 trackStart, uint256 trackEnd) returns(uint256 trackerId)
func (_IStakingTracker *IStakingTrackerTransactor) CreateTracker(opts *bind.TransactOpts, trackStart *big.Int, trackEnd *big.Int) (*types.Transaction, error) {
	return _IStakingTracker.contract.Transact(opts, "createTracker", trackStart, trackEnd)
}

// CreateTracker is a paid mutator transaction binding the contract method 0x01d057c1.
//
// Solidity: function createTracker(uint256 trackStart, uint256 trackEnd) returns(uint256 trackerId)
func (_IStakingTracker *IStakingTrackerSession) CreateTracker(trackStart *big.Int, trackEnd *big.Int) (*types.Transaction, error) {
	return _IStakingTracker.Contract.CreateTracker(&_IStakingTracker.TransactOpts, trackStart, trackEnd)
}

// CreateTracker is a paid mutator transaction binding the contract method 0x01d057c1.
//
// Solidity: function createTracker(uint256 trackStart, uint256 trackEnd) returns(uint256 trackerId)
func (_IStakingTracker *IStakingTrackerTransactorSession) CreateTracker(trackStart *big.Int, trackEnd *big.Int) (*types.Transaction, error) {
	return _IStakingTracker.Contract.CreateTracker(&_IStakingTracker.TransactOpts, trackStart, trackEnd)
}

// RefreshStake is a paid mutator transaction binding the contract method 0x5605a4e5.
//
// Solidity: function refreshStake(address staking) returns()
func (_IStakingTracker *IStakingTrackerTransactor) RefreshStake(opts *bind.TransactOpts, staking common.Address) (*types.Transaction, error) {
	return _IStakingTracker.contract.Transact(opts, "refreshStake", staking)
}

// RefreshStake is a paid mutator transaction binding the contract method 0x5605a4e5.
//
// Solidity: function refreshStake(address staking) returns()
func (_IStakingTracker *IStakingTrackerSession) RefreshStake(staking common.Address) (*types.Transaction, error) {
	return _IStakingTracker.Contract.RefreshStake(&_IStakingTracker.TransactOpts, staking)
}

// RefreshStake is a paid mutator transaction binding the contract method 0x5605a4e5.
//
// Solidity: function refreshStake(address staking) returns()
func (_IStakingTracker *IStakingTrackerTransactorSession) RefreshStake(staking common.Address) (*types.Transaction, error) {
	return _IStakingTracker.Contract.RefreshStake(&_IStakingTracker.TransactOpts, staking)
}

// RefreshVoter is a paid mutator transaction binding the contract method 0xaad8cb3f.
//
// Solidity: function refreshVoter(address staking) returns()
func (_IStakingTracker *IStakingTrackerTransactor) RefreshVoter(opts *bind.TransactOpts, staking common.Address) (*types.Transaction, error) {
	return _IStakingTracker.contract.Transact(opts, "refreshVoter", staking)
}

// RefreshVoter is a paid mutator transaction binding the contract method 0xaad8cb3f.
//
// Solidity: function refreshVoter(address staking) returns()
func (_IStakingTracker *IStakingTrackerSession) RefreshVoter(staking common.Address) (*types.Transaction, error) {
	return _IStakingTracker.Contract.RefreshVoter(&_IStakingTracker.TransactOpts, staking)
}

// RefreshVoter is a paid mutator transaction binding the contract method 0xaad8cb3f.
//
// Solidity: function refreshVoter(address staking) returns()
func (_IStakingTracker *IStakingTrackerTransactorSession) RefreshVoter(staking common.Address) (*types.Transaction, error) {
	return _IStakingTracker.Contract.RefreshVoter(&_IStakingTracker.TransactOpts, staking)
}

// IStakingTrackerCreateTrackerIterator is returned from FilterCreateTracker and is used to iterate over the raw logs and unpacked data for CreateTracker events raised by the IStakingTracker contract.
type IStakingTrackerCreateTrackerIterator struct {
	Event *IStakingTrackerCreateTracker // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IStakingTrackerCreateTrackerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IStakingTrackerCreateTracker)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IStakingTrackerCreateTracker)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IStakingTrackerCreateTrackerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IStakingTrackerCreateTrackerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IStakingTrackerCreateTracker represents a CreateTracker event raised by the IStakingTracker contract.
type IStakingTrackerCreateTracker struct {
	TrackerId  *big.Int
	TrackStart *big.Int
	TrackEnd   *big.Int
	GcIds      []*big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCreateTracker is a free log retrieval operation binding the contract event 0xa99a778a0f1ab0a253c5e2aa8ff583bd28a4e9b81e7cf6e053f685f683f077d1.
//
// Solidity: event CreateTracker(uint256 indexed trackerId, uint256 trackStart, uint256 trackEnd, uint256[] gcIds)
func (_IStakingTracker *IStakingTrackerFilterer) FilterCreateTracker(opts *bind.FilterOpts, trackerId []*big.Int) (*IStakingTrackerCreateTrackerIterator, error) {

	var trackerIdRule []interface{}
	for _, trackerIdItem := range trackerId {
		trackerIdRule = append(trackerIdRule, trackerIdItem)
	}

	logs, sub, err := _IStakingTracker.contract.FilterLogs(opts, "CreateTracker", trackerIdRule)
	if err != nil {
		return nil, err
	}
	return &IStakingTrackerCreateTrackerIterator{contract: _IStakingTracker.contract, event: "CreateTracker", logs: logs, sub: sub}, nil
}

// WatchCreateTracker is a free log subscription operation binding the contract event 0xa99a778a0f1ab0a253c5e2aa8ff583bd28a4e9b81e7cf6e053f685f683f077d1.
//
// Solidity: event CreateTracker(uint256 indexed trackerId, uint256 trackStart, uint256 trackEnd, uint256[] gcIds)
func (_IStakingTracker *IStakingTrackerFilterer) WatchCreateTracker(opts *bind.WatchOpts, sink chan<- *IStakingTrackerCreateTracker, trackerId []*big.Int) (event.Subscription, error) {

	var trackerIdRule []interface{}
	for _, trackerIdItem := range trackerId {
		trackerIdRule = append(trackerIdRule, trackerIdItem)
	}

	logs, sub, err := _IStakingTracker.contract.WatchLogs(opts, "CreateTracker", trackerIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IStakingTrackerCreateTracker)
				if err := _IStakingTracker.contract.UnpackLog(event, "CreateTracker", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateTracker is a log parse operation binding the contract event 0xa99a778a0f1ab0a253c5e2aa8ff583bd28a4e9b81e7cf6e053f685f683f077d1.
//
// Solidity: event CreateTracker(uint256 indexed trackerId, uint256 trackStart, uint256 trackEnd, uint256[] gcIds)
func (_IStakingTracker *IStakingTrackerFilterer) ParseCreateTracker(log types.Log) (*IStakingTrackerCreateTracker, error) {
	event := new(IStakingTrackerCreateTracker)
	if err := _IStakingTracker.contract.UnpackLog(event, "CreateTracker", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IStakingTrackerRefreshStakeIterator is returned from FilterRefreshStake and is used to iterate over the raw logs and unpacked data for RefreshStake events raised by the IStakingTracker contract.
type IStakingTrackerRefreshStakeIterator struct {
	Event *IStakingTrackerRefreshStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IStakingTrackerRefreshStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IStakingTrackerRefreshStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IStakingTrackerRefreshStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IStakingTrackerRefreshStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IStakingTrackerRefreshStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IStakingTrackerRefreshStake represents a RefreshStake event raised by the IStakingTracker contract.
type IStakingTrackerRefreshStake struct {
	TrackerId      *big.Int
	GcId           *big.Int
	Staking        common.Address
	StakingBalance *big.Int
	GcBalance      *big.Int
	GcVote         *big.Int
	TotalVotes     *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRefreshStake is a free log retrieval operation binding the contract event 0xdb84b66602d6a1eb74094da1da947e3d5896fc08ebc7770e271dbc61e4466771.
//
// Solidity: event RefreshStake(uint256 indexed trackerId, uint256 indexed gcId, address staking, uint256 stakingBalance, uint256 gcBalance, uint256 gcVote, uint256 totalVotes)
func (_IStakingTracker *IStakingTrackerFilterer) FilterRefreshStake(opts *bind.FilterOpts, trackerId []*big.Int, gcId []*big.Int) (*IStakingTrackerRefreshStakeIterator, error) {

	var trackerIdRule []interface{}
	for _, trackerIdItem := range trackerId {
		trackerIdRule = append(trackerIdRule, trackerIdItem)
	}
	var gcIdRule []interface{}
	for _, gcIdItem := range gcId {
		gcIdRule = append(gcIdRule, gcIdItem)
	}

	logs, sub, err := _IStakingTracker.contract.FilterLogs(opts, "RefreshStake", trackerIdRule, gcIdRule)
	if err != nil {
		return nil, err
	}
	return &IStakingTrackerRefreshStakeIterator{contract: _IStakingTracker.contract, event: "RefreshStake", logs: logs, sub: sub}, nil
}

// WatchRefreshStake is a free log subscription operation binding the contract event 0xdb84b66602d6a1eb74094da1da947e3d5896fc08ebc7770e271dbc61e4466771.
//
// Solidity: event RefreshStake(uint256 indexed trackerId, uint256 indexed gcId, address staking, uint256 stakingBalance, uint256 gcBalance, uint256 gcVote, uint256 totalVotes)
func (_IStakingTracker *IStakingTrackerFilterer) WatchRefreshStake(opts *bind.WatchOpts, sink chan<- *IStakingTrackerRefreshStake, trackerId []*big.Int, gcId []*big.Int) (event.Subscription, error) {

	var trackerIdRule []interface{}
	for _, trackerIdItem := range trackerId {
		trackerIdRule = append(trackerIdRule, trackerIdItem)
	}
	var gcIdRule []interface{}
	for _, gcIdItem := range gcId {
		gcIdRule = append(gcIdRule, gcIdItem)
	}

	logs, sub, err := _IStakingTracker.contract.WatchLogs(opts, "RefreshStake", trackerIdRule, gcIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IStakingTrackerRefreshStake)
				if err := _IStakingTracker.contract.UnpackLog(event, "RefreshStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefreshStake is a log parse operation binding the contract event 0xdb84b66602d6a1eb74094da1da947e3d5896fc08ebc7770e271dbc61e4466771.
//
// Solidity: event RefreshStake(uint256 indexed trackerId, uint256 indexed gcId, address staking, uint256 stakingBalance, uint256 gcBalance, uint256 gcVote, uint256 totalVotes)
func (_IStakingTracker *IStakingTrackerFilterer) ParseRefreshStake(log types.Log) (*IStakingTrackerRefreshStake, error) {
	event := new(IStakingTrackerRefreshStake)
	if err := _IStakingTracker.contract.UnpackLog(event, "RefreshStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IStakingTrackerRefreshVoterIterator is returned from FilterRefreshVoter and is used to iterate over the raw logs and unpacked data for RefreshVoter events raised by the IStakingTracker contract.
type IStakingTrackerRefreshVoterIterator struct {
	Event *IStakingTrackerRefreshVoter // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IStakingTrackerRefreshVoterIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IStakingTrackerRefreshVoter)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IStakingTrackerRefreshVoter)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IStakingTrackerRefreshVoterIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IStakingTrackerRefreshVoterIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IStakingTrackerRefreshVoter represents a RefreshVoter event raised by the IStakingTracker contract.
type IStakingTrackerRefreshVoter struct {
	GcId    *big.Int
	Staking common.Address
	Voter   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRefreshVoter is a free log retrieval operation binding the contract event 0x6734527732bd32c7303b2d45bd8e1a2f64f45d0439e14c01d6dd46b5d276e58d.
//
// Solidity: event RefreshVoter(uint256 indexed gcId, address staking, address voter)
func (_IStakingTracker *IStakingTrackerFilterer) FilterRefreshVoter(opts *bind.FilterOpts, gcId []*big.Int) (*IStakingTrackerRefreshVoterIterator, error) {

	var gcIdRule []interface{}
	for _, gcIdItem := range gcId {
		gcIdRule = append(gcIdRule, gcIdItem)
	}

	logs, sub, err := _IStakingTracker.contract.FilterLogs(opts, "RefreshVoter", gcIdRule)
	if err != nil {
		return nil, err
	}
	return &IStakingTrackerRefreshVoterIterator{contract: _IStakingTracker.contract, event: "RefreshVoter", logs: logs, sub: sub}, nil
}

// WatchRefreshVoter is a free log subscription operation binding the contract event 0x6734527732bd32c7303b2d45bd8e1a2f64f45d0439e14c01d6dd46b5d276e58d.
//
// Solidity: event RefreshVoter(uint256 indexed gcId, address staking, address voter)
func (_IStakingTracker *IStakingTrackerFilterer) WatchRefreshVoter(opts *bind.WatchOpts, sink chan<- *IStakingTrackerRefreshVoter, gcId []*big.Int) (event.Subscription, error) {

	var gcIdRule []interface{}
	for _, gcIdItem := range gcId {
		gcIdRule = append(gcIdRule, gcIdItem)
	}

	logs, sub, err := _IStakingTracker.contract.WatchLogs(opts, "RefreshVoter", gcIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IStakingTrackerRefreshVoter)
				if err := _IStakingTracker.contract.UnpackLog(event, "RefreshVoter", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefreshVoter is a log parse operation binding the contract event 0x6734527732bd32c7303b2d45bd8e1a2f64f45d0439e14c01d6dd46b5d276e58d.
//
// Solidity: event RefreshVoter(uint256 indexed gcId, address staking, address voter)
func (_IStakingTracker *IStakingTrackerFilterer) ParseRefreshVoter(log types.Log) (*IStakingTrackerRefreshVoter, error) {
	event := new(IStakingTrackerRefreshVoter)
	if err := _IStakingTracker.contract.UnpackLog(event, "RefreshVoter", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IStakingTrackerRetireTrackerIterator is returned from FilterRetireTracker and is used to iterate over the raw logs and unpacked data for RetireTracker events raised by the IStakingTracker contract.
type IStakingTrackerRetireTrackerIterator struct {
	Event *IStakingTrackerRetireTracker // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IStakingTrackerRetireTrackerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IStakingTrackerRetireTracker)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IStakingTrackerRetireTracker)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IStakingTrackerRetireTrackerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IStakingTrackerRetireTrackerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IStakingTrackerRetireTracker represents a RetireTracker event raised by the IStakingTracker contract.
type IStakingTrackerRetireTracker struct {
	TrackerId *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRetireTracker is a free log retrieval operation binding the contract event 0x9e6e7ff15b559bab9c50f497e4c7697d608282d32244b6e922892cf01bb2f7df.
//
// Solidity: event RetireTracker(uint256 indexed trackerId)
func (_IStakingTracker *IStakingTrackerFilterer) FilterRetireTracker(opts *bind.FilterOpts, trackerId []*big.Int) (*IStakingTrackerRetireTrackerIterator, error) {

	var trackerIdRule []interface{}
	for _, trackerIdItem := range trackerId {
		trackerIdRule = append(trackerIdRule, trackerIdItem)
	}

	logs, sub, err := _IStakingTracker.contract.FilterLogs(opts, "RetireTracker", trackerIdRule)
	if err != nil {
		return nil, err
	}
	return &IStakingTrackerRetireTrackerIterator{contract: _IStakingTracker.contract, event: "RetireTracker", logs: logs, sub: sub}, nil
}

// WatchRetireTracker is a free log subscription operation binding the contract event 0x9e6e7ff15b559bab9c50f497e4c7697d608282d32244b6e922892cf01bb2f7df.
//
// Solidity: event RetireTracker(uint256 indexed trackerId)
func (_IStakingTracker *IStakingTrackerFilterer) WatchRetireTracker(opts *bind.WatchOpts, sink chan<- *IStakingTrackerRetireTracker, trackerId []*big.Int) (event.Subscription, error) {

	var trackerIdRule []interface{}
	for _, trackerIdItem := range trackerId {
		trackerIdRule = append(trackerIdRule, trackerIdItem)
	}

	logs, sub, err := _IStakingTracker.contract.WatchLogs(opts, "RetireTracker", trackerIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IStakingTrackerRetireTracker)
				if err := _IStakingTracker.contract.UnpackLog(event, "RetireTracker", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRetireTracker is a log parse operation binding the contract event 0x9e6e7ff15b559bab9c50f497e4c7697d608282d32244b6e922892cf01bb2f7df.
//
// Solidity: event RetireTracker(uint256 indexed trackerId)
func (_IStakingTracker *IStakingTrackerFilterer) ParseRetireTracker(log types.Log) (*IStakingTrackerRetireTracker, error) {
	event := new(IStakingTrackerRetireTracker)
	if err := _IStakingTracker.contract.UnpackLog(event, "RetireTracker", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MathMetaData contains all meta data concerning the Math contract.
var MathMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}]",
	Bin: "0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220712f35b86f21aa8557926c5f616fc23eca3635f3385ba733c156f4e283869c7064736f6c63430008190033",
}

// MathABI is the input ABI used to generate the binding from.
// Deprecated: Use MathMetaData.ABI instead.
var MathABI = MathMetaData.ABI

// MathBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const MathBinRuntime = `730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220712f35b86f21aa8557926c5f616fc23eca3635f3385ba733c156f4e283869c7064736f6c63430008190033`

// MathBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MathMetaData.Bin instead.
var MathBin = MathMetaData.Bin

// DeployMath deploys a new Kaia contract, binding an instance of Math to it.
func DeployMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Math, error) {
	parsed, err := MathMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Math{MathCaller: MathCaller{contract: contract}, MathTransactor: MathTransactor{contract: contract}, MathFilterer: MathFilterer{contract: contract}}, nil
}

// Math is an auto generated Go binding around a Kaia contract.
type Math struct {
	MathCaller     // Read-only binding to the contract
	MathTransactor // Write-only binding to the contract
	MathFilterer   // Log filterer for contract events
}

// MathCaller is an auto generated read-only Go binding around a Kaia contract.
type MathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MathTransactor is an auto generated write-only Go binding around a Kaia contract.
type MathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MathFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type MathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MathSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type MathSession struct {
	Contract     *Math             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MathCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type MathCallerSession struct {
	Contract *MathCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MathTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type MathTransactorSession struct {
	Contract     *MathTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MathRaw is an auto generated low-level Go binding around a Kaia contract.
type MathRaw struct {
	Contract *Math // Generic contract binding to access the raw methods on
}

// MathCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type MathCallerRaw struct {
	Contract *MathCaller // Generic read-only contract binding to access the raw methods on
}

// MathTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type MathTransactorRaw struct {
	Contract *MathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMath creates a new instance of Math, bound to a specific deployed contract.
func NewMath(address common.Address, backend bind.ContractBackend) (*Math, error) {
	contract, err := bindMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Math{MathCaller: MathCaller{contract: contract}, MathTransactor: MathTransactor{contract: contract}, MathFilterer: MathFilterer{contract: contract}}, nil
}

// NewMathCaller creates a new read-only instance of Math, bound to a specific deployed contract.
func NewMathCaller(address common.Address, caller bind.ContractCaller) (*MathCaller, error) {
	contract, err := bindMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MathCaller{contract: contract}, nil
}

// NewMathTransactor creates a new write-only instance of Math, bound to a specific deployed contract.
func NewMathTransactor(address common.Address, transactor bind.ContractTransactor) (*MathTransactor, error) {
	contract, err := bindMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MathTransactor{contract: contract}, nil
}

// NewMathFilterer creates a new log filterer instance of Math, bound to a specific deployed contract.
func NewMathFilterer(address common.Address, filterer bind.ContractFilterer) (*MathFilterer, error) {
	contract, err := bindMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MathFilterer{contract: contract}, nil
}

// bindMath binds a generic wrapper to an already deployed contract.
func bindMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MathMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Math *MathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Math.Contract.MathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Math *MathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Math.Contract.MathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Math *MathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Math.Contract.MathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Math *MathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Math.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Math *MathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Math.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Math *MathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Math.Contract.contract.Transact(opts, method, params...)
}

// OwnableMetaData contains all meta data concerning the Ownable contract.
var OwnableMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"8da5cb5b": "owner()",
		"715018a6": "renounceOwnership()",
		"f2fde38b": "transferOwnership(address)",
	},
}

// OwnableABI is the input ABI used to generate the binding from.
// Deprecated: Use OwnableMetaData.ABI instead.
var OwnableABI = OwnableMetaData.ABI

// OwnableBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const OwnableBinRuntime = ``

// Deprecated: Use OwnableMetaData.Sigs instead.
// OwnableFuncSigs maps the 4-byte function signature to its string representation.
var OwnableFuncSigs = OwnableMetaData.Sigs

// Ownable is an auto generated Go binding around a Kaia contract.
type Ownable struct {
	OwnableCaller     // Read-only binding to the contract
	OwnableTransactor // Write-only binding to the contract
	OwnableFilterer   // Log filterer for contract events
}

// OwnableCaller is an auto generated read-only Go binding around a Kaia contract.
type OwnableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableTransactor is an auto generated write-only Go binding around a Kaia contract.
type OwnableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type OwnableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type OwnableSession struct {
	Contract     *Ownable          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OwnableCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type OwnableCallerSession struct {
	Contract *OwnableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// OwnableTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type OwnableTransactorSession struct {
	Contract     *OwnableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// OwnableRaw is an auto generated low-level Go binding around a Kaia contract.
type OwnableRaw struct {
	Contract *Ownable // Generic contract binding to access the raw methods on
}

// OwnableCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type OwnableCallerRaw struct {
	Contract *OwnableCaller // Generic read-only contract binding to access the raw methods on
}

// OwnableTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type OwnableTransactorRaw struct {
	Contract *OwnableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOwnable creates a new instance of Ownable, bound to a specific deployed contract.
func NewOwnable(address common.Address, backend bind.ContractBackend) (*Ownable, error) {
	contract, err := bindOwnable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Ownable{OwnableCaller: OwnableCaller{contract: contract}, OwnableTransactor: OwnableTransactor{contract: contract}, OwnableFilterer: OwnableFilterer{contract: contract}}, nil
}

// NewOwnableCaller creates a new read-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableCaller(address common.Address, caller bind.ContractCaller) (*OwnableCaller, error) {
	contract, err := bindOwnable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableCaller{contract: contract}, nil
}

// NewOwnableTransactor creates a new write-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableTransactor(address common.Address, transactor bind.ContractTransactor) (*OwnableTransactor, error) {
	contract, err := bindOwnable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableTransactor{contract: contract}, nil
}

// NewOwnableFilterer creates a new log filterer instance of Ownable, bound to a specific deployed contract.
func NewOwnableFilterer(address common.Address, filterer bind.ContractFilterer) (*OwnableFilterer, error) {
	contract, err := bindOwnable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OwnableFilterer{contract: contract}, nil
}

// bindOwnable binds a generic wrapper to an already deployed contract.
func bindOwnable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := OwnableMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ownable *OwnableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Ownable.Contract.OwnableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ownable *OwnableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.Contract.OwnableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ownable *OwnableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ownable.Contract.OwnableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ownable *OwnableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Ownable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ownable *OwnableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ownable *OwnableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ownable.Contract.contract.Transact(opts, method, params...)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Ownable.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableSession) Owner() (common.Address, error) {
	return _Ownable.Contract.Owner(&_Ownable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableCallerSession) Owner() (common.Address, error) {
	return _Ownable.Contract.Owner(&_Ownable.CallOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableSession) RenounceOwnership() (*types.Transaction, error) {
	return _Ownable.Contract.RenounceOwnership(&_Ownable.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Ownable.Contract.RenounceOwnership(&_Ownable.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferOwnership(&_Ownable.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferOwnership(&_Ownable.TransactOpts, newOwner)
}

// OwnableOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Ownable contract.
type OwnableOwnershipTransferredIterator struct {
	Event *OwnableOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OwnableOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OwnableOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OwnableOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OwnableOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OwnableOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OwnableOwnershipTransferred represents a OwnershipTransferred event raised by the Ownable contract.
type OwnableOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ownable *OwnableFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*OwnableOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Ownable.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &OwnableOwnershipTransferredIterator{contract: _Ownable.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ownable *OwnableFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *OwnableOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Ownable.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OwnableOwnershipTransferred)
				if err := _Ownable.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ownable *OwnableFilterer) ParseOwnershipTransferred(log types.Log) (*OwnableOwnershipTransferred, error) {
	event := new(OwnableOwnershipTransferred)
	if err := _Ownable.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationMetaData contains all meta data concerning the PublicDelegation contract.
var PublicDelegationMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseCnStakingV3\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"commissionTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"gcName\",\"type\":\"string\"}],\"internalType\":\"structIPublicDelegation.PDConstructorArgs\",\"name\":\"_pdArgs\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_contractType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_baseCnStakingV3\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"commissionTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"gcName\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"structIPublicDelegation.PDConstructorArgs\",\"name\":\"_pdArgs\",\"type\":\"tuple\"}],\"name\":\"DeployContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_targetCnV3\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"Redelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"RequestCancelWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"RequestWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_commissionTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"SendCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_prevCommissionRate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"name\":\"UpdateCommissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_prevCommissionTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_commissionTo\",\"type\":\"address\"}],\"name\":\"UpdateCommissionTo\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMMISSION_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_COMMISSION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseCnStakingV3\",\"outputs\":[{\"internalType\":\"contractICnStakingV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"cancelApprovedStakingWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getCurrentWithdrawalRequestState\",\"outputs\":[{\"internalType\":\"enumIPublicDelegation.WithdrawalRequestState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getUserRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getUserRequestIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"enumIPublicDelegation.WithdrawalRequestState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"getUserRequestIdsWithState\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_requestIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetCnV3\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"redelegateByAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetCnV3\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"redelegateByShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIdToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"name\":\"updateCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_commissionTo\",\"type\":\"address\"}],\"name\":\"updateCommissionTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRequestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"3b1dbfcc": "COMMISSION_DENOMINATOR()",
		"4b6a94cc": "CONTRACT_TYPE()",
		"207239c0": "MAX_COMMISSION_RATE()",
		"ffa1ad74": "VERSION()",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"e2c8bde5": "baseCnStakingV3()",
		"c804b115": "cancelApprovedStakingWithdrawal(uint256)",
		"379607f5": "claim(uint256)",
		"5ea1d6f8": "commissionRate()",
		"2f9ac83a": "commissionTo()",
		"07a2d13a": "convertToAssets(uint256)",
		"c6e6f592": "convertToShares(uint256)",
		"313ce567": "decimals()",
		"04ddc9d1": "getCurrentWithdrawalRequestState(uint256)",
		"c166c458": "getUserRequestCount(address)",
		"60df7c6c": "getUserRequestIds(address)",
		"93b89a84": "getUserRequestIdsWithState(address,uint8)",
		"d905777e": "maxRedeem(address)",
		"ce96cb77": "maxWithdraw(address)",
		"06fdde03": "name()",
		"8da5cb5b": "owner()",
		"ef8b30f7": "previewDeposit(uint256)",
		"4cdad506": "previewRedeem(uint256)",
		"0a28a477": "previewWithdraw(uint256)",
		"1e9a6950": "redeem(address,uint256)",
		"e659d7d7": "redelegateByAssets(address,uint256)",
		"e15fc350": "redelegateByShares(address,uint256)",
		"715018a6": "renounceOwnership()",
		"f29177c3": "requestIdToOwner(uint256)",
		"228cb733": "reward()",
		"3a4b66f1": "stake()",
		"4bf69206": "stakeFor(address)",
		"35faa416": "sweep()",
		"95d89b41": "symbol()",
		"01e1d114": "totalAssets()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"f2fde38b": "transferOwnership(address)",
		"00fa3d50": "updateCommissionRate(uint256)",
		"052028d0": "updateCommissionTo(address)",
		"97feb23c": "userRequestIds(address,uint256)",
		"f3fef3a3": "withdraw(address,uint256)",
	},
	Bin: "0x60a060405234801561000f575f80fd5b50604051612dcb380380612dcb83398101604081905261002e91610292565b8051606082015160405161004591906020016103a2565b604051602081830303815290604052826060015160405160200161006991906103da565b60408051601f1981840301815291905260076100858382610480565b5060086100928282610480565b5050506001600160a01b0381166100c357604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6100cc816101ba565b50612710816040015111156101235760405162461bcd60e51b815260206004820152601c60248201527f436f6d6d697373696f6e207261746520697320746f6f20686967682e0000000060448201526064016100ba565b6001600160a01b038281166080526040828101516001556020808401515f80546001600160a01b031916919094161790925580518082018252601081526f283ab13634b1a232b632b3b0ba34b7b760811b92810192909252517f559705a83e2830cb29ab43f78af7f847810ba4a5bff2a637f7e5665ecf8dc55f916101ab918590859061056d565b60405180910390a150506105d7565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b80516001600160a01b0381168114610221575f80fd5b919050565b634e487b7160e01b5f52604160045260245ffd5b604051608081016001600160401b038111828210171561025c5761025c610226565b60405290565b604051601f8201601f191681016001600160401b038111828210171561028a5761028a610226565b604052919050565b5f80604083850312156102a3575f80fd5b6102ac8361020b565b602084810151919350906001600160401b03808211156102ca575f80fd5b90850190608082880312156102dd575f80fd5b6102e561023a565b6102ee8361020b565b81526102fb84840161020b565b848201526040830151604082015260608301518281111561031a575f80fd5b80840193505087601f84011261032e575f80fd5b82518281111561034057610340610226565b610352601f8201601f19168601610262565b92508083528885828601011115610367575f80fd5b808585018685015e5f85828501015250816060820152809450505050509250929050565b5f81518060208401855e5f93019283525090919050565b5f6103ad828461038b565b7f205075626c69632044656c656761746564204b4149410000000000000000000081526016019392505050565b5f6103e5828461038b565b662d70644b41494160c81b81526007019392505050565b600181811c9082168061041057607f821691505b60208210810361042e57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561047b57805f5260205f20601f840160051c810160208510156104595750805b601f840160051c820191505b81811015610478575f8155600101610465565b50505b505050565b81516001600160401b0381111561049957610499610226565b6104ad816104a784546103fc565b84610434565b602080601f8311600181146104e0575f84156104c95750858301515b5f19600386901b1c1916600185901b178555610537565b5f85815260208120601f198616915b8281101561050e578886015182559484019460019091019084016104ef565b508582101561052b57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b606081525f61057f606083018661053f565b60018060a01b038086166020850152838203604085015280855116825280602086015116602083015250604084015160408201526060840151608060608301526105cc608083018261053f565b979650505050505050565b6080516127966106355f395f818161074f01528181610a5f015281816112e2015281816113620152818161143e015281816114f90152818161169a015281816118f501528181611ae201528181611b750152611e7c01526127965ff3fe60806040526004361061026c575f3560e01c80635ea1d6f81161014a578063c804b115116100be578063e659d7d711610078578063e659d7d714610771578063ef8b30f714610790578063f29177c3146107af578063f2fde38b146107e3578063f3fef3a314610802578063ffa1ad7414610821575f80fd5b8063c804b1151461067e578063ce96cb771461069d578063d905777e146106bc578063dd62ed3e146106db578063e15fc3501461071f578063e2c8bde51461073e575f80fd5b806393b89a841161010f57806393b89a84146105ba57806395d89b41146105d957806397feb23c146105ed578063a9059cbb1461060c578063c166c4581461062b578063c6e6f5921461065f575f80fd5b80635ea1d6f81461051457806360df7c6c1461052957806370a0823114610555578063715018a6146105895780638da5cb5b1461059d575f80fd5b8063228cb733116101e1578063379607f5116101a6578063379607f5146104805780633a4b66f11461049f5780633b1dbfcc146103d35780634b6a94cc146104a75780634bf69206146104e25780634cdad506146104f5575f80fd5b8063228cb733146103e857806323b872dd146103fc5780632f9ac83a1461041b578063313ce5671461045157806335faa4161461046c575f80fd5b806307a2d13a1161023257806307a2d13a14610333578063095ea7b3146103525780630a28a4771461038157806318160ddd146103a05780631e9a6950146103b4578063207239c0146103d3575f80fd5b8062fa3d501461028157806301e1d114146102a057806304ddc9d1146102c7578063052028d0146102f357806306fdde0314610312575f80fd5b3661027d5761027b3334610835565b005b5f80fd5b34801561028c575f80fd5b5061027b61029b3660046122eb565b61094a565b3480156102ab575f80fd5b506102b46109e6565b6040519081526020015b60405180910390f35b3480156102d2575f80fd5b506102e66102e13660046122eb565b6109f4565b6040516102be9190612316565b3480156102fe575f80fd5b5061027b61030d366004612350565b610b12565b34801561031d575f80fd5b50610326610b73565b6040516102be919061236b565b34801561033e575f80fd5b506102b461034d3660046122eb565b610c03565b34801561035d575f80fd5b5061037161036c3660046123a0565b610c38565b60405190151581526020016102be565b34801561038c575f80fd5b506102b461039b3660046122eb565b610c51565b3480156103ab575f80fd5b506006546102b4565b3480156103bf575f80fd5b5061027b6103ce3660046123a0565b610c7a565b3480156103de575f80fd5b506102b461271081565b3480156103f3575f80fd5b506102b4610d19565b348015610407575f80fd5b506103716104163660046123ca565b610d22565b348015610426575f80fd5b505f54610439906001600160a01b031681565b6040516001600160a01b0390911681526020016102be565b34801561045c575f80fd5b50604051601281526020016102be565b348015610477575f80fd5b5061027b610d45565b34801561048b575f80fd5b5061027b61049a3660046122eb565b610d51565b61027b610d67565b3480156104b2575f80fd5b506103266040518060400160405280601081526020016f283ab13634b1a232b632b3b0ba34b7b760811b81525081565b61027b6104f0366004612350565b610d71565b348015610500575f80fd5b506102b461050f3660046122eb565b610da6565b34801561051f575f80fd5b506102b460015481565b348015610534575f80fd5b50610548610543366004612350565b610db0565b6040516102be9190612408565b348015610560575f80fd5b506102b461056f366004612350565b6001600160a01b03165f9081526004602052604090205490565b348015610594575f80fd5b5061027b610e19565b3480156105a8575f80fd5b506009546001600160a01b0316610439565b3480156105c5575f80fd5b506105486105d436600461244b565b610e2a565b3480156105e4575f80fd5b50610326610f38565b3480156105f8575f80fd5b506102b46106073660046123a0565b610f47565b348015610617575f80fd5b506103716106263660046123a0565b610f72565b348015610636575f80fd5b506102b4610645366004612350565b6001600160a01b03165f9081526002602052604090205490565b34801561066a575f80fd5b506102b46106793660046122eb565b610f7f565b348015610689575f80fd5b5061027b6106983660046122eb565b610fa7565b3480156106a8575f80fd5b506102b46106b7366004612350565b610fba565b3480156106c7575f80fd5b506102b46106d6366004612350565b610fdb565b3480156106e6575f80fd5b506102b46106f5366004612485565b6001600160a01b039182165f90815260056020908152604080832093909416825291909152205490565b34801561072a575f80fd5b5061027b6107393660046123a0565b610ff8565b348015610749575f80fd5b506104397f000000000000000000000000000000000000000000000000000000000000000081565b34801561077c575f80fd5b5061027b61078b3660046123a0565b6110cb565b34801561079b575f80fd5b506102b46107aa3660046122eb565b611199565b3480156107ba575f80fd5b506104396107c93660046122eb565b60036020525f90815260409020546001600160a01b031681565b3480156107ee575f80fd5b5061027b6107fd366004612350565b6111a3565b34801561080d575f80fd5b5061027b61081c3660046123a0565b6111dd565b34801561082c575f80fd5b506102b4600181565b478190035f61084382611272565b905080156108545761085481611286565b6001600160a01b0384161561092d575f818361086e6112df565b010390505f6108868561088060065490565b846113e6565b90505f81116108dc5760405162461bcd60e51b815260206004820152601860248201527f5374616b6520616d6f756e7420697320746f6f206c6f772e000000000000000060448201526064015b60405180910390fd5b6108e68682611408565b60408051868152602081018390526001600160a01b038816917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a250505b818301818103908214610943576109438161143c565b5050505050565b6109526114af565b6127108111156109a45760405162461bcd60e51b815260206004820152601c60248201527f436f6d6d697373696f6e207261746520697320746f6f20686967682e0000000060448201526064016108d3565b6109ae5f80610835565b6001805490829055604051829082907f67fb2216d844c3553cf557bffa85f0fde0294999f808e61dcae1773d50d5e150905f90a35050565b5f6109ef6114dc565b905090565b5f805f610a00846114f3565b935093505050815f03610a1657505f9392505050565b6002816002811115610a2a57610a2a612302565b03610a39575060059392505050565b6001816002811115610a4d57610a4d612302565b03610a5c575060039392505050565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166396106ae46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610add91906124b1565b8301905082421015610af457506001949350505050565b80421015610b0757506002949350505050565b506004949350505050565b610b1a6114af565b610b245f80610835565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917fa466bc069316af563b6a90c9b6f29a97752ac7be7c6bbf3767bc9b16c2fd90eb9190a35050565b606060078054610b82906124c8565b80601f0160208091040260200160405190810160405280929190818152602001828054610bae906124c8565b8015610bf95780601f10610bd057610100808354040283529160200191610bf9565b820191905f5260205f20905b815481529060010190602001808311610bdc57829003601f168201915b5050505050905090565b5f80610c0e60065490565b90508015610c2f57610c2a610c216109e6565b8490835f611593565b610c31565b825b9392505050565b5f33610c458185856115e2565b60019150505b92915050565b5f80610c5c60065490565b90508015610c2f57610c2a81610c706109e6565b8591906001611593565b816001600160a01b038116610ca15760405162461bcd60e51b81526004016108d390612500565b610cab5f80610835565b5f610cb583610da6565b9050610cc133846115ef565b610ccc338583611623565b60408051828152602081018590526001600160a01b0386169133917f5cdf07ad0fc222442720b108e3ed4c4640f0fadc2ab2253e66f259a0fea8348091015b60405180910390a350505050565b5f6109ef61178d565b5f33610d2f8582856117a2565b610d3a85858561181d565b506001949350505050565b610d4f5f80610835565b565b610d5b5f80610835565b610d648161187a565b50565b610d4f3334610835565b806001600160a01b038116610d985760405162461bcd60e51b81526004016108d390612500565b610da28234610835565b5050565b5f610c4b82610c03565b6001600160a01b0381165f90815260026020908152604091829020805483518184028101840190945280845260609392830182828015610e0d57602002820191905f5260205f20905b815481526020019060010190808311610df9575b50505050509050919050565b610e216114af565b610d4f5f6119f1565b6001600160a01b0382165f908152600260205260409020546060908067ffffffffffffffff811115610e5e57610e5e61252a565b604051908082528060200260200182016040528015610e87578160200160208202803683370190505b5091505f805b82811015610f2e576001600160a01b0386165f908152600260205260408120805483908110610ebe57610ebe61253e565b905f5260205f2001549050856005811115610edb57610edb612302565b610ee4826109f4565b6005811115610ef557610ef5612302565b03610f2557808584610f0681612566565b955081518110610f1857610f1861253e565b6020026020010181815250505b50600101610e8d565b5082525092915050565b606060088054610b82906124c8565b6002602052815f5260405f208181548110610f60575f80fd5b905f5260205f20015f91509150505481565b5f33610c4581858561181d565b5f80610f8a60065490565b90508015610c2f57610c2a81610f9e6109e6565b8591905f611593565b610fb15f80610835565b610d6481611a42565b6001600160a01b0381165f90815260046020526040812054610c4b90610da6565b6001600160a01b0381165f90815260046020526040812054610c4b565b611000611b72565b6110455760405162461bcd60e51b81526020600482015260166024820152752932b232b632b3b0ba34b7b7103234b9b0b13632b21760511b60448201526064016108d3565b6110596001600160a01b0383166003611bf3565b61109c5760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21021b729ba30b5b4b733ab199760611b60448201526064016108d3565b6110a65f80610835565b5f6110b082610da6565b90506110bc33836115ef565b6110c68382611e01565b505050565b6110d3611b72565b6111185760405162461bcd60e51b81526020600482015260166024820152752932b232b632b3b0ba34b7b7103234b9b0b13632b21760511b60448201526064016108d3565b61112c6001600160a01b0383166003611bf3565b61116f5760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21021b729ba30b5b4b733ab199760611b60448201526064016108d3565b6111795f80610835565b5f61118382610c51565b905061118f33826115ef565b6110c68383611e01565b5f610c4b82610f7f565b6111ab6114af565b6001600160a01b0381166111d457604051631e4fbdf760e01b81525f60048201526024016108d3565b610d64816119f1565b816001600160a01b0381166112045760405162461bcd60e51b81526004016108d390612500565b61120e5f80610835565b5f61121883610c51565b905061122433826115ef565b61122f338585611623565b60408051848152602081018390526001600160a01b0386169133917f5cdf07ad0fc222442720b108e3ed4c4640f0fadc2ab2253e66f259a0fea834809101610d0b565b6001545f90610c4b90839061271084611593565b5f5461129b906001600160a01b031682611f17565b5f546040518281526001600160a01b03909116907f6c3b15f4a619d5331e4708792bb87f858ffb7a08f1a87aabca7cd15e51e04a639060200160405180910390a250565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663630b11466040518163ffffffff1660e01b8152600401602060405180830381865afa15801561133c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061136091906124b1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634cf088d96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113bc573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113e091906124b1565b03905090565b5f82156113fe576113f98484845f611593565b611400565b835b949350505050565b6001600160a01b0382166114315760405163ec442f0560e01b81525f60048201526024016108d3565b610da25f8383611faa565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c89e4361826040518263ffffffff1660e01b81526004015f604051808303818588803b158015611495575f80fd5b505af11580156114a7573d5f803e3d5ffd5b505050505050565b6009546001600160a01b03163314610d4f5760405163118cdaa760e01b81523360048201526024016108d3565b5f6114e561178d565b6114ed6112df565b01905090565b5f805f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663725c0503866040518263ffffffff1660e01b815260040161154591815260200190565b608060405180830381865afa158015611560573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611584919061257e565b93509350935093509193509193565b5f806115a0868686612016565b90506115ab836120d5565b80156115c657505f84806115c1576115c16125ca565b868809115b156115d9576115d66001826125de565b90505b95945050505050565b6110c68383836001612101565b6001600160a01b03821661161857604051634b637e8f60e11b81525f60048201526024016108d3565b610da2825f83611faa565b5f81116116725760405162461bcd60e51b815260206004820152601d60248201527f5769746864726177616c20616d6f756e7420697320746f6f206c6f772e00000060448201526064016108d3565b604051632efc584d60e11b81526001600160a01b038381166004830152602482018390525f917f000000000000000000000000000000000000000000000000000000000000000090911690635df8b09a906044016020604051808303815f875af11580156116e2573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061170691906124b1565b6001600160a01b038581165f818152600260209081526040808320805460018101825590845282842001869055858352600382529182902080546001600160a01b0319168417905590518681529394508493928716927fd71e6ec4eed83207b08d7ee4a0773c0ff8f8a1ab94b8ce85737fc0c5ea2b5f0c910160405180910390a450505050565b5f478161179982611272565b90910392915050565b6001600160a01b038381165f908152600560209081526040808320938616835292905220545f198114611817578181101561180957604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016108d3565b61181784848484035f612101565b50505050565b6001600160a01b03831661184657604051634b637e8f60e11b81525f60048201526024016108d3565b6001600160a01b03821661186f5760405163ec442f0560e01b81525f60048201526024016108d3565b6110c6838383611faa565b5f818152600360205260409020546001600160a01b031633146118df5760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420746865206f776e6572206f662074686520726571756573742e00000060448201526064016108d3565b604051636e93df0d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e93df0d906024015f604051808303815f87803b15801561193e575f80fd5b505af1158015611950573d5f803e3d5ffd5b505050505f8061195f836114f3565b93505092505060028081111561197757611977612302565b81600281111561198957611989612302565b036119c0575f6119b48361199c60065490565b856119a56114dc565b6119af91906125f1565b6113e6565b90506118173382611408565b604051839033907fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a905f90a3505050565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f818152600360205260409020546001600160a01b03163314611aa75760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420746865206f776e6572206f662074686520726571756573742e00000060448201526064016108d3565b5f611ab1826114f3565b50509150505f611ac082611199565b9050611acc3382611408565b60405163c804b11560e01b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c804b115906024015f604051808303815f87803b158015611b2b575f80fd5b505af1158015611b3d573d5f803e3d5ffd5b50506040518592503391507f853eba293fc3859716cf2e1a34b0c266f8265db181ec04748d0f25b8a19fc80e905f90a3505050565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637a66c96b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bcf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109ef9190612604565b5f826001600160a01b03163b5f03611c0c57505f610c4b565b5f839050806001600160a01b0316634b6a94cc6040518163ffffffff1660e01b81526004015f60405180830381865afa158015611c4b573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611c729190810190612623565b805190602001207fa2f5d64a9f0bcdeed97e196203f5a8c1a5c8293988b625b7925686d30805508214611ca8575f915050610c4b565b82816001600160a01b031663ffa1ad746040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ce5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d0991906124b1565b14611d17575f915050610c4b565b5f816001600160a01b031663139d7fed6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d54573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d7891906126ce565b604051630aabaead60e11b81526001600160a01b03821660048201529091505f90610400906315575d5a90602401606060405180830381865afa158015611dc1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611de591906126e9565b506001600160a01b039081169088161494505050505092915050565b5f8111611e505760405162461bcd60e51b815260206004820152601d60248201527f526564656c656761746520616d6f756e7420697320746f6f206c6f772e00000060448201526064016108d3565b604051631af63e0160e21b81523360048201526001600160a01b038381166024830152604482018390527f00000000000000000000000000000000000000000000000000000000000000001690636bd8f804906064015f604051808303815f87803b158015611ebd575f80fd5b505af1158015611ecf573d5f803e3d5ffd5b50506040518381526001600160a01b03851692503391507f78d93753d5a8009153a294711a82a3d1ba802938d66537c1b9142a053782d6939060200160405180910390a35050565b80471015611f3a5760405163cd78605960e01b81523060048201526024016108d3565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114611f83576040519150601f19603f3d011682016040523d82523d5f602084013e611f88565b606091505b50509050806110c657604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b0383161580611fc757506001600160a01b038216155b61200b5760405162461bcd60e51b81526020600482015260156024820152742a3930b739b332b9103737ba1030b63637bbb2b21760591b60448201526064016108d3565b6110c68383836121c5565b5f838302815f1985870982811083820303915050805f0361204a57838281612040576120406125ca565b0492505050610c31565b80841161206a5760405163227bc15360e01b815260040160405180910390fd5b5f848688095f868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b5f60028260038111156120ea576120ea612302565b6120f49190612733565b60ff166001149050919050565b6001600160a01b03841661212a5760405163e602df0560e01b81525f60048201526024016108d3565b6001600160a01b03831661215357604051634a1406b160e11b81525f60048201526024016108d3565b6001600160a01b038085165f908152600560209081526040808320938716835292905220829055801561181757826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610d0b91815260200190565b6001600160a01b0383166121ef578060065f8282546121e491906125de565b9091555061225f9050565b6001600160a01b0383165f90815260046020526040902054818110156122415760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016108d3565b6001600160a01b0384165f9081526004602052604090209082900390555b6001600160a01b03821661227b57600680548290039055612299565b6001600160a01b0382165f9081526004602052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516122de91815260200190565b60405180910390a3505050565b5f602082840312156122fb575f80fd5b5035919050565b634e487b7160e01b5f52602160045260245ffd5b602081016006831061233657634e487b7160e01b5f52602160045260245ffd5b91905290565b6001600160a01b0381168114610d64575f80fd5b5f60208284031215612360575f80fd5b8135610c318161233c565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f80604083850312156123b1575f80fd5b82356123bc8161233c565b946020939093013593505050565b5f805f606084860312156123dc575f80fd5b83356123e78161233c565b925060208401356123f78161233c565b929592945050506040919091013590565b602080825282518282018190525f9190848201906040850190845b8181101561243f57835183529284019291840191600101612423565b50909695505050505050565b5f806040838503121561245c575f80fd5b82356124678161233c565b915060208301356006811061247a575f80fd5b809150509250929050565b5f8060408385031215612496575f80fd5b82356124a18161233c565b9150602083013561247a8161233c565b5f602082840312156124c1575f80fd5b5051919050565b600181811c908216806124dc57607f821691505b6020821081036124fa57634e487b7160e01b5f52602260045260245ffd5b50919050565b60208082526010908201526f20b2323932b9b99034b990373ab6361760811b604082015260600190565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f6001820161257757612577612552565b5060010190565b5f805f8060808587031215612591575f80fd5b845161259c8161233c565b8094505060208501519250604085015191506060850151600381106125bf575f80fd5b939692955090935050565b634e487b7160e01b5f52601260045260245ffd5b80820180821115610c4b57610c4b612552565b81810381811115610c4b57610c4b612552565b5f60208284031215612614575f80fd5b81518015158114610c31575f80fd5b5f60208284031215612633575f80fd5b815167ffffffffffffffff8082111561264a575f80fd5b818401915084601f83011261265d575f80fd5b81518181111561266f5761266f61252a565b604051601f8201601f19908116603f011681019083821181831017156126975761269761252a565b816040528281528760208487010111156126af575f80fd5b8260208601602083015e5f928101602001929092525095945050505050565b5f602082840312156126de575f80fd5b8151610c318161233c565b5f805f606084860312156126fb575f80fd5b83516127068161233c565b60208501519093506127178161233c565b60408501519092506127288161233c565b809150509250925092565b5f60ff83168061275157634e487b7160e01b5f52601260045260245ffd5b8060ff8416069150509291505056fea2646970667358221220fc04e3c74fec64bb320728f9054b246b1396c6a458c033b73ace2cb1de1f11bd64736f6c63430008190033",
}

// PublicDelegationABI is the input ABI used to generate the binding from.
// Deprecated: Use PublicDelegationMetaData.ABI instead.
var PublicDelegationABI = PublicDelegationMetaData.ABI

// PublicDelegationBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const PublicDelegationBinRuntime = `60806040526004361061026c575f3560e01c80635ea1d6f81161014a578063c804b115116100be578063e659d7d711610078578063e659d7d714610771578063ef8b30f714610790578063f29177c3146107af578063f2fde38b146107e3578063f3fef3a314610802578063ffa1ad7414610821575f80fd5b8063c804b1151461067e578063ce96cb771461069d578063d905777e146106bc578063dd62ed3e146106db578063e15fc3501461071f578063e2c8bde51461073e575f80fd5b806393b89a841161010f57806393b89a84146105ba57806395d89b41146105d957806397feb23c146105ed578063a9059cbb1461060c578063c166c4581461062b578063c6e6f5921461065f575f80fd5b80635ea1d6f81461051457806360df7c6c1461052957806370a0823114610555578063715018a6146105895780638da5cb5b1461059d575f80fd5b8063228cb733116101e1578063379607f5116101a6578063379607f5146104805780633a4b66f11461049f5780633b1dbfcc146103d35780634b6a94cc146104a75780634bf69206146104e25780634cdad506146104f5575f80fd5b8063228cb733146103e857806323b872dd146103fc5780632f9ac83a1461041b578063313ce5671461045157806335faa4161461046c575f80fd5b806307a2d13a1161023257806307a2d13a14610333578063095ea7b3146103525780630a28a4771461038157806318160ddd146103a05780631e9a6950146103b4578063207239c0146103d3575f80fd5b8062fa3d501461028157806301e1d114146102a057806304ddc9d1146102c7578063052028d0146102f357806306fdde0314610312575f80fd5b3661027d5761027b3334610835565b005b5f80fd5b34801561028c575f80fd5b5061027b61029b3660046122eb565b61094a565b3480156102ab575f80fd5b506102b46109e6565b6040519081526020015b60405180910390f35b3480156102d2575f80fd5b506102e66102e13660046122eb565b6109f4565b6040516102be9190612316565b3480156102fe575f80fd5b5061027b61030d366004612350565b610b12565b34801561031d575f80fd5b50610326610b73565b6040516102be919061236b565b34801561033e575f80fd5b506102b461034d3660046122eb565b610c03565b34801561035d575f80fd5b5061037161036c3660046123a0565b610c38565b60405190151581526020016102be565b34801561038c575f80fd5b506102b461039b3660046122eb565b610c51565b3480156103ab575f80fd5b506006546102b4565b3480156103bf575f80fd5b5061027b6103ce3660046123a0565b610c7a565b3480156103de575f80fd5b506102b461271081565b3480156103f3575f80fd5b506102b4610d19565b348015610407575f80fd5b506103716104163660046123ca565b610d22565b348015610426575f80fd5b505f54610439906001600160a01b031681565b6040516001600160a01b0390911681526020016102be565b34801561045c575f80fd5b50604051601281526020016102be565b348015610477575f80fd5b5061027b610d45565b34801561048b575f80fd5b5061027b61049a3660046122eb565b610d51565b61027b610d67565b3480156104b2575f80fd5b506103266040518060400160405280601081526020016f283ab13634b1a232b632b3b0ba34b7b760811b81525081565b61027b6104f0366004612350565b610d71565b348015610500575f80fd5b506102b461050f3660046122eb565b610da6565b34801561051f575f80fd5b506102b460015481565b348015610534575f80fd5b50610548610543366004612350565b610db0565b6040516102be9190612408565b348015610560575f80fd5b506102b461056f366004612350565b6001600160a01b03165f9081526004602052604090205490565b348015610594575f80fd5b5061027b610e19565b3480156105a8575f80fd5b506009546001600160a01b0316610439565b3480156105c5575f80fd5b506105486105d436600461244b565b610e2a565b3480156105e4575f80fd5b50610326610f38565b3480156105f8575f80fd5b506102b46106073660046123a0565b610f47565b348015610617575f80fd5b506103716106263660046123a0565b610f72565b348015610636575f80fd5b506102b4610645366004612350565b6001600160a01b03165f9081526002602052604090205490565b34801561066a575f80fd5b506102b46106793660046122eb565b610f7f565b348015610689575f80fd5b5061027b6106983660046122eb565b610fa7565b3480156106a8575f80fd5b506102b46106b7366004612350565b610fba565b3480156106c7575f80fd5b506102b46106d6366004612350565b610fdb565b3480156106e6575f80fd5b506102b46106f5366004612485565b6001600160a01b039182165f90815260056020908152604080832093909416825291909152205490565b34801561072a575f80fd5b5061027b6107393660046123a0565b610ff8565b348015610749575f80fd5b506104397f000000000000000000000000000000000000000000000000000000000000000081565b34801561077c575f80fd5b5061027b61078b3660046123a0565b6110cb565b34801561079b575f80fd5b506102b46107aa3660046122eb565b611199565b3480156107ba575f80fd5b506104396107c93660046122eb565b60036020525f90815260409020546001600160a01b031681565b3480156107ee575f80fd5b5061027b6107fd366004612350565b6111a3565b34801561080d575f80fd5b5061027b61081c3660046123a0565b6111dd565b34801561082c575f80fd5b506102b4600181565b478190035f61084382611272565b905080156108545761085481611286565b6001600160a01b0384161561092d575f818361086e6112df565b010390505f6108868561088060065490565b846113e6565b90505f81116108dc5760405162461bcd60e51b815260206004820152601860248201527f5374616b6520616d6f756e7420697320746f6f206c6f772e000000000000000060448201526064015b60405180910390fd5b6108e68682611408565b60408051868152602081018390526001600160a01b038816917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a250505b818301818103908214610943576109438161143c565b5050505050565b6109526114af565b6127108111156109a45760405162461bcd60e51b815260206004820152601c60248201527f436f6d6d697373696f6e207261746520697320746f6f20686967682e0000000060448201526064016108d3565b6109ae5f80610835565b6001805490829055604051829082907f67fb2216d844c3553cf557bffa85f0fde0294999f808e61dcae1773d50d5e150905f90a35050565b5f6109ef6114dc565b905090565b5f805f610a00846114f3565b935093505050815f03610a1657505f9392505050565b6002816002811115610a2a57610a2a612302565b03610a39575060059392505050565b6001816002811115610a4d57610a4d612302565b03610a5c575060039392505050565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166396106ae46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610add91906124b1565b8301905082421015610af457506001949350505050565b80421015610b0757506002949350505050565b506004949350505050565b610b1a6114af565b610b245f80610835565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917fa466bc069316af563b6a90c9b6f29a97752ac7be7c6bbf3767bc9b16c2fd90eb9190a35050565b606060078054610b82906124c8565b80601f0160208091040260200160405190810160405280929190818152602001828054610bae906124c8565b8015610bf95780601f10610bd057610100808354040283529160200191610bf9565b820191905f5260205f20905b815481529060010190602001808311610bdc57829003601f168201915b5050505050905090565b5f80610c0e60065490565b90508015610c2f57610c2a610c216109e6565b8490835f611593565b610c31565b825b9392505050565b5f33610c458185856115e2565b60019150505b92915050565b5f80610c5c60065490565b90508015610c2f57610c2a81610c706109e6565b8591906001611593565b816001600160a01b038116610ca15760405162461bcd60e51b81526004016108d390612500565b610cab5f80610835565b5f610cb583610da6565b9050610cc133846115ef565b610ccc338583611623565b60408051828152602081018590526001600160a01b0386169133917f5cdf07ad0fc222442720b108e3ed4c4640f0fadc2ab2253e66f259a0fea8348091015b60405180910390a350505050565b5f6109ef61178d565b5f33610d2f8582856117a2565b610d3a85858561181d565b506001949350505050565b610d4f5f80610835565b565b610d5b5f80610835565b610d648161187a565b50565b610d4f3334610835565b806001600160a01b038116610d985760405162461bcd60e51b81526004016108d390612500565b610da28234610835565b5050565b5f610c4b82610c03565b6001600160a01b0381165f90815260026020908152604091829020805483518184028101840190945280845260609392830182828015610e0d57602002820191905f5260205f20905b815481526020019060010190808311610df9575b50505050509050919050565b610e216114af565b610d4f5f6119f1565b6001600160a01b0382165f908152600260205260409020546060908067ffffffffffffffff811115610e5e57610e5e61252a565b604051908082528060200260200182016040528015610e87578160200160208202803683370190505b5091505f805b82811015610f2e576001600160a01b0386165f908152600260205260408120805483908110610ebe57610ebe61253e565b905f5260205f2001549050856005811115610edb57610edb612302565b610ee4826109f4565b6005811115610ef557610ef5612302565b03610f2557808584610f0681612566565b955081518110610f1857610f1861253e565b6020026020010181815250505b50600101610e8d565b5082525092915050565b606060088054610b82906124c8565b6002602052815f5260405f208181548110610f60575f80fd5b905f5260205f20015f91509150505481565b5f33610c4581858561181d565b5f80610f8a60065490565b90508015610c2f57610c2a81610f9e6109e6565b8591905f611593565b610fb15f80610835565b610d6481611a42565b6001600160a01b0381165f90815260046020526040812054610c4b90610da6565b6001600160a01b0381165f90815260046020526040812054610c4b565b611000611b72565b6110455760405162461bcd60e51b81526020600482015260166024820152752932b232b632b3b0ba34b7b7103234b9b0b13632b21760511b60448201526064016108d3565b6110596001600160a01b0383166003611bf3565b61109c5760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21021b729ba30b5b4b733ab199760611b60448201526064016108d3565b6110a65f80610835565b5f6110b082610da6565b90506110bc33836115ef565b6110c68382611e01565b505050565b6110d3611b72565b6111185760405162461bcd60e51b81526020600482015260166024820152752932b232b632b3b0ba34b7b7103234b9b0b13632b21760511b60448201526064016108d3565b61112c6001600160a01b0383166003611bf3565b61116f5760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21021b729ba30b5b4b733ab199760611b60448201526064016108d3565b6111795f80610835565b5f61118382610c51565b905061118f33826115ef565b6110c68383611e01565b5f610c4b82610f7f565b6111ab6114af565b6001600160a01b0381166111d457604051631e4fbdf760e01b81525f60048201526024016108d3565b610d64816119f1565b816001600160a01b0381166112045760405162461bcd60e51b81526004016108d390612500565b61120e5f80610835565b5f61121883610c51565b905061122433826115ef565b61122f338585611623565b60408051848152602081018390526001600160a01b0386169133917f5cdf07ad0fc222442720b108e3ed4c4640f0fadc2ab2253e66f259a0fea834809101610d0b565b6001545f90610c4b90839061271084611593565b5f5461129b906001600160a01b031682611f17565b5f546040518281526001600160a01b03909116907f6c3b15f4a619d5331e4708792bb87f858ffb7a08f1a87aabca7cd15e51e04a639060200160405180910390a250565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663630b11466040518163ffffffff1660e01b8152600401602060405180830381865afa15801561133c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061136091906124b1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634cf088d96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113bc573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113e091906124b1565b03905090565b5f82156113fe576113f98484845f611593565b611400565b835b949350505050565b6001600160a01b0382166114315760405163ec442f0560e01b81525f60048201526024016108d3565b610da25f8383611faa565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c89e4361826040518263ffffffff1660e01b81526004015f604051808303818588803b158015611495575f80fd5b505af11580156114a7573d5f803e3d5ffd5b505050505050565b6009546001600160a01b03163314610d4f5760405163118cdaa760e01b81523360048201526024016108d3565b5f6114e561178d565b6114ed6112df565b01905090565b5f805f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663725c0503866040518263ffffffff1660e01b815260040161154591815260200190565b608060405180830381865afa158015611560573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611584919061257e565b93509350935093509193509193565b5f806115a0868686612016565b90506115ab836120d5565b80156115c657505f84806115c1576115c16125ca565b868809115b156115d9576115d66001826125de565b90505b95945050505050565b6110c68383836001612101565b6001600160a01b03821661161857604051634b637e8f60e11b81525f60048201526024016108d3565b610da2825f83611faa565b5f81116116725760405162461bcd60e51b815260206004820152601d60248201527f5769746864726177616c20616d6f756e7420697320746f6f206c6f772e00000060448201526064016108d3565b604051632efc584d60e11b81526001600160a01b038381166004830152602482018390525f917f000000000000000000000000000000000000000000000000000000000000000090911690635df8b09a906044016020604051808303815f875af11580156116e2573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061170691906124b1565b6001600160a01b038581165f818152600260209081526040808320805460018101825590845282842001869055858352600382529182902080546001600160a01b0319168417905590518681529394508493928716927fd71e6ec4eed83207b08d7ee4a0773c0ff8f8a1ab94b8ce85737fc0c5ea2b5f0c910160405180910390a450505050565b5f478161179982611272565b90910392915050565b6001600160a01b038381165f908152600560209081526040808320938616835292905220545f198114611817578181101561180957604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016108d3565b61181784848484035f612101565b50505050565b6001600160a01b03831661184657604051634b637e8f60e11b81525f60048201526024016108d3565b6001600160a01b03821661186f5760405163ec442f0560e01b81525f60048201526024016108d3565b6110c6838383611faa565b5f818152600360205260409020546001600160a01b031633146118df5760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420746865206f776e6572206f662074686520726571756573742e00000060448201526064016108d3565b604051636e93df0d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e93df0d906024015f604051808303815f87803b15801561193e575f80fd5b505af1158015611950573d5f803e3d5ffd5b505050505f8061195f836114f3565b93505092505060028081111561197757611977612302565b81600281111561198957611989612302565b036119c0575f6119b48361199c60065490565b856119a56114dc565b6119af91906125f1565b6113e6565b90506118173382611408565b604051839033907fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a905f90a3505050565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f818152600360205260409020546001600160a01b03163314611aa75760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420746865206f776e6572206f662074686520726571756573742e00000060448201526064016108d3565b5f611ab1826114f3565b50509150505f611ac082611199565b9050611acc3382611408565b60405163c804b11560e01b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c804b115906024015f604051808303815f87803b158015611b2b575f80fd5b505af1158015611b3d573d5f803e3d5ffd5b50506040518592503391507f853eba293fc3859716cf2e1a34b0c266f8265db181ec04748d0f25b8a19fc80e905f90a3505050565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637a66c96b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bcf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109ef9190612604565b5f826001600160a01b03163b5f03611c0c57505f610c4b565b5f839050806001600160a01b0316634b6a94cc6040518163ffffffff1660e01b81526004015f60405180830381865afa158015611c4b573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611c729190810190612623565b805190602001207fa2f5d64a9f0bcdeed97e196203f5a8c1a5c8293988b625b7925686d30805508214611ca8575f915050610c4b565b82816001600160a01b031663ffa1ad746040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ce5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d0991906124b1565b14611d17575f915050610c4b565b5f816001600160a01b031663139d7fed6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d54573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d7891906126ce565b604051630aabaead60e11b81526001600160a01b03821660048201529091505f90610400906315575d5a90602401606060405180830381865afa158015611dc1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611de591906126e9565b506001600160a01b039081169088161494505050505092915050565b5f8111611e505760405162461bcd60e51b815260206004820152601d60248201527f526564656c656761746520616d6f756e7420697320746f6f206c6f772e00000060448201526064016108d3565b604051631af63e0160e21b81523360048201526001600160a01b038381166024830152604482018390527f00000000000000000000000000000000000000000000000000000000000000001690636bd8f804906064015f604051808303815f87803b158015611ebd575f80fd5b505af1158015611ecf573d5f803e3d5ffd5b50506040518381526001600160a01b03851692503391507f78d93753d5a8009153a294711a82a3d1ba802938d66537c1b9142a053782d6939060200160405180910390a35050565b80471015611f3a5760405163cd78605960e01b81523060048201526024016108d3565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114611f83576040519150601f19603f3d011682016040523d82523d5f602084013e611f88565b606091505b50509050806110c657604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b0383161580611fc757506001600160a01b038216155b61200b5760405162461bcd60e51b81526020600482015260156024820152742a3930b739b332b9103737ba1030b63637bbb2b21760591b60448201526064016108d3565b6110c68383836121c5565b5f838302815f1985870982811083820303915050805f0361204a57838281612040576120406125ca565b0492505050610c31565b80841161206a5760405163227bc15360e01b815260040160405180910390fd5b5f848688095f868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b5f60028260038111156120ea576120ea612302565b6120f49190612733565b60ff166001149050919050565b6001600160a01b03841661212a5760405163e602df0560e01b81525f60048201526024016108d3565b6001600160a01b03831661215357604051634a1406b160e11b81525f60048201526024016108d3565b6001600160a01b038085165f908152600560209081526040808320938716835292905220829055801561181757826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610d0b91815260200190565b6001600160a01b0383166121ef578060065f8282546121e491906125de565b9091555061225f9050565b6001600160a01b0383165f90815260046020526040902054818110156122415760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016108d3565b6001600160a01b0384165f9081526004602052604090209082900390555b6001600160a01b03821661227b57600680548290039055612299565b6001600160a01b0382165f9081526004602052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516122de91815260200190565b60405180910390a3505050565b5f602082840312156122fb575f80fd5b5035919050565b634e487b7160e01b5f52602160045260245ffd5b602081016006831061233657634e487b7160e01b5f52602160045260245ffd5b91905290565b6001600160a01b0381168114610d64575f80fd5b5f60208284031215612360575f80fd5b8135610c318161233c565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f80604083850312156123b1575f80fd5b82356123bc8161233c565b946020939093013593505050565b5f805f606084860312156123dc575f80fd5b83356123e78161233c565b925060208401356123f78161233c565b929592945050506040919091013590565b602080825282518282018190525f9190848201906040850190845b8181101561243f57835183529284019291840191600101612423565b50909695505050505050565b5f806040838503121561245c575f80fd5b82356124678161233c565b915060208301356006811061247a575f80fd5b809150509250929050565b5f8060408385031215612496575f80fd5b82356124a18161233c565b9150602083013561247a8161233c565b5f602082840312156124c1575f80fd5b5051919050565b600181811c908216806124dc57607f821691505b6020821081036124fa57634e487b7160e01b5f52602260045260245ffd5b50919050565b60208082526010908201526f20b2323932b9b99034b990373ab6361760811b604082015260600190565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f6001820161257757612577612552565b5060010190565b5f805f8060808587031215612591575f80fd5b845161259c8161233c565b8094505060208501519250604085015191506060850151600381106125bf575f80fd5b939692955090935050565b634e487b7160e01b5f52601260045260245ffd5b80820180821115610c4b57610c4b612552565b81810381811115610c4b57610c4b612552565b5f60208284031215612614575f80fd5b81518015158114610c31575f80fd5b5f60208284031215612633575f80fd5b815167ffffffffffffffff8082111561264a575f80fd5b818401915084601f83011261265d575f80fd5b81518181111561266f5761266f61252a565b604051601f8201601f19908116603f011681019083821181831017156126975761269761252a565b816040528281528760208487010111156126af575f80fd5b8260208601602083015e5f928101602001929092525095945050505050565b5f602082840312156126de575f80fd5b8151610c318161233c565b5f805f606084860312156126fb575f80fd5b83516127068161233c565b60208501519093506127178161233c565b60408501519092506127288161233c565b809150509250925092565b5f60ff83168061275157634e487b7160e01b5f52601260045260245ffd5b8060ff8416069150509291505056fea2646970667358221220fc04e3c74fec64bb320728f9054b246b1396c6a458c033b73ace2cb1de1f11bd64736f6c63430008190033`

// Deprecated: Use PublicDelegationMetaData.Sigs instead.
// PublicDelegationFuncSigs maps the 4-byte function signature to its string representation.
var PublicDelegationFuncSigs = PublicDelegationMetaData.Sigs

// PublicDelegationBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PublicDelegationMetaData.Bin instead.
var PublicDelegationBin = PublicDelegationMetaData.Bin

// DeployPublicDelegation deploys a new Kaia contract, binding an instance of PublicDelegation to it.
func DeployPublicDelegation(auth *bind.TransactOpts, backend bind.ContractBackend, _baseCnStakingV3 common.Address, _pdArgs IPublicDelegationPDConstructorArgs) (common.Address, *types.Transaction, *PublicDelegation, error) {
	parsed, err := PublicDelegationMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PublicDelegationBin), backend, _baseCnStakingV3, _pdArgs)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PublicDelegation{PublicDelegationCaller: PublicDelegationCaller{contract: contract}, PublicDelegationTransactor: PublicDelegationTransactor{contract: contract}, PublicDelegationFilterer: PublicDelegationFilterer{contract: contract}}, nil
}

// PublicDelegation is an auto generated Go binding around a Kaia contract.
type PublicDelegation struct {
	PublicDelegationCaller     // Read-only binding to the contract
	PublicDelegationTransactor // Write-only binding to the contract
	PublicDelegationFilterer   // Log filterer for contract events
}

// PublicDelegationCaller is an auto generated read-only Go binding around a Kaia contract.
type PublicDelegationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PublicDelegationTransactor is an auto generated write-only Go binding around a Kaia contract.
type PublicDelegationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PublicDelegationFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type PublicDelegationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PublicDelegationSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type PublicDelegationSession struct {
	Contract     *PublicDelegation // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PublicDelegationCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type PublicDelegationCallerSession struct {
	Contract *PublicDelegationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// PublicDelegationTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type PublicDelegationTransactorSession struct {
	Contract     *PublicDelegationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// PublicDelegationRaw is an auto generated low-level Go binding around a Kaia contract.
type PublicDelegationRaw struct {
	Contract *PublicDelegation // Generic contract binding to access the raw methods on
}

// PublicDelegationCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type PublicDelegationCallerRaw struct {
	Contract *PublicDelegationCaller // Generic read-only contract binding to access the raw methods on
}

// PublicDelegationTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type PublicDelegationTransactorRaw struct {
	Contract *PublicDelegationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPublicDelegation creates a new instance of PublicDelegation, bound to a specific deployed contract.
func NewPublicDelegation(address common.Address, backend bind.ContractBackend) (*PublicDelegation, error) {
	contract, err := bindPublicDelegation(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PublicDelegation{PublicDelegationCaller: PublicDelegationCaller{contract: contract}, PublicDelegationTransactor: PublicDelegationTransactor{contract: contract}, PublicDelegationFilterer: PublicDelegationFilterer{contract: contract}}, nil
}

// NewPublicDelegationCaller creates a new read-only instance of PublicDelegation, bound to a specific deployed contract.
func NewPublicDelegationCaller(address common.Address, caller bind.ContractCaller) (*PublicDelegationCaller, error) {
	contract, err := bindPublicDelegation(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationCaller{contract: contract}, nil
}

// NewPublicDelegationTransactor creates a new write-only instance of PublicDelegation, bound to a specific deployed contract.
func NewPublicDelegationTransactor(address common.Address, transactor bind.ContractTransactor) (*PublicDelegationTransactor, error) {
	contract, err := bindPublicDelegation(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationTransactor{contract: contract}, nil
}

// NewPublicDelegationFilterer creates a new log filterer instance of PublicDelegation, bound to a specific deployed contract.
func NewPublicDelegationFilterer(address common.Address, filterer bind.ContractFilterer) (*PublicDelegationFilterer, error) {
	contract, err := bindPublicDelegation(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationFilterer{contract: contract}, nil
}

// bindPublicDelegation binds a generic wrapper to an already deployed contract.
func bindPublicDelegation(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PublicDelegationMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PublicDelegation *PublicDelegationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PublicDelegation.Contract.PublicDelegationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PublicDelegation *PublicDelegationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PublicDelegation.Contract.PublicDelegationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PublicDelegation *PublicDelegationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PublicDelegation.Contract.PublicDelegationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PublicDelegation *PublicDelegationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PublicDelegation.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PublicDelegation *PublicDelegationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PublicDelegation.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PublicDelegation *PublicDelegationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PublicDelegation.Contract.contract.Transact(opts, method, params...)
}

// COMMISSIONDENOMINATOR is a free data retrieval call binding the contract method 0x3b1dbfcc.
//
// Solidity: function COMMISSION_DENOMINATOR() view returns(uint256)
func (_PublicDelegation *PublicDelegationCaller) COMMISSIONDENOMINATOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "COMMISSION_DENOMINATOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMISSIONDENOMINATOR is a free data retrieval call binding the contract method 0x3b1dbfcc.
//
// Solidity: function COMMISSION_DENOMINATOR() view returns(uint256)
func (_PublicDelegation *PublicDelegationSession) COMMISSIONDENOMINATOR() (*big.Int, error) {
	return _PublicDelegation.Contract.COMMISSIONDENOMINATOR(&_PublicDelegation.CallOpts)
}

// COMMISSIONDENOMINATOR is a free data retrieval call binding the contract method 0x3b1dbfcc.
//
// Solidity: function COMMISSION_DENOMINATOR() view returns(uint256)
func (_PublicDelegation *PublicDelegationCallerSession) COMMISSIONDENOMINATOR() (*big.Int, error) {
	return _PublicDelegation.Contract.COMMISSIONDENOMINATOR(&_PublicDelegation.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_PublicDelegation *PublicDelegationCaller) CONTRACTTYPE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "CONTRACT_TYPE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_PublicDelegation *PublicDelegationSession) CONTRACTTYPE() (string, error) {
	return _PublicDelegation.Contract.CONTRACTTYPE(&_PublicDelegation.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_PublicDelegation *PublicDelegationCallerSession) CONTRACTTYPE() (string, error) {
	return _PublicDelegation.Contract.CONTRACTTYPE(&_PublicDelegation.CallOpts)
}

// MAXCOMMISSIONRATE is a free data retrieval call binding the contract method 0x207239c0.
//
// Solidity: function MAX_COMMISSION_RATE() view returns(uint256)
func (_PublicDelegation *PublicDelegationCaller) MAXCOMMISSIONRATE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "MAX_COMMISSION_RATE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXCOMMISSIONRATE is a free data retrieval call binding the contract method 0x207239c0.
//
// Solidity: function MAX_COMMISSION_RATE() view returns(uint256)
func (_PublicDelegation *PublicDelegationSession) MAXCOMMISSIONRATE() (*big.Int, error) {
	return _PublicDelegation.Contract.MAXCOMMISSIONRATE(&_PublicDelegation.CallOpts)
}

// MAXCOMMISSIONRATE is a free data retrieval call binding the contract method 0x207239c0.
//
// Solidity: function MAX_COMMISSION_RATE() view returns(uint256)
func (_PublicDelegation *PublicDelegationCallerSession) MAXCOMMISSIONRATE() (*big.Int, error) {
	return _PublicDelegation.Contract.MAXCOMMISSIONRATE(&_PublicDelegation.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_PublicDelegation *PublicDelegationCaller) VERSION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_PublicDelegation *PublicDelegationSession) VERSION() (*big.Int, error) {
	return _PublicDelegation.Contract.VERSION(&_PublicDelegation.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_PublicDelegation *PublicDelegationCallerSession) VERSION() (*big.Int, error) {
	return _PublicDelegation.Contract.VERSION(&_PublicDelegation.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_PublicDelegation *PublicDelegationCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_PublicDelegation *PublicDelegationSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _PublicDelegation.Contract.Allowance(&_PublicDelegation.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_PublicDelegation *PublicDelegationCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _PublicDelegation.Contract.Allowance(&_PublicDelegation.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_PublicDelegation *PublicDelegationCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_PublicDelegation *PublicDelegationSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _PublicDelegation.Contract.BalanceOf(&_PublicDelegation.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_PublicDelegation *PublicDelegationCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _PublicDelegation.Contract.BalanceOf(&_PublicDelegation.CallOpts, account)
}

// BaseCnStakingV3 is a free data retrieval call binding the contract method 0xe2c8bde5.
//
// Solidity: function baseCnStakingV3() view returns(address)
func (_PublicDelegation *PublicDelegationCaller) BaseCnStakingV3(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "baseCnStakingV3")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BaseCnStakingV3 is a free data retrieval call binding the contract method 0xe2c8bde5.
//
// Solidity: function baseCnStakingV3() view returns(address)
func (_PublicDelegation *PublicDelegationSession) BaseCnStakingV3() (common.Address, error) {
	return _PublicDelegation.Contract.BaseCnStakingV3(&_PublicDelegation.CallOpts)
}

// BaseCnStakingV3 is a free data retrieval call binding the contract method 0xe2c8bde5.
//
// Solidity: function baseCnStakingV3() view returns(address)
func (_PublicDelegation *PublicDelegationCallerSession) BaseCnStakingV3() (common.Address, error) {
	return _PublicDelegation.Contract.BaseCnStakingV3(&_PublicDelegation.CallOpts)
}

// CommissionRate is a free data retrieval call binding the contract method 0x5ea1d6f8.
//
// Solidity: function commissionRate() view returns(uint256)
func (_PublicDelegation *PublicDelegationCaller) CommissionRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "commissionRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CommissionRate is a free data retrieval call binding the contract method 0x5ea1d6f8.
//
// Solidity: function commissionRate() view returns(uint256)
func (_PublicDelegation *PublicDelegationSession) CommissionRate() (*big.Int, error) {
	return _PublicDelegation.Contract.CommissionRate(&_PublicDelegation.CallOpts)
}

// CommissionRate is a free data retrieval call binding the contract method 0x5ea1d6f8.
//
// Solidity: function commissionRate() view returns(uint256)
func (_PublicDelegation *PublicDelegationCallerSession) CommissionRate() (*big.Int, error) {
	return _PublicDelegation.Contract.CommissionRate(&_PublicDelegation.CallOpts)
}

// CommissionTo is a free data retrieval call binding the contract method 0x2f9ac83a.
//
// Solidity: function commissionTo() view returns(address)
func (_PublicDelegation *PublicDelegationCaller) CommissionTo(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "commissionTo")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CommissionTo is a free data retrieval call binding the contract method 0x2f9ac83a.
//
// Solidity: function commissionTo() view returns(address)
func (_PublicDelegation *PublicDelegationSession) CommissionTo() (common.Address, error) {
	return _PublicDelegation.Contract.CommissionTo(&_PublicDelegation.CallOpts)
}

// CommissionTo is a free data retrieval call binding the contract method 0x2f9ac83a.
//
// Solidity: function commissionTo() view returns(address)
func (_PublicDelegation *PublicDelegationCallerSession) CommissionTo() (common.Address, error) {
	return _PublicDelegation.Contract.CommissionTo(&_PublicDelegation.CallOpts)
}

// ConvertToAssets is a free data retrieval call binding the contract method 0x07a2d13a.
//
// Solidity: function convertToAssets(uint256 _shares) view returns(uint256)
func (_PublicDelegation *PublicDelegationCaller) ConvertToAssets(opts *bind.CallOpts, _shares *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "convertToAssets", _shares)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ConvertToAssets is a free data retrieval call binding the contract method 0x07a2d13a.
//
// Solidity: function convertToAssets(uint256 _shares) view returns(uint256)
func (_PublicDelegation *PublicDelegationSession) ConvertToAssets(_shares *big.Int) (*big.Int, error) {
	return _PublicDelegation.Contract.ConvertToAssets(&_PublicDelegation.CallOpts, _shares)
}

// ConvertToAssets is a free data retrieval call binding the contract method 0x07a2d13a.
//
// Solidity: function convertToAssets(uint256 _shares) view returns(uint256)
func (_PublicDelegation *PublicDelegationCallerSession) ConvertToAssets(_shares *big.Int) (*big.Int, error) {
	return _PublicDelegation.Contract.ConvertToAssets(&_PublicDelegation.CallOpts, _shares)
}

// ConvertToShares is a free data retrieval call binding the contract method 0xc6e6f592.
//
// Solidity: function convertToShares(uint256 _assets) view returns(uint256)
func (_PublicDelegation *PublicDelegationCaller) ConvertToShares(opts *bind.CallOpts, _assets *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "convertToShares", _assets)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ConvertToShares is a free data retrieval call binding the contract method 0xc6e6f592.
//
// Solidity: function convertToShares(uint256 _assets) view returns(uint256)
func (_PublicDelegation *PublicDelegationSession) ConvertToShares(_assets *big.Int) (*big.Int, error) {
	return _PublicDelegation.Contract.ConvertToShares(&_PublicDelegation.CallOpts, _assets)
}

// ConvertToShares is a free data retrieval call binding the contract method 0xc6e6f592.
//
// Solidity: function convertToShares(uint256 _assets) view returns(uint256)
func (_PublicDelegation *PublicDelegationCallerSession) ConvertToShares(_assets *big.Int) (*big.Int, error) {
	return _PublicDelegation.Contract.ConvertToShares(&_PublicDelegation.CallOpts, _assets)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_PublicDelegation *PublicDelegationCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_PublicDelegation *PublicDelegationSession) Decimals() (uint8, error) {
	return _PublicDelegation.Contract.Decimals(&_PublicDelegation.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_PublicDelegation *PublicDelegationCallerSession) Decimals() (uint8, error) {
	return _PublicDelegation.Contract.Decimals(&_PublicDelegation.CallOpts)
}

// GetCurrentWithdrawalRequestState is a free data retrieval call binding the contract method 0x04ddc9d1.
//
// Solidity: function getCurrentWithdrawalRequestState(uint256 _id) view returns(uint8)
func (_PublicDelegation *PublicDelegationCaller) GetCurrentWithdrawalRequestState(opts *bind.CallOpts, _id *big.Int) (uint8, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "getCurrentWithdrawalRequestState", _id)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetCurrentWithdrawalRequestState is a free data retrieval call binding the contract method 0x04ddc9d1.
//
// Solidity: function getCurrentWithdrawalRequestState(uint256 _id) view returns(uint8)
func (_PublicDelegation *PublicDelegationSession) GetCurrentWithdrawalRequestState(_id *big.Int) (uint8, error) {
	return _PublicDelegation.Contract.GetCurrentWithdrawalRequestState(&_PublicDelegation.CallOpts, _id)
}

// GetCurrentWithdrawalRequestState is a free data retrieval call binding the contract method 0x04ddc9d1.
//
// Solidity: function getCurrentWithdrawalRequestState(uint256 _id) view returns(uint8)
func (_PublicDelegation *PublicDelegationCallerSession) GetCurrentWithdrawalRequestState(_id *big.Int) (uint8, error) {
	return _PublicDelegation.Contract.GetCurrentWithdrawalRequestState(&_PublicDelegation.CallOpts, _id)
}

// GetUserRequestCount is a free data retrieval call binding the contract method 0xc166c458.
//
// Solidity: function getUserRequestCount(address _owner) view returns(uint256)
func (_PublicDelegation *PublicDelegationCaller) GetUserRequestCount(opts *bind.CallOpts, _owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "getUserRequestCount", _owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUserRequestCount is a free data retrieval call binding the contract method 0xc166c458.
//
// Solidity: function getUserRequestCount(address _owner) view returns(uint256)
func (_PublicDelegation *PublicDelegationSession) GetUserRequestCount(_owner common.Address) (*big.Int, error) {
	return _PublicDelegation.Contract.GetUserRequestCount(&_PublicDelegation.CallOpts, _owner)
}

// GetUserRequestCount is a free data retrieval call binding the contract method 0xc166c458.
//
// Solidity: function getUserRequestCount(address _owner) view returns(uint256)
func (_PublicDelegation *PublicDelegationCallerSession) GetUserRequestCount(_owner common.Address) (*big.Int, error) {
	return _PublicDelegation.Contract.GetUserRequestCount(&_PublicDelegation.CallOpts, _owner)
}

// GetUserRequestIds is a free data retrieval call binding the contract method 0x60df7c6c.
//
// Solidity: function getUserRequestIds(address _owner) view returns(uint256[])
func (_PublicDelegation *PublicDelegationCaller) GetUserRequestIds(opts *bind.CallOpts, _owner common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "getUserRequestIds", _owner)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetUserRequestIds is a free data retrieval call binding the contract method 0x60df7c6c.
//
// Solidity: function getUserRequestIds(address _owner) view returns(uint256[])
func (_PublicDelegation *PublicDelegationSession) GetUserRequestIds(_owner common.Address) ([]*big.Int, error) {
	return _PublicDelegation.Contract.GetUserRequestIds(&_PublicDelegation.CallOpts, _owner)
}

// GetUserRequestIds is a free data retrieval call binding the contract method 0x60df7c6c.
//
// Solidity: function getUserRequestIds(address _owner) view returns(uint256[])
func (_PublicDelegation *PublicDelegationCallerSession) GetUserRequestIds(_owner common.Address) ([]*big.Int, error) {
	return _PublicDelegation.Contract.GetUserRequestIds(&_PublicDelegation.CallOpts, _owner)
}

// GetUserRequestIdsWithState is a free data retrieval call binding the contract method 0x93b89a84.
//
// Solidity: function getUserRequestIdsWithState(address _owner, uint8 _state) view returns(uint256[] _requestIds)
func (_PublicDelegation *PublicDelegationCaller) GetUserRequestIdsWithState(opts *bind.CallOpts, _owner common.Address, _state uint8) ([]*big.Int, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "getUserRequestIdsWithState", _owner, _state)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetUserRequestIdsWithState is a free data retrieval call binding the contract method 0x93b89a84.
//
// Solidity: function getUserRequestIdsWithState(address _owner, uint8 _state) view returns(uint256[] _requestIds)
func (_PublicDelegation *PublicDelegationSession) GetUserRequestIdsWithState(_owner common.Address, _state uint8) ([]*big.Int, error) {
	return _PublicDelegation.Contract.GetUserRequestIdsWithState(&_PublicDelegation.CallOpts, _owner, _state)
}

// GetUserRequestIdsWithState is a free data retrieval call binding the contract method 0x93b89a84.
//
// Solidity: function getUserRequestIdsWithState(address _owner, uint8 _state) view returns(uint256[] _requestIds)
func (_PublicDelegation *PublicDelegationCallerSession) GetUserRequestIdsWithState(_owner common.Address, _state uint8) ([]*big.Int, error) {
	return _PublicDelegation.Contract.GetUserRequestIdsWithState(&_PublicDelegation.CallOpts, _owner, _state)
}

// MaxRedeem is a free data retrieval call binding the contract method 0xd905777e.
//
// Solidity: function maxRedeem(address _owner) view returns(uint256)
func (_PublicDelegation *PublicDelegationCaller) MaxRedeem(opts *bind.CallOpts, _owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "maxRedeem", _owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxRedeem is a free data retrieval call binding the contract method 0xd905777e.
//
// Solidity: function maxRedeem(address _owner) view returns(uint256)
func (_PublicDelegation *PublicDelegationSession) MaxRedeem(_owner common.Address) (*big.Int, error) {
	return _PublicDelegation.Contract.MaxRedeem(&_PublicDelegation.CallOpts, _owner)
}

// MaxRedeem is a free data retrieval call binding the contract method 0xd905777e.
//
// Solidity: function maxRedeem(address _owner) view returns(uint256)
func (_PublicDelegation *PublicDelegationCallerSession) MaxRedeem(_owner common.Address) (*big.Int, error) {
	return _PublicDelegation.Contract.MaxRedeem(&_PublicDelegation.CallOpts, _owner)
}

// MaxWithdraw is a free data retrieval call binding the contract method 0xce96cb77.
//
// Solidity: function maxWithdraw(address _owner) view returns(uint256)
func (_PublicDelegation *PublicDelegationCaller) MaxWithdraw(opts *bind.CallOpts, _owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "maxWithdraw", _owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxWithdraw is a free data retrieval call binding the contract method 0xce96cb77.
//
// Solidity: function maxWithdraw(address _owner) view returns(uint256)
func (_PublicDelegation *PublicDelegationSession) MaxWithdraw(_owner common.Address) (*big.Int, error) {
	return _PublicDelegation.Contract.MaxWithdraw(&_PublicDelegation.CallOpts, _owner)
}

// MaxWithdraw is a free data retrieval call binding the contract method 0xce96cb77.
//
// Solidity: function maxWithdraw(address _owner) view returns(uint256)
func (_PublicDelegation *PublicDelegationCallerSession) MaxWithdraw(_owner common.Address) (*big.Int, error) {
	return _PublicDelegation.Contract.MaxWithdraw(&_PublicDelegation.CallOpts, _owner)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_PublicDelegation *PublicDelegationCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_PublicDelegation *PublicDelegationSession) Name() (string, error) {
	return _PublicDelegation.Contract.Name(&_PublicDelegation.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_PublicDelegation *PublicDelegationCallerSession) Name() (string, error) {
	return _PublicDelegation.Contract.Name(&_PublicDelegation.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PublicDelegation *PublicDelegationCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PublicDelegation *PublicDelegationSession) Owner() (common.Address, error) {
	return _PublicDelegation.Contract.Owner(&_PublicDelegation.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PublicDelegation *PublicDelegationCallerSession) Owner() (common.Address, error) {
	return _PublicDelegation.Contract.Owner(&_PublicDelegation.CallOpts)
}

// PreviewDeposit is a free data retrieval call binding the contract method 0xef8b30f7.
//
// Solidity: function previewDeposit(uint256 _assets) view returns(uint256)
func (_PublicDelegation *PublicDelegationCaller) PreviewDeposit(opts *bind.CallOpts, _assets *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "previewDeposit", _assets)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PreviewDeposit is a free data retrieval call binding the contract method 0xef8b30f7.
//
// Solidity: function previewDeposit(uint256 _assets) view returns(uint256)
func (_PublicDelegation *PublicDelegationSession) PreviewDeposit(_assets *big.Int) (*big.Int, error) {
	return _PublicDelegation.Contract.PreviewDeposit(&_PublicDelegation.CallOpts, _assets)
}

// PreviewDeposit is a free data retrieval call binding the contract method 0xef8b30f7.
//
// Solidity: function previewDeposit(uint256 _assets) view returns(uint256)
func (_PublicDelegation *PublicDelegationCallerSession) PreviewDeposit(_assets *big.Int) (*big.Int, error) {
	return _PublicDelegation.Contract.PreviewDeposit(&_PublicDelegation.CallOpts, _assets)
}

// PreviewRedeem is a free data retrieval call binding the contract method 0x4cdad506.
//
// Solidity: function previewRedeem(uint256 _shares) view returns(uint256)
func (_PublicDelegation *PublicDelegationCaller) PreviewRedeem(opts *bind.CallOpts, _shares *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "previewRedeem", _shares)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PreviewRedeem is a free data retrieval call binding the contract method 0x4cdad506.
//
// Solidity: function previewRedeem(uint256 _shares) view returns(uint256)
func (_PublicDelegation *PublicDelegationSession) PreviewRedeem(_shares *big.Int) (*big.Int, error) {
	return _PublicDelegation.Contract.PreviewRedeem(&_PublicDelegation.CallOpts, _shares)
}

// PreviewRedeem is a free data retrieval call binding the contract method 0x4cdad506.
//
// Solidity: function previewRedeem(uint256 _shares) view returns(uint256)
func (_PublicDelegation *PublicDelegationCallerSession) PreviewRedeem(_shares *big.Int) (*big.Int, error) {
	return _PublicDelegation.Contract.PreviewRedeem(&_PublicDelegation.CallOpts, _shares)
}

// PreviewWithdraw is a free data retrieval call binding the contract method 0x0a28a477.
//
// Solidity: function previewWithdraw(uint256 _assets) view returns(uint256)
func (_PublicDelegation *PublicDelegationCaller) PreviewWithdraw(opts *bind.CallOpts, _assets *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "previewWithdraw", _assets)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PreviewWithdraw is a free data retrieval call binding the contract method 0x0a28a477.
//
// Solidity: function previewWithdraw(uint256 _assets) view returns(uint256)
func (_PublicDelegation *PublicDelegationSession) PreviewWithdraw(_assets *big.Int) (*big.Int, error) {
	return _PublicDelegation.Contract.PreviewWithdraw(&_PublicDelegation.CallOpts, _assets)
}

// PreviewWithdraw is a free data retrieval call binding the contract method 0x0a28a477.
//
// Solidity: function previewWithdraw(uint256 _assets) view returns(uint256)
func (_PublicDelegation *PublicDelegationCallerSession) PreviewWithdraw(_assets *big.Int) (*big.Int, error) {
	return _PublicDelegation.Contract.PreviewWithdraw(&_PublicDelegation.CallOpts, _assets)
}

// RequestIdToOwner is a free data retrieval call binding the contract method 0xf29177c3.
//
// Solidity: function requestIdToOwner(uint256 ) view returns(address)
func (_PublicDelegation *PublicDelegationCaller) RequestIdToOwner(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "requestIdToOwner", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RequestIdToOwner is a free data retrieval call binding the contract method 0xf29177c3.
//
// Solidity: function requestIdToOwner(uint256 ) view returns(address)
func (_PublicDelegation *PublicDelegationSession) RequestIdToOwner(arg0 *big.Int) (common.Address, error) {
	return _PublicDelegation.Contract.RequestIdToOwner(&_PublicDelegation.CallOpts, arg0)
}

// RequestIdToOwner is a free data retrieval call binding the contract method 0xf29177c3.
//
// Solidity: function requestIdToOwner(uint256 ) view returns(address)
func (_PublicDelegation *PublicDelegationCallerSession) RequestIdToOwner(arg0 *big.Int) (common.Address, error) {
	return _PublicDelegation.Contract.RequestIdToOwner(&_PublicDelegation.CallOpts, arg0)
}

// Reward is a free data retrieval call binding the contract method 0x228cb733.
//
// Solidity: function reward() view returns(uint256)
func (_PublicDelegation *PublicDelegationCaller) Reward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "reward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Reward is a free data retrieval call binding the contract method 0x228cb733.
//
// Solidity: function reward() view returns(uint256)
func (_PublicDelegation *PublicDelegationSession) Reward() (*big.Int, error) {
	return _PublicDelegation.Contract.Reward(&_PublicDelegation.CallOpts)
}

// Reward is a free data retrieval call binding the contract method 0x228cb733.
//
// Solidity: function reward() view returns(uint256)
func (_PublicDelegation *PublicDelegationCallerSession) Reward() (*big.Int, error) {
	return _PublicDelegation.Contract.Reward(&_PublicDelegation.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_PublicDelegation *PublicDelegationCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_PublicDelegation *PublicDelegationSession) Symbol() (string, error) {
	return _PublicDelegation.Contract.Symbol(&_PublicDelegation.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_PublicDelegation *PublicDelegationCallerSession) Symbol() (string, error) {
	return _PublicDelegation.Contract.Symbol(&_PublicDelegation.CallOpts)
}

// TotalAssets is a free data retrieval call binding the contract method 0x01e1d114.
//
// Solidity: function totalAssets() view returns(uint256)
func (_PublicDelegation *PublicDelegationCaller) TotalAssets(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "totalAssets")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalAssets is a free data retrieval call binding the contract method 0x01e1d114.
//
// Solidity: function totalAssets() view returns(uint256)
func (_PublicDelegation *PublicDelegationSession) TotalAssets() (*big.Int, error) {
	return _PublicDelegation.Contract.TotalAssets(&_PublicDelegation.CallOpts)
}

// TotalAssets is a free data retrieval call binding the contract method 0x01e1d114.
//
// Solidity: function totalAssets() view returns(uint256)
func (_PublicDelegation *PublicDelegationCallerSession) TotalAssets() (*big.Int, error) {
	return _PublicDelegation.Contract.TotalAssets(&_PublicDelegation.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_PublicDelegation *PublicDelegationCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_PublicDelegation *PublicDelegationSession) TotalSupply() (*big.Int, error) {
	return _PublicDelegation.Contract.TotalSupply(&_PublicDelegation.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_PublicDelegation *PublicDelegationCallerSession) TotalSupply() (*big.Int, error) {
	return _PublicDelegation.Contract.TotalSupply(&_PublicDelegation.CallOpts)
}

// UserRequestIds is a free data retrieval call binding the contract method 0x97feb23c.
//
// Solidity: function userRequestIds(address , uint256 ) view returns(uint256)
func (_PublicDelegation *PublicDelegationCaller) UserRequestIds(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegation.contract.Call(opts, &out, "userRequestIds", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UserRequestIds is a free data retrieval call binding the contract method 0x97feb23c.
//
// Solidity: function userRequestIds(address , uint256 ) view returns(uint256)
func (_PublicDelegation *PublicDelegationSession) UserRequestIds(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _PublicDelegation.Contract.UserRequestIds(&_PublicDelegation.CallOpts, arg0, arg1)
}

// UserRequestIds is a free data retrieval call binding the contract method 0x97feb23c.
//
// Solidity: function userRequestIds(address , uint256 ) view returns(uint256)
func (_PublicDelegation *PublicDelegationCallerSession) UserRequestIds(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _PublicDelegation.Contract.UserRequestIds(&_PublicDelegation.CallOpts, arg0, arg1)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_PublicDelegation *PublicDelegationTransactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_PublicDelegation *PublicDelegationSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.Contract.Approve(&_PublicDelegation.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_PublicDelegation *PublicDelegationTransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.Contract.Approve(&_PublicDelegation.TransactOpts, spender, value)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _requestId) returns()
func (_PublicDelegation *PublicDelegationTransactor) CancelApprovedStakingWithdrawal(opts *bind.TransactOpts, _requestId *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.contract.Transact(opts, "cancelApprovedStakingWithdrawal", _requestId)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _requestId) returns()
func (_PublicDelegation *PublicDelegationSession) CancelApprovedStakingWithdrawal(_requestId *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.Contract.CancelApprovedStakingWithdrawal(&_PublicDelegation.TransactOpts, _requestId)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _requestId) returns()
func (_PublicDelegation *PublicDelegationTransactorSession) CancelApprovedStakingWithdrawal(_requestId *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.Contract.CancelApprovedStakingWithdrawal(&_PublicDelegation.TransactOpts, _requestId)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 _requestId) returns()
func (_PublicDelegation *PublicDelegationTransactor) Claim(opts *bind.TransactOpts, _requestId *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.contract.Transact(opts, "claim", _requestId)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 _requestId) returns()
func (_PublicDelegation *PublicDelegationSession) Claim(_requestId *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.Contract.Claim(&_PublicDelegation.TransactOpts, _requestId)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 _requestId) returns()
func (_PublicDelegation *PublicDelegationTransactorSession) Claim(_requestId *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.Contract.Claim(&_PublicDelegation.TransactOpts, _requestId)
}

// Redeem is a paid mutator transaction binding the contract method 0x1e9a6950.
//
// Solidity: function redeem(address _recipient, uint256 _shares) returns()
func (_PublicDelegation *PublicDelegationTransactor) Redeem(opts *bind.TransactOpts, _recipient common.Address, _shares *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.contract.Transact(opts, "redeem", _recipient, _shares)
}

// Redeem is a paid mutator transaction binding the contract method 0x1e9a6950.
//
// Solidity: function redeem(address _recipient, uint256 _shares) returns()
func (_PublicDelegation *PublicDelegationSession) Redeem(_recipient common.Address, _shares *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.Contract.Redeem(&_PublicDelegation.TransactOpts, _recipient, _shares)
}

// Redeem is a paid mutator transaction binding the contract method 0x1e9a6950.
//
// Solidity: function redeem(address _recipient, uint256 _shares) returns()
func (_PublicDelegation *PublicDelegationTransactorSession) Redeem(_recipient common.Address, _shares *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.Contract.Redeem(&_PublicDelegation.TransactOpts, _recipient, _shares)
}

// RedelegateByAssets is a paid mutator transaction binding the contract method 0xe659d7d7.
//
// Solidity: function redelegateByAssets(address _targetCnV3, uint256 _assets) returns()
func (_PublicDelegation *PublicDelegationTransactor) RedelegateByAssets(opts *bind.TransactOpts, _targetCnV3 common.Address, _assets *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.contract.Transact(opts, "redelegateByAssets", _targetCnV3, _assets)
}

// RedelegateByAssets is a paid mutator transaction binding the contract method 0xe659d7d7.
//
// Solidity: function redelegateByAssets(address _targetCnV3, uint256 _assets) returns()
func (_PublicDelegation *PublicDelegationSession) RedelegateByAssets(_targetCnV3 common.Address, _assets *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.Contract.RedelegateByAssets(&_PublicDelegation.TransactOpts, _targetCnV3, _assets)
}

// RedelegateByAssets is a paid mutator transaction binding the contract method 0xe659d7d7.
//
// Solidity: function redelegateByAssets(address _targetCnV3, uint256 _assets) returns()
func (_PublicDelegation *PublicDelegationTransactorSession) RedelegateByAssets(_targetCnV3 common.Address, _assets *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.Contract.RedelegateByAssets(&_PublicDelegation.TransactOpts, _targetCnV3, _assets)
}

// RedelegateByShares is a paid mutator transaction binding the contract method 0xe15fc350.
//
// Solidity: function redelegateByShares(address _targetCnV3, uint256 _shares) returns()
func (_PublicDelegation *PublicDelegationTransactor) RedelegateByShares(opts *bind.TransactOpts, _targetCnV3 common.Address, _shares *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.contract.Transact(opts, "redelegateByShares", _targetCnV3, _shares)
}

// RedelegateByShares is a paid mutator transaction binding the contract method 0xe15fc350.
//
// Solidity: function redelegateByShares(address _targetCnV3, uint256 _shares) returns()
func (_PublicDelegation *PublicDelegationSession) RedelegateByShares(_targetCnV3 common.Address, _shares *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.Contract.RedelegateByShares(&_PublicDelegation.TransactOpts, _targetCnV3, _shares)
}

// RedelegateByShares is a paid mutator transaction binding the contract method 0xe15fc350.
//
// Solidity: function redelegateByShares(address _targetCnV3, uint256 _shares) returns()
func (_PublicDelegation *PublicDelegationTransactorSession) RedelegateByShares(_targetCnV3 common.Address, _shares *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.Contract.RedelegateByShares(&_PublicDelegation.TransactOpts, _targetCnV3, _shares)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PublicDelegation *PublicDelegationTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PublicDelegation.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PublicDelegation *PublicDelegationSession) RenounceOwnership() (*types.Transaction, error) {
	return _PublicDelegation.Contract.RenounceOwnership(&_PublicDelegation.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PublicDelegation *PublicDelegationTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _PublicDelegation.Contract.RenounceOwnership(&_PublicDelegation.TransactOpts)
}

// Stake is a paid mutator transaction binding the contract method 0x3a4b66f1.
//
// Solidity: function stake() payable returns()
func (_PublicDelegation *PublicDelegationTransactor) Stake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PublicDelegation.contract.Transact(opts, "stake")
}

// Stake is a paid mutator transaction binding the contract method 0x3a4b66f1.
//
// Solidity: function stake() payable returns()
func (_PublicDelegation *PublicDelegationSession) Stake() (*types.Transaction, error) {
	return _PublicDelegation.Contract.Stake(&_PublicDelegation.TransactOpts)
}

// Stake is a paid mutator transaction binding the contract method 0x3a4b66f1.
//
// Solidity: function stake() payable returns()
func (_PublicDelegation *PublicDelegationTransactorSession) Stake() (*types.Transaction, error) {
	return _PublicDelegation.Contract.Stake(&_PublicDelegation.TransactOpts)
}

// StakeFor is a paid mutator transaction binding the contract method 0x4bf69206.
//
// Solidity: function stakeFor(address _recipient) payable returns()
func (_PublicDelegation *PublicDelegationTransactor) StakeFor(opts *bind.TransactOpts, _recipient common.Address) (*types.Transaction, error) {
	return _PublicDelegation.contract.Transact(opts, "stakeFor", _recipient)
}

// StakeFor is a paid mutator transaction binding the contract method 0x4bf69206.
//
// Solidity: function stakeFor(address _recipient) payable returns()
func (_PublicDelegation *PublicDelegationSession) StakeFor(_recipient common.Address) (*types.Transaction, error) {
	return _PublicDelegation.Contract.StakeFor(&_PublicDelegation.TransactOpts, _recipient)
}

// StakeFor is a paid mutator transaction binding the contract method 0x4bf69206.
//
// Solidity: function stakeFor(address _recipient) payable returns()
func (_PublicDelegation *PublicDelegationTransactorSession) StakeFor(_recipient common.Address) (*types.Transaction, error) {
	return _PublicDelegation.Contract.StakeFor(&_PublicDelegation.TransactOpts, _recipient)
}

// Sweep is a paid mutator transaction binding the contract method 0x35faa416.
//
// Solidity: function sweep() returns()
func (_PublicDelegation *PublicDelegationTransactor) Sweep(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PublicDelegation.contract.Transact(opts, "sweep")
}

// Sweep is a paid mutator transaction binding the contract method 0x35faa416.
//
// Solidity: function sweep() returns()
func (_PublicDelegation *PublicDelegationSession) Sweep() (*types.Transaction, error) {
	return _PublicDelegation.Contract.Sweep(&_PublicDelegation.TransactOpts)
}

// Sweep is a paid mutator transaction binding the contract method 0x35faa416.
//
// Solidity: function sweep() returns()
func (_PublicDelegation *PublicDelegationTransactorSession) Sweep() (*types.Transaction, error) {
	return _PublicDelegation.Contract.Sweep(&_PublicDelegation.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_PublicDelegation *PublicDelegationTransactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_PublicDelegation *PublicDelegationSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.Contract.Transfer(&_PublicDelegation.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_PublicDelegation *PublicDelegationTransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.Contract.Transfer(&_PublicDelegation.TransactOpts, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_PublicDelegation *PublicDelegationTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_PublicDelegation *PublicDelegationSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.Contract.TransferFrom(&_PublicDelegation.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_PublicDelegation *PublicDelegationTransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.Contract.TransferFrom(&_PublicDelegation.TransactOpts, from, to, value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PublicDelegation *PublicDelegationTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _PublicDelegation.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PublicDelegation *PublicDelegationSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PublicDelegation.Contract.TransferOwnership(&_PublicDelegation.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PublicDelegation *PublicDelegationTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PublicDelegation.Contract.TransferOwnership(&_PublicDelegation.TransactOpts, newOwner)
}

// UpdateCommissionRate is a paid mutator transaction binding the contract method 0x00fa3d50.
//
// Solidity: function updateCommissionRate(uint256 _commissionRate) returns()
func (_PublicDelegation *PublicDelegationTransactor) UpdateCommissionRate(opts *bind.TransactOpts, _commissionRate *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.contract.Transact(opts, "updateCommissionRate", _commissionRate)
}

// UpdateCommissionRate is a paid mutator transaction binding the contract method 0x00fa3d50.
//
// Solidity: function updateCommissionRate(uint256 _commissionRate) returns()
func (_PublicDelegation *PublicDelegationSession) UpdateCommissionRate(_commissionRate *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.Contract.UpdateCommissionRate(&_PublicDelegation.TransactOpts, _commissionRate)
}

// UpdateCommissionRate is a paid mutator transaction binding the contract method 0x00fa3d50.
//
// Solidity: function updateCommissionRate(uint256 _commissionRate) returns()
func (_PublicDelegation *PublicDelegationTransactorSession) UpdateCommissionRate(_commissionRate *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.Contract.UpdateCommissionRate(&_PublicDelegation.TransactOpts, _commissionRate)
}

// UpdateCommissionTo is a paid mutator transaction binding the contract method 0x052028d0.
//
// Solidity: function updateCommissionTo(address _commissionTo) returns()
func (_PublicDelegation *PublicDelegationTransactor) UpdateCommissionTo(opts *bind.TransactOpts, _commissionTo common.Address) (*types.Transaction, error) {
	return _PublicDelegation.contract.Transact(opts, "updateCommissionTo", _commissionTo)
}

// UpdateCommissionTo is a paid mutator transaction binding the contract method 0x052028d0.
//
// Solidity: function updateCommissionTo(address _commissionTo) returns()
func (_PublicDelegation *PublicDelegationSession) UpdateCommissionTo(_commissionTo common.Address) (*types.Transaction, error) {
	return _PublicDelegation.Contract.UpdateCommissionTo(&_PublicDelegation.TransactOpts, _commissionTo)
}

// UpdateCommissionTo is a paid mutator transaction binding the contract method 0x052028d0.
//
// Solidity: function updateCommissionTo(address _commissionTo) returns()
func (_PublicDelegation *PublicDelegationTransactorSession) UpdateCommissionTo(_commissionTo common.Address) (*types.Transaction, error) {
	return _PublicDelegation.Contract.UpdateCommissionTo(&_PublicDelegation.TransactOpts, _commissionTo)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _recipient, uint256 _assets) returns()
func (_PublicDelegation *PublicDelegationTransactor) Withdraw(opts *bind.TransactOpts, _recipient common.Address, _assets *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.contract.Transact(opts, "withdraw", _recipient, _assets)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _recipient, uint256 _assets) returns()
func (_PublicDelegation *PublicDelegationSession) Withdraw(_recipient common.Address, _assets *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.Contract.Withdraw(&_PublicDelegation.TransactOpts, _recipient, _assets)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _recipient, uint256 _assets) returns()
func (_PublicDelegation *PublicDelegationTransactorSession) Withdraw(_recipient common.Address, _assets *big.Int) (*types.Transaction, error) {
	return _PublicDelegation.Contract.Withdraw(&_PublicDelegation.TransactOpts, _recipient, _assets)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_PublicDelegation *PublicDelegationTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PublicDelegation.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_PublicDelegation *PublicDelegationSession) Receive() (*types.Transaction, error) {
	return _PublicDelegation.Contract.Receive(&_PublicDelegation.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_PublicDelegation *PublicDelegationTransactorSession) Receive() (*types.Transaction, error) {
	return _PublicDelegation.Contract.Receive(&_PublicDelegation.TransactOpts)
}

// PublicDelegationApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the PublicDelegation contract.
type PublicDelegationApprovalIterator struct {
	Event *PublicDelegationApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationApproval represents a Approval event raised by the PublicDelegation contract.
type PublicDelegationApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_PublicDelegation *PublicDelegationFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*PublicDelegationApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _PublicDelegation.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationApprovalIterator{contract: _PublicDelegation.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_PublicDelegation *PublicDelegationFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *PublicDelegationApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _PublicDelegation.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationApproval)
				if err := _PublicDelegation.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_PublicDelegation *PublicDelegationFilterer) ParseApproval(log types.Log) (*PublicDelegationApproval, error) {
	event := new(PublicDelegationApproval)
	if err := _PublicDelegation.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationClaimedIterator is returned from FilterClaimed and is used to iterate over the raw logs and unpacked data for Claimed events raised by the PublicDelegation contract.
type PublicDelegationClaimedIterator struct {
	Event *PublicDelegationClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationClaimed represents a Claimed event raised by the PublicDelegation contract.
type PublicDelegationClaimed struct {
	User      common.Address
	RequestId *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterClaimed is a free log retrieval operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address indexed _user, uint256 indexed _requestId)
func (_PublicDelegation *PublicDelegationFilterer) FilterClaimed(opts *bind.FilterOpts, _user []common.Address, _requestId []*big.Int) (*PublicDelegationClaimedIterator, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _requestIdRule []interface{}
	for _, _requestIdItem := range _requestId {
		_requestIdRule = append(_requestIdRule, _requestIdItem)
	}

	logs, sub, err := _PublicDelegation.contract.FilterLogs(opts, "Claimed", _userRule, _requestIdRule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationClaimedIterator{contract: _PublicDelegation.contract, event: "Claimed", logs: logs, sub: sub}, nil
}

// WatchClaimed is a free log subscription operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address indexed _user, uint256 indexed _requestId)
func (_PublicDelegation *PublicDelegationFilterer) WatchClaimed(opts *bind.WatchOpts, sink chan<- *PublicDelegationClaimed, _user []common.Address, _requestId []*big.Int) (event.Subscription, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _requestIdRule []interface{}
	for _, _requestIdItem := range _requestId {
		_requestIdRule = append(_requestIdRule, _requestIdItem)
	}

	logs, sub, err := _PublicDelegation.contract.WatchLogs(opts, "Claimed", _userRule, _requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationClaimed)
				if err := _PublicDelegation.contract.UnpackLog(event, "Claimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimed is a log parse operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address indexed _user, uint256 indexed _requestId)
func (_PublicDelegation *PublicDelegationFilterer) ParseClaimed(log types.Log) (*PublicDelegationClaimed, error) {
	event := new(PublicDelegationClaimed)
	if err := _PublicDelegation.contract.UnpackLog(event, "Claimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationDeployContractIterator is returned from FilterDeployContract and is used to iterate over the raw logs and unpacked data for DeployContract events raised by the PublicDelegation contract.
type PublicDelegationDeployContractIterator struct {
	Event *PublicDelegationDeployContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationDeployContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationDeployContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationDeployContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationDeployContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationDeployContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationDeployContract represents a DeployContract event raised by the PublicDelegation contract.
type PublicDelegationDeployContract struct {
	ContractType    string
	BaseCnStakingV3 common.Address
	PdArgs          IPublicDelegationPDConstructorArgs
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDeployContract is a free log retrieval operation binding the contract event 0x559705a83e2830cb29ab43f78af7f847810ba4a5bff2a637f7e5665ecf8dc55f.
//
// Solidity: event DeployContract(string _contractType, address _baseCnStakingV3, (address,address,uint256,string) _pdArgs)
func (_PublicDelegation *PublicDelegationFilterer) FilterDeployContract(opts *bind.FilterOpts) (*PublicDelegationDeployContractIterator, error) {

	logs, sub, err := _PublicDelegation.contract.FilterLogs(opts, "DeployContract")
	if err != nil {
		return nil, err
	}
	return &PublicDelegationDeployContractIterator{contract: _PublicDelegation.contract, event: "DeployContract", logs: logs, sub: sub}, nil
}

// WatchDeployContract is a free log subscription operation binding the contract event 0x559705a83e2830cb29ab43f78af7f847810ba4a5bff2a637f7e5665ecf8dc55f.
//
// Solidity: event DeployContract(string _contractType, address _baseCnStakingV3, (address,address,uint256,string) _pdArgs)
func (_PublicDelegation *PublicDelegationFilterer) WatchDeployContract(opts *bind.WatchOpts, sink chan<- *PublicDelegationDeployContract) (event.Subscription, error) {

	logs, sub, err := _PublicDelegation.contract.WatchLogs(opts, "DeployContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationDeployContract)
				if err := _PublicDelegation.contract.UnpackLog(event, "DeployContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployContract is a log parse operation binding the contract event 0x559705a83e2830cb29ab43f78af7f847810ba4a5bff2a637f7e5665ecf8dc55f.
//
// Solidity: event DeployContract(string _contractType, address _baseCnStakingV3, (address,address,uint256,string) _pdArgs)
func (_PublicDelegation *PublicDelegationFilterer) ParseDeployContract(log types.Log) (*PublicDelegationDeployContract, error) {
	event := new(PublicDelegationDeployContract)
	if err := _PublicDelegation.contract.UnpackLog(event, "DeployContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the PublicDelegation contract.
type PublicDelegationOwnershipTransferredIterator struct {
	Event *PublicDelegationOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationOwnershipTransferred represents a OwnershipTransferred event raised by the PublicDelegation contract.
type PublicDelegationOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PublicDelegation *PublicDelegationFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PublicDelegationOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PublicDelegation.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationOwnershipTransferredIterator{contract: _PublicDelegation.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PublicDelegation *PublicDelegationFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PublicDelegationOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PublicDelegation.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationOwnershipTransferred)
				if err := _PublicDelegation.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PublicDelegation *PublicDelegationFilterer) ParseOwnershipTransferred(log types.Log) (*PublicDelegationOwnershipTransferred, error) {
	event := new(PublicDelegationOwnershipTransferred)
	if err := _PublicDelegation.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationRedeemedIterator is returned from FilterRedeemed and is used to iterate over the raw logs and unpacked data for Redeemed events raised by the PublicDelegation contract.
type PublicDelegationRedeemedIterator struct {
	Event *PublicDelegationRedeemed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationRedeemedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationRedeemed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationRedeemed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationRedeemedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationRedeemedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationRedeemed represents a Redeemed event raised by the PublicDelegation contract.
type PublicDelegationRedeemed struct {
	User      common.Address
	Recipient common.Address
	Assets    *big.Int
	Shares    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRedeemed is a free log retrieval operation binding the contract event 0x5cdf07ad0fc222442720b108e3ed4c4640f0fadc2ab2253e66f259a0fea83480.
//
// Solidity: event Redeemed(address indexed _user, address indexed _recipient, uint256 _assets, uint256 _shares)
func (_PublicDelegation *PublicDelegationFilterer) FilterRedeemed(opts *bind.FilterOpts, _user []common.Address, _recipient []common.Address) (*PublicDelegationRedeemedIterator, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _recipientRule []interface{}
	for _, _recipientItem := range _recipient {
		_recipientRule = append(_recipientRule, _recipientItem)
	}

	logs, sub, err := _PublicDelegation.contract.FilterLogs(opts, "Redeemed", _userRule, _recipientRule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationRedeemedIterator{contract: _PublicDelegation.contract, event: "Redeemed", logs: logs, sub: sub}, nil
}

// WatchRedeemed is a free log subscription operation binding the contract event 0x5cdf07ad0fc222442720b108e3ed4c4640f0fadc2ab2253e66f259a0fea83480.
//
// Solidity: event Redeemed(address indexed _user, address indexed _recipient, uint256 _assets, uint256 _shares)
func (_PublicDelegation *PublicDelegationFilterer) WatchRedeemed(opts *bind.WatchOpts, sink chan<- *PublicDelegationRedeemed, _user []common.Address, _recipient []common.Address) (event.Subscription, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _recipientRule []interface{}
	for _, _recipientItem := range _recipient {
		_recipientRule = append(_recipientRule, _recipientItem)
	}

	logs, sub, err := _PublicDelegation.contract.WatchLogs(opts, "Redeemed", _userRule, _recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationRedeemed)
				if err := _PublicDelegation.contract.UnpackLog(event, "Redeemed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemed is a log parse operation binding the contract event 0x5cdf07ad0fc222442720b108e3ed4c4640f0fadc2ab2253e66f259a0fea83480.
//
// Solidity: event Redeemed(address indexed _user, address indexed _recipient, uint256 _assets, uint256 _shares)
func (_PublicDelegation *PublicDelegationFilterer) ParseRedeemed(log types.Log) (*PublicDelegationRedeemed, error) {
	event := new(PublicDelegationRedeemed)
	if err := _PublicDelegation.contract.UnpackLog(event, "Redeemed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationRedelegatedIterator is returned from FilterRedelegated and is used to iterate over the raw logs and unpacked data for Redelegated events raised by the PublicDelegation contract.
type PublicDelegationRedelegatedIterator struct {
	Event *PublicDelegationRedelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationRedelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationRedelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationRedelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationRedelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationRedelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationRedelegated represents a Redelegated event raised by the PublicDelegation contract.
type PublicDelegationRedelegated struct {
	User       common.Address
	TargetCnV3 common.Address
	Assets     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRedelegated is a free log retrieval operation binding the contract event 0x78d93753d5a8009153a294711a82a3d1ba802938d66537c1b9142a053782d693.
//
// Solidity: event Redelegated(address indexed _user, address indexed _targetCnV3, uint256 _assets)
func (_PublicDelegation *PublicDelegationFilterer) FilterRedelegated(opts *bind.FilterOpts, _user []common.Address, _targetCnV3 []common.Address) (*PublicDelegationRedelegatedIterator, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _targetCnV3Rule []interface{}
	for _, _targetCnV3Item := range _targetCnV3 {
		_targetCnV3Rule = append(_targetCnV3Rule, _targetCnV3Item)
	}

	logs, sub, err := _PublicDelegation.contract.FilterLogs(opts, "Redelegated", _userRule, _targetCnV3Rule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationRedelegatedIterator{contract: _PublicDelegation.contract, event: "Redelegated", logs: logs, sub: sub}, nil
}

// WatchRedelegated is a free log subscription operation binding the contract event 0x78d93753d5a8009153a294711a82a3d1ba802938d66537c1b9142a053782d693.
//
// Solidity: event Redelegated(address indexed _user, address indexed _targetCnV3, uint256 _assets)
func (_PublicDelegation *PublicDelegationFilterer) WatchRedelegated(opts *bind.WatchOpts, sink chan<- *PublicDelegationRedelegated, _user []common.Address, _targetCnV3 []common.Address) (event.Subscription, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _targetCnV3Rule []interface{}
	for _, _targetCnV3Item := range _targetCnV3 {
		_targetCnV3Rule = append(_targetCnV3Rule, _targetCnV3Item)
	}

	logs, sub, err := _PublicDelegation.contract.WatchLogs(opts, "Redelegated", _userRule, _targetCnV3Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationRedelegated)
				if err := _PublicDelegation.contract.UnpackLog(event, "Redelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedelegated is a log parse operation binding the contract event 0x78d93753d5a8009153a294711a82a3d1ba802938d66537c1b9142a053782d693.
//
// Solidity: event Redelegated(address indexed _user, address indexed _targetCnV3, uint256 _assets)
func (_PublicDelegation *PublicDelegationFilterer) ParseRedelegated(log types.Log) (*PublicDelegationRedelegated, error) {
	event := new(PublicDelegationRedelegated)
	if err := _PublicDelegation.contract.UnpackLog(event, "Redelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationRequestCancelWithdrawalIterator is returned from FilterRequestCancelWithdrawal and is used to iterate over the raw logs and unpacked data for RequestCancelWithdrawal events raised by the PublicDelegation contract.
type PublicDelegationRequestCancelWithdrawalIterator struct {
	Event *PublicDelegationRequestCancelWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationRequestCancelWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationRequestCancelWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationRequestCancelWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationRequestCancelWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationRequestCancelWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationRequestCancelWithdrawal represents a RequestCancelWithdrawal event raised by the PublicDelegation contract.
type PublicDelegationRequestCancelWithdrawal struct {
	User      common.Address
	RequestId *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRequestCancelWithdrawal is a free log retrieval operation binding the contract event 0x853eba293fc3859716cf2e1a34b0c266f8265db181ec04748d0f25b8a19fc80e.
//
// Solidity: event RequestCancelWithdrawal(address indexed _user, uint256 indexed _requestId)
func (_PublicDelegation *PublicDelegationFilterer) FilterRequestCancelWithdrawal(opts *bind.FilterOpts, _user []common.Address, _requestId []*big.Int) (*PublicDelegationRequestCancelWithdrawalIterator, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _requestIdRule []interface{}
	for _, _requestIdItem := range _requestId {
		_requestIdRule = append(_requestIdRule, _requestIdItem)
	}

	logs, sub, err := _PublicDelegation.contract.FilterLogs(opts, "RequestCancelWithdrawal", _userRule, _requestIdRule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationRequestCancelWithdrawalIterator{contract: _PublicDelegation.contract, event: "RequestCancelWithdrawal", logs: logs, sub: sub}, nil
}

// WatchRequestCancelWithdrawal is a free log subscription operation binding the contract event 0x853eba293fc3859716cf2e1a34b0c266f8265db181ec04748d0f25b8a19fc80e.
//
// Solidity: event RequestCancelWithdrawal(address indexed _user, uint256 indexed _requestId)
func (_PublicDelegation *PublicDelegationFilterer) WatchRequestCancelWithdrawal(opts *bind.WatchOpts, sink chan<- *PublicDelegationRequestCancelWithdrawal, _user []common.Address, _requestId []*big.Int) (event.Subscription, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _requestIdRule []interface{}
	for _, _requestIdItem := range _requestId {
		_requestIdRule = append(_requestIdRule, _requestIdItem)
	}

	logs, sub, err := _PublicDelegation.contract.WatchLogs(opts, "RequestCancelWithdrawal", _userRule, _requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationRequestCancelWithdrawal)
				if err := _PublicDelegation.contract.UnpackLog(event, "RequestCancelWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestCancelWithdrawal is a log parse operation binding the contract event 0x853eba293fc3859716cf2e1a34b0c266f8265db181ec04748d0f25b8a19fc80e.
//
// Solidity: event RequestCancelWithdrawal(address indexed _user, uint256 indexed _requestId)
func (_PublicDelegation *PublicDelegationFilterer) ParseRequestCancelWithdrawal(log types.Log) (*PublicDelegationRequestCancelWithdrawal, error) {
	event := new(PublicDelegationRequestCancelWithdrawal)
	if err := _PublicDelegation.contract.UnpackLog(event, "RequestCancelWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationRequestWithdrawalIterator is returned from FilterRequestWithdrawal and is used to iterate over the raw logs and unpacked data for RequestWithdrawal events raised by the PublicDelegation contract.
type PublicDelegationRequestWithdrawalIterator struct {
	Event *PublicDelegationRequestWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationRequestWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationRequestWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationRequestWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationRequestWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationRequestWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationRequestWithdrawal represents a RequestWithdrawal event raised by the PublicDelegation contract.
type PublicDelegationRequestWithdrawal struct {
	User      common.Address
	Recipient common.Address
	RequestId *big.Int
	Assets    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRequestWithdrawal is a free log retrieval operation binding the contract event 0xd71e6ec4eed83207b08d7ee4a0773c0ff8f8a1ab94b8ce85737fc0c5ea2b5f0c.
//
// Solidity: event RequestWithdrawal(address indexed _user, address indexed _recipient, uint256 indexed _requestId, uint256 _assets)
func (_PublicDelegation *PublicDelegationFilterer) FilterRequestWithdrawal(opts *bind.FilterOpts, _user []common.Address, _recipient []common.Address, _requestId []*big.Int) (*PublicDelegationRequestWithdrawalIterator, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _recipientRule []interface{}
	for _, _recipientItem := range _recipient {
		_recipientRule = append(_recipientRule, _recipientItem)
	}
	var _requestIdRule []interface{}
	for _, _requestIdItem := range _requestId {
		_requestIdRule = append(_requestIdRule, _requestIdItem)
	}

	logs, sub, err := _PublicDelegation.contract.FilterLogs(opts, "RequestWithdrawal", _userRule, _recipientRule, _requestIdRule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationRequestWithdrawalIterator{contract: _PublicDelegation.contract, event: "RequestWithdrawal", logs: logs, sub: sub}, nil
}

// WatchRequestWithdrawal is a free log subscription operation binding the contract event 0xd71e6ec4eed83207b08d7ee4a0773c0ff8f8a1ab94b8ce85737fc0c5ea2b5f0c.
//
// Solidity: event RequestWithdrawal(address indexed _user, address indexed _recipient, uint256 indexed _requestId, uint256 _assets)
func (_PublicDelegation *PublicDelegationFilterer) WatchRequestWithdrawal(opts *bind.WatchOpts, sink chan<- *PublicDelegationRequestWithdrawal, _user []common.Address, _recipient []common.Address, _requestId []*big.Int) (event.Subscription, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _recipientRule []interface{}
	for _, _recipientItem := range _recipient {
		_recipientRule = append(_recipientRule, _recipientItem)
	}
	var _requestIdRule []interface{}
	for _, _requestIdItem := range _requestId {
		_requestIdRule = append(_requestIdRule, _requestIdItem)
	}

	logs, sub, err := _PublicDelegation.contract.WatchLogs(opts, "RequestWithdrawal", _userRule, _recipientRule, _requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationRequestWithdrawal)
				if err := _PublicDelegation.contract.UnpackLog(event, "RequestWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestWithdrawal is a log parse operation binding the contract event 0xd71e6ec4eed83207b08d7ee4a0773c0ff8f8a1ab94b8ce85737fc0c5ea2b5f0c.
//
// Solidity: event RequestWithdrawal(address indexed _user, address indexed _recipient, uint256 indexed _requestId, uint256 _assets)
func (_PublicDelegation *PublicDelegationFilterer) ParseRequestWithdrawal(log types.Log) (*PublicDelegationRequestWithdrawal, error) {
	event := new(PublicDelegationRequestWithdrawal)
	if err := _PublicDelegation.contract.UnpackLog(event, "RequestWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationSendCommissionIterator is returned from FilterSendCommission and is used to iterate over the raw logs and unpacked data for SendCommission events raised by the PublicDelegation contract.
type PublicDelegationSendCommissionIterator struct {
	Event *PublicDelegationSendCommission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationSendCommissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationSendCommission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationSendCommission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationSendCommissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationSendCommissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationSendCommission represents a SendCommission event raised by the PublicDelegation contract.
type PublicDelegationSendCommission struct {
	CommissionTo common.Address
	Commission   *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSendCommission is a free log retrieval operation binding the contract event 0x6c3b15f4a619d5331e4708792bb87f858ffb7a08f1a87aabca7cd15e51e04a63.
//
// Solidity: event SendCommission(address indexed _commissionTo, uint256 _commission)
func (_PublicDelegation *PublicDelegationFilterer) FilterSendCommission(opts *bind.FilterOpts, _commissionTo []common.Address) (*PublicDelegationSendCommissionIterator, error) {

	var _commissionToRule []interface{}
	for _, _commissionToItem := range _commissionTo {
		_commissionToRule = append(_commissionToRule, _commissionToItem)
	}

	logs, sub, err := _PublicDelegation.contract.FilterLogs(opts, "SendCommission", _commissionToRule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationSendCommissionIterator{contract: _PublicDelegation.contract, event: "SendCommission", logs: logs, sub: sub}, nil
}

// WatchSendCommission is a free log subscription operation binding the contract event 0x6c3b15f4a619d5331e4708792bb87f858ffb7a08f1a87aabca7cd15e51e04a63.
//
// Solidity: event SendCommission(address indexed _commissionTo, uint256 _commission)
func (_PublicDelegation *PublicDelegationFilterer) WatchSendCommission(opts *bind.WatchOpts, sink chan<- *PublicDelegationSendCommission, _commissionTo []common.Address) (event.Subscription, error) {

	var _commissionToRule []interface{}
	for _, _commissionToItem := range _commissionTo {
		_commissionToRule = append(_commissionToRule, _commissionToItem)
	}

	logs, sub, err := _PublicDelegation.contract.WatchLogs(opts, "SendCommission", _commissionToRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationSendCommission)
				if err := _PublicDelegation.contract.UnpackLog(event, "SendCommission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSendCommission is a log parse operation binding the contract event 0x6c3b15f4a619d5331e4708792bb87f858ffb7a08f1a87aabca7cd15e51e04a63.
//
// Solidity: event SendCommission(address indexed _commissionTo, uint256 _commission)
func (_PublicDelegation *PublicDelegationFilterer) ParseSendCommission(log types.Log) (*PublicDelegationSendCommission, error) {
	event := new(PublicDelegationSendCommission)
	if err := _PublicDelegation.contract.UnpackLog(event, "SendCommission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationStakedIterator is returned from FilterStaked and is used to iterate over the raw logs and unpacked data for Staked events raised by the PublicDelegation contract.
type PublicDelegationStakedIterator struct {
	Event *PublicDelegationStaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationStakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationStakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationStaked represents a Staked event raised by the PublicDelegation contract.
type PublicDelegationStaked struct {
	User   common.Address
	Assets *big.Int
	Shares *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterStaked is a free log retrieval operation binding the contract event 0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90.
//
// Solidity: event Staked(address indexed _user, uint256 _assets, uint256 _shares)
func (_PublicDelegation *PublicDelegationFilterer) FilterStaked(opts *bind.FilterOpts, _user []common.Address) (*PublicDelegationStakedIterator, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}

	logs, sub, err := _PublicDelegation.contract.FilterLogs(opts, "Staked", _userRule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationStakedIterator{contract: _PublicDelegation.contract, event: "Staked", logs: logs, sub: sub}, nil
}

// WatchStaked is a free log subscription operation binding the contract event 0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90.
//
// Solidity: event Staked(address indexed _user, uint256 _assets, uint256 _shares)
func (_PublicDelegation *PublicDelegationFilterer) WatchStaked(opts *bind.WatchOpts, sink chan<- *PublicDelegationStaked, _user []common.Address) (event.Subscription, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}

	logs, sub, err := _PublicDelegation.contract.WatchLogs(opts, "Staked", _userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationStaked)
				if err := _PublicDelegation.contract.UnpackLog(event, "Staked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaked is a log parse operation binding the contract event 0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90.
//
// Solidity: event Staked(address indexed _user, uint256 _assets, uint256 _shares)
func (_PublicDelegation *PublicDelegationFilterer) ParseStaked(log types.Log) (*PublicDelegationStaked, error) {
	event := new(PublicDelegationStaked)
	if err := _PublicDelegation.contract.UnpackLog(event, "Staked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the PublicDelegation contract.
type PublicDelegationTransferIterator struct {
	Event *PublicDelegationTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationTransfer represents a Transfer event raised by the PublicDelegation contract.
type PublicDelegationTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_PublicDelegation *PublicDelegationFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*PublicDelegationTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _PublicDelegation.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationTransferIterator{contract: _PublicDelegation.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_PublicDelegation *PublicDelegationFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *PublicDelegationTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _PublicDelegation.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationTransfer)
				if err := _PublicDelegation.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_PublicDelegation *PublicDelegationFilterer) ParseTransfer(log types.Log) (*PublicDelegationTransfer, error) {
	event := new(PublicDelegationTransfer)
	if err := _PublicDelegation.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationUpdateCommissionRateIterator is returned from FilterUpdateCommissionRate and is used to iterate over the raw logs and unpacked data for UpdateCommissionRate events raised by the PublicDelegation contract.
type PublicDelegationUpdateCommissionRateIterator struct {
	Event *PublicDelegationUpdateCommissionRate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationUpdateCommissionRateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationUpdateCommissionRate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationUpdateCommissionRate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationUpdateCommissionRateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationUpdateCommissionRateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationUpdateCommissionRate represents a UpdateCommissionRate event raised by the PublicDelegation contract.
type PublicDelegationUpdateCommissionRate struct {
	PrevCommissionRate *big.Int
	CommissionRate     *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterUpdateCommissionRate is a free log retrieval operation binding the contract event 0x67fb2216d844c3553cf557bffa85f0fde0294999f808e61dcae1773d50d5e150.
//
// Solidity: event UpdateCommissionRate(uint256 indexed _prevCommissionRate, uint256 indexed _commissionRate)
func (_PublicDelegation *PublicDelegationFilterer) FilterUpdateCommissionRate(opts *bind.FilterOpts, _prevCommissionRate []*big.Int, _commissionRate []*big.Int) (*PublicDelegationUpdateCommissionRateIterator, error) {

	var _prevCommissionRateRule []interface{}
	for _, _prevCommissionRateItem := range _prevCommissionRate {
		_prevCommissionRateRule = append(_prevCommissionRateRule, _prevCommissionRateItem)
	}
	var _commissionRateRule []interface{}
	for _, _commissionRateItem := range _commissionRate {
		_commissionRateRule = append(_commissionRateRule, _commissionRateItem)
	}

	logs, sub, err := _PublicDelegation.contract.FilterLogs(opts, "UpdateCommissionRate", _prevCommissionRateRule, _commissionRateRule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationUpdateCommissionRateIterator{contract: _PublicDelegation.contract, event: "UpdateCommissionRate", logs: logs, sub: sub}, nil
}

// WatchUpdateCommissionRate is a free log subscription operation binding the contract event 0x67fb2216d844c3553cf557bffa85f0fde0294999f808e61dcae1773d50d5e150.
//
// Solidity: event UpdateCommissionRate(uint256 indexed _prevCommissionRate, uint256 indexed _commissionRate)
func (_PublicDelegation *PublicDelegationFilterer) WatchUpdateCommissionRate(opts *bind.WatchOpts, sink chan<- *PublicDelegationUpdateCommissionRate, _prevCommissionRate []*big.Int, _commissionRate []*big.Int) (event.Subscription, error) {

	var _prevCommissionRateRule []interface{}
	for _, _prevCommissionRateItem := range _prevCommissionRate {
		_prevCommissionRateRule = append(_prevCommissionRateRule, _prevCommissionRateItem)
	}
	var _commissionRateRule []interface{}
	for _, _commissionRateItem := range _commissionRate {
		_commissionRateRule = append(_commissionRateRule, _commissionRateItem)
	}

	logs, sub, err := _PublicDelegation.contract.WatchLogs(opts, "UpdateCommissionRate", _prevCommissionRateRule, _commissionRateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationUpdateCommissionRate)
				if err := _PublicDelegation.contract.UnpackLog(event, "UpdateCommissionRate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateCommissionRate is a log parse operation binding the contract event 0x67fb2216d844c3553cf557bffa85f0fde0294999f808e61dcae1773d50d5e150.
//
// Solidity: event UpdateCommissionRate(uint256 indexed _prevCommissionRate, uint256 indexed _commissionRate)
func (_PublicDelegation *PublicDelegationFilterer) ParseUpdateCommissionRate(log types.Log) (*PublicDelegationUpdateCommissionRate, error) {
	event := new(PublicDelegationUpdateCommissionRate)
	if err := _PublicDelegation.contract.UnpackLog(event, "UpdateCommissionRate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationUpdateCommissionToIterator is returned from FilterUpdateCommissionTo and is used to iterate over the raw logs and unpacked data for UpdateCommissionTo events raised by the PublicDelegation contract.
type PublicDelegationUpdateCommissionToIterator struct {
	Event *PublicDelegationUpdateCommissionTo // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationUpdateCommissionToIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationUpdateCommissionTo)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationUpdateCommissionTo)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationUpdateCommissionToIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationUpdateCommissionToIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationUpdateCommissionTo represents a UpdateCommissionTo event raised by the PublicDelegation contract.
type PublicDelegationUpdateCommissionTo struct {
	PrevCommissionTo common.Address
	CommissionTo     common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterUpdateCommissionTo is a free log retrieval operation binding the contract event 0xa466bc069316af563b6a90c9b6f29a97752ac7be7c6bbf3767bc9b16c2fd90eb.
//
// Solidity: event UpdateCommissionTo(address indexed _prevCommissionTo, address indexed _commissionTo)
func (_PublicDelegation *PublicDelegationFilterer) FilterUpdateCommissionTo(opts *bind.FilterOpts, _prevCommissionTo []common.Address, _commissionTo []common.Address) (*PublicDelegationUpdateCommissionToIterator, error) {

	var _prevCommissionToRule []interface{}
	for _, _prevCommissionToItem := range _prevCommissionTo {
		_prevCommissionToRule = append(_prevCommissionToRule, _prevCommissionToItem)
	}
	var _commissionToRule []interface{}
	for _, _commissionToItem := range _commissionTo {
		_commissionToRule = append(_commissionToRule, _commissionToItem)
	}

	logs, sub, err := _PublicDelegation.contract.FilterLogs(opts, "UpdateCommissionTo", _prevCommissionToRule, _commissionToRule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationUpdateCommissionToIterator{contract: _PublicDelegation.contract, event: "UpdateCommissionTo", logs: logs, sub: sub}, nil
}

// WatchUpdateCommissionTo is a free log subscription operation binding the contract event 0xa466bc069316af563b6a90c9b6f29a97752ac7be7c6bbf3767bc9b16c2fd90eb.
//
// Solidity: event UpdateCommissionTo(address indexed _prevCommissionTo, address indexed _commissionTo)
func (_PublicDelegation *PublicDelegationFilterer) WatchUpdateCommissionTo(opts *bind.WatchOpts, sink chan<- *PublicDelegationUpdateCommissionTo, _prevCommissionTo []common.Address, _commissionTo []common.Address) (event.Subscription, error) {

	var _prevCommissionToRule []interface{}
	for _, _prevCommissionToItem := range _prevCommissionTo {
		_prevCommissionToRule = append(_prevCommissionToRule, _prevCommissionToItem)
	}
	var _commissionToRule []interface{}
	for _, _commissionToItem := range _commissionTo {
		_commissionToRule = append(_commissionToRule, _commissionToItem)
	}

	logs, sub, err := _PublicDelegation.contract.WatchLogs(opts, "UpdateCommissionTo", _prevCommissionToRule, _commissionToRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationUpdateCommissionTo)
				if err := _PublicDelegation.contract.UnpackLog(event, "UpdateCommissionTo", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateCommissionTo is a log parse operation binding the contract event 0xa466bc069316af563b6a90c9b6f29a97752ac7be7c6bbf3767bc9b16c2fd90eb.
//
// Solidity: event UpdateCommissionTo(address indexed _prevCommissionTo, address indexed _commissionTo)
func (_PublicDelegation *PublicDelegationFilterer) ParseUpdateCommissionTo(log types.Log) (*PublicDelegationUpdateCommissionTo, error) {
	event := new(PublicDelegationUpdateCommissionTo)
	if err := _PublicDelegation.contract.UnpackLog(event, "UpdateCommissionTo", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationFactoryMetaData contains all meta data concerning the PublicDelegationFactory contract.
var PublicDelegationFactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"CONTRACT_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"commissionTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"gcName\",\"type\":\"string\"}],\"internalType\":\"structIPublicDelegation.PDConstructorArgs\",\"name\":\"_pdArgs\",\"type\":\"tuple\"}],\"name\":\"deployPublicDelegation\",\"outputs\":[{\"internalType\":\"contractIPublicDelegation\",\"name\":\"publicDelegation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"4b6a94cc": "CONTRACT_TYPE()",
		"ffa1ad74": "VERSION()",
		"787821cc": "deployPublicDelegation((address,address,uint256,string))",
	},
	Bin: "0x6080604052348015600e575f80fd5b506131298061001c5f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c80634b6a94cc14610043578063787821cc14610095578063ffa1ad74146100c0575b5f80fd5b61007f6040518060400160405280601781526020017f5075626c696344656c65676174696f6e466163746f727900000000000000000081525081565b60405161008c919061014b565b60405180910390f35b6100a86100a33660046101ed565b6100d6565b6040516001600160a01b03909116815260200161008c565b6100c8600181565b60405190815260200161008c565b5f33826040516100e590610110565b6100f09291906102d2565b604051809103905ff080158015610109573d5f803e3d5ffd5b5092915050565b612dcb8061032983390190565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f61015d602083018461011d565b9392505050565b634e487b7160e01b5f52604160045260245ffd5b6040516080810167ffffffffffffffff8111828210171561019b5761019b610164565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156101ca576101ca610164565b604052919050565b80356001600160a01b03811681146101e8575f80fd5b919050565b5f60208083850312156101fe575f80fd5b823567ffffffffffffffff80821115610215575f80fd5b9084019060808287031215610228575f80fd5b610230610178565b610239836101d2565b81526102468484016101d2565b8482015260408301356040820152606083013582811115610265575f80fd5b80840193505086601f840112610279575f80fd5b82358281111561028b5761028b610164565b61029d601f8201601f191686016101a1565b925080835287858286010111156102b2575f80fd5b80858501868501375f908301909401939093526060830152509392505050565b5f60018060a01b0380851683526040602084015280845116604084015280602085015116606084015250604083015160808301526060830151608060a084015261031f60c084018261011d565b9594505050505056fe60a060405234801561000f575f80fd5b50604051612dcb380380612dcb83398101604081905261002e91610292565b8051606082015160405161004591906020016103a2565b604051602081830303815290604052826060015160405160200161006991906103da565b60408051601f1981840301815291905260076100858382610480565b5060086100928282610480565b5050506001600160a01b0381166100c357604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6100cc816101ba565b50612710816040015111156101235760405162461bcd60e51b815260206004820152601c60248201527f436f6d6d697373696f6e207261746520697320746f6f20686967682e0000000060448201526064016100ba565b6001600160a01b038281166080526040828101516001556020808401515f80546001600160a01b031916919094161790925580518082018252601081526f283ab13634b1a232b632b3b0ba34b7b760811b92810192909252517f559705a83e2830cb29ab43f78af7f847810ba4a5bff2a637f7e5665ecf8dc55f916101ab918590859061056d565b60405180910390a150506105d7565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b80516001600160a01b0381168114610221575f80fd5b919050565b634e487b7160e01b5f52604160045260245ffd5b604051608081016001600160401b038111828210171561025c5761025c610226565b60405290565b604051601f8201601f191681016001600160401b038111828210171561028a5761028a610226565b604052919050565b5f80604083850312156102a3575f80fd5b6102ac8361020b565b602084810151919350906001600160401b03808211156102ca575f80fd5b90850190608082880312156102dd575f80fd5b6102e561023a565b6102ee8361020b565b81526102fb84840161020b565b848201526040830151604082015260608301518281111561031a575f80fd5b80840193505087601f84011261032e575f80fd5b82518281111561034057610340610226565b610352601f8201601f19168601610262565b92508083528885828601011115610367575f80fd5b808585018685015e5f85828501015250816060820152809450505050509250929050565b5f81518060208401855e5f93019283525090919050565b5f6103ad828461038b565b7f205075626c69632044656c656761746564204b4149410000000000000000000081526016019392505050565b5f6103e5828461038b565b662d70644b41494160c81b81526007019392505050565b600181811c9082168061041057607f821691505b60208210810361042e57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561047b57805f5260205f20601f840160051c810160208510156104595750805b601f840160051c820191505b81811015610478575f8155600101610465565b50505b505050565b81516001600160401b0381111561049957610499610226565b6104ad816104a784546103fc565b84610434565b602080601f8311600181146104e0575f84156104c95750858301515b5f19600386901b1c1916600185901b178555610537565b5f85815260208120601f198616915b8281101561050e578886015182559484019460019091019084016104ef565b508582101561052b57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b606081525f61057f606083018661053f565b60018060a01b038086166020850152838203604085015280855116825280602086015116602083015250604084015160408201526060840151608060608301526105cc608083018261053f565b979650505050505050565b6080516127966106355f395f818161074f01528181610a5f015281816112e2015281816113620152818161143e015281816114f90152818161169a015281816118f501528181611ae201528181611b750152611e7c01526127965ff3fe60806040526004361061026c575f3560e01c80635ea1d6f81161014a578063c804b115116100be578063e659d7d711610078578063e659d7d714610771578063ef8b30f714610790578063f29177c3146107af578063f2fde38b146107e3578063f3fef3a314610802578063ffa1ad7414610821575f80fd5b8063c804b1151461067e578063ce96cb771461069d578063d905777e146106bc578063dd62ed3e146106db578063e15fc3501461071f578063e2c8bde51461073e575f80fd5b806393b89a841161010f57806393b89a84146105ba57806395d89b41146105d957806397feb23c146105ed578063a9059cbb1461060c578063c166c4581461062b578063c6e6f5921461065f575f80fd5b80635ea1d6f81461051457806360df7c6c1461052957806370a0823114610555578063715018a6146105895780638da5cb5b1461059d575f80fd5b8063228cb733116101e1578063379607f5116101a6578063379607f5146104805780633a4b66f11461049f5780633b1dbfcc146103d35780634b6a94cc146104a75780634bf69206146104e25780634cdad506146104f5575f80fd5b8063228cb733146103e857806323b872dd146103fc5780632f9ac83a1461041b578063313ce5671461045157806335faa4161461046c575f80fd5b806307a2d13a1161023257806307a2d13a14610333578063095ea7b3146103525780630a28a4771461038157806318160ddd146103a05780631e9a6950146103b4578063207239c0146103d3575f80fd5b8062fa3d501461028157806301e1d114146102a057806304ddc9d1146102c7578063052028d0146102f357806306fdde0314610312575f80fd5b3661027d5761027b3334610835565b005b5f80fd5b34801561028c575f80fd5b5061027b61029b3660046122eb565b61094a565b3480156102ab575f80fd5b506102b46109e6565b6040519081526020015b60405180910390f35b3480156102d2575f80fd5b506102e66102e13660046122eb565b6109f4565b6040516102be9190612316565b3480156102fe575f80fd5b5061027b61030d366004612350565b610b12565b34801561031d575f80fd5b50610326610b73565b6040516102be919061236b565b34801561033e575f80fd5b506102b461034d3660046122eb565b610c03565b34801561035d575f80fd5b5061037161036c3660046123a0565b610c38565b60405190151581526020016102be565b34801561038c575f80fd5b506102b461039b3660046122eb565b610c51565b3480156103ab575f80fd5b506006546102b4565b3480156103bf575f80fd5b5061027b6103ce3660046123a0565b610c7a565b3480156103de575f80fd5b506102b461271081565b3480156103f3575f80fd5b506102b4610d19565b348015610407575f80fd5b506103716104163660046123ca565b610d22565b348015610426575f80fd5b505f54610439906001600160a01b031681565b6040516001600160a01b0390911681526020016102be565b34801561045c575f80fd5b50604051601281526020016102be565b348015610477575f80fd5b5061027b610d45565b34801561048b575f80fd5b5061027b61049a3660046122eb565b610d51565b61027b610d67565b3480156104b2575f80fd5b506103266040518060400160405280601081526020016f283ab13634b1a232b632b3b0ba34b7b760811b81525081565b61027b6104f0366004612350565b610d71565b348015610500575f80fd5b506102b461050f3660046122eb565b610da6565b34801561051f575f80fd5b506102b460015481565b348015610534575f80fd5b50610548610543366004612350565b610db0565b6040516102be9190612408565b348015610560575f80fd5b506102b461056f366004612350565b6001600160a01b03165f9081526004602052604090205490565b348015610594575f80fd5b5061027b610e19565b3480156105a8575f80fd5b506009546001600160a01b0316610439565b3480156105c5575f80fd5b506105486105d436600461244b565b610e2a565b3480156105e4575f80fd5b50610326610f38565b3480156105f8575f80fd5b506102b46106073660046123a0565b610f47565b348015610617575f80fd5b506103716106263660046123a0565b610f72565b348015610636575f80fd5b506102b4610645366004612350565b6001600160a01b03165f9081526002602052604090205490565b34801561066a575f80fd5b506102b46106793660046122eb565b610f7f565b348015610689575f80fd5b5061027b6106983660046122eb565b610fa7565b3480156106a8575f80fd5b506102b46106b7366004612350565b610fba565b3480156106c7575f80fd5b506102b46106d6366004612350565b610fdb565b3480156106e6575f80fd5b506102b46106f5366004612485565b6001600160a01b039182165f90815260056020908152604080832093909416825291909152205490565b34801561072a575f80fd5b5061027b6107393660046123a0565b610ff8565b348015610749575f80fd5b506104397f000000000000000000000000000000000000000000000000000000000000000081565b34801561077c575f80fd5b5061027b61078b3660046123a0565b6110cb565b34801561079b575f80fd5b506102b46107aa3660046122eb565b611199565b3480156107ba575f80fd5b506104396107c93660046122eb565b60036020525f90815260409020546001600160a01b031681565b3480156107ee575f80fd5b5061027b6107fd366004612350565b6111a3565b34801561080d575f80fd5b5061027b61081c3660046123a0565b6111dd565b34801561082c575f80fd5b506102b4600181565b478190035f61084382611272565b905080156108545761085481611286565b6001600160a01b0384161561092d575f818361086e6112df565b010390505f6108868561088060065490565b846113e6565b90505f81116108dc5760405162461bcd60e51b815260206004820152601860248201527f5374616b6520616d6f756e7420697320746f6f206c6f772e000000000000000060448201526064015b60405180910390fd5b6108e68682611408565b60408051868152602081018390526001600160a01b038816917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a250505b818301818103908214610943576109438161143c565b5050505050565b6109526114af565b6127108111156109a45760405162461bcd60e51b815260206004820152601c60248201527f436f6d6d697373696f6e207261746520697320746f6f20686967682e0000000060448201526064016108d3565b6109ae5f80610835565b6001805490829055604051829082907f67fb2216d844c3553cf557bffa85f0fde0294999f808e61dcae1773d50d5e150905f90a35050565b5f6109ef6114dc565b905090565b5f805f610a00846114f3565b935093505050815f03610a1657505f9392505050565b6002816002811115610a2a57610a2a612302565b03610a39575060059392505050565b6001816002811115610a4d57610a4d612302565b03610a5c575060039392505050565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166396106ae46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610add91906124b1565b8301905082421015610af457506001949350505050565b80421015610b0757506002949350505050565b506004949350505050565b610b1a6114af565b610b245f80610835565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917fa466bc069316af563b6a90c9b6f29a97752ac7be7c6bbf3767bc9b16c2fd90eb9190a35050565b606060078054610b82906124c8565b80601f0160208091040260200160405190810160405280929190818152602001828054610bae906124c8565b8015610bf95780601f10610bd057610100808354040283529160200191610bf9565b820191905f5260205f20905b815481529060010190602001808311610bdc57829003601f168201915b5050505050905090565b5f80610c0e60065490565b90508015610c2f57610c2a610c216109e6565b8490835f611593565b610c31565b825b9392505050565b5f33610c458185856115e2565b60019150505b92915050565b5f80610c5c60065490565b90508015610c2f57610c2a81610c706109e6565b8591906001611593565b816001600160a01b038116610ca15760405162461bcd60e51b81526004016108d390612500565b610cab5f80610835565b5f610cb583610da6565b9050610cc133846115ef565b610ccc338583611623565b60408051828152602081018590526001600160a01b0386169133917f5cdf07ad0fc222442720b108e3ed4c4640f0fadc2ab2253e66f259a0fea8348091015b60405180910390a350505050565b5f6109ef61178d565b5f33610d2f8582856117a2565b610d3a85858561181d565b506001949350505050565b610d4f5f80610835565b565b610d5b5f80610835565b610d648161187a565b50565b610d4f3334610835565b806001600160a01b038116610d985760405162461bcd60e51b81526004016108d390612500565b610da28234610835565b5050565b5f610c4b82610c03565b6001600160a01b0381165f90815260026020908152604091829020805483518184028101840190945280845260609392830182828015610e0d57602002820191905f5260205f20905b815481526020019060010190808311610df9575b50505050509050919050565b610e216114af565b610d4f5f6119f1565b6001600160a01b0382165f908152600260205260409020546060908067ffffffffffffffff811115610e5e57610e5e61252a565b604051908082528060200260200182016040528015610e87578160200160208202803683370190505b5091505f805b82811015610f2e576001600160a01b0386165f908152600260205260408120805483908110610ebe57610ebe61253e565b905f5260205f2001549050856005811115610edb57610edb612302565b610ee4826109f4565b6005811115610ef557610ef5612302565b03610f2557808584610f0681612566565b955081518110610f1857610f1861253e565b6020026020010181815250505b50600101610e8d565b5082525092915050565b606060088054610b82906124c8565b6002602052815f5260405f208181548110610f60575f80fd5b905f5260205f20015f91509150505481565b5f33610c4581858561181d565b5f80610f8a60065490565b90508015610c2f57610c2a81610f9e6109e6565b8591905f611593565b610fb15f80610835565b610d6481611a42565b6001600160a01b0381165f90815260046020526040812054610c4b90610da6565b6001600160a01b0381165f90815260046020526040812054610c4b565b611000611b72565b6110455760405162461bcd60e51b81526020600482015260166024820152752932b232b632b3b0ba34b7b7103234b9b0b13632b21760511b60448201526064016108d3565b6110596001600160a01b0383166003611bf3565b61109c5760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21021b729ba30b5b4b733ab199760611b60448201526064016108d3565b6110a65f80610835565b5f6110b082610da6565b90506110bc33836115ef565b6110c68382611e01565b505050565b6110d3611b72565b6111185760405162461bcd60e51b81526020600482015260166024820152752932b232b632b3b0ba34b7b7103234b9b0b13632b21760511b60448201526064016108d3565b61112c6001600160a01b0383166003611bf3565b61116f5760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21021b729ba30b5b4b733ab199760611b60448201526064016108d3565b6111795f80610835565b5f61118382610c51565b905061118f33826115ef565b6110c68383611e01565b5f610c4b82610f7f565b6111ab6114af565b6001600160a01b0381166111d457604051631e4fbdf760e01b81525f60048201526024016108d3565b610d64816119f1565b816001600160a01b0381166112045760405162461bcd60e51b81526004016108d390612500565b61120e5f80610835565b5f61121883610c51565b905061122433826115ef565b61122f338585611623565b60408051848152602081018390526001600160a01b0386169133917f5cdf07ad0fc222442720b108e3ed4c4640f0fadc2ab2253e66f259a0fea834809101610d0b565b6001545f90610c4b90839061271084611593565b5f5461129b906001600160a01b031682611f17565b5f546040518281526001600160a01b03909116907f6c3b15f4a619d5331e4708792bb87f858ffb7a08f1a87aabca7cd15e51e04a639060200160405180910390a250565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663630b11466040518163ffffffff1660e01b8152600401602060405180830381865afa15801561133c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061136091906124b1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634cf088d96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113bc573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113e091906124b1565b03905090565b5f82156113fe576113f98484845f611593565b611400565b835b949350505050565b6001600160a01b0382166114315760405163ec442f0560e01b81525f60048201526024016108d3565b610da25f8383611faa565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c89e4361826040518263ffffffff1660e01b81526004015f604051808303818588803b158015611495575f80fd5b505af11580156114a7573d5f803e3d5ffd5b505050505050565b6009546001600160a01b03163314610d4f5760405163118cdaa760e01b81523360048201526024016108d3565b5f6114e561178d565b6114ed6112df565b01905090565b5f805f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663725c0503866040518263ffffffff1660e01b815260040161154591815260200190565b608060405180830381865afa158015611560573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611584919061257e565b93509350935093509193509193565b5f806115a0868686612016565b90506115ab836120d5565b80156115c657505f84806115c1576115c16125ca565b868809115b156115d9576115d66001826125de565b90505b95945050505050565b6110c68383836001612101565b6001600160a01b03821661161857604051634b637e8f60e11b81525f60048201526024016108d3565b610da2825f83611faa565b5f81116116725760405162461bcd60e51b815260206004820152601d60248201527f5769746864726177616c20616d6f756e7420697320746f6f206c6f772e00000060448201526064016108d3565b604051632efc584d60e11b81526001600160a01b038381166004830152602482018390525f917f000000000000000000000000000000000000000000000000000000000000000090911690635df8b09a906044016020604051808303815f875af11580156116e2573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061170691906124b1565b6001600160a01b038581165f818152600260209081526040808320805460018101825590845282842001869055858352600382529182902080546001600160a01b0319168417905590518681529394508493928716927fd71e6ec4eed83207b08d7ee4a0773c0ff8f8a1ab94b8ce85737fc0c5ea2b5f0c910160405180910390a450505050565b5f478161179982611272565b90910392915050565b6001600160a01b038381165f908152600560209081526040808320938616835292905220545f198114611817578181101561180957604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016108d3565b61181784848484035f612101565b50505050565b6001600160a01b03831661184657604051634b637e8f60e11b81525f60048201526024016108d3565b6001600160a01b03821661186f5760405163ec442f0560e01b81525f60048201526024016108d3565b6110c6838383611faa565b5f818152600360205260409020546001600160a01b031633146118df5760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420746865206f776e6572206f662074686520726571756573742e00000060448201526064016108d3565b604051636e93df0d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e93df0d906024015f604051808303815f87803b15801561193e575f80fd5b505af1158015611950573d5f803e3d5ffd5b505050505f8061195f836114f3565b93505092505060028081111561197757611977612302565b81600281111561198957611989612302565b036119c0575f6119b48361199c60065490565b856119a56114dc565b6119af91906125f1565b6113e6565b90506118173382611408565b604051839033907fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a905f90a3505050565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f818152600360205260409020546001600160a01b03163314611aa75760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420746865206f776e6572206f662074686520726571756573742e00000060448201526064016108d3565b5f611ab1826114f3565b50509150505f611ac082611199565b9050611acc3382611408565b60405163c804b11560e01b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c804b115906024015f604051808303815f87803b158015611b2b575f80fd5b505af1158015611b3d573d5f803e3d5ffd5b50506040518592503391507f853eba293fc3859716cf2e1a34b0c266f8265db181ec04748d0f25b8a19fc80e905f90a3505050565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637a66c96b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bcf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109ef9190612604565b5f826001600160a01b03163b5f03611c0c57505f610c4b565b5f839050806001600160a01b0316634b6a94cc6040518163ffffffff1660e01b81526004015f60405180830381865afa158015611c4b573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611c729190810190612623565b805190602001207fa2f5d64a9f0bcdeed97e196203f5a8c1a5c8293988b625b7925686d30805508214611ca8575f915050610c4b565b82816001600160a01b031663ffa1ad746040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ce5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d0991906124b1565b14611d17575f915050610c4b565b5f816001600160a01b031663139d7fed6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d54573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d7891906126ce565b604051630aabaead60e11b81526001600160a01b03821660048201529091505f90610400906315575d5a90602401606060405180830381865afa158015611dc1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611de591906126e9565b506001600160a01b039081169088161494505050505092915050565b5f8111611e505760405162461bcd60e51b815260206004820152601d60248201527f526564656c656761746520616d6f756e7420697320746f6f206c6f772e00000060448201526064016108d3565b604051631af63e0160e21b81523360048201526001600160a01b038381166024830152604482018390527f00000000000000000000000000000000000000000000000000000000000000001690636bd8f804906064015f604051808303815f87803b158015611ebd575f80fd5b505af1158015611ecf573d5f803e3d5ffd5b50506040518381526001600160a01b03851692503391507f78d93753d5a8009153a294711a82a3d1ba802938d66537c1b9142a053782d6939060200160405180910390a35050565b80471015611f3a5760405163cd78605960e01b81523060048201526024016108d3565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114611f83576040519150601f19603f3d011682016040523d82523d5f602084013e611f88565b606091505b50509050806110c657604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b0383161580611fc757506001600160a01b038216155b61200b5760405162461bcd60e51b81526020600482015260156024820152742a3930b739b332b9103737ba1030b63637bbb2b21760591b60448201526064016108d3565b6110c68383836121c5565b5f838302815f1985870982811083820303915050805f0361204a57838281612040576120406125ca565b0492505050610c31565b80841161206a5760405163227bc15360e01b815260040160405180910390fd5b5f848688095f868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b5f60028260038111156120ea576120ea612302565b6120f49190612733565b60ff166001149050919050565b6001600160a01b03841661212a5760405163e602df0560e01b81525f60048201526024016108d3565b6001600160a01b03831661215357604051634a1406b160e11b81525f60048201526024016108d3565b6001600160a01b038085165f908152600560209081526040808320938716835292905220829055801561181757826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610d0b91815260200190565b6001600160a01b0383166121ef578060065f8282546121e491906125de565b9091555061225f9050565b6001600160a01b0383165f90815260046020526040902054818110156122415760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016108d3565b6001600160a01b0384165f9081526004602052604090209082900390555b6001600160a01b03821661227b57600680548290039055612299565b6001600160a01b0382165f9081526004602052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516122de91815260200190565b60405180910390a3505050565b5f602082840312156122fb575f80fd5b5035919050565b634e487b7160e01b5f52602160045260245ffd5b602081016006831061233657634e487b7160e01b5f52602160045260245ffd5b91905290565b6001600160a01b0381168114610d64575f80fd5b5f60208284031215612360575f80fd5b8135610c318161233c565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f80604083850312156123b1575f80fd5b82356123bc8161233c565b946020939093013593505050565b5f805f606084860312156123dc575f80fd5b83356123e78161233c565b925060208401356123f78161233c565b929592945050506040919091013590565b602080825282518282018190525f9190848201906040850190845b8181101561243f57835183529284019291840191600101612423565b50909695505050505050565b5f806040838503121561245c575f80fd5b82356124678161233c565b915060208301356006811061247a575f80fd5b809150509250929050565b5f8060408385031215612496575f80fd5b82356124a18161233c565b9150602083013561247a8161233c565b5f602082840312156124c1575f80fd5b5051919050565b600181811c908216806124dc57607f821691505b6020821081036124fa57634e487b7160e01b5f52602260045260245ffd5b50919050565b60208082526010908201526f20b2323932b9b99034b990373ab6361760811b604082015260600190565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f6001820161257757612577612552565b5060010190565b5f805f8060808587031215612591575f80fd5b845161259c8161233c565b8094505060208501519250604085015191506060850151600381106125bf575f80fd5b939692955090935050565b634e487b7160e01b5f52601260045260245ffd5b80820180821115610c4b57610c4b612552565b81810381811115610c4b57610c4b612552565b5f60208284031215612614575f80fd5b81518015158114610c31575f80fd5b5f60208284031215612633575f80fd5b815167ffffffffffffffff8082111561264a575f80fd5b818401915084601f83011261265d575f80fd5b81518181111561266f5761266f61252a565b604051601f8201601f19908116603f011681019083821181831017156126975761269761252a565b816040528281528760208487010111156126af575f80fd5b8260208601602083015e5f928101602001929092525095945050505050565b5f602082840312156126de575f80fd5b8151610c318161233c565b5f805f606084860312156126fb575f80fd5b83516127068161233c565b60208501519093506127178161233c565b60408501519092506127288161233c565b809150509250925092565b5f60ff83168061275157634e487b7160e01b5f52601260045260245ffd5b8060ff8416069150509291505056fea2646970667358221220fc04e3c74fec64bb320728f9054b246b1396c6a458c033b73ace2cb1de1f11bd64736f6c63430008190033a26469706673582212209386d2833691e7c506bfccfc151449114487fb14b915335b045a6903eeb2e76964736f6c63430008190033",
}

// PublicDelegationFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use PublicDelegationFactoryMetaData.ABI instead.
var PublicDelegationFactoryABI = PublicDelegationFactoryMetaData.ABI

// PublicDelegationFactoryBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const PublicDelegationFactoryBinRuntime = `608060405234801561000f575f80fd5b506004361061003f575f3560e01c80634b6a94cc14610043578063787821cc14610095578063ffa1ad74146100c0575b5f80fd5b61007f6040518060400160405280601781526020017f5075626c696344656c65676174696f6e466163746f727900000000000000000081525081565b60405161008c919061014b565b60405180910390f35b6100a86100a33660046101ed565b6100d6565b6040516001600160a01b03909116815260200161008c565b6100c8600181565b60405190815260200161008c565b5f33826040516100e590610110565b6100f09291906102d2565b604051809103905ff080158015610109573d5f803e3d5ffd5b5092915050565b612dcb8061032983390190565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f61015d602083018461011d565b9392505050565b634e487b7160e01b5f52604160045260245ffd5b6040516080810167ffffffffffffffff8111828210171561019b5761019b610164565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156101ca576101ca610164565b604052919050565b80356001600160a01b03811681146101e8575f80fd5b919050565b5f60208083850312156101fe575f80fd5b823567ffffffffffffffff80821115610215575f80fd5b9084019060808287031215610228575f80fd5b610230610178565b610239836101d2565b81526102468484016101d2565b8482015260408301356040820152606083013582811115610265575f80fd5b80840193505086601f840112610279575f80fd5b82358281111561028b5761028b610164565b61029d601f8201601f191686016101a1565b925080835287858286010111156102b2575f80fd5b80858501868501375f908301909401939093526060830152509392505050565b5f60018060a01b0380851683526040602084015280845116604084015280602085015116606084015250604083015160808301526060830151608060a084015261031f60c084018261011d565b9594505050505056fe60a060405234801561000f575f80fd5b50604051612dcb380380612dcb83398101604081905261002e91610292565b8051606082015160405161004591906020016103a2565b604051602081830303815290604052826060015160405160200161006991906103da565b60408051601f1981840301815291905260076100858382610480565b5060086100928282610480565b5050506001600160a01b0381166100c357604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6100cc816101ba565b50612710816040015111156101235760405162461bcd60e51b815260206004820152601c60248201527f436f6d6d697373696f6e207261746520697320746f6f20686967682e0000000060448201526064016100ba565b6001600160a01b038281166080526040828101516001556020808401515f80546001600160a01b031916919094161790925580518082018252601081526f283ab13634b1a232b632b3b0ba34b7b760811b92810192909252517f559705a83e2830cb29ab43f78af7f847810ba4a5bff2a637f7e5665ecf8dc55f916101ab918590859061056d565b60405180910390a150506105d7565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b80516001600160a01b0381168114610221575f80fd5b919050565b634e487b7160e01b5f52604160045260245ffd5b604051608081016001600160401b038111828210171561025c5761025c610226565b60405290565b604051601f8201601f191681016001600160401b038111828210171561028a5761028a610226565b604052919050565b5f80604083850312156102a3575f80fd5b6102ac8361020b565b602084810151919350906001600160401b03808211156102ca575f80fd5b90850190608082880312156102dd575f80fd5b6102e561023a565b6102ee8361020b565b81526102fb84840161020b565b848201526040830151604082015260608301518281111561031a575f80fd5b80840193505087601f84011261032e575f80fd5b82518281111561034057610340610226565b610352601f8201601f19168601610262565b92508083528885828601011115610367575f80fd5b808585018685015e5f85828501015250816060820152809450505050509250929050565b5f81518060208401855e5f93019283525090919050565b5f6103ad828461038b565b7f205075626c69632044656c656761746564204b4149410000000000000000000081526016019392505050565b5f6103e5828461038b565b662d70644b41494160c81b81526007019392505050565b600181811c9082168061041057607f821691505b60208210810361042e57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561047b57805f5260205f20601f840160051c810160208510156104595750805b601f840160051c820191505b81811015610478575f8155600101610465565b50505b505050565b81516001600160401b0381111561049957610499610226565b6104ad816104a784546103fc565b84610434565b602080601f8311600181146104e0575f84156104c95750858301515b5f19600386901b1c1916600185901b178555610537565b5f85815260208120601f198616915b8281101561050e578886015182559484019460019091019084016104ef565b508582101561052b57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b606081525f61057f606083018661053f565b60018060a01b038086166020850152838203604085015280855116825280602086015116602083015250604084015160408201526060840151608060608301526105cc608083018261053f565b979650505050505050565b6080516127966106355f395f818161074f01528181610a5f015281816112e2015281816113620152818161143e015281816114f90152818161169a015281816118f501528181611ae201528181611b750152611e7c01526127965ff3fe60806040526004361061026c575f3560e01c80635ea1d6f81161014a578063c804b115116100be578063e659d7d711610078578063e659d7d714610771578063ef8b30f714610790578063f29177c3146107af578063f2fde38b146107e3578063f3fef3a314610802578063ffa1ad7414610821575f80fd5b8063c804b1151461067e578063ce96cb771461069d578063d905777e146106bc578063dd62ed3e146106db578063e15fc3501461071f578063e2c8bde51461073e575f80fd5b806393b89a841161010f57806393b89a84146105ba57806395d89b41146105d957806397feb23c146105ed578063a9059cbb1461060c578063c166c4581461062b578063c6e6f5921461065f575f80fd5b80635ea1d6f81461051457806360df7c6c1461052957806370a0823114610555578063715018a6146105895780638da5cb5b1461059d575f80fd5b8063228cb733116101e1578063379607f5116101a6578063379607f5146104805780633a4b66f11461049f5780633b1dbfcc146103d35780634b6a94cc146104a75780634bf69206146104e25780634cdad506146104f5575f80fd5b8063228cb733146103e857806323b872dd146103fc5780632f9ac83a1461041b578063313ce5671461045157806335faa4161461046c575f80fd5b806307a2d13a1161023257806307a2d13a14610333578063095ea7b3146103525780630a28a4771461038157806318160ddd146103a05780631e9a6950146103b4578063207239c0146103d3575f80fd5b8062fa3d501461028157806301e1d114146102a057806304ddc9d1146102c7578063052028d0146102f357806306fdde0314610312575f80fd5b3661027d5761027b3334610835565b005b5f80fd5b34801561028c575f80fd5b5061027b61029b3660046122eb565b61094a565b3480156102ab575f80fd5b506102b46109e6565b6040519081526020015b60405180910390f35b3480156102d2575f80fd5b506102e66102e13660046122eb565b6109f4565b6040516102be9190612316565b3480156102fe575f80fd5b5061027b61030d366004612350565b610b12565b34801561031d575f80fd5b50610326610b73565b6040516102be919061236b565b34801561033e575f80fd5b506102b461034d3660046122eb565b610c03565b34801561035d575f80fd5b5061037161036c3660046123a0565b610c38565b60405190151581526020016102be565b34801561038c575f80fd5b506102b461039b3660046122eb565b610c51565b3480156103ab575f80fd5b506006546102b4565b3480156103bf575f80fd5b5061027b6103ce3660046123a0565b610c7a565b3480156103de575f80fd5b506102b461271081565b3480156103f3575f80fd5b506102b4610d19565b348015610407575f80fd5b506103716104163660046123ca565b610d22565b348015610426575f80fd5b505f54610439906001600160a01b031681565b6040516001600160a01b0390911681526020016102be565b34801561045c575f80fd5b50604051601281526020016102be565b348015610477575f80fd5b5061027b610d45565b34801561048b575f80fd5b5061027b61049a3660046122eb565b610d51565b61027b610d67565b3480156104b2575f80fd5b506103266040518060400160405280601081526020016f283ab13634b1a232b632b3b0ba34b7b760811b81525081565b61027b6104f0366004612350565b610d71565b348015610500575f80fd5b506102b461050f3660046122eb565b610da6565b34801561051f575f80fd5b506102b460015481565b348015610534575f80fd5b50610548610543366004612350565b610db0565b6040516102be9190612408565b348015610560575f80fd5b506102b461056f366004612350565b6001600160a01b03165f9081526004602052604090205490565b348015610594575f80fd5b5061027b610e19565b3480156105a8575f80fd5b506009546001600160a01b0316610439565b3480156105c5575f80fd5b506105486105d436600461244b565b610e2a565b3480156105e4575f80fd5b50610326610f38565b3480156105f8575f80fd5b506102b46106073660046123a0565b610f47565b348015610617575f80fd5b506103716106263660046123a0565b610f72565b348015610636575f80fd5b506102b4610645366004612350565b6001600160a01b03165f9081526002602052604090205490565b34801561066a575f80fd5b506102b46106793660046122eb565b610f7f565b348015610689575f80fd5b5061027b6106983660046122eb565b610fa7565b3480156106a8575f80fd5b506102b46106b7366004612350565b610fba565b3480156106c7575f80fd5b506102b46106d6366004612350565b610fdb565b3480156106e6575f80fd5b506102b46106f5366004612485565b6001600160a01b039182165f90815260056020908152604080832093909416825291909152205490565b34801561072a575f80fd5b5061027b6107393660046123a0565b610ff8565b348015610749575f80fd5b506104397f000000000000000000000000000000000000000000000000000000000000000081565b34801561077c575f80fd5b5061027b61078b3660046123a0565b6110cb565b34801561079b575f80fd5b506102b46107aa3660046122eb565b611199565b3480156107ba575f80fd5b506104396107c93660046122eb565b60036020525f90815260409020546001600160a01b031681565b3480156107ee575f80fd5b5061027b6107fd366004612350565b6111a3565b34801561080d575f80fd5b5061027b61081c3660046123a0565b6111dd565b34801561082c575f80fd5b506102b4600181565b478190035f61084382611272565b905080156108545761085481611286565b6001600160a01b0384161561092d575f818361086e6112df565b010390505f6108868561088060065490565b846113e6565b90505f81116108dc5760405162461bcd60e51b815260206004820152601860248201527f5374616b6520616d6f756e7420697320746f6f206c6f772e000000000000000060448201526064015b60405180910390fd5b6108e68682611408565b60408051868152602081018390526001600160a01b038816917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a250505b818301818103908214610943576109438161143c565b5050505050565b6109526114af565b6127108111156109a45760405162461bcd60e51b815260206004820152601c60248201527f436f6d6d697373696f6e207261746520697320746f6f20686967682e0000000060448201526064016108d3565b6109ae5f80610835565b6001805490829055604051829082907f67fb2216d844c3553cf557bffa85f0fde0294999f808e61dcae1773d50d5e150905f90a35050565b5f6109ef6114dc565b905090565b5f805f610a00846114f3565b935093505050815f03610a1657505f9392505050565b6002816002811115610a2a57610a2a612302565b03610a39575060059392505050565b6001816002811115610a4d57610a4d612302565b03610a5c575060039392505050565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166396106ae46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610add91906124b1565b8301905082421015610af457506001949350505050565b80421015610b0757506002949350505050565b506004949350505050565b610b1a6114af565b610b245f80610835565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917fa466bc069316af563b6a90c9b6f29a97752ac7be7c6bbf3767bc9b16c2fd90eb9190a35050565b606060078054610b82906124c8565b80601f0160208091040260200160405190810160405280929190818152602001828054610bae906124c8565b8015610bf95780601f10610bd057610100808354040283529160200191610bf9565b820191905f5260205f20905b815481529060010190602001808311610bdc57829003601f168201915b5050505050905090565b5f80610c0e60065490565b90508015610c2f57610c2a610c216109e6565b8490835f611593565b610c31565b825b9392505050565b5f33610c458185856115e2565b60019150505b92915050565b5f80610c5c60065490565b90508015610c2f57610c2a81610c706109e6565b8591906001611593565b816001600160a01b038116610ca15760405162461bcd60e51b81526004016108d390612500565b610cab5f80610835565b5f610cb583610da6565b9050610cc133846115ef565b610ccc338583611623565b60408051828152602081018590526001600160a01b0386169133917f5cdf07ad0fc222442720b108e3ed4c4640f0fadc2ab2253e66f259a0fea8348091015b60405180910390a350505050565b5f6109ef61178d565b5f33610d2f8582856117a2565b610d3a85858561181d565b506001949350505050565b610d4f5f80610835565b565b610d5b5f80610835565b610d648161187a565b50565b610d4f3334610835565b806001600160a01b038116610d985760405162461bcd60e51b81526004016108d390612500565b610da28234610835565b5050565b5f610c4b82610c03565b6001600160a01b0381165f90815260026020908152604091829020805483518184028101840190945280845260609392830182828015610e0d57602002820191905f5260205f20905b815481526020019060010190808311610df9575b50505050509050919050565b610e216114af565b610d4f5f6119f1565b6001600160a01b0382165f908152600260205260409020546060908067ffffffffffffffff811115610e5e57610e5e61252a565b604051908082528060200260200182016040528015610e87578160200160208202803683370190505b5091505f805b82811015610f2e576001600160a01b0386165f908152600260205260408120805483908110610ebe57610ebe61253e565b905f5260205f2001549050856005811115610edb57610edb612302565b610ee4826109f4565b6005811115610ef557610ef5612302565b03610f2557808584610f0681612566565b955081518110610f1857610f1861253e565b6020026020010181815250505b50600101610e8d565b5082525092915050565b606060088054610b82906124c8565b6002602052815f5260405f208181548110610f60575f80fd5b905f5260205f20015f91509150505481565b5f33610c4581858561181d565b5f80610f8a60065490565b90508015610c2f57610c2a81610f9e6109e6565b8591905f611593565b610fb15f80610835565b610d6481611a42565b6001600160a01b0381165f90815260046020526040812054610c4b90610da6565b6001600160a01b0381165f90815260046020526040812054610c4b565b611000611b72565b6110455760405162461bcd60e51b81526020600482015260166024820152752932b232b632b3b0ba34b7b7103234b9b0b13632b21760511b60448201526064016108d3565b6110596001600160a01b0383166003611bf3565b61109c5760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21021b729ba30b5b4b733ab199760611b60448201526064016108d3565b6110a65f80610835565b5f6110b082610da6565b90506110bc33836115ef565b6110c68382611e01565b505050565b6110d3611b72565b6111185760405162461bcd60e51b81526020600482015260166024820152752932b232b632b3b0ba34b7b7103234b9b0b13632b21760511b60448201526064016108d3565b61112c6001600160a01b0383166003611bf3565b61116f5760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21021b729ba30b5b4b733ab199760611b60448201526064016108d3565b6111795f80610835565b5f61118382610c51565b905061118f33826115ef565b6110c68383611e01565b5f610c4b82610f7f565b6111ab6114af565b6001600160a01b0381166111d457604051631e4fbdf760e01b81525f60048201526024016108d3565b610d64816119f1565b816001600160a01b0381166112045760405162461bcd60e51b81526004016108d390612500565b61120e5f80610835565b5f61121883610c51565b905061122433826115ef565b61122f338585611623565b60408051848152602081018390526001600160a01b0386169133917f5cdf07ad0fc222442720b108e3ed4c4640f0fadc2ab2253e66f259a0fea834809101610d0b565b6001545f90610c4b90839061271084611593565b5f5461129b906001600160a01b031682611f17565b5f546040518281526001600160a01b03909116907f6c3b15f4a619d5331e4708792bb87f858ffb7a08f1a87aabca7cd15e51e04a639060200160405180910390a250565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663630b11466040518163ffffffff1660e01b8152600401602060405180830381865afa15801561133c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061136091906124b1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634cf088d96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113bc573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113e091906124b1565b03905090565b5f82156113fe576113f98484845f611593565b611400565b835b949350505050565b6001600160a01b0382166114315760405163ec442f0560e01b81525f60048201526024016108d3565b610da25f8383611faa565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c89e4361826040518263ffffffff1660e01b81526004015f604051808303818588803b158015611495575f80fd5b505af11580156114a7573d5f803e3d5ffd5b505050505050565b6009546001600160a01b03163314610d4f5760405163118cdaa760e01b81523360048201526024016108d3565b5f6114e561178d565b6114ed6112df565b01905090565b5f805f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663725c0503866040518263ffffffff1660e01b815260040161154591815260200190565b608060405180830381865afa158015611560573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611584919061257e565b93509350935093509193509193565b5f806115a0868686612016565b90506115ab836120d5565b80156115c657505f84806115c1576115c16125ca565b868809115b156115d9576115d66001826125de565b90505b95945050505050565b6110c68383836001612101565b6001600160a01b03821661161857604051634b637e8f60e11b81525f60048201526024016108d3565b610da2825f83611faa565b5f81116116725760405162461bcd60e51b815260206004820152601d60248201527f5769746864726177616c20616d6f756e7420697320746f6f206c6f772e00000060448201526064016108d3565b604051632efc584d60e11b81526001600160a01b038381166004830152602482018390525f917f000000000000000000000000000000000000000000000000000000000000000090911690635df8b09a906044016020604051808303815f875af11580156116e2573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061170691906124b1565b6001600160a01b038581165f818152600260209081526040808320805460018101825590845282842001869055858352600382529182902080546001600160a01b0319168417905590518681529394508493928716927fd71e6ec4eed83207b08d7ee4a0773c0ff8f8a1ab94b8ce85737fc0c5ea2b5f0c910160405180910390a450505050565b5f478161179982611272565b90910392915050565b6001600160a01b038381165f908152600560209081526040808320938616835292905220545f198114611817578181101561180957604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016108d3565b61181784848484035f612101565b50505050565b6001600160a01b03831661184657604051634b637e8f60e11b81525f60048201526024016108d3565b6001600160a01b03821661186f5760405163ec442f0560e01b81525f60048201526024016108d3565b6110c6838383611faa565b5f818152600360205260409020546001600160a01b031633146118df5760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420746865206f776e6572206f662074686520726571756573742e00000060448201526064016108d3565b604051636e93df0d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e93df0d906024015f604051808303815f87803b15801561193e575f80fd5b505af1158015611950573d5f803e3d5ffd5b505050505f8061195f836114f3565b93505092505060028081111561197757611977612302565b81600281111561198957611989612302565b036119c0575f6119b48361199c60065490565b856119a56114dc565b6119af91906125f1565b6113e6565b90506118173382611408565b604051839033907fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a905f90a3505050565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f818152600360205260409020546001600160a01b03163314611aa75760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420746865206f776e6572206f662074686520726571756573742e00000060448201526064016108d3565b5f611ab1826114f3565b50509150505f611ac082611199565b9050611acc3382611408565b60405163c804b11560e01b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c804b115906024015f604051808303815f87803b158015611b2b575f80fd5b505af1158015611b3d573d5f803e3d5ffd5b50506040518592503391507f853eba293fc3859716cf2e1a34b0c266f8265db181ec04748d0f25b8a19fc80e905f90a3505050565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637a66c96b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bcf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109ef9190612604565b5f826001600160a01b03163b5f03611c0c57505f610c4b565b5f839050806001600160a01b0316634b6a94cc6040518163ffffffff1660e01b81526004015f60405180830381865afa158015611c4b573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611c729190810190612623565b805190602001207fa2f5d64a9f0bcdeed97e196203f5a8c1a5c8293988b625b7925686d30805508214611ca8575f915050610c4b565b82816001600160a01b031663ffa1ad746040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ce5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d0991906124b1565b14611d17575f915050610c4b565b5f816001600160a01b031663139d7fed6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d54573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d7891906126ce565b604051630aabaead60e11b81526001600160a01b03821660048201529091505f90610400906315575d5a90602401606060405180830381865afa158015611dc1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611de591906126e9565b506001600160a01b039081169088161494505050505092915050565b5f8111611e505760405162461bcd60e51b815260206004820152601d60248201527f526564656c656761746520616d6f756e7420697320746f6f206c6f772e00000060448201526064016108d3565b604051631af63e0160e21b81523360048201526001600160a01b038381166024830152604482018390527f00000000000000000000000000000000000000000000000000000000000000001690636bd8f804906064015f604051808303815f87803b158015611ebd575f80fd5b505af1158015611ecf573d5f803e3d5ffd5b50506040518381526001600160a01b03851692503391507f78d93753d5a8009153a294711a82a3d1ba802938d66537c1b9142a053782d6939060200160405180910390a35050565b80471015611f3a5760405163cd78605960e01b81523060048201526024016108d3565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114611f83576040519150601f19603f3d011682016040523d82523d5f602084013e611f88565b606091505b50509050806110c657604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b0383161580611fc757506001600160a01b038216155b61200b5760405162461bcd60e51b81526020600482015260156024820152742a3930b739b332b9103737ba1030b63637bbb2b21760591b60448201526064016108d3565b6110c68383836121c5565b5f838302815f1985870982811083820303915050805f0361204a57838281612040576120406125ca565b0492505050610c31565b80841161206a5760405163227bc15360e01b815260040160405180910390fd5b5f848688095f868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b5f60028260038111156120ea576120ea612302565b6120f49190612733565b60ff166001149050919050565b6001600160a01b03841661212a5760405163e602df0560e01b81525f60048201526024016108d3565b6001600160a01b03831661215357604051634a1406b160e11b81525f60048201526024016108d3565b6001600160a01b038085165f908152600560209081526040808320938716835292905220829055801561181757826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610d0b91815260200190565b6001600160a01b0383166121ef578060065f8282546121e491906125de565b9091555061225f9050565b6001600160a01b0383165f90815260046020526040902054818110156122415760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016108d3565b6001600160a01b0384165f9081526004602052604090209082900390555b6001600160a01b03821661227b57600680548290039055612299565b6001600160a01b0382165f9081526004602052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516122de91815260200190565b60405180910390a3505050565b5f602082840312156122fb575f80fd5b5035919050565b634e487b7160e01b5f52602160045260245ffd5b602081016006831061233657634e487b7160e01b5f52602160045260245ffd5b91905290565b6001600160a01b0381168114610d64575f80fd5b5f60208284031215612360575f80fd5b8135610c318161233c565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f80604083850312156123b1575f80fd5b82356123bc8161233c565b946020939093013593505050565b5f805f606084860312156123dc575f80fd5b83356123e78161233c565b925060208401356123f78161233c565b929592945050506040919091013590565b602080825282518282018190525f9190848201906040850190845b8181101561243f57835183529284019291840191600101612423565b50909695505050505050565b5f806040838503121561245c575f80fd5b82356124678161233c565b915060208301356006811061247a575f80fd5b809150509250929050565b5f8060408385031215612496575f80fd5b82356124a18161233c565b9150602083013561247a8161233c565b5f602082840312156124c1575f80fd5b5051919050565b600181811c908216806124dc57607f821691505b6020821081036124fa57634e487b7160e01b5f52602260045260245ffd5b50919050565b60208082526010908201526f20b2323932b9b99034b990373ab6361760811b604082015260600190565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f6001820161257757612577612552565b5060010190565b5f805f8060808587031215612591575f80fd5b845161259c8161233c565b8094505060208501519250604085015191506060850151600381106125bf575f80fd5b939692955090935050565b634e487b7160e01b5f52601260045260245ffd5b80820180821115610c4b57610c4b612552565b81810381811115610c4b57610c4b612552565b5f60208284031215612614575f80fd5b81518015158114610c31575f80fd5b5f60208284031215612633575f80fd5b815167ffffffffffffffff8082111561264a575f80fd5b818401915084601f83011261265d575f80fd5b81518181111561266f5761266f61252a565b604051601f8201601f19908116603f011681019083821181831017156126975761269761252a565b816040528281528760208487010111156126af575f80fd5b8260208601602083015e5f928101602001929092525095945050505050565b5f602082840312156126de575f80fd5b8151610c318161233c565b5f805f606084860312156126fb575f80fd5b83516127068161233c565b60208501519093506127178161233c565b60408501519092506127288161233c565b809150509250925092565b5f60ff83168061275157634e487b7160e01b5f52601260045260245ffd5b8060ff8416069150509291505056fea2646970667358221220fc04e3c74fec64bb320728f9054b246b1396c6a458c033b73ace2cb1de1f11bd64736f6c63430008190033a26469706673582212209386d2833691e7c506bfccfc151449114487fb14b915335b045a6903eeb2e76964736f6c63430008190033`

// Deprecated: Use PublicDelegationFactoryMetaData.Sigs instead.
// PublicDelegationFactoryFuncSigs maps the 4-byte function signature to its string representation.
var PublicDelegationFactoryFuncSigs = PublicDelegationFactoryMetaData.Sigs

// PublicDelegationFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PublicDelegationFactoryMetaData.Bin instead.
var PublicDelegationFactoryBin = PublicDelegationFactoryMetaData.Bin

// DeployPublicDelegationFactory deploys a new Kaia contract, binding an instance of PublicDelegationFactory to it.
func DeployPublicDelegationFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PublicDelegationFactory, error) {
	parsed, err := PublicDelegationFactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PublicDelegationFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PublicDelegationFactory{PublicDelegationFactoryCaller: PublicDelegationFactoryCaller{contract: contract}, PublicDelegationFactoryTransactor: PublicDelegationFactoryTransactor{contract: contract}, PublicDelegationFactoryFilterer: PublicDelegationFactoryFilterer{contract: contract}}, nil
}

// PublicDelegationFactory is an auto generated Go binding around a Kaia contract.
type PublicDelegationFactory struct {
	PublicDelegationFactoryCaller     // Read-only binding to the contract
	PublicDelegationFactoryTransactor // Write-only binding to the contract
	PublicDelegationFactoryFilterer   // Log filterer for contract events
}

// PublicDelegationFactoryCaller is an auto generated read-only Go binding around a Kaia contract.
type PublicDelegationFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PublicDelegationFactoryTransactor is an auto generated write-only Go binding around a Kaia contract.
type PublicDelegationFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PublicDelegationFactoryFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type PublicDelegationFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PublicDelegationFactorySession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type PublicDelegationFactorySession struct {
	Contract     *PublicDelegationFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// PublicDelegationFactoryCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type PublicDelegationFactoryCallerSession struct {
	Contract *PublicDelegationFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// PublicDelegationFactoryTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type PublicDelegationFactoryTransactorSession struct {
	Contract     *PublicDelegationFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// PublicDelegationFactoryRaw is an auto generated low-level Go binding around a Kaia contract.
type PublicDelegationFactoryRaw struct {
	Contract *PublicDelegationFactory // Generic contract binding to access the raw methods on
}

// PublicDelegationFactoryCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type PublicDelegationFactoryCallerRaw struct {
	Contract *PublicDelegationFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// PublicDelegationFactoryTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type PublicDelegationFactoryTransactorRaw struct {
	Contract *PublicDelegationFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPublicDelegationFactory creates a new instance of PublicDelegationFactory, bound to a specific deployed contract.
func NewPublicDelegationFactory(address common.Address, backend bind.ContractBackend) (*PublicDelegationFactory, error) {
	contract, err := bindPublicDelegationFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationFactory{PublicDelegationFactoryCaller: PublicDelegationFactoryCaller{contract: contract}, PublicDelegationFactoryTransactor: PublicDelegationFactoryTransactor{contract: contract}, PublicDelegationFactoryFilterer: PublicDelegationFactoryFilterer{contract: contract}}, nil
}

// NewPublicDelegationFactoryCaller creates a new read-only instance of PublicDelegationFactory, bound to a specific deployed contract.
func NewPublicDelegationFactoryCaller(address common.Address, caller bind.ContractCaller) (*PublicDelegationFactoryCaller, error) {
	contract, err := bindPublicDelegationFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationFactoryCaller{contract: contract}, nil
}

// NewPublicDelegationFactoryTransactor creates a new write-only instance of PublicDelegationFactory, bound to a specific deployed contract.
func NewPublicDelegationFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*PublicDelegationFactoryTransactor, error) {
	contract, err := bindPublicDelegationFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationFactoryTransactor{contract: contract}, nil
}

// NewPublicDelegationFactoryFilterer creates a new log filterer instance of PublicDelegationFactory, bound to a specific deployed contract.
func NewPublicDelegationFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*PublicDelegationFactoryFilterer, error) {
	contract, err := bindPublicDelegationFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationFactoryFilterer{contract: contract}, nil
}

// bindPublicDelegationFactory binds a generic wrapper to an already deployed contract.
func bindPublicDelegationFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PublicDelegationFactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PublicDelegationFactory *PublicDelegationFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PublicDelegationFactory.Contract.PublicDelegationFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PublicDelegationFactory *PublicDelegationFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PublicDelegationFactory.Contract.PublicDelegationFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PublicDelegationFactory *PublicDelegationFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PublicDelegationFactory.Contract.PublicDelegationFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PublicDelegationFactory *PublicDelegationFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PublicDelegationFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PublicDelegationFactory *PublicDelegationFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PublicDelegationFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PublicDelegationFactory *PublicDelegationFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PublicDelegationFactory.Contract.contract.Transact(opts, method, params...)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_PublicDelegationFactory *PublicDelegationFactoryCaller) CONTRACTTYPE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _PublicDelegationFactory.contract.Call(opts, &out, "CONTRACT_TYPE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_PublicDelegationFactory *PublicDelegationFactorySession) CONTRACTTYPE() (string, error) {
	return _PublicDelegationFactory.Contract.CONTRACTTYPE(&_PublicDelegationFactory.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_PublicDelegationFactory *PublicDelegationFactoryCallerSession) CONTRACTTYPE() (string, error) {
	return _PublicDelegationFactory.Contract.CONTRACTTYPE(&_PublicDelegationFactory.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_PublicDelegationFactory *PublicDelegationFactoryCaller) VERSION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegationFactory.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_PublicDelegationFactory *PublicDelegationFactorySession) VERSION() (*big.Int, error) {
	return _PublicDelegationFactory.Contract.VERSION(&_PublicDelegationFactory.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_PublicDelegationFactory *PublicDelegationFactoryCallerSession) VERSION() (*big.Int, error) {
	return _PublicDelegationFactory.Contract.VERSION(&_PublicDelegationFactory.CallOpts)
}

// DeployPublicDelegation is a paid mutator transaction binding the contract method 0x787821cc.
//
// Solidity: function deployPublicDelegation((address,address,uint256,string) _pdArgs) returns(address publicDelegation)
func (_PublicDelegationFactory *PublicDelegationFactoryTransactor) DeployPublicDelegation(opts *bind.TransactOpts, _pdArgs IPublicDelegationPDConstructorArgs) (*types.Transaction, error) {
	return _PublicDelegationFactory.contract.Transact(opts, "deployPublicDelegation", _pdArgs)
}

// DeployPublicDelegation is a paid mutator transaction binding the contract method 0x787821cc.
//
// Solidity: function deployPublicDelegation((address,address,uint256,string) _pdArgs) returns(address publicDelegation)
func (_PublicDelegationFactory *PublicDelegationFactorySession) DeployPublicDelegation(_pdArgs IPublicDelegationPDConstructorArgs) (*types.Transaction, error) {
	return _PublicDelegationFactory.Contract.DeployPublicDelegation(&_PublicDelegationFactory.TransactOpts, _pdArgs)
}

// DeployPublicDelegation is a paid mutator transaction binding the contract method 0x787821cc.
//
// Solidity: function deployPublicDelegation((address,address,uint256,string) _pdArgs) returns(address publicDelegation)
func (_PublicDelegationFactory *PublicDelegationFactoryTransactorSession) DeployPublicDelegation(_pdArgs IPublicDelegationPDConstructorArgs) (*types.Transaction, error) {
	return _PublicDelegationFactory.Contract.DeployPublicDelegation(&_PublicDelegationFactory.TransactOpts, _pdArgs)
}

// PublicDelegationStorageMetaData contains all meta data concerning the PublicDelegationStorage contract.
var PublicDelegationStorageMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_contractType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_baseCnStakingV3\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"commissionTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"gcName\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"structIPublicDelegation.PDConstructorArgs\",\"name\":\"_pdArgs\",\"type\":\"tuple\"}],\"name\":\"DeployContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_targetCnV3\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"Redelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"RequestCancelWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"RequestWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_commissionTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"SendCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_prevCommissionRate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"name\":\"UpdateCommissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_prevCommissionTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_commissionTo\",\"type\":\"address\"}],\"name\":\"UpdateCommissionTo\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMMISSION_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_COMMISSION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseCnStakingV3\",\"outputs\":[{\"internalType\":\"contractICnStakingV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"cancelApprovedStakingWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getCurrentWithdrawalRequestState\",\"outputs\":[{\"internalType\":\"enumIPublicDelegation.WithdrawalRequestState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getUserRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getUserRequestIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"enumIPublicDelegation.WithdrawalRequestState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"getUserRequestIdsWithState\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetCnV3\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"redelegateByAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetCnV3\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"redelegateByShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIdToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\"}],\"name\":\"updateCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_commissionTo\",\"type\":\"address\"}],\"name\":\"updateCommissionTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRequestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Sigs: map[string]string{
		"3b1dbfcc": "COMMISSION_DENOMINATOR()",
		"4b6a94cc": "CONTRACT_TYPE()",
		"207239c0": "MAX_COMMISSION_RATE()",
		"ffa1ad74": "VERSION()",
		"e2c8bde5": "baseCnStakingV3()",
		"c804b115": "cancelApprovedStakingWithdrawal(uint256)",
		"379607f5": "claim(uint256)",
		"5ea1d6f8": "commissionRate()",
		"2f9ac83a": "commissionTo()",
		"07a2d13a": "convertToAssets(uint256)",
		"c6e6f592": "convertToShares(uint256)",
		"04ddc9d1": "getCurrentWithdrawalRequestState(uint256)",
		"c166c458": "getUserRequestCount(address)",
		"60df7c6c": "getUserRequestIds(address)",
		"93b89a84": "getUserRequestIdsWithState(address,uint8)",
		"d905777e": "maxRedeem(address)",
		"ce96cb77": "maxWithdraw(address)",
		"ef8b30f7": "previewDeposit(uint256)",
		"4cdad506": "previewRedeem(uint256)",
		"0a28a477": "previewWithdraw(uint256)",
		"1e9a6950": "redeem(address,uint256)",
		"e659d7d7": "redelegateByAssets(address,uint256)",
		"e15fc350": "redelegateByShares(address,uint256)",
		"f29177c3": "requestIdToOwner(uint256)",
		"228cb733": "reward()",
		"3a4b66f1": "stake()",
		"4bf69206": "stakeFor(address)",
		"35faa416": "sweep()",
		"01e1d114": "totalAssets()",
		"00fa3d50": "updateCommissionRate(uint256)",
		"052028d0": "updateCommissionTo(address)",
		"97feb23c": "userRequestIds(address,uint256)",
		"f3fef3a3": "withdraw(address,uint256)",
	},
}

// PublicDelegationStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use PublicDelegationStorageMetaData.ABI instead.
var PublicDelegationStorageABI = PublicDelegationStorageMetaData.ABI

// PublicDelegationStorageBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const PublicDelegationStorageBinRuntime = ``

// Deprecated: Use PublicDelegationStorageMetaData.Sigs instead.
// PublicDelegationStorageFuncSigs maps the 4-byte function signature to its string representation.
var PublicDelegationStorageFuncSigs = PublicDelegationStorageMetaData.Sigs

// PublicDelegationStorage is an auto generated Go binding around a Kaia contract.
type PublicDelegationStorage struct {
	PublicDelegationStorageCaller     // Read-only binding to the contract
	PublicDelegationStorageTransactor // Write-only binding to the contract
	PublicDelegationStorageFilterer   // Log filterer for contract events
}

// PublicDelegationStorageCaller is an auto generated read-only Go binding around a Kaia contract.
type PublicDelegationStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PublicDelegationStorageTransactor is an auto generated write-only Go binding around a Kaia contract.
type PublicDelegationStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PublicDelegationStorageFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type PublicDelegationStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PublicDelegationStorageSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type PublicDelegationStorageSession struct {
	Contract     *PublicDelegationStorage // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// PublicDelegationStorageCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type PublicDelegationStorageCallerSession struct {
	Contract *PublicDelegationStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// PublicDelegationStorageTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type PublicDelegationStorageTransactorSession struct {
	Contract     *PublicDelegationStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// PublicDelegationStorageRaw is an auto generated low-level Go binding around a Kaia contract.
type PublicDelegationStorageRaw struct {
	Contract *PublicDelegationStorage // Generic contract binding to access the raw methods on
}

// PublicDelegationStorageCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type PublicDelegationStorageCallerRaw struct {
	Contract *PublicDelegationStorageCaller // Generic read-only contract binding to access the raw methods on
}

// PublicDelegationStorageTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type PublicDelegationStorageTransactorRaw struct {
	Contract *PublicDelegationStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPublicDelegationStorage creates a new instance of PublicDelegationStorage, bound to a specific deployed contract.
func NewPublicDelegationStorage(address common.Address, backend bind.ContractBackend) (*PublicDelegationStorage, error) {
	contract, err := bindPublicDelegationStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationStorage{PublicDelegationStorageCaller: PublicDelegationStorageCaller{contract: contract}, PublicDelegationStorageTransactor: PublicDelegationStorageTransactor{contract: contract}, PublicDelegationStorageFilterer: PublicDelegationStorageFilterer{contract: contract}}, nil
}

// NewPublicDelegationStorageCaller creates a new read-only instance of PublicDelegationStorage, bound to a specific deployed contract.
func NewPublicDelegationStorageCaller(address common.Address, caller bind.ContractCaller) (*PublicDelegationStorageCaller, error) {
	contract, err := bindPublicDelegationStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationStorageCaller{contract: contract}, nil
}

// NewPublicDelegationStorageTransactor creates a new write-only instance of PublicDelegationStorage, bound to a specific deployed contract.
func NewPublicDelegationStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*PublicDelegationStorageTransactor, error) {
	contract, err := bindPublicDelegationStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationStorageTransactor{contract: contract}, nil
}

// NewPublicDelegationStorageFilterer creates a new log filterer instance of PublicDelegationStorage, bound to a specific deployed contract.
func NewPublicDelegationStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*PublicDelegationStorageFilterer, error) {
	contract, err := bindPublicDelegationStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationStorageFilterer{contract: contract}, nil
}

// bindPublicDelegationStorage binds a generic wrapper to an already deployed contract.
func bindPublicDelegationStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PublicDelegationStorageMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PublicDelegationStorage *PublicDelegationStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PublicDelegationStorage.Contract.PublicDelegationStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PublicDelegationStorage *PublicDelegationStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.PublicDelegationStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PublicDelegationStorage *PublicDelegationStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.PublicDelegationStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PublicDelegationStorage *PublicDelegationStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PublicDelegationStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PublicDelegationStorage *PublicDelegationStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PublicDelegationStorage *PublicDelegationStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.contract.Transact(opts, method, params...)
}

// COMMISSIONDENOMINATOR is a free data retrieval call binding the contract method 0x3b1dbfcc.
//
// Solidity: function COMMISSION_DENOMINATOR() view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCaller) COMMISSIONDENOMINATOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "COMMISSION_DENOMINATOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMISSIONDENOMINATOR is a free data retrieval call binding the contract method 0x3b1dbfcc.
//
// Solidity: function COMMISSION_DENOMINATOR() view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageSession) COMMISSIONDENOMINATOR() (*big.Int, error) {
	return _PublicDelegationStorage.Contract.COMMISSIONDENOMINATOR(&_PublicDelegationStorage.CallOpts)
}

// COMMISSIONDENOMINATOR is a free data retrieval call binding the contract method 0x3b1dbfcc.
//
// Solidity: function COMMISSION_DENOMINATOR() view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) COMMISSIONDENOMINATOR() (*big.Int, error) {
	return _PublicDelegationStorage.Contract.COMMISSIONDENOMINATOR(&_PublicDelegationStorage.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_PublicDelegationStorage *PublicDelegationStorageCaller) CONTRACTTYPE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "CONTRACT_TYPE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_PublicDelegationStorage *PublicDelegationStorageSession) CONTRACTTYPE() (string, error) {
	return _PublicDelegationStorage.Contract.CONTRACTTYPE(&_PublicDelegationStorage.CallOpts)
}

// CONTRACTTYPE is a free data retrieval call binding the contract method 0x4b6a94cc.
//
// Solidity: function CONTRACT_TYPE() view returns(string)
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) CONTRACTTYPE() (string, error) {
	return _PublicDelegationStorage.Contract.CONTRACTTYPE(&_PublicDelegationStorage.CallOpts)
}

// MAXCOMMISSIONRATE is a free data retrieval call binding the contract method 0x207239c0.
//
// Solidity: function MAX_COMMISSION_RATE() view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCaller) MAXCOMMISSIONRATE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "MAX_COMMISSION_RATE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXCOMMISSIONRATE is a free data retrieval call binding the contract method 0x207239c0.
//
// Solidity: function MAX_COMMISSION_RATE() view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageSession) MAXCOMMISSIONRATE() (*big.Int, error) {
	return _PublicDelegationStorage.Contract.MAXCOMMISSIONRATE(&_PublicDelegationStorage.CallOpts)
}

// MAXCOMMISSIONRATE is a free data retrieval call binding the contract method 0x207239c0.
//
// Solidity: function MAX_COMMISSION_RATE() view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) MAXCOMMISSIONRATE() (*big.Int, error) {
	return _PublicDelegationStorage.Contract.MAXCOMMISSIONRATE(&_PublicDelegationStorage.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCaller) VERSION(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageSession) VERSION() (*big.Int, error) {
	return _PublicDelegationStorage.Contract.VERSION(&_PublicDelegationStorage.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) VERSION() (*big.Int, error) {
	return _PublicDelegationStorage.Contract.VERSION(&_PublicDelegationStorage.CallOpts)
}

// BaseCnStakingV3 is a free data retrieval call binding the contract method 0xe2c8bde5.
//
// Solidity: function baseCnStakingV3() view returns(address)
func (_PublicDelegationStorage *PublicDelegationStorageCaller) BaseCnStakingV3(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "baseCnStakingV3")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BaseCnStakingV3 is a free data retrieval call binding the contract method 0xe2c8bde5.
//
// Solidity: function baseCnStakingV3() view returns(address)
func (_PublicDelegationStorage *PublicDelegationStorageSession) BaseCnStakingV3() (common.Address, error) {
	return _PublicDelegationStorage.Contract.BaseCnStakingV3(&_PublicDelegationStorage.CallOpts)
}

// BaseCnStakingV3 is a free data retrieval call binding the contract method 0xe2c8bde5.
//
// Solidity: function baseCnStakingV3() view returns(address)
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) BaseCnStakingV3() (common.Address, error) {
	return _PublicDelegationStorage.Contract.BaseCnStakingV3(&_PublicDelegationStorage.CallOpts)
}

// CommissionRate is a free data retrieval call binding the contract method 0x5ea1d6f8.
//
// Solidity: function commissionRate() view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCaller) CommissionRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "commissionRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CommissionRate is a free data retrieval call binding the contract method 0x5ea1d6f8.
//
// Solidity: function commissionRate() view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageSession) CommissionRate() (*big.Int, error) {
	return _PublicDelegationStorage.Contract.CommissionRate(&_PublicDelegationStorage.CallOpts)
}

// CommissionRate is a free data retrieval call binding the contract method 0x5ea1d6f8.
//
// Solidity: function commissionRate() view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) CommissionRate() (*big.Int, error) {
	return _PublicDelegationStorage.Contract.CommissionRate(&_PublicDelegationStorage.CallOpts)
}

// CommissionTo is a free data retrieval call binding the contract method 0x2f9ac83a.
//
// Solidity: function commissionTo() view returns(address)
func (_PublicDelegationStorage *PublicDelegationStorageCaller) CommissionTo(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "commissionTo")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CommissionTo is a free data retrieval call binding the contract method 0x2f9ac83a.
//
// Solidity: function commissionTo() view returns(address)
func (_PublicDelegationStorage *PublicDelegationStorageSession) CommissionTo() (common.Address, error) {
	return _PublicDelegationStorage.Contract.CommissionTo(&_PublicDelegationStorage.CallOpts)
}

// CommissionTo is a free data retrieval call binding the contract method 0x2f9ac83a.
//
// Solidity: function commissionTo() view returns(address)
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) CommissionTo() (common.Address, error) {
	return _PublicDelegationStorage.Contract.CommissionTo(&_PublicDelegationStorage.CallOpts)
}

// ConvertToAssets is a free data retrieval call binding the contract method 0x07a2d13a.
//
// Solidity: function convertToAssets(uint256 _shares) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCaller) ConvertToAssets(opts *bind.CallOpts, _shares *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "convertToAssets", _shares)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ConvertToAssets is a free data retrieval call binding the contract method 0x07a2d13a.
//
// Solidity: function convertToAssets(uint256 _shares) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageSession) ConvertToAssets(_shares *big.Int) (*big.Int, error) {
	return _PublicDelegationStorage.Contract.ConvertToAssets(&_PublicDelegationStorage.CallOpts, _shares)
}

// ConvertToAssets is a free data retrieval call binding the contract method 0x07a2d13a.
//
// Solidity: function convertToAssets(uint256 _shares) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) ConvertToAssets(_shares *big.Int) (*big.Int, error) {
	return _PublicDelegationStorage.Contract.ConvertToAssets(&_PublicDelegationStorage.CallOpts, _shares)
}

// ConvertToShares is a free data retrieval call binding the contract method 0xc6e6f592.
//
// Solidity: function convertToShares(uint256 _assets) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCaller) ConvertToShares(opts *bind.CallOpts, _assets *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "convertToShares", _assets)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ConvertToShares is a free data retrieval call binding the contract method 0xc6e6f592.
//
// Solidity: function convertToShares(uint256 _assets) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageSession) ConvertToShares(_assets *big.Int) (*big.Int, error) {
	return _PublicDelegationStorage.Contract.ConvertToShares(&_PublicDelegationStorage.CallOpts, _assets)
}

// ConvertToShares is a free data retrieval call binding the contract method 0xc6e6f592.
//
// Solidity: function convertToShares(uint256 _assets) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) ConvertToShares(_assets *big.Int) (*big.Int, error) {
	return _PublicDelegationStorage.Contract.ConvertToShares(&_PublicDelegationStorage.CallOpts, _assets)
}

// GetCurrentWithdrawalRequestState is a free data retrieval call binding the contract method 0x04ddc9d1.
//
// Solidity: function getCurrentWithdrawalRequestState(uint256 _requestId) view returns(uint8)
func (_PublicDelegationStorage *PublicDelegationStorageCaller) GetCurrentWithdrawalRequestState(opts *bind.CallOpts, _requestId *big.Int) (uint8, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "getCurrentWithdrawalRequestState", _requestId)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetCurrentWithdrawalRequestState is a free data retrieval call binding the contract method 0x04ddc9d1.
//
// Solidity: function getCurrentWithdrawalRequestState(uint256 _requestId) view returns(uint8)
func (_PublicDelegationStorage *PublicDelegationStorageSession) GetCurrentWithdrawalRequestState(_requestId *big.Int) (uint8, error) {
	return _PublicDelegationStorage.Contract.GetCurrentWithdrawalRequestState(&_PublicDelegationStorage.CallOpts, _requestId)
}

// GetCurrentWithdrawalRequestState is a free data retrieval call binding the contract method 0x04ddc9d1.
//
// Solidity: function getCurrentWithdrawalRequestState(uint256 _requestId) view returns(uint8)
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) GetCurrentWithdrawalRequestState(_requestId *big.Int) (uint8, error) {
	return _PublicDelegationStorage.Contract.GetCurrentWithdrawalRequestState(&_PublicDelegationStorage.CallOpts, _requestId)
}

// GetUserRequestCount is a free data retrieval call binding the contract method 0xc166c458.
//
// Solidity: function getUserRequestCount(address _owner) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCaller) GetUserRequestCount(opts *bind.CallOpts, _owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "getUserRequestCount", _owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUserRequestCount is a free data retrieval call binding the contract method 0xc166c458.
//
// Solidity: function getUserRequestCount(address _owner) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageSession) GetUserRequestCount(_owner common.Address) (*big.Int, error) {
	return _PublicDelegationStorage.Contract.GetUserRequestCount(&_PublicDelegationStorage.CallOpts, _owner)
}

// GetUserRequestCount is a free data retrieval call binding the contract method 0xc166c458.
//
// Solidity: function getUserRequestCount(address _owner) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) GetUserRequestCount(_owner common.Address) (*big.Int, error) {
	return _PublicDelegationStorage.Contract.GetUserRequestCount(&_PublicDelegationStorage.CallOpts, _owner)
}

// GetUserRequestIds is a free data retrieval call binding the contract method 0x60df7c6c.
//
// Solidity: function getUserRequestIds(address _owner) view returns(uint256[])
func (_PublicDelegationStorage *PublicDelegationStorageCaller) GetUserRequestIds(opts *bind.CallOpts, _owner common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "getUserRequestIds", _owner)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetUserRequestIds is a free data retrieval call binding the contract method 0x60df7c6c.
//
// Solidity: function getUserRequestIds(address _owner) view returns(uint256[])
func (_PublicDelegationStorage *PublicDelegationStorageSession) GetUserRequestIds(_owner common.Address) ([]*big.Int, error) {
	return _PublicDelegationStorage.Contract.GetUserRequestIds(&_PublicDelegationStorage.CallOpts, _owner)
}

// GetUserRequestIds is a free data retrieval call binding the contract method 0x60df7c6c.
//
// Solidity: function getUserRequestIds(address _owner) view returns(uint256[])
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) GetUserRequestIds(_owner common.Address) ([]*big.Int, error) {
	return _PublicDelegationStorage.Contract.GetUserRequestIds(&_PublicDelegationStorage.CallOpts, _owner)
}

// GetUserRequestIdsWithState is a free data retrieval call binding the contract method 0x93b89a84.
//
// Solidity: function getUserRequestIdsWithState(address _owner, uint8 _state) view returns(uint256[])
func (_PublicDelegationStorage *PublicDelegationStorageCaller) GetUserRequestIdsWithState(opts *bind.CallOpts, _owner common.Address, _state uint8) ([]*big.Int, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "getUserRequestIdsWithState", _owner, _state)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetUserRequestIdsWithState is a free data retrieval call binding the contract method 0x93b89a84.
//
// Solidity: function getUserRequestIdsWithState(address _owner, uint8 _state) view returns(uint256[])
func (_PublicDelegationStorage *PublicDelegationStorageSession) GetUserRequestIdsWithState(_owner common.Address, _state uint8) ([]*big.Int, error) {
	return _PublicDelegationStorage.Contract.GetUserRequestIdsWithState(&_PublicDelegationStorage.CallOpts, _owner, _state)
}

// GetUserRequestIdsWithState is a free data retrieval call binding the contract method 0x93b89a84.
//
// Solidity: function getUserRequestIdsWithState(address _owner, uint8 _state) view returns(uint256[])
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) GetUserRequestIdsWithState(_owner common.Address, _state uint8) ([]*big.Int, error) {
	return _PublicDelegationStorage.Contract.GetUserRequestIdsWithState(&_PublicDelegationStorage.CallOpts, _owner, _state)
}

// MaxRedeem is a free data retrieval call binding the contract method 0xd905777e.
//
// Solidity: function maxRedeem(address _owner) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCaller) MaxRedeem(opts *bind.CallOpts, _owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "maxRedeem", _owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxRedeem is a free data retrieval call binding the contract method 0xd905777e.
//
// Solidity: function maxRedeem(address _owner) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageSession) MaxRedeem(_owner common.Address) (*big.Int, error) {
	return _PublicDelegationStorage.Contract.MaxRedeem(&_PublicDelegationStorage.CallOpts, _owner)
}

// MaxRedeem is a free data retrieval call binding the contract method 0xd905777e.
//
// Solidity: function maxRedeem(address _owner) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) MaxRedeem(_owner common.Address) (*big.Int, error) {
	return _PublicDelegationStorage.Contract.MaxRedeem(&_PublicDelegationStorage.CallOpts, _owner)
}

// MaxWithdraw is a free data retrieval call binding the contract method 0xce96cb77.
//
// Solidity: function maxWithdraw(address _owner) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCaller) MaxWithdraw(opts *bind.CallOpts, _owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "maxWithdraw", _owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxWithdraw is a free data retrieval call binding the contract method 0xce96cb77.
//
// Solidity: function maxWithdraw(address _owner) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageSession) MaxWithdraw(_owner common.Address) (*big.Int, error) {
	return _PublicDelegationStorage.Contract.MaxWithdraw(&_PublicDelegationStorage.CallOpts, _owner)
}

// MaxWithdraw is a free data retrieval call binding the contract method 0xce96cb77.
//
// Solidity: function maxWithdraw(address _owner) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) MaxWithdraw(_owner common.Address) (*big.Int, error) {
	return _PublicDelegationStorage.Contract.MaxWithdraw(&_PublicDelegationStorage.CallOpts, _owner)
}

// PreviewDeposit is a free data retrieval call binding the contract method 0xef8b30f7.
//
// Solidity: function previewDeposit(uint256 _assets) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCaller) PreviewDeposit(opts *bind.CallOpts, _assets *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "previewDeposit", _assets)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PreviewDeposit is a free data retrieval call binding the contract method 0xef8b30f7.
//
// Solidity: function previewDeposit(uint256 _assets) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageSession) PreviewDeposit(_assets *big.Int) (*big.Int, error) {
	return _PublicDelegationStorage.Contract.PreviewDeposit(&_PublicDelegationStorage.CallOpts, _assets)
}

// PreviewDeposit is a free data retrieval call binding the contract method 0xef8b30f7.
//
// Solidity: function previewDeposit(uint256 _assets) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) PreviewDeposit(_assets *big.Int) (*big.Int, error) {
	return _PublicDelegationStorage.Contract.PreviewDeposit(&_PublicDelegationStorage.CallOpts, _assets)
}

// PreviewRedeem is a free data retrieval call binding the contract method 0x4cdad506.
//
// Solidity: function previewRedeem(uint256 _shares) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCaller) PreviewRedeem(opts *bind.CallOpts, _shares *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "previewRedeem", _shares)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PreviewRedeem is a free data retrieval call binding the contract method 0x4cdad506.
//
// Solidity: function previewRedeem(uint256 _shares) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageSession) PreviewRedeem(_shares *big.Int) (*big.Int, error) {
	return _PublicDelegationStorage.Contract.PreviewRedeem(&_PublicDelegationStorage.CallOpts, _shares)
}

// PreviewRedeem is a free data retrieval call binding the contract method 0x4cdad506.
//
// Solidity: function previewRedeem(uint256 _shares) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) PreviewRedeem(_shares *big.Int) (*big.Int, error) {
	return _PublicDelegationStorage.Contract.PreviewRedeem(&_PublicDelegationStorage.CallOpts, _shares)
}

// PreviewWithdraw is a free data retrieval call binding the contract method 0x0a28a477.
//
// Solidity: function previewWithdraw(uint256 _assets) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCaller) PreviewWithdraw(opts *bind.CallOpts, _assets *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "previewWithdraw", _assets)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PreviewWithdraw is a free data retrieval call binding the contract method 0x0a28a477.
//
// Solidity: function previewWithdraw(uint256 _assets) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageSession) PreviewWithdraw(_assets *big.Int) (*big.Int, error) {
	return _PublicDelegationStorage.Contract.PreviewWithdraw(&_PublicDelegationStorage.CallOpts, _assets)
}

// PreviewWithdraw is a free data retrieval call binding the contract method 0x0a28a477.
//
// Solidity: function previewWithdraw(uint256 _assets) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) PreviewWithdraw(_assets *big.Int) (*big.Int, error) {
	return _PublicDelegationStorage.Contract.PreviewWithdraw(&_PublicDelegationStorage.CallOpts, _assets)
}

// RequestIdToOwner is a free data retrieval call binding the contract method 0xf29177c3.
//
// Solidity: function requestIdToOwner(uint256 ) view returns(address)
func (_PublicDelegationStorage *PublicDelegationStorageCaller) RequestIdToOwner(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "requestIdToOwner", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RequestIdToOwner is a free data retrieval call binding the contract method 0xf29177c3.
//
// Solidity: function requestIdToOwner(uint256 ) view returns(address)
func (_PublicDelegationStorage *PublicDelegationStorageSession) RequestIdToOwner(arg0 *big.Int) (common.Address, error) {
	return _PublicDelegationStorage.Contract.RequestIdToOwner(&_PublicDelegationStorage.CallOpts, arg0)
}

// RequestIdToOwner is a free data retrieval call binding the contract method 0xf29177c3.
//
// Solidity: function requestIdToOwner(uint256 ) view returns(address)
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) RequestIdToOwner(arg0 *big.Int) (common.Address, error) {
	return _PublicDelegationStorage.Contract.RequestIdToOwner(&_PublicDelegationStorage.CallOpts, arg0)
}

// Reward is a free data retrieval call binding the contract method 0x228cb733.
//
// Solidity: function reward() view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCaller) Reward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "reward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Reward is a free data retrieval call binding the contract method 0x228cb733.
//
// Solidity: function reward() view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageSession) Reward() (*big.Int, error) {
	return _PublicDelegationStorage.Contract.Reward(&_PublicDelegationStorage.CallOpts)
}

// Reward is a free data retrieval call binding the contract method 0x228cb733.
//
// Solidity: function reward() view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) Reward() (*big.Int, error) {
	return _PublicDelegationStorage.Contract.Reward(&_PublicDelegationStorage.CallOpts)
}

// TotalAssets is a free data retrieval call binding the contract method 0x01e1d114.
//
// Solidity: function totalAssets() view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCaller) TotalAssets(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "totalAssets")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalAssets is a free data retrieval call binding the contract method 0x01e1d114.
//
// Solidity: function totalAssets() view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageSession) TotalAssets() (*big.Int, error) {
	return _PublicDelegationStorage.Contract.TotalAssets(&_PublicDelegationStorage.CallOpts)
}

// TotalAssets is a free data retrieval call binding the contract method 0x01e1d114.
//
// Solidity: function totalAssets() view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) TotalAssets() (*big.Int, error) {
	return _PublicDelegationStorage.Contract.TotalAssets(&_PublicDelegationStorage.CallOpts)
}

// UserRequestIds is a free data retrieval call binding the contract method 0x97feb23c.
//
// Solidity: function userRequestIds(address , uint256 ) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCaller) UserRequestIds(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PublicDelegationStorage.contract.Call(opts, &out, "userRequestIds", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UserRequestIds is a free data retrieval call binding the contract method 0x97feb23c.
//
// Solidity: function userRequestIds(address , uint256 ) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageSession) UserRequestIds(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _PublicDelegationStorage.Contract.UserRequestIds(&_PublicDelegationStorage.CallOpts, arg0, arg1)
}

// UserRequestIds is a free data retrieval call binding the contract method 0x97feb23c.
//
// Solidity: function userRequestIds(address , uint256 ) view returns(uint256)
func (_PublicDelegationStorage *PublicDelegationStorageCallerSession) UserRequestIds(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _PublicDelegationStorage.Contract.UserRequestIds(&_PublicDelegationStorage.CallOpts, arg0, arg1)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _requestId) returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactor) CancelApprovedStakingWithdrawal(opts *bind.TransactOpts, _requestId *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.contract.Transact(opts, "cancelApprovedStakingWithdrawal", _requestId)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _requestId) returns()
func (_PublicDelegationStorage *PublicDelegationStorageSession) CancelApprovedStakingWithdrawal(_requestId *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.CancelApprovedStakingWithdrawal(&_PublicDelegationStorage.TransactOpts, _requestId)
}

// CancelApprovedStakingWithdrawal is a paid mutator transaction binding the contract method 0xc804b115.
//
// Solidity: function cancelApprovedStakingWithdrawal(uint256 _requestId) returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactorSession) CancelApprovedStakingWithdrawal(_requestId *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.CancelApprovedStakingWithdrawal(&_PublicDelegationStorage.TransactOpts, _requestId)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 _requestId) returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactor) Claim(opts *bind.TransactOpts, _requestId *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.contract.Transact(opts, "claim", _requestId)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 _requestId) returns()
func (_PublicDelegationStorage *PublicDelegationStorageSession) Claim(_requestId *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.Claim(&_PublicDelegationStorage.TransactOpts, _requestId)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 _requestId) returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactorSession) Claim(_requestId *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.Claim(&_PublicDelegationStorage.TransactOpts, _requestId)
}

// Redeem is a paid mutator transaction binding the contract method 0x1e9a6950.
//
// Solidity: function redeem(address _recipient, uint256 _shares) returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactor) Redeem(opts *bind.TransactOpts, _recipient common.Address, _shares *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.contract.Transact(opts, "redeem", _recipient, _shares)
}

// Redeem is a paid mutator transaction binding the contract method 0x1e9a6950.
//
// Solidity: function redeem(address _recipient, uint256 _shares) returns()
func (_PublicDelegationStorage *PublicDelegationStorageSession) Redeem(_recipient common.Address, _shares *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.Redeem(&_PublicDelegationStorage.TransactOpts, _recipient, _shares)
}

// Redeem is a paid mutator transaction binding the contract method 0x1e9a6950.
//
// Solidity: function redeem(address _recipient, uint256 _shares) returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactorSession) Redeem(_recipient common.Address, _shares *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.Redeem(&_PublicDelegationStorage.TransactOpts, _recipient, _shares)
}

// RedelegateByAssets is a paid mutator transaction binding the contract method 0xe659d7d7.
//
// Solidity: function redelegateByAssets(address _targetCnV3, uint256 _assets) returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactor) RedelegateByAssets(opts *bind.TransactOpts, _targetCnV3 common.Address, _assets *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.contract.Transact(opts, "redelegateByAssets", _targetCnV3, _assets)
}

// RedelegateByAssets is a paid mutator transaction binding the contract method 0xe659d7d7.
//
// Solidity: function redelegateByAssets(address _targetCnV3, uint256 _assets) returns()
func (_PublicDelegationStorage *PublicDelegationStorageSession) RedelegateByAssets(_targetCnV3 common.Address, _assets *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.RedelegateByAssets(&_PublicDelegationStorage.TransactOpts, _targetCnV3, _assets)
}

// RedelegateByAssets is a paid mutator transaction binding the contract method 0xe659d7d7.
//
// Solidity: function redelegateByAssets(address _targetCnV3, uint256 _assets) returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactorSession) RedelegateByAssets(_targetCnV3 common.Address, _assets *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.RedelegateByAssets(&_PublicDelegationStorage.TransactOpts, _targetCnV3, _assets)
}

// RedelegateByShares is a paid mutator transaction binding the contract method 0xe15fc350.
//
// Solidity: function redelegateByShares(address _targetCnV3, uint256 _shares) returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactor) RedelegateByShares(opts *bind.TransactOpts, _targetCnV3 common.Address, _shares *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.contract.Transact(opts, "redelegateByShares", _targetCnV3, _shares)
}

// RedelegateByShares is a paid mutator transaction binding the contract method 0xe15fc350.
//
// Solidity: function redelegateByShares(address _targetCnV3, uint256 _shares) returns()
func (_PublicDelegationStorage *PublicDelegationStorageSession) RedelegateByShares(_targetCnV3 common.Address, _shares *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.RedelegateByShares(&_PublicDelegationStorage.TransactOpts, _targetCnV3, _shares)
}

// RedelegateByShares is a paid mutator transaction binding the contract method 0xe15fc350.
//
// Solidity: function redelegateByShares(address _targetCnV3, uint256 _shares) returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactorSession) RedelegateByShares(_targetCnV3 common.Address, _shares *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.RedelegateByShares(&_PublicDelegationStorage.TransactOpts, _targetCnV3, _shares)
}

// Stake is a paid mutator transaction binding the contract method 0x3a4b66f1.
//
// Solidity: function stake() payable returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactor) Stake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PublicDelegationStorage.contract.Transact(opts, "stake")
}

// Stake is a paid mutator transaction binding the contract method 0x3a4b66f1.
//
// Solidity: function stake() payable returns()
func (_PublicDelegationStorage *PublicDelegationStorageSession) Stake() (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.Stake(&_PublicDelegationStorage.TransactOpts)
}

// Stake is a paid mutator transaction binding the contract method 0x3a4b66f1.
//
// Solidity: function stake() payable returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactorSession) Stake() (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.Stake(&_PublicDelegationStorage.TransactOpts)
}

// StakeFor is a paid mutator transaction binding the contract method 0x4bf69206.
//
// Solidity: function stakeFor(address _recipient) payable returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactor) StakeFor(opts *bind.TransactOpts, _recipient common.Address) (*types.Transaction, error) {
	return _PublicDelegationStorage.contract.Transact(opts, "stakeFor", _recipient)
}

// StakeFor is a paid mutator transaction binding the contract method 0x4bf69206.
//
// Solidity: function stakeFor(address _recipient) payable returns()
func (_PublicDelegationStorage *PublicDelegationStorageSession) StakeFor(_recipient common.Address) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.StakeFor(&_PublicDelegationStorage.TransactOpts, _recipient)
}

// StakeFor is a paid mutator transaction binding the contract method 0x4bf69206.
//
// Solidity: function stakeFor(address _recipient) payable returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactorSession) StakeFor(_recipient common.Address) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.StakeFor(&_PublicDelegationStorage.TransactOpts, _recipient)
}

// Sweep is a paid mutator transaction binding the contract method 0x35faa416.
//
// Solidity: function sweep() returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactor) Sweep(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PublicDelegationStorage.contract.Transact(opts, "sweep")
}

// Sweep is a paid mutator transaction binding the contract method 0x35faa416.
//
// Solidity: function sweep() returns()
func (_PublicDelegationStorage *PublicDelegationStorageSession) Sweep() (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.Sweep(&_PublicDelegationStorage.TransactOpts)
}

// Sweep is a paid mutator transaction binding the contract method 0x35faa416.
//
// Solidity: function sweep() returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactorSession) Sweep() (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.Sweep(&_PublicDelegationStorage.TransactOpts)
}

// UpdateCommissionRate is a paid mutator transaction binding the contract method 0x00fa3d50.
//
// Solidity: function updateCommissionRate(uint256 _commissionRate) returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactor) UpdateCommissionRate(opts *bind.TransactOpts, _commissionRate *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.contract.Transact(opts, "updateCommissionRate", _commissionRate)
}

// UpdateCommissionRate is a paid mutator transaction binding the contract method 0x00fa3d50.
//
// Solidity: function updateCommissionRate(uint256 _commissionRate) returns()
func (_PublicDelegationStorage *PublicDelegationStorageSession) UpdateCommissionRate(_commissionRate *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.UpdateCommissionRate(&_PublicDelegationStorage.TransactOpts, _commissionRate)
}

// UpdateCommissionRate is a paid mutator transaction binding the contract method 0x00fa3d50.
//
// Solidity: function updateCommissionRate(uint256 _commissionRate) returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactorSession) UpdateCommissionRate(_commissionRate *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.UpdateCommissionRate(&_PublicDelegationStorage.TransactOpts, _commissionRate)
}

// UpdateCommissionTo is a paid mutator transaction binding the contract method 0x052028d0.
//
// Solidity: function updateCommissionTo(address _commissionTo) returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactor) UpdateCommissionTo(opts *bind.TransactOpts, _commissionTo common.Address) (*types.Transaction, error) {
	return _PublicDelegationStorage.contract.Transact(opts, "updateCommissionTo", _commissionTo)
}

// UpdateCommissionTo is a paid mutator transaction binding the contract method 0x052028d0.
//
// Solidity: function updateCommissionTo(address _commissionTo) returns()
func (_PublicDelegationStorage *PublicDelegationStorageSession) UpdateCommissionTo(_commissionTo common.Address) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.UpdateCommissionTo(&_PublicDelegationStorage.TransactOpts, _commissionTo)
}

// UpdateCommissionTo is a paid mutator transaction binding the contract method 0x052028d0.
//
// Solidity: function updateCommissionTo(address _commissionTo) returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactorSession) UpdateCommissionTo(_commissionTo common.Address) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.UpdateCommissionTo(&_PublicDelegationStorage.TransactOpts, _commissionTo)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _recipient, uint256 _assets) returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactor) Withdraw(opts *bind.TransactOpts, _recipient common.Address, _assets *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.contract.Transact(opts, "withdraw", _recipient, _assets)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _recipient, uint256 _assets) returns()
func (_PublicDelegationStorage *PublicDelegationStorageSession) Withdraw(_recipient common.Address, _assets *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.Withdraw(&_PublicDelegationStorage.TransactOpts, _recipient, _assets)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _recipient, uint256 _assets) returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactorSession) Withdraw(_recipient common.Address, _assets *big.Int) (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.Withdraw(&_PublicDelegationStorage.TransactOpts, _recipient, _assets)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PublicDelegationStorage.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_PublicDelegationStorage *PublicDelegationStorageSession) Receive() (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.Receive(&_PublicDelegationStorage.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_PublicDelegationStorage *PublicDelegationStorageTransactorSession) Receive() (*types.Transaction, error) {
	return _PublicDelegationStorage.Contract.Receive(&_PublicDelegationStorage.TransactOpts)
}

// PublicDelegationStorageClaimedIterator is returned from FilterClaimed and is used to iterate over the raw logs and unpacked data for Claimed events raised by the PublicDelegationStorage contract.
type PublicDelegationStorageClaimedIterator struct {
	Event *PublicDelegationStorageClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationStorageClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationStorageClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationStorageClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationStorageClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationStorageClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationStorageClaimed represents a Claimed event raised by the PublicDelegationStorage contract.
type PublicDelegationStorageClaimed struct {
	User      common.Address
	RequestId *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterClaimed is a free log retrieval operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address indexed _user, uint256 indexed _requestId)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) FilterClaimed(opts *bind.FilterOpts, _user []common.Address, _requestId []*big.Int) (*PublicDelegationStorageClaimedIterator, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _requestIdRule []interface{}
	for _, _requestIdItem := range _requestId {
		_requestIdRule = append(_requestIdRule, _requestIdItem)
	}

	logs, sub, err := _PublicDelegationStorage.contract.FilterLogs(opts, "Claimed", _userRule, _requestIdRule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationStorageClaimedIterator{contract: _PublicDelegationStorage.contract, event: "Claimed", logs: logs, sub: sub}, nil
}

// WatchClaimed is a free log subscription operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address indexed _user, uint256 indexed _requestId)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) WatchClaimed(opts *bind.WatchOpts, sink chan<- *PublicDelegationStorageClaimed, _user []common.Address, _requestId []*big.Int) (event.Subscription, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _requestIdRule []interface{}
	for _, _requestIdItem := range _requestId {
		_requestIdRule = append(_requestIdRule, _requestIdItem)
	}

	logs, sub, err := _PublicDelegationStorage.contract.WatchLogs(opts, "Claimed", _userRule, _requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationStorageClaimed)
				if err := _PublicDelegationStorage.contract.UnpackLog(event, "Claimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimed is a log parse operation binding the contract event 0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a.
//
// Solidity: event Claimed(address indexed _user, uint256 indexed _requestId)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) ParseClaimed(log types.Log) (*PublicDelegationStorageClaimed, error) {
	event := new(PublicDelegationStorageClaimed)
	if err := _PublicDelegationStorage.contract.UnpackLog(event, "Claimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationStorageDeployContractIterator is returned from FilterDeployContract and is used to iterate over the raw logs and unpacked data for DeployContract events raised by the PublicDelegationStorage contract.
type PublicDelegationStorageDeployContractIterator struct {
	Event *PublicDelegationStorageDeployContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationStorageDeployContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationStorageDeployContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationStorageDeployContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationStorageDeployContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationStorageDeployContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationStorageDeployContract represents a DeployContract event raised by the PublicDelegationStorage contract.
type PublicDelegationStorageDeployContract struct {
	ContractType    string
	BaseCnStakingV3 common.Address
	PdArgs          IPublicDelegationPDConstructorArgs
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDeployContract is a free log retrieval operation binding the contract event 0x559705a83e2830cb29ab43f78af7f847810ba4a5bff2a637f7e5665ecf8dc55f.
//
// Solidity: event DeployContract(string _contractType, address _baseCnStakingV3, (address,address,uint256,string) _pdArgs)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) FilterDeployContract(opts *bind.FilterOpts) (*PublicDelegationStorageDeployContractIterator, error) {

	logs, sub, err := _PublicDelegationStorage.contract.FilterLogs(opts, "DeployContract")
	if err != nil {
		return nil, err
	}
	return &PublicDelegationStorageDeployContractIterator{contract: _PublicDelegationStorage.contract, event: "DeployContract", logs: logs, sub: sub}, nil
}

// WatchDeployContract is a free log subscription operation binding the contract event 0x559705a83e2830cb29ab43f78af7f847810ba4a5bff2a637f7e5665ecf8dc55f.
//
// Solidity: event DeployContract(string _contractType, address _baseCnStakingV3, (address,address,uint256,string) _pdArgs)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) WatchDeployContract(opts *bind.WatchOpts, sink chan<- *PublicDelegationStorageDeployContract) (event.Subscription, error) {

	logs, sub, err := _PublicDelegationStorage.contract.WatchLogs(opts, "DeployContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationStorageDeployContract)
				if err := _PublicDelegationStorage.contract.UnpackLog(event, "DeployContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployContract is a log parse operation binding the contract event 0x559705a83e2830cb29ab43f78af7f847810ba4a5bff2a637f7e5665ecf8dc55f.
//
// Solidity: event DeployContract(string _contractType, address _baseCnStakingV3, (address,address,uint256,string) _pdArgs)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) ParseDeployContract(log types.Log) (*PublicDelegationStorageDeployContract, error) {
	event := new(PublicDelegationStorageDeployContract)
	if err := _PublicDelegationStorage.contract.UnpackLog(event, "DeployContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationStorageRedeemedIterator is returned from FilterRedeemed and is used to iterate over the raw logs and unpacked data for Redeemed events raised by the PublicDelegationStorage contract.
type PublicDelegationStorageRedeemedIterator struct {
	Event *PublicDelegationStorageRedeemed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationStorageRedeemedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationStorageRedeemed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationStorageRedeemed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationStorageRedeemedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationStorageRedeemedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationStorageRedeemed represents a Redeemed event raised by the PublicDelegationStorage contract.
type PublicDelegationStorageRedeemed struct {
	User      common.Address
	Recipient common.Address
	Assets    *big.Int
	Shares    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRedeemed is a free log retrieval operation binding the contract event 0x5cdf07ad0fc222442720b108e3ed4c4640f0fadc2ab2253e66f259a0fea83480.
//
// Solidity: event Redeemed(address indexed _user, address indexed _recipient, uint256 _assets, uint256 _shares)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) FilterRedeemed(opts *bind.FilterOpts, _user []common.Address, _recipient []common.Address) (*PublicDelegationStorageRedeemedIterator, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _recipientRule []interface{}
	for _, _recipientItem := range _recipient {
		_recipientRule = append(_recipientRule, _recipientItem)
	}

	logs, sub, err := _PublicDelegationStorage.contract.FilterLogs(opts, "Redeemed", _userRule, _recipientRule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationStorageRedeemedIterator{contract: _PublicDelegationStorage.contract, event: "Redeemed", logs: logs, sub: sub}, nil
}

// WatchRedeemed is a free log subscription operation binding the contract event 0x5cdf07ad0fc222442720b108e3ed4c4640f0fadc2ab2253e66f259a0fea83480.
//
// Solidity: event Redeemed(address indexed _user, address indexed _recipient, uint256 _assets, uint256 _shares)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) WatchRedeemed(opts *bind.WatchOpts, sink chan<- *PublicDelegationStorageRedeemed, _user []common.Address, _recipient []common.Address) (event.Subscription, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _recipientRule []interface{}
	for _, _recipientItem := range _recipient {
		_recipientRule = append(_recipientRule, _recipientItem)
	}

	logs, sub, err := _PublicDelegationStorage.contract.WatchLogs(opts, "Redeemed", _userRule, _recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationStorageRedeemed)
				if err := _PublicDelegationStorage.contract.UnpackLog(event, "Redeemed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemed is a log parse operation binding the contract event 0x5cdf07ad0fc222442720b108e3ed4c4640f0fadc2ab2253e66f259a0fea83480.
//
// Solidity: event Redeemed(address indexed _user, address indexed _recipient, uint256 _assets, uint256 _shares)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) ParseRedeemed(log types.Log) (*PublicDelegationStorageRedeemed, error) {
	event := new(PublicDelegationStorageRedeemed)
	if err := _PublicDelegationStorage.contract.UnpackLog(event, "Redeemed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationStorageRedelegatedIterator is returned from FilterRedelegated and is used to iterate over the raw logs and unpacked data for Redelegated events raised by the PublicDelegationStorage contract.
type PublicDelegationStorageRedelegatedIterator struct {
	Event *PublicDelegationStorageRedelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationStorageRedelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationStorageRedelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationStorageRedelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationStorageRedelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationStorageRedelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationStorageRedelegated represents a Redelegated event raised by the PublicDelegationStorage contract.
type PublicDelegationStorageRedelegated struct {
	User       common.Address
	TargetCnV3 common.Address
	Assets     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRedelegated is a free log retrieval operation binding the contract event 0x78d93753d5a8009153a294711a82a3d1ba802938d66537c1b9142a053782d693.
//
// Solidity: event Redelegated(address indexed _user, address indexed _targetCnV3, uint256 _assets)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) FilterRedelegated(opts *bind.FilterOpts, _user []common.Address, _targetCnV3 []common.Address) (*PublicDelegationStorageRedelegatedIterator, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _targetCnV3Rule []interface{}
	for _, _targetCnV3Item := range _targetCnV3 {
		_targetCnV3Rule = append(_targetCnV3Rule, _targetCnV3Item)
	}

	logs, sub, err := _PublicDelegationStorage.contract.FilterLogs(opts, "Redelegated", _userRule, _targetCnV3Rule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationStorageRedelegatedIterator{contract: _PublicDelegationStorage.contract, event: "Redelegated", logs: logs, sub: sub}, nil
}

// WatchRedelegated is a free log subscription operation binding the contract event 0x78d93753d5a8009153a294711a82a3d1ba802938d66537c1b9142a053782d693.
//
// Solidity: event Redelegated(address indexed _user, address indexed _targetCnV3, uint256 _assets)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) WatchRedelegated(opts *bind.WatchOpts, sink chan<- *PublicDelegationStorageRedelegated, _user []common.Address, _targetCnV3 []common.Address) (event.Subscription, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _targetCnV3Rule []interface{}
	for _, _targetCnV3Item := range _targetCnV3 {
		_targetCnV3Rule = append(_targetCnV3Rule, _targetCnV3Item)
	}

	logs, sub, err := _PublicDelegationStorage.contract.WatchLogs(opts, "Redelegated", _userRule, _targetCnV3Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationStorageRedelegated)
				if err := _PublicDelegationStorage.contract.UnpackLog(event, "Redelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedelegated is a log parse operation binding the contract event 0x78d93753d5a8009153a294711a82a3d1ba802938d66537c1b9142a053782d693.
//
// Solidity: event Redelegated(address indexed _user, address indexed _targetCnV3, uint256 _assets)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) ParseRedelegated(log types.Log) (*PublicDelegationStorageRedelegated, error) {
	event := new(PublicDelegationStorageRedelegated)
	if err := _PublicDelegationStorage.contract.UnpackLog(event, "Redelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationStorageRequestCancelWithdrawalIterator is returned from FilterRequestCancelWithdrawal and is used to iterate over the raw logs and unpacked data for RequestCancelWithdrawal events raised by the PublicDelegationStorage contract.
type PublicDelegationStorageRequestCancelWithdrawalIterator struct {
	Event *PublicDelegationStorageRequestCancelWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationStorageRequestCancelWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationStorageRequestCancelWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationStorageRequestCancelWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationStorageRequestCancelWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationStorageRequestCancelWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationStorageRequestCancelWithdrawal represents a RequestCancelWithdrawal event raised by the PublicDelegationStorage contract.
type PublicDelegationStorageRequestCancelWithdrawal struct {
	User      common.Address
	RequestId *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRequestCancelWithdrawal is a free log retrieval operation binding the contract event 0x853eba293fc3859716cf2e1a34b0c266f8265db181ec04748d0f25b8a19fc80e.
//
// Solidity: event RequestCancelWithdrawal(address indexed _user, uint256 indexed _requestId)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) FilterRequestCancelWithdrawal(opts *bind.FilterOpts, _user []common.Address, _requestId []*big.Int) (*PublicDelegationStorageRequestCancelWithdrawalIterator, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _requestIdRule []interface{}
	for _, _requestIdItem := range _requestId {
		_requestIdRule = append(_requestIdRule, _requestIdItem)
	}

	logs, sub, err := _PublicDelegationStorage.contract.FilterLogs(opts, "RequestCancelWithdrawal", _userRule, _requestIdRule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationStorageRequestCancelWithdrawalIterator{contract: _PublicDelegationStorage.contract, event: "RequestCancelWithdrawal", logs: logs, sub: sub}, nil
}

// WatchRequestCancelWithdrawal is a free log subscription operation binding the contract event 0x853eba293fc3859716cf2e1a34b0c266f8265db181ec04748d0f25b8a19fc80e.
//
// Solidity: event RequestCancelWithdrawal(address indexed _user, uint256 indexed _requestId)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) WatchRequestCancelWithdrawal(opts *bind.WatchOpts, sink chan<- *PublicDelegationStorageRequestCancelWithdrawal, _user []common.Address, _requestId []*big.Int) (event.Subscription, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _requestIdRule []interface{}
	for _, _requestIdItem := range _requestId {
		_requestIdRule = append(_requestIdRule, _requestIdItem)
	}

	logs, sub, err := _PublicDelegationStorage.contract.WatchLogs(opts, "RequestCancelWithdrawal", _userRule, _requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationStorageRequestCancelWithdrawal)
				if err := _PublicDelegationStorage.contract.UnpackLog(event, "RequestCancelWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestCancelWithdrawal is a log parse operation binding the contract event 0x853eba293fc3859716cf2e1a34b0c266f8265db181ec04748d0f25b8a19fc80e.
//
// Solidity: event RequestCancelWithdrawal(address indexed _user, uint256 indexed _requestId)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) ParseRequestCancelWithdrawal(log types.Log) (*PublicDelegationStorageRequestCancelWithdrawal, error) {
	event := new(PublicDelegationStorageRequestCancelWithdrawal)
	if err := _PublicDelegationStorage.contract.UnpackLog(event, "RequestCancelWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationStorageRequestWithdrawalIterator is returned from FilterRequestWithdrawal and is used to iterate over the raw logs and unpacked data for RequestWithdrawal events raised by the PublicDelegationStorage contract.
type PublicDelegationStorageRequestWithdrawalIterator struct {
	Event *PublicDelegationStorageRequestWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationStorageRequestWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationStorageRequestWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationStorageRequestWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationStorageRequestWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationStorageRequestWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationStorageRequestWithdrawal represents a RequestWithdrawal event raised by the PublicDelegationStorage contract.
type PublicDelegationStorageRequestWithdrawal struct {
	User      common.Address
	Recipient common.Address
	RequestId *big.Int
	Assets    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRequestWithdrawal is a free log retrieval operation binding the contract event 0xd71e6ec4eed83207b08d7ee4a0773c0ff8f8a1ab94b8ce85737fc0c5ea2b5f0c.
//
// Solidity: event RequestWithdrawal(address indexed _user, address indexed _recipient, uint256 indexed _requestId, uint256 _assets)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) FilterRequestWithdrawal(opts *bind.FilterOpts, _user []common.Address, _recipient []common.Address, _requestId []*big.Int) (*PublicDelegationStorageRequestWithdrawalIterator, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _recipientRule []interface{}
	for _, _recipientItem := range _recipient {
		_recipientRule = append(_recipientRule, _recipientItem)
	}
	var _requestIdRule []interface{}
	for _, _requestIdItem := range _requestId {
		_requestIdRule = append(_requestIdRule, _requestIdItem)
	}

	logs, sub, err := _PublicDelegationStorage.contract.FilterLogs(opts, "RequestWithdrawal", _userRule, _recipientRule, _requestIdRule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationStorageRequestWithdrawalIterator{contract: _PublicDelegationStorage.contract, event: "RequestWithdrawal", logs: logs, sub: sub}, nil
}

// WatchRequestWithdrawal is a free log subscription operation binding the contract event 0xd71e6ec4eed83207b08d7ee4a0773c0ff8f8a1ab94b8ce85737fc0c5ea2b5f0c.
//
// Solidity: event RequestWithdrawal(address indexed _user, address indexed _recipient, uint256 indexed _requestId, uint256 _assets)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) WatchRequestWithdrawal(opts *bind.WatchOpts, sink chan<- *PublicDelegationStorageRequestWithdrawal, _user []common.Address, _recipient []common.Address, _requestId []*big.Int) (event.Subscription, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}
	var _recipientRule []interface{}
	for _, _recipientItem := range _recipient {
		_recipientRule = append(_recipientRule, _recipientItem)
	}
	var _requestIdRule []interface{}
	for _, _requestIdItem := range _requestId {
		_requestIdRule = append(_requestIdRule, _requestIdItem)
	}

	logs, sub, err := _PublicDelegationStorage.contract.WatchLogs(opts, "RequestWithdrawal", _userRule, _recipientRule, _requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationStorageRequestWithdrawal)
				if err := _PublicDelegationStorage.contract.UnpackLog(event, "RequestWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestWithdrawal is a log parse operation binding the contract event 0xd71e6ec4eed83207b08d7ee4a0773c0ff8f8a1ab94b8ce85737fc0c5ea2b5f0c.
//
// Solidity: event RequestWithdrawal(address indexed _user, address indexed _recipient, uint256 indexed _requestId, uint256 _assets)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) ParseRequestWithdrawal(log types.Log) (*PublicDelegationStorageRequestWithdrawal, error) {
	event := new(PublicDelegationStorageRequestWithdrawal)
	if err := _PublicDelegationStorage.contract.UnpackLog(event, "RequestWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationStorageSendCommissionIterator is returned from FilterSendCommission and is used to iterate over the raw logs and unpacked data for SendCommission events raised by the PublicDelegationStorage contract.
type PublicDelegationStorageSendCommissionIterator struct {
	Event *PublicDelegationStorageSendCommission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationStorageSendCommissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationStorageSendCommission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationStorageSendCommission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationStorageSendCommissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationStorageSendCommissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationStorageSendCommission represents a SendCommission event raised by the PublicDelegationStorage contract.
type PublicDelegationStorageSendCommission struct {
	CommissionTo common.Address
	Commission   *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSendCommission is a free log retrieval operation binding the contract event 0x6c3b15f4a619d5331e4708792bb87f858ffb7a08f1a87aabca7cd15e51e04a63.
//
// Solidity: event SendCommission(address indexed _commissionTo, uint256 _commission)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) FilterSendCommission(opts *bind.FilterOpts, _commissionTo []common.Address) (*PublicDelegationStorageSendCommissionIterator, error) {

	var _commissionToRule []interface{}
	for _, _commissionToItem := range _commissionTo {
		_commissionToRule = append(_commissionToRule, _commissionToItem)
	}

	logs, sub, err := _PublicDelegationStorage.contract.FilterLogs(opts, "SendCommission", _commissionToRule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationStorageSendCommissionIterator{contract: _PublicDelegationStorage.contract, event: "SendCommission", logs: logs, sub: sub}, nil
}

// WatchSendCommission is a free log subscription operation binding the contract event 0x6c3b15f4a619d5331e4708792bb87f858ffb7a08f1a87aabca7cd15e51e04a63.
//
// Solidity: event SendCommission(address indexed _commissionTo, uint256 _commission)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) WatchSendCommission(opts *bind.WatchOpts, sink chan<- *PublicDelegationStorageSendCommission, _commissionTo []common.Address) (event.Subscription, error) {

	var _commissionToRule []interface{}
	for _, _commissionToItem := range _commissionTo {
		_commissionToRule = append(_commissionToRule, _commissionToItem)
	}

	logs, sub, err := _PublicDelegationStorage.contract.WatchLogs(opts, "SendCommission", _commissionToRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationStorageSendCommission)
				if err := _PublicDelegationStorage.contract.UnpackLog(event, "SendCommission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSendCommission is a log parse operation binding the contract event 0x6c3b15f4a619d5331e4708792bb87f858ffb7a08f1a87aabca7cd15e51e04a63.
//
// Solidity: event SendCommission(address indexed _commissionTo, uint256 _commission)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) ParseSendCommission(log types.Log) (*PublicDelegationStorageSendCommission, error) {
	event := new(PublicDelegationStorageSendCommission)
	if err := _PublicDelegationStorage.contract.UnpackLog(event, "SendCommission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationStorageStakedIterator is returned from FilterStaked and is used to iterate over the raw logs and unpacked data for Staked events raised by the PublicDelegationStorage contract.
type PublicDelegationStorageStakedIterator struct {
	Event *PublicDelegationStorageStaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationStorageStakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationStorageStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationStorageStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationStorageStakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationStorageStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationStorageStaked represents a Staked event raised by the PublicDelegationStorage contract.
type PublicDelegationStorageStaked struct {
	User   common.Address
	Assets *big.Int
	Shares *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterStaked is a free log retrieval operation binding the contract event 0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90.
//
// Solidity: event Staked(address indexed _user, uint256 _assets, uint256 _shares)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) FilterStaked(opts *bind.FilterOpts, _user []common.Address) (*PublicDelegationStorageStakedIterator, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}

	logs, sub, err := _PublicDelegationStorage.contract.FilterLogs(opts, "Staked", _userRule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationStorageStakedIterator{contract: _PublicDelegationStorage.contract, event: "Staked", logs: logs, sub: sub}, nil
}

// WatchStaked is a free log subscription operation binding the contract event 0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90.
//
// Solidity: event Staked(address indexed _user, uint256 _assets, uint256 _shares)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) WatchStaked(opts *bind.WatchOpts, sink chan<- *PublicDelegationStorageStaked, _user []common.Address) (event.Subscription, error) {

	var _userRule []interface{}
	for _, _userItem := range _user {
		_userRule = append(_userRule, _userItem)
	}

	logs, sub, err := _PublicDelegationStorage.contract.WatchLogs(opts, "Staked", _userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationStorageStaked)
				if err := _PublicDelegationStorage.contract.UnpackLog(event, "Staked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaked is a log parse operation binding the contract event 0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90.
//
// Solidity: event Staked(address indexed _user, uint256 _assets, uint256 _shares)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) ParseStaked(log types.Log) (*PublicDelegationStorageStaked, error) {
	event := new(PublicDelegationStorageStaked)
	if err := _PublicDelegationStorage.contract.UnpackLog(event, "Staked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationStorageUpdateCommissionRateIterator is returned from FilterUpdateCommissionRate and is used to iterate over the raw logs and unpacked data for UpdateCommissionRate events raised by the PublicDelegationStorage contract.
type PublicDelegationStorageUpdateCommissionRateIterator struct {
	Event *PublicDelegationStorageUpdateCommissionRate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationStorageUpdateCommissionRateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationStorageUpdateCommissionRate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationStorageUpdateCommissionRate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationStorageUpdateCommissionRateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationStorageUpdateCommissionRateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationStorageUpdateCommissionRate represents a UpdateCommissionRate event raised by the PublicDelegationStorage contract.
type PublicDelegationStorageUpdateCommissionRate struct {
	PrevCommissionRate *big.Int
	CommissionRate     *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterUpdateCommissionRate is a free log retrieval operation binding the contract event 0x67fb2216d844c3553cf557bffa85f0fde0294999f808e61dcae1773d50d5e150.
//
// Solidity: event UpdateCommissionRate(uint256 indexed _prevCommissionRate, uint256 indexed _commissionRate)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) FilterUpdateCommissionRate(opts *bind.FilterOpts, _prevCommissionRate []*big.Int, _commissionRate []*big.Int) (*PublicDelegationStorageUpdateCommissionRateIterator, error) {

	var _prevCommissionRateRule []interface{}
	for _, _prevCommissionRateItem := range _prevCommissionRate {
		_prevCommissionRateRule = append(_prevCommissionRateRule, _prevCommissionRateItem)
	}
	var _commissionRateRule []interface{}
	for _, _commissionRateItem := range _commissionRate {
		_commissionRateRule = append(_commissionRateRule, _commissionRateItem)
	}

	logs, sub, err := _PublicDelegationStorage.contract.FilterLogs(opts, "UpdateCommissionRate", _prevCommissionRateRule, _commissionRateRule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationStorageUpdateCommissionRateIterator{contract: _PublicDelegationStorage.contract, event: "UpdateCommissionRate", logs: logs, sub: sub}, nil
}

// WatchUpdateCommissionRate is a free log subscription operation binding the contract event 0x67fb2216d844c3553cf557bffa85f0fde0294999f808e61dcae1773d50d5e150.
//
// Solidity: event UpdateCommissionRate(uint256 indexed _prevCommissionRate, uint256 indexed _commissionRate)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) WatchUpdateCommissionRate(opts *bind.WatchOpts, sink chan<- *PublicDelegationStorageUpdateCommissionRate, _prevCommissionRate []*big.Int, _commissionRate []*big.Int) (event.Subscription, error) {

	var _prevCommissionRateRule []interface{}
	for _, _prevCommissionRateItem := range _prevCommissionRate {
		_prevCommissionRateRule = append(_prevCommissionRateRule, _prevCommissionRateItem)
	}
	var _commissionRateRule []interface{}
	for _, _commissionRateItem := range _commissionRate {
		_commissionRateRule = append(_commissionRateRule, _commissionRateItem)
	}

	logs, sub, err := _PublicDelegationStorage.contract.WatchLogs(opts, "UpdateCommissionRate", _prevCommissionRateRule, _commissionRateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationStorageUpdateCommissionRate)
				if err := _PublicDelegationStorage.contract.UnpackLog(event, "UpdateCommissionRate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateCommissionRate is a log parse operation binding the contract event 0x67fb2216d844c3553cf557bffa85f0fde0294999f808e61dcae1773d50d5e150.
//
// Solidity: event UpdateCommissionRate(uint256 indexed _prevCommissionRate, uint256 indexed _commissionRate)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) ParseUpdateCommissionRate(log types.Log) (*PublicDelegationStorageUpdateCommissionRate, error) {
	event := new(PublicDelegationStorageUpdateCommissionRate)
	if err := _PublicDelegationStorage.contract.UnpackLog(event, "UpdateCommissionRate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PublicDelegationStorageUpdateCommissionToIterator is returned from FilterUpdateCommissionTo and is used to iterate over the raw logs and unpacked data for UpdateCommissionTo events raised by the PublicDelegationStorage contract.
type PublicDelegationStorageUpdateCommissionToIterator struct {
	Event *PublicDelegationStorageUpdateCommissionTo // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  kaia.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PublicDelegationStorageUpdateCommissionToIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PublicDelegationStorageUpdateCommissionTo)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PublicDelegationStorageUpdateCommissionTo)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PublicDelegationStorageUpdateCommissionToIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PublicDelegationStorageUpdateCommissionToIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PublicDelegationStorageUpdateCommissionTo represents a UpdateCommissionTo event raised by the PublicDelegationStorage contract.
type PublicDelegationStorageUpdateCommissionTo struct {
	PrevCommissionTo common.Address
	CommissionTo     common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterUpdateCommissionTo is a free log retrieval operation binding the contract event 0xa466bc069316af563b6a90c9b6f29a97752ac7be7c6bbf3767bc9b16c2fd90eb.
//
// Solidity: event UpdateCommissionTo(address indexed _prevCommissionTo, address indexed _commissionTo)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) FilterUpdateCommissionTo(opts *bind.FilterOpts, _prevCommissionTo []common.Address, _commissionTo []common.Address) (*PublicDelegationStorageUpdateCommissionToIterator, error) {

	var _prevCommissionToRule []interface{}
	for _, _prevCommissionToItem := range _prevCommissionTo {
		_prevCommissionToRule = append(_prevCommissionToRule, _prevCommissionToItem)
	}
	var _commissionToRule []interface{}
	for _, _commissionToItem := range _commissionTo {
		_commissionToRule = append(_commissionToRule, _commissionToItem)
	}

	logs, sub, err := _PublicDelegationStorage.contract.FilterLogs(opts, "UpdateCommissionTo", _prevCommissionToRule, _commissionToRule)
	if err != nil {
		return nil, err
	}
	return &PublicDelegationStorageUpdateCommissionToIterator{contract: _PublicDelegationStorage.contract, event: "UpdateCommissionTo", logs: logs, sub: sub}, nil
}

// WatchUpdateCommissionTo is a free log subscription operation binding the contract event 0xa466bc069316af563b6a90c9b6f29a97752ac7be7c6bbf3767bc9b16c2fd90eb.
//
// Solidity: event UpdateCommissionTo(address indexed _prevCommissionTo, address indexed _commissionTo)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) WatchUpdateCommissionTo(opts *bind.WatchOpts, sink chan<- *PublicDelegationStorageUpdateCommissionTo, _prevCommissionTo []common.Address, _commissionTo []common.Address) (event.Subscription, error) {

	var _prevCommissionToRule []interface{}
	for _, _prevCommissionToItem := range _prevCommissionTo {
		_prevCommissionToRule = append(_prevCommissionToRule, _prevCommissionToItem)
	}
	var _commissionToRule []interface{}
	for _, _commissionToItem := range _commissionTo {
		_commissionToRule = append(_commissionToRule, _commissionToItem)
	}

	logs, sub, err := _PublicDelegationStorage.contract.WatchLogs(opts, "UpdateCommissionTo", _prevCommissionToRule, _commissionToRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PublicDelegationStorageUpdateCommissionTo)
				if err := _PublicDelegationStorage.contract.UnpackLog(event, "UpdateCommissionTo", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateCommissionTo is a log parse operation binding the contract event 0xa466bc069316af563b6a90c9b6f29a97752ac7be7c6bbf3767bc9b16c2fd90eb.
//
// Solidity: event UpdateCommissionTo(address indexed _prevCommissionTo, address indexed _commissionTo)
func (_PublicDelegationStorage *PublicDelegationStorageFilterer) ParseUpdateCommissionTo(log types.Log) (*PublicDelegationStorageUpdateCommissionTo, error) {
	event := new(PublicDelegationStorageUpdateCommissionTo)
	if err := _PublicDelegationStorage.contract.UnpackLog(event, "UpdateCommissionTo", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidContractMetaData contains all meta data concerning the ValidContract contract.
var ValidContractMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220ff672199b825eeeaa291a72e136fe5fa8a3ae7de5f7dd7c7e04303751208771564736f6c63430008190033",
}

// ValidContractABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidContractMetaData.ABI instead.
var ValidContractABI = ValidContractMetaData.ABI

// ValidContractBinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const ValidContractBinRuntime = `730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220ff672199b825eeeaa291a72e136fe5fa8a3ae7de5f7dd7c7e04303751208771564736f6c63430008190033`

// ValidContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidContractMetaData.Bin instead.
var ValidContractBin = ValidContractMetaData.Bin

// DeployValidContract deploys a new Kaia contract, binding an instance of ValidContract to it.
func DeployValidContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ValidContract, error) {
	parsed, err := ValidContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidContract{ValidContractCaller: ValidContractCaller{contract: contract}, ValidContractTransactor: ValidContractTransactor{contract: contract}, ValidContractFilterer: ValidContractFilterer{contract: contract}}, nil
}

// ValidContract is an auto generated Go binding around a Kaia contract.
type ValidContract struct {
	ValidContractCaller     // Read-only binding to the contract
	ValidContractTransactor // Write-only binding to the contract
	ValidContractFilterer   // Log filterer for contract events
}

// ValidContractCaller is an auto generated read-only Go binding around a Kaia contract.
type ValidContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidContractTransactor is an auto generated write-only Go binding around a Kaia contract.
type ValidContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidContractFilterer is an auto generated log filtering Go binding around a Kaia contract events.
type ValidContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidContractSession is an auto generated Go binding around a Kaia contract,
// with pre-set call and transact options.
type ValidContractSession struct {
	Contract     *ValidContract    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidContractCallerSession is an auto generated read-only Go binding around a Kaia contract,
// with pre-set call options.
type ValidContractCallerSession struct {
	Contract *ValidContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ValidContractTransactorSession is an auto generated write-only Go binding around a Kaia contract,
// with pre-set transact options.
type ValidContractTransactorSession struct {
	Contract     *ValidContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ValidContractRaw is an auto generated low-level Go binding around a Kaia contract.
type ValidContractRaw struct {
	Contract *ValidContract // Generic contract binding to access the raw methods on
}

// ValidContractCallerRaw is an auto generated low-level read-only Go binding around a Kaia contract.
type ValidContractCallerRaw struct {
	Contract *ValidContractCaller // Generic read-only contract binding to access the raw methods on
}

// ValidContractTransactorRaw is an auto generated low-level write-only Go binding around a Kaia contract.
type ValidContractTransactorRaw struct {
	Contract *ValidContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidContract creates a new instance of ValidContract, bound to a specific deployed contract.
func NewValidContract(address common.Address, backend bind.ContractBackend) (*ValidContract, error) {
	contract, err := bindValidContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidContract{ValidContractCaller: ValidContractCaller{contract: contract}, ValidContractTransactor: ValidContractTransactor{contract: contract}, ValidContractFilterer: ValidContractFilterer{contract: contract}}, nil
}

// NewValidContractCaller creates a new read-only instance of ValidContract, bound to a specific deployed contract.
func NewValidContractCaller(address common.Address, caller bind.ContractCaller) (*ValidContractCaller, error) {
	contract, err := bindValidContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidContractCaller{contract: contract}, nil
}

// NewValidContractTransactor creates a new write-only instance of ValidContract, bound to a specific deployed contract.
func NewValidContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidContractTransactor, error) {
	contract, err := bindValidContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidContractTransactor{contract: contract}, nil
}

// NewValidContractFilterer creates a new log filterer instance of ValidContract, bound to a specific deployed contract.
func NewValidContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidContractFilterer, error) {
	contract, err := bindValidContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidContractFilterer{contract: contract}, nil
}

// bindValidContract binds a generic wrapper to an already deployed contract.
func bindValidContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ValidContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidContract *ValidContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidContract.Contract.ValidContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidContract *ValidContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidContract.Contract.ValidContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidContract *ValidContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidContract.Contract.ValidContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidContract *ValidContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidContract *ValidContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidContract *ValidContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidContract.Contract.contract.Transact(opts, method, params...)
}
