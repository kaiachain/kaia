version: 2.1

aliases:
  - &filter-only-version-tag
    tags:
      only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
    branches:
      ignore: /.*/
  - &filter-version-not-release
    tags:
      only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
    branches:
      ignore:
        - /release\/.*/
        - main

orbs:
  codecov: codecov/codecov@1.0.5
  docker: circleci/docker@2.1.1

executors:
  tar-linux-amd64-executor: # this executor is for linux-amd64 tar packaging
    working_directory: ~/go/src/github.com/kaiachain/kaia
    resource_class: medium
    docker:
      - image: kaiachain/build_base:1.12-go.1.22.1-solc0.8.13-ubuntu-20.04
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
  tar-linux-arm64-executor: # this executor is for linux-arm64 tar packaging
    working_directory: ~/go/src/github.com/kaiachain/kaia
    resource_class: arm.medium
    docker:
      - image: kaiachain/build_base:1.12-go.1.22.1-solc0.8.13-ubuntu-20.04-arm
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
  rpm-linux-amd64-executor: # this executor is for linux-amd64 rpm packaging
    working_directory: /go/src/github.com/kaiachain/kaia
    resource_class: medium
    docker:
      - image: kaiachain/circleci-rpmbuild:1.22.1-gcc7
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
  rpm-linux-arm64-executor: # this executor is for linux-arm64 rpm packaging
    working_directory: /go/src/github.com/kaiachain/kaia
    resource_class: arm.medium
    docker:
      - image: kaiachain/circleci-rpmbuild:1.22.1-gcc7-arm
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
  tar-darwin-arm64-executor: # this executor is for darwin-arm64 tar packaging
    working_directory: ~/go/src/github.com/kaiachain/kaia
    macos:
      xcode: 14.2.0
    resource_class: macos.m1.medium.gen1
  test-executor: # this executor is for general test jobs
    working_directory: ~/go/src/github.com/kaiachain/kaia
    resource_class: medium
    docker:
      - image: kaiachain/build_base:1.12-go.1.22.1-solc0.8.13-ubuntu-20.04
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
  test-others-executor: # this executor is for test-others job
    working_directory: /go/src/github.com/kaiachain/kaia
    resource_class: xlarge
    docker:
      - image: kaiachain/build_base:1.12-go.1.22.1-solc0.8.13-ubuntu-20.04
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
      - image: localstack/localstack:0.13.0
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
      - image: circleci/redis:6.0.8-alpine
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
      - name: kafka
        image: bitnami/kafka:3.7
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
        environment:
          KAFKA_CFG_NODE_ID: 0
          KAFKA_CFG_PROCESS_ROLES: controller,broker
          KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
          KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
          KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
          KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
          KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
          KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  default:
    working_directory: ~/go/src/github.com/kaiachain/kaia
    docker:
      - image: cimg/go:1.22.1

commands:
  pre-build:
    description: "before build, set version"
    steps:
      - run:
          name: "set variables"
          command: |
            export GOPATH=~/go
            export PATH=$HOME/go1.22.1/go/bin:$PATH
            pat="^v[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+.*"

            if [[ $CIRCLE_TAG =~ $pat ]]; then
              echo "this is rc version $CIRCLE_TAG"
              rc_num=$(echo $CIRCLE_TAG | cut -d '-' -f 2)

              sed 's/%d.%d.%d/%d.%d.%d~'$rc_num'/' params/version.go > params/version.go.tmp
              mv params/version.go.tmp params/version.go
              sed -n '/%d.%d.%d/p' params/version.go
            else
              echo "this is not RC version"
            fi
            echo "export KAIA_VERSION=$(go run build/rpm/main.go version)" >> $BASH_ENV
  packaging-and-upload:
    description: "Build and upload tar/rpm packages to S3 for each OS/Network"
    parameters:
      package-type:
        type: string
        default: "tar"
      os-network:
        type: string
        default: "linux-amd64"
    steps:
      - checkout
      - run:
          name: "install darwin dependencies when package is darwin"
          command: |
            if [[ << parameters.os-network >> = "darwin-arm64" ]]; then
              # install awscli
              brew install awscli
              # install golang
              curl -O https://dl.google.com/go/go1.22.1.darwin-arm64.tar.gz
              mkdir $HOME/go1.22.1
              tar -C $HOME/go1.22.1 -xzf go1.22.1.darwin-arm64.tar.gz
              # Set GOPATH and update PATH
              echo 'export GOPATH=~/go' >> ~/.bashrc
              echo 'export PATH=$HOME/go1.22.1/go/bin:$PATH' >> ~/.bashrc
              source ~/.bashrc
            fi
      - pre-build
      - run:
          name: "build binaries"
          command: |
            source ~/.bashrc
            make all
      - run:
          name: "build mainnet and kairos packages"
          command: |
            source ~/.bashrc
            second_parameter=""
            if [[ << parameters.package-type >> = "tar" ]]; then
              second_parameter=<< parameters.os-network >>
            fi
            for item in kcn kpn ken kgen kscn kbn kspn ksen homi; do
              ./build/package-<< parameters.package-type >>.sh $second_parameter $item
            done
            
            for item in kcn kpn ken; do
              ./build/package-<< parameters.package-type >>.sh -b $second_parameter $item
            done
      - run:
          name: "upload << parameters.package-type >>-<<parameters.os-network >> packages to S3 repo"
          command: |
            source ~/.bashrc
            KAIA_VERSION=$(go run build/rpm/main.go version)
            PLATFORM_SUFFIX=$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m)
                     
            for item in kcn kpn ken kcn-kairos kpn-kairos ken-kairos kgen kscn kbn kspn ksen homi; do
              if [[ << parameters.package-type >> = "tar" ]]; then
                aws s3 cp packages/${item}-v*.tar.gz s3://$FRONTEND_BUCKET/packages/kaia/$KAIA_VERSION/
              elif [[ << parameters.package-type >> = "rpm" ]]; then
                BINARY=$item
                KAIROS=""
                if [[ $BINARY = *-kairos ]]; then
                  BINARY="${BINARY%-kairos}"
                  KAIROS="-kairos"
                fi
                TARGET_RPM=$(find $BINARY-$PLATFORM_SUFFIX/rpmbuild/RPMS/$(uname -m)/ | awk -v pat="$BINARY(d)?$KAIROS-v" '$0~pat')
                aws s3 cp $TARGET_RPM s3://$FRONTEND_BUCKET/packages/rhel/7/kaia/
                aws s3 cp $TARGET_RPM s3://$FRONTEND_BUCKET/packages/kaia/$KAIA_VERSION/
              fi
            done
  createrepo-update:
    steps:
      - run:
          name: "createrepo update"
          command: |
            aws s3 sync s3://$FRONTEND_BUCKET/packages/rhel/7/kaia/ rhel/7/kaia/
            createrepo --update rhel/7/kaia
            aws s3 sync --delete rhel/7/kaia/repodata/ s3://$FRONTEND_BUCKET/packages/rhel/7/kaia/repodata/
  tag-verify:
    steps:
      - run:
          name: "Verify tag and file version match"
          command: |
            echo "tag version is " $CIRCLE_TAG
            KAIA_VERSION=$(go run build/rpm/main.go version)
            echo "version on version.go" $KAIA_VERSION
            if [ $KAIA_VERSION == ${CIRCLE_TAG%-*} ]; then
              echo "verification pass"
            else
              echo "It's not same version."
              exit 1
            fi
  tagger-verify:
    steps:
      - run:
          name: "Verify tag and file version match"
          command: |
            TAGGER=$(git for-each-ref --format='%(tagger)' refs/tags/$CIRCLE_TAG | sed 's/ .*//')
            if [ $TAGGER == 'circleci-kaia' ]; then
              echo "Pass! Tagger is circleci-kaia"
            else
              echo "only circleci-kaia can tagging major version"
              exit 1
            fi
  make-pr:
    steps:
      - run:
          name: "Push to release branch"
          command: |
            echo "push to release branch: /release/${CIRCLE_TAG%-*}"
            git checkout -b release/${CIRCLE_TAG%-*}
            git push origin release/${CIRCLE_TAG%-*}
      - run:
          name: "Install hub"
          command: |
            curl -sSLf https://github.com/github/hub/releases/download/v2.12.3/hub-linux-amd64-2.12.3.tgz | \
              tar zxf - --strip-components=1 -C /tmp && \
              sudo mv /tmp/bin/hub /usr/local/bin/hub
            type hub
      - run:
          name: "Create pull request"
          command: |
              version=$(hub pr list -s open -L 10 -f "%H%n")
              echo $version
              if [[ $version == *"release/${CIRCLE_TAG%-*}"* ]]; then
                echo "PR already exist"
              else
                echo "hub pull-request -m "[Main] release/$CIRCLE_TAG QA Signoff" -b $CIRCLE_PROJECT_USERNAME:master -h $CIRCLE_PROJECT_USERNAME:${CIRCLE_TAG%-*}"
                echo -e "[Main] release/${CIRCLE_TAG%-*} QA Sign-off\n\nThis PR is automatically created by CI to release a new official version of $CIRCLE_PROJECT_REPONAME.\n\nWhen this PR is approved by QA team, a new version will be released." | hub pull-request -b $CIRCLE_PROJECT_USERNAME:main -h $CIRCLE_PROJECT_USERNAME:release/${CIRCLE_TAG%-*} -r $GITHUB_reviewer -l circleci -F-
              fi
      - run:
          name: "build announce"
          command: .circleci/scripts/build_announce.sh
  tagging-delete-branch:
    steps:
      - run:
          name: "Generate tag"
          command: |
            export version=$(go run build/rpm/main.go version) >> $BASH_ENV
            echo "git tag $version"
            git config --global user.email "devops@kaia.io"
            git config --global user.name "circleci-kaia"
            git tag -a $version -m "$CIRCLE_STAGE"
            git push origin $version
      - run:
          name: "Delete release branch"
          command: |
            export version=$(go run build/rpm/main.go version) >> $BASH_ENV
            #delete release branch. it trigger by merge title
            if [[ "release/v" = $(git log --oneline -1 | grep -o "release/v") ]]; then
              echo "Delete branch release/$version"
              git push origin --delete release/$version
            else
              echo "Need to delete branch manually"
            fi
  wait-other-containers-ready:
    steps:
      - run:
          name: "Install net-cat"
          command: apt install -y netcat
      - run:
          name: "Waiting for Redis to be ready"
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 6379 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Redis && exit 1
      - run:
          name: "Waiting for Kafka to be ready"
          command: |
            for i in `seq 1 10`;
            do
              nc -z kafka 9092 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Kafka && exit 1
      - run:
          name: "Wait until localstack container running"
          command: |
            timeout 60 sh -c \
            'until nc -z localhost 4566; do
              echo "Waiting for Localstack ..."
              sleep 1
            done'
  notify-success:
    steps:
      - run:
          name: "notify slack when job success"
          command : |
            curl --data '{"text": "✅ Job *'$CIRCLE_JOB'* succeeded on *'$CIRCLE_BRANCH''$CIRCLE_TAG'*. Please see '$CIRCLE_BUILD_URL' for details."}' "$SLACK_WEBHOOK_URL"
          when: on_success
  notify-failure:
    steps:
      - run:
          name: "notify slack when job fail"
          command : |
            curl --data '{"text": "❌ Job *'$CIRCLE_JOB'* failed on *'$CIRCLE_BRANCH'*. Please see '$CIRCLE_BUILD_URL' for details."}' "$SLACK_WEBHOOK_URL"
          when: on_fail
  run-rpc:
    steps:
      - run:
          name: "Run rpc-tester on 1CN private network"
          no_output_timeout: 30m
          command: |
            make kcn
            git clone https://$TEST_TOKEN@github.com/kaiachain/kaia-rpc-tester.git
            cd kaia-rpc-tester
            cp ../build/bin/kcn script/cn/bin/
            cd script
            ./set_CNonly.sh
            cd ..
            cp config_template.json config.json
            apt update
            apt install python3.8 python3-venv -y
            python3.8 -m venv --without-pip venv
            source venv/bin/activate
            curl https://bootstrap.pypa.io/get-pip.py | python
            pip3 install -r requirements.txt
            python3 main.py --protocol rpc

jobs:
  build:
    executor: test-executor
    steps:
      - checkout
      - pre-build
      - run:
          name: "Build"
          command: make all
  test-linter:
    executor: test-executor
    steps:
      - checkout
      - run:
          name: "Run golangci-lint"
          no_output_timeout: 30m
          command: go run build/ci.go lint -v --new-from-rev=dev
  test-datasync:
    executor: test-others-executor
    steps:
      - checkout
      - wait-other-containers-ready
      - run:
          name: "Run test datasync"
          no_output_timeout: 30m
          command: make test-datasync
  test-networks:
    executor: test-executor
    steps:
      - checkout
      - run:
          name: "Run test networks"
          no_output_timeout: 30m
          command: make test-networks
  test-node:
    executor: test-executor
    steps:
      - checkout
      - run:
          name: "Run test node"
          no_output_timeout: 30m
          command: make test-node
  test-tests:
    executor: test-executor
    steps:
      - checkout
      - run:
          name: "Run test tests"
          no_output_timeout: 30m
          command: |
            git clone --depth 1 https://$TEST_TOKEN@github.com/kaiachain/kaia-core-tests.git tests/testdata
            make test-tests
  test-others:
    executor: test-others-executor
    resource_class: xlarge
    steps:
      - checkout
      - wait-other-containers-ready
      - run:
          name: "Run test others"
          no_output_timeout: 30m
          command: |
            make test-others
  test-rpc:
    executor: test-executor
    steps:
      - checkout
      - pre-build
      - run-rpc
  pass-tests:
    executor: default
    steps:
      - run:
          name: "tests pass!"
          command: echo "tests pass!"
  tagger-verify:
    executor: default
    steps:
      - checkout
      - tagger-verify
  coverage:
    executor: test-others-executor
    resource_class: xlarge
    steps:
      - checkout
      - wait-other-containers-ready
      - run:
          shell: /bin/bash
          name: "Run coverage tests"
          command: |
            set -e
            export GOPATH=/go
            git clone --depth 1 https://$TEST_TOKEN@github.com/kaiachain/kaia-core-tests.git tests/testdata
            make cover
            mkdir -p /tmp/coverage_reports
            cp coverage_report.txt /tmp/coverage_reports/
            cp coverage_report.html /tmp/coverage_reports/
      - notify-failure
      - notify-success
      - store_artifacts:
          path: /tmp/coverage_reports
      - codecov/upload:
          file: /tmp/coverage_reports/coverage_*
  linters:
    executor: test-executor
    steps:
      - checkout
      - run:
          name: "Run linters"
          command: |
            make lint-try
            mkdir -p /tmp/linter_reports
            cp linter_report.txt /tmp/linter_reports/
      - notify-failure
      - notify-success
      - store_artifacts:
          path: /tmp/linter_reports
  rpc-tester-report:
    executor: test-executor
    steps:
      - checkout
      - pre-build
      - run-rpc
      - notify-failure
      - notify-success
  rpm-linux-amd64-packaging:
    executor: rpm-linux-amd64-executor
    steps:
      - packaging-and-upload:
          os-network: "linux-amd64"
          package-type: "rpm"
  tar-linux-amd64-packaging:
    executor: tar-linux-amd64-executor
    steps:
      - packaging-and-upload:
          os-network: "linux-amd64"
          package-type: "tar"
  rpm-linux-arm64-packaging:
    executor: rpm-linux-arm64-executor
    steps:
      - packaging-and-upload:
          os-network: "linux-arm64"
          package-type: "rpm"
  tar-linux-arm64-packaging:
    executor: tar-linux-arm64-executor
    steps:
      - packaging-and-upload:
          os-network: "linux-arm64"
          package-type: "tar"
  tar-darwin-arm64-packaging:
    executor: tar-darwin-arm64-executor
    steps:
      - packaging-and-upload:
          os-network: "darwin-arm64"
          package-type: "tar"
  deploy-rpm-public:
    executor: rpm-linux-amd64-executor
    steps:
      - add_ssh_keys
      - createrepo-update
      - notify-failure
      - notify-success
  tag-verify:
    executor: test-executor
    steps:
      - checkout
      - tag-verify
  release-PR:
    executor: default
    steps:
      - add_ssh_keys
      - checkout
      - make-pr
      - notify-failure
      - notify-success
  major-tagging:
    executor: default
    steps:
      - add_ssh_keys
      - checkout
      - tagging-delete-branch

workflows:
  version: 2
  build_n_packaging:
    jobs:
      - build:
          filters: *filter-version-not-release
      - test-datasync:
          filters: *filter-version-not-release
      - test-networks:
          filters: *filter-version-not-release
      - test-node:
          filters: *filter-version-not-release
      - test-tests:
          filters: *filter-version-not-release
      - test-others:
          filters: *filter-version-not-release
      - test-linter:
          filters: *filter-version-not-release
      - tagger-verify:
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+/
            branches:
              ignore: /.*/
      - test-rpc:
          filters: *filter-only-version-tag
      - pass-tests:
          requires:
            - build
            - test-datasync
            - test-networks
            - test-node
            - test-tests
            - test-others
            - tag-verify
            - tagger-verify
          filters: *filter-version-not-release
      - docker/publish: # for dev branch
          filters:
            branches:
              only: dev
          requires:
            - pass-tests
          extra_build_args: '--platform=linux/amd64'
          image: kaiachain/kaia
          tag: dev
          executor: docker/docker
          use-remote-docker: true
          remote-docker-version: default
          use-buildkit: true
      - docker/publish: # for release versions
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+/
            branches:
              ignore: /.*/
          requires:
            - pass-tests
          extra_build_args: '--platform=linux/amd64'
          image: kaiachain/kaia
          tag: latest,$CIRCLE_TAG
          executor: docker/docker
          use-remote-docker: true
          remote-docker-version: default
          use-buildkit: true
      - tag-verify:
          filters: *filter-only-version-tag
      - deploy-rpm-public:
          requires:
            - rpm-linux-amd64-packaging
            - tar-linux-amd64-packaging
            - rpm-linux-arm64-packaging
            - tar-linux-arm64-packaging
            - tar-darwin-arm64-packaging
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]/
            branches:
              ignore: /.*/
      - release-PR:
          requires:
            - rpm-linux-amd64-packaging
            - tar-linux-amd64-packaging
            - rpm-linux-arm64-packaging
            - tar-linux-arm64-packaging
            - tar-darwin-arm64-packaging
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+.*/
            branches:
              ignore: /.*/
      - rpm-linux-amd64-packaging:
          filters: *filter-only-version-tag
          requires:
            - pass-tests
      - tar-linux-amd64-packaging:
          filters: *filter-only-version-tag
          requires:
            - pass-tests
      - rpm-linux-arm64-packaging:
          filters: *filter-only-version-tag
          requires:
            - pass-tests
      - tar-linux-arm64-packaging:
          filters: *filter-only-version-tag
          requires:
            - pass-tests
      - tar-darwin-arm64-packaging:
          filters: *filter-only-version-tag
          requires:
            - pass-tests
      - major-tagging:
          filters:
            branches:
              only: main

  nightly-coverage:
    triggers:
      - schedule:
          cron: "0 18 * * *"
          filters:
            branches:
              only: dev
    jobs:
      - coverage

  nightly-linters:
    triggers:
      - schedule:
          cron: "0 19 * * *"
          filters:
            branches:
              only: dev
    jobs:
      - linters

  nightly-rpc:
    triggers:
      - schedule:
          cron: "0 20 * * *"
          filters:
            branches:
              only: dev
    jobs:
      - rpc-tester-report
