// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaiachain/kaia/v2/node/sc (interfaces: BridgeTxPool)

// Package sc is a generated GoMock package.
package sc

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/kaiachain/kaia/v2/blockchain/types"
	common "github.com/kaiachain/kaia/v2/common"
)

// MockBridgeTxPool is a mock of BridgeTxPool interface
type MockBridgeTxPool struct {
	ctrl     *gomock.Controller
	recorder *MockBridgeTxPoolMockRecorder
}

// MockBridgeTxPoolMockRecorder is the mock recorder for MockBridgeTxPool
type MockBridgeTxPoolMockRecorder struct {
	mock *MockBridgeTxPool
}

// NewMockBridgeTxPool creates a new mock instance
func NewMockBridgeTxPool(ctrl *gomock.Controller) *MockBridgeTxPool {
	mock := &MockBridgeTxPool{ctrl: ctrl}
	mock.recorder = &MockBridgeTxPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBridgeTxPool) EXPECT() *MockBridgeTxPoolMockRecorder {
	return m.recorder
}

// AddLocal mocks base method
func (m *MockBridgeTxPool) AddLocal(arg0 *types.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLocal", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLocal indicates an expected call of AddLocal
func (mr *MockBridgeTxPoolMockRecorder) AddLocal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocal", reflect.TypeOf((*MockBridgeTxPool)(nil).AddLocal), arg0)
}

// Get mocks base method
func (m *MockBridgeTxPool) Get(arg0 common.Hash) *types.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*types.Transaction)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockBridgeTxPoolMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBridgeTxPool)(nil).Get), arg0)
}

// GetMaxTxNonce mocks base method
func (m *MockBridgeTxPool) GetMaxTxNonce(arg0 *common.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxTxNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetMaxTxNonce indicates an expected call of GetMaxTxNonce
func (mr *MockBridgeTxPoolMockRecorder) GetMaxTxNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxTxNonce", reflect.TypeOf((*MockBridgeTxPool)(nil).GetMaxTxNonce), arg0)
}

// Pending mocks base method
func (m *MockBridgeTxPool) Pending() map[common.Address]types.Transactions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pending")
	ret0, _ := ret[0].(map[common.Address]types.Transactions)
	return ret0
}

// Pending indicates an expected call of Pending
func (mr *MockBridgeTxPoolMockRecorder) Pending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pending", reflect.TypeOf((*MockBridgeTxPool)(nil).Pending))
}

// PendingTxHashesByAddress mocks base method
func (m *MockBridgeTxPool) PendingTxHashesByAddress(arg0 *common.Address, arg1 int) []common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingTxHashesByAddress", arg0, arg1)
	ret0, _ := ret[0].([]common.Hash)
	return ret0
}

// PendingTxHashesByAddress indicates an expected call of PendingTxHashesByAddress
func (mr *MockBridgeTxPoolMockRecorder) PendingTxHashesByAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingTxHashesByAddress", reflect.TypeOf((*MockBridgeTxPool)(nil).PendingTxHashesByAddress), arg0, arg1)
}

// PendingTxsByAddress mocks base method
func (m *MockBridgeTxPool) PendingTxsByAddress(arg0 *common.Address, arg1 int) types.Transactions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingTxsByAddress", arg0, arg1)
	ret0, _ := ret[0].(types.Transactions)
	return ret0
}

// PendingTxsByAddress indicates an expected call of PendingTxsByAddress
func (mr *MockBridgeTxPoolMockRecorder) PendingTxsByAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingTxsByAddress", reflect.TypeOf((*MockBridgeTxPool)(nil).PendingTxsByAddress), arg0, arg1)
}

// RemoveTx mocks base method
func (m *MockBridgeTxPool) RemoveTx(arg0 *types.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTx indicates an expected call of RemoveTx
func (mr *MockBridgeTxPoolMockRecorder) RemoveTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTx", reflect.TypeOf((*MockBridgeTxPool)(nil).RemoveTx), arg0)
}

// Stats mocks base method
func (m *MockBridgeTxPool) Stats() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(int)
	return ret0
}

// Stats indicates an expected call of Stats
func (mr *MockBridgeTxPoolMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockBridgeTxPool)(nil).Stats))
}

// Stop mocks base method
func (m *MockBridgeTxPool) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockBridgeTxPoolMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBridgeTxPool)(nil).Stop))
}
