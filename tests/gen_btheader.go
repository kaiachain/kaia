// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"math/big"

	"github.com/kaiachain/kaia/blockchain/types"
	"github.com/kaiachain/kaia/common"
	"github.com/kaiachain/kaia/common/hexutil"
	"github.com/kaiachain/kaia/common/math"
)

var _ = (*btHeaderMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (b btHeader) MarshalJSON() ([]byte, error) {
	type btHeader struct {
		ParentHash       common.Hash
		UncleHash        common.Hash
		Coinbase         common.Address
		Root             common.Hash `json:"stateRoot"`
		TxHash           common.Hash `json:"transactionsTrie"`
		ReceiptHash      common.Hash `json:"receiptTrie"`
		Bloom            types.Bloom
		Difficulty       *math.HexOrDecimal256
		Number           *math.HexOrDecimal256
		GasLimit         math.HexOrDecimal64
		GasUsed          math.HexOrDecimal64
		Time             math.HexOrDecimal64 `json:"timestamp"`
		Extra            hexutil.Bytes       `json:"extraData"`
		MixHash          common.Hash
		Nonce            hexutil.Bytes
		Hash             common.Hash           `rlp:"optional"`
		BaseFee          *math.HexOrDecimal256 `rlp:"optional" json:"baseFeePerGas"`
		WithdrawalsHash  *common.Hash          `rlp:"optional" json:"withdrawalsRoot"`
		BlobGasUsed      *math.HexOrDecimal64  `rlp:"optional"`
		ExcessBlobGas    *math.HexOrDecimal64  `rlp:"optional"`
		ParentBeaconRoot *common.Hash          `rlp:"optional" json:"parentBeaconBlockRoot"`
		RequestsHash     *common.Hash          `rlp:"optional"`
	}
	var enc btHeader
	enc.ParentHash = b.ParentHash
	enc.UncleHash = b.UncleHash
	enc.Coinbase = b.Coinbase
	enc.Root = b.Root
	enc.TxHash = b.TxHash
	enc.ReceiptHash = b.ReceiptHash
	enc.Bloom = b.Bloom
	enc.Difficulty = (*math.HexOrDecimal256)(b.Difficulty)
	enc.Number = (*math.HexOrDecimal256)(b.Number)
	enc.GasLimit = math.HexOrDecimal64(b.GasLimit)
	enc.GasUsed = math.HexOrDecimal64(b.GasUsed)
	enc.Time = math.HexOrDecimal64(b.Time)
	enc.Extra = b.Extra
	enc.MixHash = b.MixHash
	enc.Nonce = b.Nonce
	enc.Hash = b.Hash
	enc.BaseFee = (*math.HexOrDecimal256)(b.BaseFee)
	enc.WithdrawalsHash = b.WithdrawalsHash
	enc.BlobGasUsed = (*math.HexOrDecimal64)(b.BlobGasUsed)
	enc.ExcessBlobGas = (*math.HexOrDecimal64)(b.ExcessBlobGas)
	enc.ParentBeaconRoot = b.ParentBeaconRoot
	enc.RequestsHash = b.RequestsHash
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *btHeader) UnmarshalJSON(input []byte) error {
	type btHeader struct {
		ParentHash       *common.Hash
		UncleHash        *common.Hash
		Coinbase         *common.Address
		Root             *common.Hash `json:"stateRoot"`
		TxHash           *common.Hash `json:"transactionsTrie"`
		ReceiptHash      *common.Hash `json:"receiptTrie"`
		Bloom            *types.Bloom
		Difficulty       *math.HexOrDecimal256
		Number           *math.HexOrDecimal256
		GasLimit         *math.HexOrDecimal64
		GasUsed          *math.HexOrDecimal64
		Time             *math.HexOrDecimal64 `json:"timestamp"`
		Extra            *hexutil.Bytes       `json:"extraData"`
		MixHash          *common.Hash
		Nonce            *hexutil.Bytes
		Hash             *common.Hash          `rlp:"optional"`
		BaseFee          *math.HexOrDecimal256 `rlp:"optional" json:"baseFeePerGas"`
		WithdrawalsHash  *common.Hash          `rlp:"optional" json:"withdrawalsRoot"`
		BlobGasUsed      *math.HexOrDecimal64  `rlp:"optional"`
		ExcessBlobGas    *math.HexOrDecimal64  `rlp:"optional"`
		ParentBeaconRoot *common.Hash          `rlp:"optional" json:"parentBeaconBlockRoot"`
		RequestsHash     *common.Hash          `rlp:"optional"`
	}
	var dec btHeader
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash != nil {
		b.ParentHash = *dec.ParentHash
	}
	if dec.UncleHash != nil {
		b.UncleHash = *dec.UncleHash
	}
	if dec.Coinbase != nil {
		b.Coinbase = *dec.Coinbase
	}
	if dec.Root != nil {
		b.Root = *dec.Root
	}
	if dec.TxHash != nil {
		b.TxHash = *dec.TxHash
	}
	if dec.ReceiptHash != nil {
		b.ReceiptHash = *dec.ReceiptHash
	}
	if dec.Bloom != nil {
		b.Bloom = *dec.Bloom
	}
	if dec.Difficulty != nil {
		b.Difficulty = (*big.Int)(dec.Difficulty)
	}
	if dec.Number != nil {
		b.Number = (*big.Int)(dec.Number)
	}
	if dec.GasLimit != nil {
		b.GasLimit = uint64(*dec.GasLimit)
	}
	if dec.GasUsed != nil {
		b.GasUsed = uint64(*dec.GasUsed)
	}
	if dec.Time != nil {
		b.Time = uint64(*dec.Time)
	}
	if dec.Extra != nil {
		b.Extra = *dec.Extra
	}
	if dec.MixHash != nil {
		b.MixHash = *dec.MixHash
	}
	if dec.Nonce != nil {
		b.Nonce = *dec.Nonce
	}
	if dec.Hash != nil {
		b.Hash = *dec.Hash
	}
	if dec.BaseFee != nil {
		b.BaseFee = (*big.Int)(dec.BaseFee)
	}
	if dec.WithdrawalsHash != nil {
		b.WithdrawalsHash = dec.WithdrawalsHash
	}
	if dec.BlobGasUsed != nil {
		b.BlobGasUsed = (*uint64)(dec.BlobGasUsed)
	}
	if dec.ExcessBlobGas != nil {
		b.ExcessBlobGas = (*uint64)(dec.ExcessBlobGas)
	}
	if dec.ParentBeaconRoot != nil {
		b.ParentBeaconRoot = dec.ParentBeaconRoot
	}
	if dec.RequestsHash != nil {
		b.RequestsHash = dec.RequestsHash
	}
	return nil
}
