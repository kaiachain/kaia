// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaiachain/kaia/v2/datasync/chaindatafetcher (interfaces: CheckpointDB)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCheckpointDB is a mock of CheckpointDB interface
type MockCheckpointDB struct {
	ctrl     *gomock.Controller
	recorder *MockCheckpointDBMockRecorder
}

// MockCheckpointDBMockRecorder is the mock recorder for MockCheckpointDB
type MockCheckpointDBMockRecorder struct {
	mock *MockCheckpointDB
}

// NewMockCheckpointDB creates a new mock instance
func NewMockCheckpointDB(ctrl *gomock.Controller) *MockCheckpointDB {
	mock := &MockCheckpointDB{ctrl: ctrl}
	mock.recorder = &MockCheckpointDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCheckpointDB) EXPECT() *MockCheckpointDBMockRecorder {
	return m.recorder
}

// ReadCheckpoint mocks base method
func (m *MockCheckpointDB) ReadCheckpoint() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCheckpoint")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCheckpoint indicates an expected call of ReadCheckpoint
func (mr *MockCheckpointDBMockRecorder) ReadCheckpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCheckpoint", reflect.TypeOf((*MockCheckpointDB)(nil).ReadCheckpoint))
}

// WriteCheckpoint mocks base method
func (m *MockCheckpointDB) WriteCheckpoint(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCheckpoint", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCheckpoint indicates an expected call of WriteCheckpoint
func (mr *MockCheckpointDBMockRecorder) WriteCheckpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCheckpoint", reflect.TypeOf((*MockCheckpointDB)(nil).WriteCheckpoint), arg0)
}
